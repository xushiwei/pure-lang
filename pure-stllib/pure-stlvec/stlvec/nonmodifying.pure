/* nonmodifying.pure -- Pure interface for C++ STL nonmodifying algorithms
    
Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/

using stlvec;
using "lib:stlalgorithm";

namespace stl;

/*** C++ Support *****************************************************/

private extern void stl_sva_for_each(expr* rng, expr* unary_fun);
private extern int stl_sva_find_if(expr* rng, expr* pred);
private extern int stl_sva_find_first_of(expr* rng1, expr* rng2, expr* pred);
private extern int stl_sva_adjacent_find(expr* rng, expr* comp);
private extern int stl_sva_count_if(expr* rng, expr* unary_pred);
private extern expr* stl_sva_mismatch(expr* rng1, expr* rng2, expr* comp);
private extern bool stl_sva_equal(expr* rng, expr* rng2, expr* comp);
private extern int stl_sva_search(expr* rng1, expr* rng2, expr* comp);
private extern int stl_sva_search_n(expr* rng1, int count, expr* val, expr* comp);
private extern int stl_sva_find_end(expr* rng1, expr* rng2, expr* comp);

/*** Pure Interface **************************************************/

for_each rng::svrng f = stl_sva_for_each rng f;

find rng::svrng x = stl_sva_find_if rng (==x);

find_if rng::svrng f = stl_sva_find_if rng f;

find_first_of rng1::svrng rng2::svrng f = stl_sva_find_first_of rng1 rng2 f;

adjacent_find rng::svrng f = stl_sva_adjacent_find rng f;

count rng::svrng x = stl_sva_count_if rng (==x);

count_if rng::svrng f = stl_sva_count_if rng f;

mismatch rng1::svrng rng2::svrng f = stl_sva_mismatch rng1 rng2 f;

equal rng1::svrng rng2::svrng f = stl_sva_equal rng1 rng2 f;

search rng1::svrng rng2::svrng f = stl_sva_search rng1 rng2 f;

search_n rng::svrng count::int x f = stl_sva_search_n rng count x f;

find_end rng1::svrng rng2::svrng f = stl_sva_find_end rng1 rng2 f;







