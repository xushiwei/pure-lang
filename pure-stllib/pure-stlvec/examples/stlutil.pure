/* stlutil.pure - some utilities for working with stlvecs

Copyright (c) 2011-2012 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/

using stlvec;

namespace stl;

/*** helpers *************************************************************/

intersperse sep [] = [];
intersperse sep [x] = [x];
intersperse sep (x:xs) = x:sep:intersperse sep xs;

join_with sep strs = strcat (intersperse sep strs);

index_if f xs = ndx xs 0 with
  ndx [] _ = -1;
  ndx (x:xs) n = if f x then n else ndx xs (n+1); 
end;

/*** readable representation of a stlvec or range ************************/

tostr sz::int it::svrng = tostr (sz, ",") it;
tostr (sz::int, sep::string) it::svrng = res when
  sv,b,e = bounds it;
  sz = if sz <= 0 then 1000 else sz;
  rsz = e-b;
  elms = take sz (members it);
  s = join_with sep (map str elms);
  s = if #elms < rsz then s + sep + "..." else s;
  sfx = if e < #sv then " }" else "}";
  pfx = if typep mutable_svrng it then "sv{" else "csv{";
  pfx = if b > 0 then pfx + " " else pfx;
  res = pfx + s + sfx;
end;

namespace;

__show__ r::svrng = stl::tostr 5 r;


// examples$> pure -w -q
// > using stlutil;
// > let sv1 = stlvec (0..20);
// > sv1;
// sv{0,1,2,3,4,...}
// > (sv1, 10, stl::svend);
// sv{ 10,11,12,13,14,...}
// > (sv1, 17, stl::svend);
// sv{ 17,18,19,20}
// > let csv1 = const_stlvec (0..20);
// > csv1;
// csv{0,1,2,3,4,...}
// > csv1, 5, 8;
// csv{ 5,6,7 }

