/* stlmap.pure: Pure interface to C++ STL map
    
--- DRAFT - FOR DISCUSSON PURPOSES ONLY ---

Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlmap, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlmap distribution package for details.

*/
 
using stlbase;
using "lib:stlmap";

namespace stl;

/*** C++ Support **********************************************************/

private extern expr* stl_sm_type_tags();
private extern expr* stl_sm_make_empty(expr* kcmp, expr* vcmp, expr* veql,
                                       expr* default_val, int ko);
private extern void  stl_sm_delete(void* smp);
private extern void  stl_sm_iter_delete(void* smip);
private extern expr* stl_sm_container_info(expr* rng); 
private extern int   stl_sm_size(expr* rng);
private extern int   stl_sm_count(expr* pxsmp, expr* key);
private extern bool  stl_sm_empty(expr* rng);
private extern expr* stl_sm_find(expr* pxsmp, expr* key, int what);
private extern expr* stl_sm_copy_iter(expr* pxsmip);
private extern expr* stl_sm_begin(expr* pxsmp);
private extern expr* stl_sm_end(expr* pxsmp); 
private extern expr* stl_sm_iter_bounds(expr* pxsmp, expr* key, int what);
private extern expr* stl_sm_range_info(expr* rng);
private extern expr* stl_sm_move_iter(expr* pxsmp, int count);
private extern expr* stl_sm_iter_is_at(expr* pxsmip, int where);
private extern expr* stl_sm_iter_info(expr* pxsmip);
private extern expr* stl_sm_equal_iter(expr* pxsmp, expr* pxsmp);
private extern expr* stl_sm_get_at(expr* pxsmip, int what);
private extern expr* stl_sm_get_elm_at_inc(expr* pxsmip);
private extern expr* stl_sm_put_at(expr* pxsmip, expr* val);
private extern expr* stl_sm_insert_hinted(expr*map, expr* iter, expr* kv);
private extern expr* stl_sm_insert_elm(expr* map, expr* kv);
private extern int   stl_sm_insert(expr* map, expr* src, bool replace);
private extern int   stl_sm_insert_stlvec(expr* map, void* svp, bool replace);
private extern int   stl_sm_insert_stlmap(expr* map, expr* rng, bool replace);
private extern void  stl_sm_swap(expr* sac1, expr* sac2);
private extern int   stl_sm_erase(expr* sac, expr* trg);
private extern int   stl_sm_clear(expr* map);
private extern int   stl_sm_equal(expr* rng1, expr* rng2);
private extern int   stl_sm_less(expr* rng1, expr* rng2);
private extern bool  stl_sm_includes(expr* rng1, expr* rng2);
private extern expr* stl_sm_setop(int op, expr* rng1, expr* rng2);
private extern expr* stl_sm_make_vector(expr* rng);
private extern void* stl_sm_fill_stlvec(expr* rng, void* v);
private extern expr* stl_sm_listmap(expr* fun, expr* rng, int what);
private extern expr* stl_sm_listcatmap(expr* fun, expr* rng, int what);
private extern expr* stl_sm_foldl(expr* fun, expr* val, expr* rng);
private extern expr* stl_sm_foldl1(expr* fun, expr* rng);
private extern expr* stl_sm_foldr(expr* fun, expr* val, expr* rng);
private extern expr* stl_sm_foldr1(expr* fun, expr* rng);
private extern void  stl_sm_do(expr* fun, expr* rng);
private extern expr* stl_sm_bounds(expr* rng);
private extern expr* stl_sm_prev_key(expr* map, expr* key);
private extern expr* stl_sm_next_key(expr* map, expr* key);
private extern expr* stl_sm_replace_with(expr* map, expr* key, expr* unaryfun);

extern bool  stl_sm_is_set(expr* rng) = sm_setp;
extern int   stl_sm_member(stlmap* smp, expr* key) = sm_member;
extern expr* stl_sm_get(stlmap* smp, expr* key) = sm_get;
extern void  stl_sm_put(stlmap* smp, expr* key, expr* val) = sm_put;

let stlmap_t, stlmap_iter_t = stl::stl_sm_type_tags;

/*** Global Definitions **************************************************/

namespace ;

public emptystlmap mkstlmap emptystlset mkstlset member members erase
  insert_or_replace replace replace_with insert_elm; 

type stlmap x::pointer = check_ptrtag stl::stlmap_t x;     //c++ map
type stlset x::pointer = check_ptrtag stl::stlmap_t x && stl::sm_setp x;

type stlmap_iter x::pointer = check_ptrtag stl::stlmap_iter_t x;

type stlmap_rng x::stlmap | stlmap_rng (x::stlmap, _);
type stlmap_rng (x::stlmap_iter, y::stlmap_iter);

namespace stl;

/*** Helpers **************************************************************/

private 
  sm_compatible sm_lower_bound_flg sm_upper_bound_flg sm_equal_range_flg
  sm_key_flg sm_val_flg sm_elm_flg sm_iter_flg sm_iter_dflt_flg
  sm_merge sm_union sm_difference sm_intersection sm_symmetric_difference; 

const sm_lower_bound_flg = 1;
const sm_upper_bound_flg = 2;
const sm_equal_range_flg = 3;

const sm_key_flg = 1;
const sm_val_flg = 2;
const sm_elm_flg = 3;
const sm_iter_flg = 4;
const sm_iter_dflt_flg = 5;

const sm_merge = 1;
const sm_union = 2;
const sm_difference = 3;
const sm_intersection = 4;
const sm_symmetric_difference = 5;

const sm_at_beginning = 1;
const sm_at_pastend = 2; 

sm_compatible rng1::stlmap_rng rng2 = 
  if sm_setp rng1 then sm_setp rng2 else ~sm_setp rng2;

/*** Iterators **********************************************************/

(::==) itr1::stlmap_iter itr2::stlmap_iter = stl_sm_equal_iter itr1 itr2;

iterator itr::stlmap_iter = stl_sm_copy_iter itr;

begin sm::stlmap = stl_sm_begin sm;

pastend sm::stlmap = stl_sm_end sm;

find sm::stlmap key = stl_sm_find sm key sm_iter_flg;

find_with_default sm::stlmap key = stl_sm_find sm key sm_iter_dflt_flg;

l_bound sm::stlmap key = stl_sm_iter_bounds sm key sm_lower_bound_flg;

u_bound sm::stlmap key = stl_sm_iter_bounds sm key sm_upper_bound_flg;

lu_bounds sm::stlmap key = stl_sm_iter_bounds sm key sm_equal_range_flg;

beginp itr::stlmap_iter = stl_sm_iter_is_at itr sm_at_beginning;

endp itr::stlmap_iter = stl_sm_iter_is_at itr sm_at_pastend;

get_info itr::stlmap_iter = stl_sm_iter_info itr;

get_elm itr::stlmap_iter = stl_sm_get_at itr sm_elm_flg;   // like *p

get_key itr::stlmap_iter = stl_sm_get_at itr sm_key_flg; // p->first

get_val itr::stlmap_iter = stl_sm_get_at itr sm_val_flg; // p->second

put_val itr::stlmap_iter val = stl_sm_put_at itr val $$ val;

inc itr::stlmap_iter = stl_sm_move_iter itr 1;

dec itr::stlmap_iter = stl_sm_move_iter itr (-1);

move itr::stlmap_iter n::int = stl_sm_move_iter itr n;

insert_elm sm::stlmap (elm,itr::stlmap_iter) = stl_sm_insert_hinted sm itr elm;

insert_elm sm::stlmap elm = stl_sm_insert_elm sm elm;

/***  Constructors *********************************************************/

::emptystlmap                    = stl_sm_make_empty (<) (<) (==) [] 0;

::mkstlmap (kcmp,dflt,vcmp,veql) = stl_sm_make_empty kcmp vcmp veql dflt 0;
::mkstlmap (kcmp,dflt,vcmp)      = stl_sm_make_empty kcmp vcmp (==) dflt 0;
::mkstlmap (kcmp,dflt)           = stl_sm_make_empty kcmp (<) (==) dflt  0;
::mkstlmap kcmp                  = stl_sm_make_empty kcmp (<) (==) [] 0;

::stlmap xs = sm when
  sm = ::emptystlmap;
  stl_sm_insert sm xs 0;
end if listp xs || matrixp xs;

::stlmap (STLVEC svp) = sm when
  sm = ::emptystlmap;
  stl_sm_insert_stlvec sm svp 0;
end;

::stlmap rng::stlmap_rng = sm when
  _,params = stl_sm_container_info rng;
  sm = mkstlmap params;
  stl_sm_insert_stlmap sm rng 0;
end if ~sm_setp rng;

::emptystlset = stl_sm_make_empty (<) (<) (==) [] 1;

::mkstlset kcmp = stl_sm_make_empty kcmp (<) (==) [] 1;

::stlset xs = ss when
  ss = ::emptystlset;
  stl_sm_insert ss xs 0;
end if listp xs || matrixp xs;

::stlset (STLVEC svp) = ss when
  ss = ::emptystlset;
  stl_sm_insert_stlvec ss svp 0;
end;

::stlset rng::stlmap_rng = ss when
  _,kc,_ = stl_sm_container_info rng;
  ss = mkstlset kc;
  stl_sm_insert_stlmap ss rng 0;
end if sm_setp rng;

/*** Info ***************************************************************/

container_info rng::stlmap_rng = stl_sm_container_info rng;

(::#) sm::stlmap = stl_sm_size sm;

empty sm::stlmap = stl_sm_empty sm;

count sm::stlmap key = stl_sm_count sm key;

bounds rng::stlmap_rng = stl_sm_bounds rng;

range_info rng::stlmap_rng = stl_sm_range_info rng;

distance rng::stlmap_rng = stl_sm_size rng;

/*** Conversions ********************************************************/

::stream rng::stlmap_rng = gen first with 
  gen i = if stl_sm_equal_iter i last then [] 
          else stl_sm_get_elm_at_inc i : (gen i &);  
end if valid when 
  valid,m,b,last = stl_sm_range_info rng;
  first = stl_sm_copy_iter b;
end;

::members rng::stlmap_rng = stl_sm_listmap 0 rng sm_elm_flg; 

::keys rng::stlmap_rng = stl_sm_listmap 0 rng sm_key_flg;// if ~sm_setp rng;

::vals rng::stlmap_rng = stl_sm_listmap 0 rng sm_val_flg;// if ~sm_setp rng;

vector rng::stlmap_rng = stl_sm_make_vector rng;

::stlvec rng::stlmap_rng = sv if ok when
  sv = emptystlvec;
  ok = case sv of  
    STLVEC v = stl_sm_fill_stlvec rng v $$ 1;
    _ = 0;
  end;
end;

/*** Modification *****************************************************/

::insert sm::stlmap (STLVEC svp) = stl_sm_insert_stlvec sm svp 0;

::insert sm::stlmap rng::stlmap_rng = 
  stl_sm_insert_stlmap sm rng 0 if sm_compatible sm rng;

::insert sm::stlmap src = stl_sm_insert sm src 0;

::insert_or_replace sm::stlmap (STLVEC svp) = 
  stl_sm_insert_stlvec sm svp 1 if ~sm_setp sm;

::insert_or_replace sm::stlmap rng::stlmap_rng = 
  stl_sm_insert_stlmap sm rng 1 if ~sm_setp sm && ~sm_setp rng;

::insert_or_replace sm::stlmap src = 
  stl_sm_insert sm src 1  if ~sm_setp sm;

::replace sm::stlmap key val = sm_put sm key val;

::replace_with f sm::stlmap (key=>val) = stl_sm_replace_with sm key (f val);

::erase sm::stlmap = stl_sm_clear sm;

::erase (sm::stlmap,itr1::stlmap_iter, itr2::stlmap_iter) = 
  stl_sm_erase sm (itr1,itr2);

::erase (sm::stlmap,itr::stlmap_iter) = stl_sm_erase sm itr;

::erase (sm::stlmap,key1,key2) = stl_sm_erase sm (sm,key1,key2);

::erase (sm::stlmap,key) = stl_sm_erase sm (sm,key);

swap sm1::stlmap sm2::stlmap = stl_sm_swap sm1 sm2 
  if sm_compatible sm1 sm2;

/*** Equality and Lexicographical Comparison ***************************/

map_equal rng1::stlmap_rng rng2::stlmap_rng = stl_sm_equal rng1 rng2
  if sm_compatible rng1 rng2;

(::==) sac1::stlmap sac2::stlmap = stl_sm_equal sac1 sac2
  if sm_compatible sac1 sac2;

(::~=) sac1::stlmap sac2::stlmap = ~stl_sm_equal sac1 sac2
  if sm_compatible sac1 sac2;

(::<) rng1::stlmap_rng rng2::stlmap_rng = stl_sm_less rng1 rng2
  if sm_compatible rng1 rng2;

(::<=) rng1::stlmap_rng rng2::stlmap_rng = ~stl_sm_less rng2 rng1
  if sm_compatible rng1 rng2;

(::>) rng1::stlmap_rng rng2::stlmap_rng = stl_sm_less rng2 rng1
  if sm_compatible rng1 rng2;

(::>=) rng1::stlmap_rng rng2::stlmap_rng = ~stl_sm_less rng1 rng2
  if sm_compatible rng1 rng2;

/** STL Set Algorithms ***************************************************/

map_merge rng1::stlmap_rng rng2::stlmap_rng = 
  stl_sm_setop sm_merge rng1 rng2 if sm_compatible rng1 rng2;

map_union rng1::stlmap_rng rng2::stlmap_rng = 
  stl_sm_setop sm_union rng1 rng2 if sm_compatible rng1 rng2;

map_difference rng1::stlmap_rng rng2::stlmap_rng = 
  stl_sm_setop sm_difference rng1 rng2 if sm_compatible rng1 rng2;

map_intersection rng1::stlmap_rng rng2::stlmap_rng = 
  stl_sm_setop sm_intersection rng1 rng2 if sm_compatible rng1 rng2;

map_symmetric_difference rng1::stlmap_rng rng2::stlmap_rng = 
  stl_sm_setop sm_symmetric_difference rng1 rng2 if sm_compatible rng1 rng2;

map_includes rng1::stlmap_rng rng2::stlmap_rng =
  stl_sm_includes rng1 rng2 if sm_compatible rng1 rng2;

/*** Mapping and Folding *************************************************/

::map f rng::stlmap_rng = stl_sm_listmap f rng sm_elm_flg;

::foldl f x rng::stlmap_rng = stl_sm_foldl f x rng;

::foldl1 f rng::stlmap_rng = stl_sm_foldl1 f rng;

::foldr f x rng::stlmap_rng = stl_sm_foldr f x rng;

::foldr1 f rng::stlmap_rng = stl_sm_foldr1 f rng;

::do f rng::stlmap_rng = stl_sm_do f rng; 

::filter p rng::stlmap_rng = stl_sm_foldr f [] rng with
  f x xs = res when
    res = case p x of
      1 = x:xs;
      0 = xs;
      y = throw failed_cond;
    end;
  end;
end;

::listmap f rng::stlmap_rng = stl_sm_listmap f rng sm_elm_flg;

::catmap f rng::stlmap_rng = stl_sm_listcatmap f rng sm_elm_flg;

::rowmap f rng::stlmap_rng = rowcat (stl_sm_listmap f rng sm_elm_flg);

::rowcatmap f rng::stlmap_rng = rowcat (stl_sm_listmap f rng sm_elm_flg);

::colmap f rng::stlmap_rng = colcat (stl_sm_listmap f rng sm_elm_flg);

::colcatmap f rng::stlmap_rng = colcat (stl_sm_listmap f rng sm_elm_flg);

/*** Accessing Elements by Key ****************************************/

(::!) sm::stlmap key = stl_sm_find sm key sm_val_flg;

::member sm::stlmap key = sm_member sm key;

next_key sm::stlmap key = stl_sm_next_key sm key;

prev_key sm::stlmap key = stl_sm_prev_key sm key;

::first sm::stlmap = stl_sm_find sm smbeg sm_elm_flg;

::last sm::stlmap = stl_sm_get_at i sm_elm_flg when
  i = stl_sm_end sm;
  stl_sm_move_iter i (-1);
end;

