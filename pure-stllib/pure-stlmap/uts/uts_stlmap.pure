/* uts_stlmap.pure -- tests for stlmap */
//-- --comment c_off --verbose off

//*** Imports *********************************************************

using system, stlmap, stlvec;
//- ()

//*** Constructors ******************************************************

let sv1 = ::stlvec ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sv1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm1 = stlmap {"a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5}; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm1 = stlmap sv1; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm2 = stlmap sm1; members sm2;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm2 = stlmap (sm1,"c","z"); members sm2;
//- ["c"=>3,"d"=>4,"e"=>5]

//*** Basic lookup for (<) and (>) ordered sets *************************

let sm1 = stlmap [1=>10, 2.0=>20, 3=>30, 4=>40]; members sm1;
//- [1=>10,2.0=>20,3=>30,4=>40]

member sm1 1, member sm1 2, member sm1 3, member sm1 4, member sm1 5; 
//- 1,1,1,1,0

member sm1 1.0, member sm1 2.0, member sm1 3.0, member sm1 4.0, member sm1 5.0; 
//- 1,1,1,1,0

sm1!1, sm1!2, sm1!3, sm1!4;
//- 10,20,30,40

sm1!1.0, sm1!2.0, sm1!3.0, sm1!4.0;
//- 10,20,30,40
 
let sm2 = mkstlmap (>);
//- ()

insert sm2 [1=>10, 2.0=>20, 3=>30, 4=>40]; members sm2;
//- [4=>40,3=>30,2.0=>20,1=>10]

member sm2 1, member sm2 2, member sm2 3, member sm2 4, member sm2 5; 
//- 1,1,1,1,0

member sm2 1.0, member sm2 2.0, member sm2 3.0, member sm2 4.0, member sm2 5.0; 
//- 1,1,1,1,0

sm2!1, sm2!2, sm2!3, sm2!4;
//- 10,20,30,40

sm2!1.0, sm2!2.0, sm2!3.0, sm2!4.0;
//- 10,20,30,40

/*** Info ***************************************************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = stlmap ["b"=>2,"c"=>3,"d"=>4];
//- ()

let ok, smx, f, l = stl::range_info sm1; ok;
//- 1

smx===sm1, f==stl::begin sm1, l==stl::pastend sm1;
//- 1,1,1

let ok, smx, f, l = stl::range_info (sm1,"b","e"); ok;
//- 1

members (f,l);
//- ["b"=>2,"c"=>3,"d"=>4]

#sm1;
//- 5

stl::distance (sm1,"b",stl::smend);
//- 4

stl::empty emptystlmap;
//- 1

stl::count sm1 "c";
//- 1

stl::container_info sm1;
//- 0,(<),[],(<),(==)

/*** Accessing Ranges as stlvecs or lists ******************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sv1 = stlvec sm1; members sv1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

stl::vector (sm1,"b","d");
stl::vector (sm1,"b","d");
//- {"b"=>2,"c"=>3}

members (sm1,stl::smbeg,stl::smbeg);
//- []

members (sm1,stl::smbeg,stl::smend);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,stl::smend,stl::smbeg);
//- []

members (sm1,stl::smend,stl::smend);
//- []

members (sm1,"0","c");
//- ["a"=>1,"b"=>2]

members (sm1,"a","d");
//- ["a"=>1,"b"=>2,"c"=>3]

members (sm1,"b","d");
//- ["b"=>2,"c"=>3]

members (sm1,"b",stl::smend);
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,"c","e");
//- ["c"=>3,"d"=>4]

members (sm1,"d","b");
//- []

keys (sm1,"a",stl::smend);
//- ["a","b","c","d","e"]

keys (sm1,"a","e");
//- ["a","b","c","d"]

keys (sm1,"b","d");
//- ["b","c"]

vals (sm1,"a",stl::smend);
//- [1,2,3,4,5]

vals (sm1,"a","e");
//- [1,2,3,4]

vals (sm1,"b","d");
//- [2,3]

/*** Accessing Ranges using Streams **********************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

head $ stream sm1;
//- "a"=>1

list $ stream sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

list $ take 3 (stream sm1);
//- ["a"=>1,"b"=>2,"c"=>3]

list $ take 10 (stream sm1);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

list $ take 10 $ drop 2 (stream sm1);
//- ["c"=>3,"d"=>4,"e"=>5]

//*** Insert *************************************************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = mkstlmap ((>),0);
//- ()

members sm2;
//- []

insert sm2 ("a"=>(0..3));
//- 1

members sm2;
//- ["a"=>[0,1,2,3]]

insert sm2 ("b"=>{0,1,2,3}) $$ members sm2;
//- ["b"=>{0,1,2,3},"a"=>[0,1,2,3]]

erase sm2; 
//- 2

insert sm2 ["a"=>1,"b"=>2,"c"=>3];
//- 3

members sm2;
//- ["c"=>3,"b"=>2,"a"=>1]

insert sm2 {"d"=>4};
//- 1

members sm2;
//- ["d"=>4,"c"=>3,"b"=>2,"a"=>1]

insert sm2 ["d"=>0]; 
//- 0

members sm2;
//- ["d"=>4,"c"=>3,"b"=>2,"a"=>1]

erase (sm2,"c",stl::smend);
//- 3

members sm2;
//- ["d"=>4]

insert sm2 (sm1,"a","c");
//- 2

members sm2;
//- ["d"=>4,"b"=>2,"a"=>1]

insert sm2 sm1;
//- 2

members sm2;
//- ["e"=>5,"d"=>4,"c"=>3,"b"=>2,"a"=>1]

//*** Insert or Replace **************************************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = mkstlmap ((>),0);
//- ()

members sm2;
//- []

insert_or_replace sm2 ("a"=>1);
//- 1

members sm2;
//- ["a"=>1]

insert_or_replace sm2 ["a"=>10,"b"=>2,"c"=>3];
//- 3

members sm2;
//- ["c"=>3,"b"=>2,"a"=>10]

insert_or_replace sm2 {"c"=>30,"d"=>40};
//- 2

members sm2;
//- ["d"=>40,"c"=>30,"b"=>2,"a"=>10]

insert_or_replace sm2 (sm1,"a","c");
//- 2

members sm2;
//- ["d"=>40,"c"=>30,"b"=>2,"a"=>1]

insert_or_replace sm2 sm1;
//- 5

members sm2;
//- ["e"=>5,"d"=>4,"c"=>3,"b"=>2,"a"=>1]


//*** erase ***************************************************************/

// Erase element at position

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

erase (sm1,i_begin); 
//- 1

members sm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

erase (sm1,i_d); members sm1;
//- ["b"=>2,"c"=>3,"e"=>5]

erase (sm1,i_b); members sm1;
//- ["c"=>3,"e"=>5]

// Erase ranges

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

stl::get_elm i_b;
//- "b"=>2

erase (sm1,i_b,i_d);
//- 2

members sm1;
//- ["a"=>1,"d"=>4,"e"=>5]

catch id $ stl::get_elm i_b;
//- bad_argument

erase (sm1,i_d,i_pastend);
//- 2

members sm1;
//- ["a"=>1]

erase (sm1,i_begin,i_pastend);
//- 1

members sm1;
//- []

// Attempt erase with bad iterators

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

catch id $ erase (sm2,i_b);
//- bad_argument

catch id $ erase (sm2,i_b,i_d);
//- bad_argument

// Erase members with given key

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

erase (sm1,"0");
//- 0

erase (sm1,"z");
//- 0

erase (sm1,"b");
//- 1

members sm1;
//- ["a"=>1,"c"=>3,"d"=>4,"e"=>5]

erase (sm1,"a"); members sm1;
//- ["c"=>3,"d"=>4,"e"=>5]

erase (sm1,"e"); members sm1;
//- ["c"=>3,"d"=>4]

//*** swap ***************************************************************/

let sm1 = stlmap ["a"=>1,"b"=>2];
//- ()

let sm2 = stlmap ["c"=>3,"d"=>4,"e"=>5];
//- ()

stl::swap sm1 sm2;
//- ()

members sm1;
//- ["c"=>3,"d"=>4,"e"=>5]

members sm2;
//- ["a"=>1,"b"=>2]

//** Equality and Lexicographical Comparison ****************************/

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4];
//- ()

let sm2 = stlmap ["b"=>2,"c"=>3,"d"=>4];
//- ()

stl::map_equal sm1 sm1;
//- 1

stl::map_equal sm1 sm2;
//- 0

stl::map_equal sm2 sm1;
//- 0

stl::map_equal (sm1,"b","e") sm1;
//- 0

stl::map_equal (sm1,"b","e") sm2;
//- 1

stl::map_equal (sm1,"b","d") (sm2,stl::smbeg, "d");
//- 1

sm1 == sm1;
//- 1

sm1 == sm2;
//- 0

sm2 == sm1;
//- 0

sm1 ~= sm1;
//- 0

sm1 ~= sm2;
//- 1

sm1 <  sm1;
//- 0

sm1 <  sm2;
//- 1

sm2 <  sm1;
//- 0

sm1 <= sm1;
//- 1

sm1 <= sm2;
//- 1

sm2 <= sm1;
//- 0

sm1 >  sm1;
//- 0

sm1 >  sm2;
//- 0

sm2 >  sm1;
//- 1

sm1 >= sm1;
//- 1

sm1 >= sm2;
//- 0

sm2 >= sm1;
//- 1

(sm1,"b",stl::smend) == sm2; // note tuple overrided issue
//- 0

stl::map_equal sm1 sm1;
//- 1

stl::map_equal sm1 sm2;
//- 0

stl::map_equal (sm1,"b",stl::smend) sm2;
//- 1

stl::map_equal (sm1,"c",stl::smend) sm2;
//- 0

stl::map_equal (sm1,"c",stl::smend) (sm2,"c",stl::smend);
//- 1

stl::map_equal sm2 (sm1,"b",stl::smend);
//- 1

(sm1,"b",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < (sm2,"c",stl::smend);
//- 0

(sm1,"b",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < (sm2,"c",stl::smend);
//- 0

//*** STL Set Algorithms *********************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3];
//- ()

let sm2 = stlmap ["b"=>2,"c"=>3,"d"=>4];
//- ()

let sm3 = stlmap ["a"=>31,"b"=>32,"c"=>33,"d"=>34];
//- ()

let sm = stl::map_merge sm1 sm2; members sm;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sm = stl::map_merge sm3 sm2; members sm;
//- ["a"=>31,"b"=>32,"c"=>33,"d"=>34]

let sm = stl::map_merge sm2 sm3; members sm;
//- ["a"=>31,"b"=>2,"c"=>3,"d"=>4]

let sm = stl::map_union sm1 sm2; members sm;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sm = stl::map_union sm3 sm2; members sm;
//- ["a"=>31,"b"=>32,"c"=>33,"d"=>34]

let sm = stl::map_union sm2 sm3; members sm;
//- ["a"=>31,"b"=>2,"c"=>3,"d"=>4]

let sm = stl::map_intersection sm1 sm2; members sm;
//- ["b"=>2,"c"=>3]

let sm = stl::map_intersection sm3 sm2; members sm;
//- ["b"=>32,"c"=>33,"d"=>34]

let sm = stl::map_intersection sm2 sm3; members sm;
//- ["b"=>2,"c"=>3,"d"=>4]

let sm = stl::map_difference sm1 sm2; members sm;
//- ["a"=>1]

let sm = stl::map_difference sm3 sm2; members sm;
//- ["a"=>31]

let sm = stl::map_difference sm2 sm3; members sm;
//- []

let sm = stl::map_symmetric_difference sm1 sm2; members sm;
//- ["a"=>1,"d"=>4]

let sm = stl::map_symmetric_difference sm3 sm2; members sm;
//- ["a"=>31]

let sm = stl::map_symmetric_difference sm2 sm3; members sm;
//- ["a"=>31]

stl::map_includes sm1 sm2;
//- 0

stl::map_includes sm3 sm2;
//- 1

stl::map_includes sm2 sm3;
//- 0

//*** Mapping *****************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_e = stl::find sm1 "b", stl::find sm1 "e";
//- ()

listmap (\(k=>v)->k+1=>v+10) sm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14,"f"=>15]

listmap (\(k=>v)->k=>v+10) (i_begin,i_pastend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14,"e"=>15]

catch id $ listmap (\(k=>v)->k=>v+10) (i_pastend,i_begin);
//- bad_argument

listmap (\(k=>v)->k=>v+10) (i_begin,i_begin);
//- []

listmap (\(k=>v)->k=>v+10) (i_pastend,i_pastend);
//- []

listmap (\(k=>v)->k=>v+10) (i_b,i_e);
//- ["b"=>12,"c"=>13,"d"=>14]

catch id $ listmap (\(k=>v)->k=>v+10) (i_e,i_b);
//- bad_argument

listmap (\(k=>v)->k=>v+10) (i_b,i_pastend)
//- ["b"=>12,"c"=>13,"d"=>14,"e"=>15]

catch id $ listmap (\(k=>v)->k=>v+10) (i_pastend,i_b)
//- bad_argument

listmap (\(k=>v)->k+1=>v+10) sm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14,"f"=>15]

catmap (\(k=>v)->[k+1=>v+10]) (i_begin,i_pastend);
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14,"f"=>15]

catch id $ catmap (\(k=>v)->[k+1=>v+10]) (i_pastend,i_begin);
//- bad_argument

catmap (\(k=>v)->[k+1=>v+10]) (i_begin,i_begin);
//- []

catmap (\(k=>v)->[k+1=>v+10]) (i_pastend,i_pastend);
//- []

catmap (\(k=>v)->[k+1=>v+10]) (i_b,i_e);
//- ["c"=>12,"d"=>13,"e"=>14]

catch id $ catmap (\(k=>v)->[k+1=>v+10]) (i_e,i_b);
//- bad_argument

catmap (\(k=>v)->[k+1=>v+10]) (i_b,i_pastend)
//- ["c"=>12,"d"=>13,"e"=>14,"f"=>15]

catch id $ catmap (\(k=>v)->[k+1=>v+10]) (i_pastend,i_b)
//- bad_argument

[ k+1 | (k=>y) = sm1];
//- ["b","c","d","e","f"]

[ k=>v | (k=>v) = sm1; v mod 2];
//- ["a"=>1,"c"=>3,"e"=>5]

{ k+1 | (k=>y) = sm1};
//- {"b","c","d","e","f"}

{ {k;v} |  (k=>v) = sm1; v mod 2};
//- {"a","c","e";1,3,5}

//*** foldl, foldl1 **************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_e = stl::find sm1 "b", stl::find sm1 "e";
//- ()

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} sm1;
//- {"abcde",15}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_begin,i_begin);
//- {"",0}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_begin,i_pastend);
//- {"abcde",15}

catch id $ foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_pastend,i_begin);
//- bad_argument

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_pastend,i_pastend);
//- {"",0}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_b,i_b);
//- {"",0}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_b,i_e);
//- {"bcd",9}

catch id $ foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_e,i_b);
//- bad_argument

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_e,i_e);
//- {"",0}

catch id $ foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_b,i_begin);
//- bad_argument

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_begin,i_b);
//- {"a",1}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_b,i_pastend);
//- {"bcde",14}

catch id $ foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (i_pastend,i_b);
//- bad_argument

// foldl1

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) sm1;
//- "abcde"=>15

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_begin,i_pastend);
//- "abcde"=>15

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_begin,i_begin);
//- bad_argument

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_pastend,i_begin);
//- bad_argument

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_pastend,i_pastend);
//- bad_argument

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_b,i_b);
//- bad_argument

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_b,i_e);
//- "bcd"=>9

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_e,i_b);
//- bad_argument

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_e,i_e);
//- bad_argument

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_b,i_begin);
//- bad_argument

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_begin,i_b);
//- "a"=>1

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_b,i_pastend);
//- "bcde"=>14

catch id $ foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (i_pastend,i_b);
//- bad_argument

//*** foldr, foldr1 **************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} sm1;
//- {"edcba",15}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_begin,i_begin);
//- {"",0}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_begin,i_pastend);
//- {"edcba",15}

catch id $ foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_pastend,i_begin);
//- bad_argument

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_pastend,i_pastend);
//- {"",0}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_b,i_b);
//- {"",0}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_b,i_e);
//- {"dcb",9}

catch id $ foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_e,i_b);
//- bad_argument

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_e,i_e);
//- {"",0}

catch id $ foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_b,i_begin);
//- bad_argument

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_begin,i_b);
//- {"a",1}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_b,i_pastend);
//- {"edcb",14}

catch id $ foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (i_pastend,i_b);
//- bad_argument

// foldr1

foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) sm1;
//- "edcba"=>15

foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_begin,i_pastend);
//- "edcba"=>15

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_begin,i_begin);
//- bad_argument

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_pastend,i_begin);
//- bad_argument

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_pastend,i_pastend);
//- bad_argument

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_b,i_b);
//- bad_argument

foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_b,i_e);
//- "dcb"=>9

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_e,i_b);
//- bad_argument

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_e,i_e);
//- bad_argument

catch id $ foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_b,i_begin);
//- bad_argument

foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_begin,i_b);
//- "a"=>1

foldr1 (\(k=>v) (r=>l) -> (r+k=>l+v)) (i_b,i_pastend);
//- "edcb"=>14

//*** do, filter *******************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = mkstlmap (>);
//- ()

do (\x -> insert sm2 x) sm1; members sm2;
//- ["e"=>5,"d"=>4,"c"=>3,"b"=>2,"a"=>1]

filter (\(k=>v) -> v mod 2) sm1;
//- ["a"=>1,"c"=>3,"e"=>5]

//*** rowmap, rowcatmap, colmap colcatmap ********************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

rowmap (\(k=>v)->(k,v)) sm1;
//- {("a",1);("b",2);("c",3);("d",4);("e",5)}

rowcatmap (\(k=>v)->{k,v})sm1;
//- {"a",1;"b",2;"c",3;"d",4;"e",5}

rowcatmap (\(k=>v)->if v mod 2 then {k,v} else {}) sm1;
//- {"a",1;"c",3;"e",5}

colmap (\(k=>v)->(k,v)) sm1;
//- {("a",1),("b",2),("c",3),("d",4),("e",5)}

colcatmap (\(k=>v)->{k;v})sm1;
//- {"a","b","c","d","e";1,2,3,4,5}

colcatmap (\(k=>v)->if v mod 2 then {v;k} else {}) sm1;
//- {1,3,5;"a","c","e"}

//*** Key Oriented Functions *********************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

sm1!stl::smbeg, sm1!"a", sm1!"d", sm1!"e"
//- 1,1,4,5

catch id $ sm1!"0";
//- out_of_bounds

catch id $ sm1!"b1"; 
//- out_of_bounds

catch id $ sm1!"z";
//- out_of_bounds

member sm1 "0", member sm1 "a", member sm1 "c";
//- 0,1,1

member sm1 "e", member sm1 "f"
//- 1,0

catch id $ member sm1 stl::smbeg;
//- bad_argument

stl::bounds sm1;
//- stl::smbeg,stl::smend

stl::bounds (sm1,"0","z");
//- stl::smbeg,stl::smend

stl::bounds (sm1,"b","d");
//- "b","d"

stl::bounds (sm1,"0","z");
//- stl::smbeg,stl::smend

stl::bounds (sm1,"b","d");
//- "b","d"

stl::bounds (sm1,"d","b");
//- "d","d"

catch id $ stl::prev_key sm1 "a";
//- out_of_bounds

stl::prev_key sm1 "b";
//- stl::smbeg

stl::prev_key sm1 "e";
//- "d"

stl::prev_key sm1 stl::smend;
//- "e"

stl::next_key sm1 "a";
//- "b"

stl::next_key sm1 "d";
//- "e"

stl::next_key sm1 "e";
//- stl::smend

stl::next_key sm1 stl::smend;
//- stl::smend

replace sm1 "a" 11; members sm1;
//- ["a"=>11,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

catch id $ replace sm1 "f" 6;
//- out_of_bounds

replace sm1 "b" 12; members sm1;
//- ["a"=>11,"b"=>12,"c"=>3,"d"=>4,"e"=>5]

let sm2 = mkstlmap (>);
//- ()

replace_with (:) sm2 ("a"=>1); members sm2;
//- ["a"=>[1]]

replace_with (:) sm2 ("a"=>2); members sm2;
//- ["a"=>[2,1]]

replace_with (:) sm2 ("b"=>3); members sm2;
//- ["b"=>[3],"a"=>[2,1]]

replace_with (:) sm2 ("b"=>4); members sm2;
//- ["b"=>[4,3],"a"=>[2,1]]
