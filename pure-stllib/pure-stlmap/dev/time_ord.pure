/* time_ord.pure -- compare set element lookup times for dict, orddict,
hashdict, stlmap and stlhmap.

   A lookup is a sequence like "if member set x then set!x else ()". The
   corresponding c functions are called, e.g., orddict_member rather than
   member.

   Depending on these variables you can change the tests

   STLMAP_FIRST
   DIRECT_C_CALLS

   The test results shown at the end of this file were run after quitting
   and restarting pure for each case.

*/

using system, stlvec, stlvec::algorithms;

const repeats = 1000;
const lookups = 100;

using stlmap, stlhmap, dict, orddict, hashdict;
//using orddict, hashdict, dict, stlmap, stlhmap;

/*** dict *********************************************************/

time_dict words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup    dict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) =  member ss k $$ ss!k $$ lookup ks;
end when 
  tm = clock;
  ss = foldl insert emptydict words;
  tm = (clock - tm) / 1000.0;
  printf "fill      dict: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** orddict *********************************************************/

time_orddict words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup orddict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
  //lookup (k:ks) = orddict_member ss k $$ orddict_get ss k $$ lookup ks;
end when 
  ss = orddict [];
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  printf "fill   orddict: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** hashdict *********************************************************/

time_hashdict words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
  //lookup (k:ks) = hashdict_member ss k $$ hashdict_get ss k $$ lookup ks;
end when 
  ss = hashdict [];
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  printf "fill  hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** stlmap *********************************************************/

time_stlmap words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup  stlmap: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
  //lookup (k:ks) = stl::sm_member ss k $$ stl::sm_get $$ lookup ks;
end when 
  ss = emptystlmap;
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "fill    stlmap: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** stlmap using iterators ********************************************/

time_stlmap_iter words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup    iter: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) =  lookup ks when
    i = stl::find ss k;
    stl::get_val i 3;
  end;
end when 
  ss = emptystlmap;
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "fill      iter: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** stlhmap *********************************************************/

time_stlhmap words keys = () when
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup stlhmap: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
  //lookup (k:ks) = stl::shm_member ss k $$ stl::shm_get $$ lookup ks;
end when 
  ss = emptystlhmap;
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "fill   stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
end;

/*** harness for tests ***********************************************/

// returns a stlvec of shuffled (word=>int) and a list of words (keys)
get_words num_words filename = elms, keys when
  fp = case fopen filename  "r" of 
    fopen _ _ = pointer 0;
    fp = fp;
  end;
  all_words = if null fp then
                puts "Can't open word file" $$ emptystlvec
              else
                stlvec $ drop 200 (split "\n" (fget fp));
  fclose fp;
  num_words = min (#all_words) num_words;
  num_keys = min num_words lookups; 
  stl::random_shuffle all_words;
  words = stlvec (all_words,stl::svbeg,num_words);
  elms = stlvec $ list $ zipwith (=>) (members words) (0..inf);
  allkeys = stlvec (all_words,stl::svbeg,num_words);
  stl::random_shuffle allkeys;
  keys = members (allkeys,0,num_keys);
end;

main num_words = () when
  sep = "------------------------------------------";
  words, keys = get_words num_words "../examples/anagram_groups_dict.txt";
  num_words = min num_words (#words);
  printf "Test %d lookups, %d repeats\n" (lookups,repeats);
  puts sep;
  time_dict words keys;
  puts sep;
  time_orddict words keys;
  puts sep;
  time_stlmap words keys;
  puts sep;
  time_stlmap_iter words keys;
  puts sep;
  time_hashdict words keys;
  puts sep;
  time_stlhmap words keys;
  puts sep;

end;
    
/*** Sample with stlmap imported before orddict ***************

   using stlmap, stlhmap, dict, orddict, hashdict;

   > main 1000;
   Test 100 lookups, 1000 repeats
   ------------------------------------------
   fill      dict:     30.0 msecs, 1000 words
   lookup    dict:   1510.0 msecs
   ------------------------------------------
   fill   orddict:     20.0 msecs, 1000 words
   lookup orddict:   2750.0 msecs
   ------------------------------------------
   fill    stlmap:      0.0 msecs, 1000 words
   lookup  stlmap:    270.0 msecs
   ------------------------------------------
   fill      iter:      0.0 msecs, 1000 words
   lookup    iter:    370.0 msecs
   ------------------------------------------
   fill  hashdict:     10.0 msecs, 1000 words
   lookup hashdict:    420.0 msecs
   ------------------------------------------
   fill   stlhmap:      0.0 msecs, 1000 words
   lookup stlhmap:    220.0 msecs
   ------------------------------------------

*/


/*** Sample with ordict imported before stlmap ***************

   using orddict, hashdict, dict, stlmap, stlhmap;

> main 1000;
Test 100 lookups, 1000 repeats
------------------------------------------
fill      dict:     30.0 msecs, 1000 words
lookup    dict:   1650.0 msecs
------------------------------------------
fill   orddict:     20.0 msecs, 1000 words
lookup orddict:   2620.0 msecs
------------------------------------------
fill    stlmap:      0.0 msecs, 1000 words
lookup  stlmap:    520.0 msecs
------------------------------------------
fill      iter:      0.0 msecs, 1000 words
lookup    iter:    390.0 msecs
------------------------------------------
fill  hashdict:      0.0 msecs, 1000 words
lookup hashdict:    300.0 msecs
------------------------------------------
fill   stlhmap:     10.0 msecs, 1000 words
lookup stlhmap:    460.0 msecs
------------------------------------------
()



*/
