/* time_hash.pure -- lookup times for hashdict and stlhmap.

   Usage: > run time_hash.pure
          > main num_words_in_hash_table

   A lookup is a sequence like "if member set x then set!x else ()". The
   corresponding c functions are called, e.g., hashdict_member rather than
   member.

   There are two tests for each module: The "fast" test calls the underlying c
   functions directly. The "plain" test uses the Pure member and (!)
   functions.

   Please note that if you want to test changing the the using statement, you
   have to quit and restart Pure, as "clear" will not reload the modules.

*/

using system, stlvec, stlvec::algorithms;

//using hashdict, stlhmap;
using stlhmap, hashdict;

const repeats = 10000;
const lookups = 100;

/*** hashdict *********************************************************/

time_fast_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  // printf "fill     fast hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   fast hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = hashdict_member ss k $$ hashdict_get ss k $$ lookup ks;
end when 
  ss = hashdict [];
end;

time_plain_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  // printf "fill    plain hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup  plain hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = hashdict [];
end;

/*** stlhmap *********************************************************/

time_fast_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill      fast stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup    fast stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = stl::sh_member ss k $$ stl::sh_val ss k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_plain_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill     plain stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   plain stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

/*** Harness ********************************************************/

// returns a stlvec of shuffled words and a list of keys
get_words num_words filename = words, keys when
  fp = case fopen filename  "r" of 
    fopen _ _ = pointer 0;
    fp = fp;
  end;
  all_words = if null fp then
                puts "Can't open word file" $$ emptystlvec
              else
                stlvec $ drop 200 (split "\n" (fget fp));
  fclose fp;
  num_words = min (#all_words) num_words;
  num_keys = min num_words lookups; 
  stl::random_shuffle all_words;
  words = stlvec (all_words,stl::svbeg,num_words);
  allkeys = stlvec words;
  stl::random_shuffle allkeys;
  keys = members (allkeys,0,num_keys);
end;

main num_words = () when
  sep = "--------------------------------------";
  words, keys = get_words num_words "../examples/anagram_groups_dict.txt";
  num_words = min num_words (#words);
  printf "stlhmap vrs hashdict %d lookups, %d repeats\n" (lookups,repeats);
  puts sep;
  time_fast_stlhmap words keys;
  time_plain_stlhmap words keys;
  puts sep;
  time_fast_hashdict words keys;
  time_plain_hashdict words keys;
end;
    
/* Sample "with using stlhmap, hashdict" *******************************

stlhmap vrs hashdict 100 lookups, 10000 repeats
--------------------------------------
lookup    fast stlhmap:    560.0 msecs
lookup   plain stlhmap:   1550.0 msecs
--------------------------------------
lookup   fast hashdict:    560.0 msecs
lookup  plain hashdict:   2370.0 msecs
()

*/

/* Sample "with using hashdict, stlhmap" *******************************

stlhmap vrs hashdict 100 lookups, 10000 repeats
--------------------------------------
lookup    fast stlhmap:    560.0 msecs
lookup   plain stlhmap:   2830.0 msecs
--------------------------------------
lookup   fast hashdict:    560.0 msecs
lookup  plain hashdict:   1790.0 msecs
()

*/

/* Commment ************************************************************

hashdict and stlhmap have the same times. For plain (overloaded) function
calls, i.e., "member" and (!), the module that gets loaded first is faster.

*/