/* stlmmap.pure: Pure interface to C++ STL mulitmap
    
Copyright (c) 2012 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlmap, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlmap distribution package for details.

*/

using stlbase;
using "lib:stlmmap";

namespace stl;

/*** C++ Support ************************************************************/

private extern expr* stl_smm_type_tags();
private extern expr* stl_smm_make_empty(expr* kcmp, expr* vcmp, expr* veql,
                                        expr* default_val, int ko);
private extern void  stl_smm_delete(void* smp);
private extern void  stl_smm_iter_delete(void* smip);
private extern expr* stl_smm_container_info(expr* rng);
private extern int   stl_smm_size(expr* rng);
private extern int   stl_smm_count(expr* pxsmmp, expr* key);
private extern bool  stl_smm_empty(expr* rng);
private extern expr* stl_smm_find(expr* pxsmp, expr* key, int what);
private extern expr* stl_smm_copy_iter(expr* pxsmip);
private extern expr* stl_smm_begin(expr* pxsmp);
private extern expr* stl_smm_end(expr* pxsmp); 
private extern expr* stl_smm_iter_bounds(expr* pxsmp, expr* key, int what);
private extern expr* stl_smm_range_info(expr* rng);
private extern expr* stl_smm_move_iter(expr* pxsmp, int count);
private extern expr* stl_smm_iter_is_at(expr* pxsmip, int where);
private extern expr* stl_smm_iter_info(expr* pxsmip);
private extern expr* stl_smm_equal_iter(expr* pxsmp, expr* pxsmp);
private extern expr* stl_smm_get_at(expr* pxsmip, int what);
private extern expr* stl_smm_get_elm_at_inc(expr* pxsmip);
private extern expr* stl_smm_put_at(expr* pxsmip, expr* val);
private extern expr* stl_smm_insert_hinted(expr*map, expr* iter, expr* kv);
private extern expr* stl_smm_insert_elm(expr* map, expr* kv);
private extern int   stl_smm_insert(expr* map, expr* src);
private extern int   stl_smm_insert_stlvec(expr* map, void* svp);
private extern int   stl_smm_insert_stlmmap(expr* map, expr* rng);
private extern expr* stl_smm_replace(expr* pxsmmp, expr* k, expr* vs, bool strict);
private extern void  stl_smm_swap(expr* sac1, expr* sac2);
private extern int   stl_smm_erase(expr* sac, expr* trg);
private extern int   stl_smm_clear(expr* map);
private extern bool  stl_smm_equal(expr* rng1, expr* rng2);
private extern bool  stl_smm_less(expr* rng1, expr* rng2);
private extern bool  stl_smm_includes(expr* rng1, expr* rng2);
private extern expr* stl_smm_setop(int op, expr* rng1, expr* rng2);
private extern expr* stl_smm_make_vector(expr* rng);
private extern void* stl_smm_fill_stlvec(expr* rng, void* v);
private extern expr* stl_smm_listmap(expr* fun, expr* rng, int what);
private extern expr* stl_smm_listcatmap(expr* fun, expr* rng, int what);
private extern expr* stl_smm_foldl(expr* fun, expr* val, expr* rng);
private extern expr* stl_smm_foldl1(expr* fun, expr* rng);
private extern expr* stl_smm_foldr(expr* fun, expr* val, expr* rng);
private extern expr* stl_smm_foldr1(expr* fun, expr* rng);
private extern void  stl_smm_do(expr* fun, expr* rng);
private extern expr* stl_smm_bounds(expr* rng);
private extern expr* stl_smm_prev_key(expr* map, expr* key);
private extern expr* stl_smm_next_key(expr* map, expr* key);


extern bool  stl_smm_is_set(expr* rng) = smm_setp;
extern int   stl_smm_member(expr* pxsmmp, expr* key) = smm_member;
extern expr* stl_smm_get(expr* pxsmmp, expr* key) = smm_get;
             smm_put map key vals = stl_smm_replace map key vals 0;

let stlmmap_t, stlmmap_iter_t = stl::stl_smm_type_tags;

/*** Global Definitions ************************************************/

namespace ;

public emptystlmmap mkstlmmap emptystlmset mkstlmset member members erase
  replace replace_elm insert_elm; 

type stlmmap x::pointer = check_ptrtag stl::stlmmap_t x; 
type stlmset x::pointer = check_ptrtag stl::stlmmap_t x && stl::smm_setp x; 

type stlmmap_iter x = check_ptrtag stl::stlmmap_iter_t x;

type stlmmap_rng x::stlmmap | stlmmap_rng (x::stlmmap, _);
type stlmmap_rng (x::stlmmap_iter, y::stlmmap_iter);

namespace stl;

/*** Helpers **************************************************************/

private 
  smm_compatible smm_lower_bound_flg smm_upper_bound_flg smm_equal_range_flg
  smm_key_flg smm_val_flg smm_elm_flg smm_iter_flg smm_iter_dflt_flg
  smm_merge smm_union smm_difference smm_intersection smm_symmetric_difference; 

const smm_lower_bound_flg = 1;
const smm_upper_bound_flg = 2;
const smm_equal_range_flg = 3;

const smm_key_flg = 1;
const smm_val_flg = 2;
const smm_elm_flg = 3;
const smm_iter_flg = 4;
const smm_iter_dflt_flg = 5;

const smm_merge = 1;
const smm_union = 2;
const smm_difference = 3;
const smm_intersection = 4;
const smm_symmetric_difference = 5;

const smm_at_beginning = 1;
const smm_at_pastend = 2;

smm_compatible rng1::stlmmap_rng rng2 = 
  if smm_setp rng1 then smm_setp rng2 else ~smm_setp rng2;

/*** Iterators **********************************************************/

(::==) itr1::stlmmap_iter itr2::stlmmap_iter = stl_smm_equal_iter itr1 itr2;

iterator itr::stlmmap_iter = stl_smm_copy_iter itr;

begin smm::stlmmap = stl_smm_begin smm;

pastend smm::stlmmap = stl_smm_end smm;

find smm::stlmmap key = stl_smm_find smm key smm_iter_flg;

find_with_default smm::stlmmap key = stl_smm_find smm key smm_iter_dflt_flg; 

l_bound smm::stlmmap key = stl_smm_iter_bounds smm key smm_lower_bound_flg;

u_bound smm::stlmmap key = stl_smm_iter_bounds smm key smm_upper_bound_flg;

lu_bounds smm::stlmmap key = stl_smm_iter_bounds smm key smm_equal_range_flg;

beginp itr::stlmmap_iter = stl_smm_iter_is_at itr smm_at_beginning;

endp itr::stlmmap_iter = stl_smm_iter_is_at itr smm_at_pastend;

get_info itr::stlmmap_iter = stl_smm_iter_info itr;

get_elm itr::stlmmap_iter = stl_smm_get_at itr smm_elm_flg;

get_key itr::stlmmap_iter = stl_smm_get_at itr smm_key_flg;

get_val itr::stlmmap_iter = stl_smm_get_at itr smm_val_flg;

put_val itr::stlmmap_iter val = stl_smm_put_at itr val;

inc itr::stlmmap_iter = stl_smm_move_iter itr 1;

dec itr::stlmmap_iter = stl_smm_move_iter itr (-1);

move itr::stlmmap_iter n::int = stl_smm_move_iter itr n;

insert_elm smm::stlmmap (elm, p::stlmmap_iter) = stl_smm_insert_hinted smm p elm;

insert_elm smm::stlmmap elm = stl_smm_insert_elm smm elm;

/***  Constructors *********************************************************/

::emptystlmmap                    = stl_smm_make_empty (<) (<) (==) [] 0;

::mkstlmmap (kcmp,dflt,vcmp,veql) = stl_smm_make_empty kcmp vcmp veql dflt 0;
::mkstlmmap (kcmp,dflt,vcmp)      = stl_smm_make_empty kcmp vcmp (==) dflt 0;
::mkstlmmap (kcmp,dflt)           = stl_smm_make_empty kcmp (<) (==) dflt  0;
::mkstlmmap kcmp                  = stl_smm_make_empty kcmp (<) (==) [] 0;

::stlmmap xs = smm when
  smm = ::emptystlmmap;
  stl_smm_insert smm xs;
end if listp xs || matrixp xs;

::stlmmap (STLVEC svp) = smm when
  smm = ::emptystlmmap;
  stl_smm_insert_stlvec smm svp;
end;

::stlmmap rng::stlmmap_rng = smm when
  _,params = stl_smm_container_info rng;
  smm = mkstlmmap params;
  stl_smm_insert_stlmmap smm rng;
end if ~smm_setp rng;

::emptystlmset = stl_smm_make_empty (<) (<) (==) [] 1;

::mkstlmset kcmp = stl_smm_make_empty kcmp (<) (==) [] 1;

::stlmset xs = ss when
  ss = ::emptystlmset;
  stl_smm_insert ss xs;
end if listp xs || matrixp xs;

::stlmset (STLVEC svp) = ss when
  ss = ::emptystlmset;
  stl_smm_insert_stlvec ss svp;
end;

::stlmset rng::stlmmap_rng = ss when
  _,kc,_ = stl_smm_container_info rng;
  ss = mkstlmset kc;
  stl_smm_insert_stlmmap ss rng;
end if smm_setp rng;

/*** Info ***************************************************************/

container_info rng::stlmmap_rng = stl_smm_container_info rng;

(::#) smm::stlmmap = stl_smm_size smm;

empty smm::stlmmap = stl_smm_empty smm;

count smm::stlmmap key = stl_smm_count smm key;

bounds rng::stlmmap_rng = stl_smm_bounds rng;

range_info rng::stlmmap_rng = stl_smm_range_info rng;

distance rng::stlmmap_rng = stl_smm_size rng;

/*** Conversions ********************************************************/

::stream rng::stlmmap_rng = gen first with 
  gen i = if stl_smm_equal_iter i last then [] 
          else stl_smm_get_elm_at_inc i : (gen i &);  
end if valid when 
  valid,m,b,last = stl_smm_range_info rng;
  first = stl_smm_copy_iter b;
end;

::members rng::stlmmap_rng = stl_smm_listmap 0 rng smm_elm_flg; 

::keys rng::stlmmap_rng = stl_smm_listmap 0 rng smm_key_flg;// if ~smm_setp rng;

::vals rng::stlmmap_rng = stl_smm_listmap 0 rng smm_val_flg;// if ~smm_setp rng;

vector rng::stlmmap_rng = stl_smm_make_vector rng;

::stlvec rng::stlmmap_rng = sv if ok when
  sv = emptystlvec;
  ok = case sv of  
    STLVEC v = stl_smm_fill_stlvec rng v $$ 1;
    _ = 0;
  end;
end;

/*** Modification *****************************************************/

::insert smm::stlmmap (STLVEC svp) = stl_smm_insert_stlvec smm svp;

::insert smm::stlmmap rng::stlmmap_rng = 
  stl_smm_insert_stlmmap smm rng if smm_compatible smm rng;

::insert smm::stlmmap src = stl_smm_insert smm src;

//insert_or_replace -- N/A


//insert_or_replace -- N/A


//insert_or_replace -- N/A


::replace smm::stlmmap key vals::list = stl_smm_replace smm key vals 1 $$ vals;

//replace_elm_with -- N/A

::erase smm::stlmmap = stl_smm_clear smm;

::erase (smm::stlmmap,itr1::stlmmap_iter, itr2::stlmmap_iter) = 
  stl_smm_erase smm (itr1,itr2);

::erase (smm::stlmmap,itr::stlmmap_iter) = stl_smm_erase smm itr;

::erase (smm::stlmmap,key1,key2) = stl_smm_erase smm (smm,key1,key2);

::erase (smm::stlmmap,key) = stl_smm_erase smm (smm,key);

swap smm1::stlmmap smm2::stlmmap = stl_smm_swap smm1 smm2 
  if smm_compatible smm1 smm2;

/*** Equality and Lexicographical Comparison ***************************/

map_equal rng1::stlmmap_rng rng2::stlmmap_rng = stl_smm_equal rng1 rng2
  if smm_compatible rng1 rng2;

(::==) smm1::stlmmap smm2::stlmmap = stl_smm_equal smm1 smm2
  if smm_compatible smm1 smm2;

(::~=) smm1::stlmmap smm2::stlmmap = ~stl_smm_equal smm1 smm2
  if smm_compatible smm1 smm2;

(::<) rng1::stlmmap_rng rng2::stlmmap_rng = stl_smm_less rng1 rng2
  if smm_compatible rng1 rng2;

(::<=) rng1::stlmmap_rng rng2::stlmmap_rng = ~stl_smm_less rng2 rng1
  if smm_compatible rng1 rng2;

(::>) rng1::stlmmap_rng rng2::stlmmap_rng = stl_smm_less rng2 rng1
  if smm_compatible rng1 rng2;

(::>=) rng1::stlmmap_rng rng2::stlmmap_rng = ~stl_smm_less rng1 rng2
  if smm_compatible rng1 rng2;

/** STL Set Algorithms ***************************************************/

map_merge rng1::stlmmap_rng rng2::stlmmap_rng = 
  stl_smm_setop smm_merge rng1 rng2 if smm_compatible rng1 rng2;

map_union rng1::stlmmap_rng rng2::stlmmap_rng = 
  stl_smm_setop smm_union rng1 rng2 if smm_compatible rng1 rng2;

map_difference rng1::stlmmap_rng rng2::stlmmap_rng = 
  stl_smm_setop smm_difference rng1 rng2 if smm_compatible rng1 rng2;

map_intersection rng1::stlmmap_rng rng2::stlmmap_rng = 
  stl_smm_setop smm_intersection rng1 rng2 if smm_compatible rng1 rng2;

map_symmetric_difference rng1::stlmmap_rng rng2::stlmmap_rng = 
  stl_smm_setop smm_symmetric_difference rng1 rng2 if smm_compatible rng1 rng2;

map_includes rng1::stlmmap_rng rng2::stlmmap_rng =
 stl_smm_includes rng1 rng2 if smm_compatible rng1 rng2;

/*** Mapping and Folding ********************************************/

::map f rng::stlmmap_rng = stl_smm_listmap f rng smm_elm_flg;

::foldl f x rng::stlmmap_rng = stl_smm_foldl f x rng;

::foldl1 f rng::stlmmap_rng = stl_smm_foldl1 f rng;

::foldr f x rng::stlmmap_rng = stl_smm_foldr f x rng;

::foldr1 f rng::stlmmap_rng = stl_smm_foldr1 f rng;

::do f rng::stlmmap_rng = stl_smm_do f rng;

::filter p rng::stlmmap_rng = stl_smm_foldr f [] rng with
  f x xs = res when
    res = case p x of
      1 = x:xs;
      0 = xs;
      y = throw failed_cond;
    end;
  end;
end;

::listmap f rng::stlmmap_rng = stl_smm_listmap f rng smm_elm_flg;

::catmap f rng::stlmmap_rng = stl_smm_listcatmap f rng smm_elm_flg;

::rowmap f rng::stlmmap_rng = rowcat (stl_smm_listmap f rng smm_elm_flg);

::rowcatmap f rng::stlmmap_rng = rowcat (stl_smm_listmap f rng smm_elm_flg);

::colmap f rng::stlmmap_rng = colcat (stl_smm_listmap f rng smm_elm_flg);

::colcatmap f rng::stlmmap_rng = colcat (stl_smm_listmap f rng smm_elm_flg);

/*** Accessing Elements by Key ****************************************/

(::!) smm::stlmmap key = stl_smm_listmap 0 (smm,key) smm_val_flg;

::member smm::stlmmap key = smm_member smm key;

next_key smm::stlmmap key = stl_smm_next_key smm key;

prev_key smm::stlmmap key = stl_smm_prev_key smm key;

::first smm::stlmmap = key=>vals when
  key = stl_smm_get_at (stl_smm_begin smm) smm_key_flg;
  vals = stl_smm_listmap 0 (smm,key) smm_val_flg;
end;

::last smm::stlmmap = key=>vals when
  i = stl_smm_end smm;
  key = stl_smm_get_at (stl_smm_move_iter i (-1)) smm_key_flg;
  vals = stl_smm_listmap 0 (smm,key) smm_val_flg;
end;

