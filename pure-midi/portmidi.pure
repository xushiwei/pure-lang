/* portmidi.h: */
using "lib:libportmidi";

namespace Pm;
const Pm::DEFAULT_SYSEX_BUFFER_SIZE = 1024;
const Pm::HDRLENGTH = 50;
const Pm::NoDevice = -1;
const Pm::FILT_ACTIVE = 1;
const Pm::FILT_SYSEX = 1;
const Pm::FILT_CLOCK = 1;
const Pm::FILT_PLAY = 1;
const Pm::FILT_TICK = 1;
const Pm::FILT_FD = 1;
const Pm::FILT_UNDEFINED = 1;
const Pm::FILT_RESET = 1;
const Pm::FILT_NOTE = 1;
const Pm::FILT_CHANNEL_AFTERTOUCH = 1;
const Pm::FILT_POLY_AFTERTOUCH = 1;
const Pm::FILT_PROGRAM = 1;
const Pm::FILT_CONTROL = 1;
const Pm::FILT_PITCHBEND = 1;
const Pm::FILT_MTC = 1;
const Pm::FILT_SONG_POSITION = 1;
const Pm::FILT_SONG_SELECT = 1;
const Pm::FILT_TUNE = 1;
const Pm::NoError = 0;
const Pm::NoData = 0;
const Pm::GotData = 1;
const Pm::HostError = -10000;
const Pm::InvalidDeviceId = -9999;
const Pm::InsufficientMemory = -9998;
const Pm::BufferTooSmall = -9997;
const Pm::BufferOverflow = -9996;
const Pm::BadPtr = -9995;
const Pm::BadData = -9994;
const Pm::InternalError = -9993;
const Pm::BufferMaxSize = -9992;
extern int Pm_Initialize() = Initialize;
extern int Pm_Terminate() = Terminate;
extern int Pm_HasHostError(void*) = HasHostError;
extern char* Pm_GetErrorText(int) = GetErrorText;
extern void Pm_GetHostErrorText(char*, int) = GetHostErrorText;
extern int Pm_CountDevices() = CountDevices;
extern int Pm_GetDefaultInputDeviceID() = GetDefaultInputDeviceID;
extern int Pm_GetDefaultOutputDeviceID() = GetDefaultOutputDeviceID;
extern PmDeviceInfo* Pm_GetDeviceInfo(int) = GetDeviceInfo;
extern int Pm_OpenInput(void**, int, void*, int, void*, void*) = OpenInput;
extern int Pm_OpenOutput(void**, int, void*, int, void*, void*, int) = OpenOutput;
extern int Pm_SetFilter(void*, int) = SetFilter;
extern int Pm_SetChannelMask(void*, int) = SetChannelMask;
extern int Pm_Abort(void*) = Abort;
extern int Pm_Close(void*) = Close;
extern int Pm_Synchronize(void*) = Synchronize;
extern int Pm_Read(void*, PmEvent*, int) = Read;
extern int Pm_Poll(void*) = Poll;
extern int Pm_Write(void*, PmEvent*, int) = Write;
extern int Pm_WriteShort(void*, int, int) = WriteShort;
extern int Pm_WriteSysEx(void*, int, void*) = WriteSysEx;
/* porttime.h: */

namespace Pt;
const Pt::NoError = 0;
const Pt::HostError = -10000;
const Pt::AlreadyStarted = -9999;
const Pt::AlreadyStopped = -9998;
const Pt::InsufficientMemory = -9997;
extern int Pt_Start(int, void*, void*) = Start;
extern int Pt_Stop() = Stop;
extern int Pt_Started() = Started;
extern int Pt_Time() = Time;
extern void Pt_Sleep(int) = Sleep;
