
/* Basic MIDI file interface for Pure. Copyright (c) 2010 by Albert Graef.
   The midifile library is part of David G. Slomin's midi utilities, see
   http://public.sreal.com:8000/~div/midi-utilities/, Copyright (c) 2003-2006
   by David G. Slomin, all rights reserved. The entire package is released
   under the 3-clause BSD license, see the COPYING file included in the
   distribution for details. */

using "lib:midifile";

namespace midifile;

/* Interface operations. These are implemented in mf.c. They let you read type
   0, 1 or 2 standard MIDI files into memory and retrieve its tracks as lists
   of MIDI events (timestamp,message pairs) in the same format as understood
   by the midi::readmsg and midi::writemsg routines. Conversely, new MIDI
   files can be constructed from the Pure representation of their tracks and
   written to a disk file.

   - midifile::new is used to create a new MIDI file object in memory, while
     midifile::load loads an existing MIDI file from disk. (Both operations
     return cooked pointers which free themselves using midifile::free when
     they are garbage-collected.)

   - midifile::save saves a MIDI file object in memory to a standard MIDI file
     on disk.

   - midifile::free destroys a MIDI file object. (This also happens
     automatically when the object is garbage-collected.)

   - midifile::info returns information about a MIDI file in the format
     (format,division,resolution,number), where:

     - format is the type of MIDI file (0, 1 or 2).

     - division is the type of timestamps. This can be 0 to denote musical
       time, or one of 24, 25, 29 and 30 to denote the corresponding SMPTE
       standard a.k.a. number of "frames" per second.

     - resolution is the number of subdivisions. If division = 0, then this
       denotes the number pules per quarter note = ppqn, otherwise it denotes
       the number of ticks per frame. Hence a division,resolution pair of
       0,960 means that 960 ticks are a quarter note, whereas 25,40 indicates
       that each tick is a millisecond.

     - number is the number of tracks in the file.

   - midifile::get_track and midifile::get_tracks are used to retrieve a
     single track, or a list of all tracks from the MIDI file, respectively.

   - midifile::put_track and midifile::put_tracks are used to add a track or a
     list of tracks to the MIDI file, respectively.

   Note that if you create a new MIDI file object with midifile::new and/or
   modify a MIDI file with midifile::put_track and midifile::put_tracks, this
   only affects the in-memory representation. You still have to write the file
   to disk using midifile::save to make the changes permanent. */

extern expr* mf_new(int format, int division, int resolution) = new;
extern expr* mf_load(char* filename) = load;
extern bool mf_save(expr* mf, char* filename) = save;
extern bool mf_free(expr* mf) = free;
extern expr* mf_info(expr* mf) = info;
extern expr* mf_get_track(expr* mf, int number) = get_track;
extern expr* mf_get_tracks(expr* mf) = get_tracks;
extern bool mf_put_track(expr* mf, expr* track) = put_track;
extern bool mf_put_tracks(expr* mf, expr* tracks) = put_tracks;
