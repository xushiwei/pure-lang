
=========================================
Gnumeric/Pure: A Pure Plugin for Gnumeric
=========================================

:Author: Albert Graef
:Contact: Dr.Graef@t-online.de
:Copyright: Copyright (c) 2009 by Albert Graef. Distributed under the GNU
  Public License V3, see COPYING for details.

This package provides a Pure plugin loader and a sample script for use with
Gnumeric_. These work pretty much like the Perl and Python plugin loaders
which are distributed with Gnumeric. Pure_ is a functional programming
language based on the term rewriting calculus with good support for math
operations, so it makes for a nice Gnumeric companion.

.. _Gnumeric: http://projects.gnome.org/gnumeric/
.. _Pure: http://pure-lang.googlecode.com/

Installation
============

Obviously, you need to have both Pure and Gnumeric installed. Unfortunately,
building the plugin is a bit more involved than usual, because typical
Gnumeric installations lack some headers needed to compile Gnumeric plugins.

See the beginning of the Makefile for detailed instructions. Briefly, you'll
have to find the gnumeric-config.h and gnumeric-features.h files from the
Gnumeric sources. Either place these into the directory with the gnumeric-pure
sources, or edit the ``INCLUDE`` variable at the beginning of the Makefile so
that gcc finds these headers.

Then run ``make``. You might have to adjust the settings at the beginning of
the Makefile to make this work. If you're lucky and the compile goes through,
you should now have a pure_loader.so file in the pure-loader subdirectory. You
can install the plugin and related stuff with ``sudo make install`` in the
global Gnumeric plugin directory, or if you prefer to install into the
Gnumeric's user plugin directory then run ``make install-local`` instead.
We recommend the latter since it lets you adjust pure_func.pure for your
purposes more easily. Optionally, you might also want to copy the
gnumeric-pure.html file to your Pure library directory so that you can read it
with the ``help`` command of the Pure interpreter or in Emacs Pure mode.

Typically, ``make install`` and ``make install-local`` will install the
plugins into the following directories by default:

* System-wide installations go into /usr/local/gnumeric/1.9.x/plugins or
  similar, depending on where Gnumeric is installed.

* User-specific installations go into ~/.gnumeric/1.9.x/plugins.

The Makefile tries to guess the installation path and version number of
Gnumeric on its own. If it guesses wrong, you can change these using the
Makefile variables ``prefix`` and ``gnmversion``, respectively. For instance::

  $ make prefix=/usr gnmversion=1.9.12

If ``make install`` doesn't work for some reason, you can also just copy the
pure-func and pure-loader directories manually to your Gnumeric plugin
directory.

Usage
=====

Once Gnumeric/Pure has been properly installed, you should see it in
Gnumeric's Tools/Plug-ins dialog. As with the Perl and Python plugins, there
are actually two entries, one labelled ``Pure functions`` and the other one
labelled ``Pure plugin loader``. You need to enable both.

Now you should be ready to join the fun. Click on a cell and invoke the
``f(x)`` dialog. The Pure functions available for use are shown in the
``Pure`` category. E.g., click on ``pure_hello``. Now the Pure interpreter
will be loaded and the function description displayed. Click ``Insert`` and
then ``Ok``. You should now be able to read a friendly greeting returned by
the ``pure_hello`` function.

Please note that the Pure functions in the pure_func.pure module (in the
pure-func subdirectory) are just simple (and rather useless) examples. Well,
actually there are some useful examples, too, namely ``pure_eval`` which lets
you evaluate any Pure expression, and ``pure_echo`` which is useful for
debugging purposes.

A little example spreadsheet showing the predefined functions in action can be
found in pure-examples.gnumeric in the Pure/Gnumeric sources.

After playing around with pure_func.pure for a while, of course you will want
to write your own functions, that's what this plugin is about after all! For
the beginning, you can just add your definitions to pure_func.pure.  See the
comments and the examples in pure_func.pure for guidance. Note that you need
to add the names of your new functions to the plugin.xml file, so that
Gnumeric knows about them. Once you understand how it works, you can also
create your own plugin directories with your personal collections of
Gnumeric/Pure functions, using the pure-func directory as a template.

The marshalling of types between Gnumeric and Pure is pretty straightforward;
basically, Pure numbers, strings and matrices map to Gnumeric numbers, strings
and arrays, respectively. The following table summarizes the available
conversions:

===============================    ===============================
Pure                               Gnumeric
===============================    ===============================
``()``                             empty
``4711``, ``4711L``, ``4711.0``    scalar (number)
``"Hello world"``                  string
``[1,2,3]``                        array
``{1,2,3;4,5,6}``                  array (or cell range)
===============================    ===============================

Note that on input, cell ranges are always passed as matrices to Pure
functions (not the cell references themselves). Conversely, both matrices and
lists become Gnumeric arrays on output. The empty tuple can be used to denote
empty Gnumeric values.

The pure_func.pure script contains some code showing how to write functions
which can deal with any numbers of scalars, arrays or ranges, see the
``ranges`` function and the ``pure_sum`` and ``pure_sums`` examples in the
script for details.

Last but not least, it is also possible to call Gnumeric functions from
Pure. See ``gnm_bitand`` in pure_func.pure for an example. More comprehensive
facilities to directly work with Gnumeric spreadsheets may be added in the
future.
