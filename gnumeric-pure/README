
=========================================
Gnumeric/Pure: A Pure Plugin for Gnumeric
=========================================

:Author: Albert Gr√§f
:Contact: Dr.Graef@t-online.de
:Copyright: Copyright (c) 2009. This software is distributed under the GNU
  Public License V2 or later, see the COPYING file for details.

This package provides a Pure plugin loader and a sample script for use with
Gnumeric_. These work pretty much like the Perl and Python plugin loaders
which are distributed with Gnumeric. Pure_ is a functional programming
language based on the term rewriting calculus with good support for math
operations, so it makes for a nice Gnumeric companion. Also, Gnumeric/Pure
brings some features to the table which aren't found in other Gnumeric
scripting plugins, in particular Pure's lazy lists a.k.a. streams of data
which can easily be turned into asychronous data sources computed in the
background.

.. _Gnumeric: http://projects.gnome.org/gnumeric/
.. _Pure: http://pure-lang.googlecode.com/

.. contents::

Installation
============

Obviously, you need to have both Pure and Gnumeric installed. Pure 0.35 and
Gnumeric 0.19.12 are known to work, older versions probably work as well if
you fiddle a bit with the Makefile and/or the sources.

See the beginning of the Makefile for detailed instructions. Briefly, you'll
have to grab gnumeric-features.h from the Gnumeric sources and either place it
into the directory with the gnumeric-pure sources, or edit the ``INCLUDE``
variable at the beginning of the Makefile so that gcc finds this header.

Then run ``make``. You might have to adjust the settings at the beginning of
the Makefile to make this work. If you're lucky and the compile goes through,
you should now have a pure_loader.so file in the pure-loader subdirectory. You
can install the plugin and related stuff with ``sudo make install`` in the
global Gnumeric plugin directory, or if you prefer to install it into your
personal plugin directory then run ``make install-local`` instead.  We
recommend the latter since it lets you adjust pure_func.pure for your purposes
more easily. Optionally, you might also want to copy the gnumeric-pure.html
file to your Pure library directory so that you can read it with the ``help``
command of the Pure interpreter or in Emacs Pure mode.

Typically, ``make install`` and ``make install-local`` will install the
plugins into the following directories by default:

* System-wide installations go into /usr/local/gnumeric/1.9.x/plugins or
  similar, depending on where Gnumeric is installed.

* User-specific installations go into ~/.gnumeric/1.9.x/plugins.

The Makefile tries to guess the installation path and version number of
Gnumeric on its own. If it guesses wrong, you can change these using the
Makefile variables ``prefix`` and ``gnmversion``, respectively. For instance::

  $ make prefix=/usr gnmversion=1.9.12

If ``make install`` doesn't work for some reason, you can also just copy the
pure-func and pure-loader directories manually to your Gnumeric plugin
directory.

Setup
-----

Once Gnumeric/Pure has been properly installed, you should see it in
Gnumeric's ``Tools``/``Plug-ins`` dialog. As with the Perl and Python plugins,
there are actually two entries, one labelled ``Pure functions`` and the other
one labelled ``Pure plugin loader``. You need to enable both before you can
start using Pure functions in your Gnumeric spreadsheets.

Gnumeric doesn't provide much in the way of GUI customization options right
now, but at least it's possible for plugins to install and configure
additional menu and toolbar options. The Pure plugin loader adds three
additional options to the ``Tools`` menu which allow you to stop asynchronous
data sources, reload Pure scripts and edit them. After installation, the
definitions of these items can be found in the pure-loader/pure-ui.xml file in
your Gnumeric plugin directory. Have a look at this file and edit is as
desired. E.g., if you want to put the Pure-related options into a submenu and
enable toolbar buttons for these options, then your pure-ui.xml file should
look as follows::

  <ui>
    <menubar>
      <menu name="Tools" action="MenuTools">
        <separator/>
        <menu name="Pure" action="PureMenu">
          <menuitem action="PureStop"/>
          <menuitem action="PureReload"/>
          <menuitem action="PureEdit"/>
        </menu>
      </menu>
    </menubar>
    <toolbar name="StandardToolbar">
      <separator/>
      <toolitem action="PureStop"/>
      <toolitem action="PureReload"/>
      <toolitem action="PureEdit"/>
    </toolbar>
  </ui>

Basic Usage
===========

With Pure/Gnumeric installed and enabled, you should be ready to join the fun
now. Start up Gnumeric, click on a cell and invoke the ``f(x)`` dialog. The
Pure functions available for use are shown in the ``Pure`` category. E.g.,
click on ``pure_hello``. Now the Pure interpreter will be loaded and the
function description displayed. Click ``Insert`` and then ``Ok``. You should
now be able to read the friendly greeting returned by the ``pure_hello``
function.

Of course, you can also enter the function call directly as a formula into a
cell as usual. Click on a cell, then enter the following::

  =pure_hello(getenv("USER"))

The greeting should now be displayed with your login name in it.

Play around a bit with the other Pure functions. These functions are nothing
special; they are just ordinary Pure functions which are defined by the
pure_func.pure script in the pure-func subdirectory of your Gnumeric plugin
directory. You can have a look at them by invoking the ``Edit Pure Script``
option which gets added to the ``Tools``/``Pure`` menu once the Pure plugin
loader is enabled. (This will invoke the emacs editor by default, or the
editor named by the ``EDITOR`` environment variable. You can set this
environment variable in your shell's startup files.) The ``Tools``/``Pure``
menu contains a second Pure-related option, ``Reload Pure Scripts`` which can
be used to quickly reload all loaded Pure scripts after edits; more about that
later.

Please note that most of the functions in pure_func.pure are rather useless,
they are only provided for illustrative purposes. However, there are some
useful examples in there, too, in particular:

* ``pure_eval`` lets you evaluate any Pure expression, given as a string in
  its first argument. E.g., try something like ``=pure_eval("foldl (+) 0
  (1..100)")``. Additional parameters are accessible as ``x!0``, ``x!1``,
  etc. For instance: ``=pure_eval("x!0+x!1",A1,B1)``.

* ``pure_echo`` just displays its arguments as a string in Pure syntax, as the
  interpreter sees them. This is useful for debugging purposes. E.g.,
  ``=pure_echo(A1:B10)`` shows the given range as a Pure matrix.

A little example spreadsheet showing the predefined functions in action can be
found in pure-examples.gnumeric in the Gnumeric/Pure sources.

Defining Your Own Functions
===========================

After playing around with pure_func.pure for a while, of course you will want
to write your own functions, that's what this plugin is about after all! For
the beginning, you can just add your definitions to the existing
pure_func.pure script. Use the ``Edit Pure Script`` option to edit the script
in your favourite editor, and see the comments and the examples in the script
for guidance. (This document assumes that you're already familiar with Pure,
if not then you should consult the available Pure documentation.)

Note that if you delete or rename any functions in this file, or add new ones
to it, then you also have to change the list of function names in the
plugin.xml file in the same directory accordingly. This file tells Gnumeric
which functions are provided by the script. Unfortunately, you'll have to
restart Gnumeric to make changes in this file take effect. If you only change
the definition of an existing function then it's usually sufficient to just
invoke ``Reload Pure Scripts`` afterwards, and maybe run ``Recalculate``
(``F9``) to recompute the spreadsheet. However, if you also made changes to
the function descriptions provided via ``gnm_info`` (see the following section
for explanation), then you'll also have to restart Gnumeric so that it picks
up the changes.

Once you understand how this works, you can also create your own plugin
directories with your personal collections of Gnumeric/Pure functions, using
the pure-func directory as a template. For instance, assume that your
Gnumeric/Pure stuff is in a script named gnumeric.pure in the
$HOME/pure/gnumeric directory, where $HOME is the name of your home
directory. The plugin.xml file in that directory might look as follows::

  <?xml version="1.0" encoding="UTF-8"?>
  <plugin id="Gnumeric_MyPureFunc">
    <information>
      <name>My Pure functions</name>
      <description>My Pure functions for use in Gnumeric.</description>
      <require_explicit_enabling/>
    </information>
    <loader type="Gnumeric_PureLoader:pure">
      <attribute value="gnumeric" name="module_name"/>
    </loader>
    <services>
      <service type="function_group" id="my_pure_func">
        <category>Pure</category>
        <functions>
          <function name="pure_hello"/>
	  <!-- My Pure functions go here... -->
        </functions>
      </service>
    </services>
  </plugin>

The following steps are needed to tell Gnumeric about your new Pure plugin:

* Open the ``Directories`` tab in the ``Tools``/``Plug-ins`` dialog and add
  the $HOME/pure directory to the plugin search path. You might have to
  restart Gnumeric after that.

* The plugin can now be enabled in the ``Tools``/``Plug-ins`` dialog under
  ``My Pure functions``.

The Pure loader can also load multiple Pure plugins, after creating the
corresponding plugin directories and scripts just enable the ones that you
want in ``Tools``/``Plug-ins``. All scripts are loaded in the same Pure
interpreter (and thus are treated like one big script) so that they can
communicate with each other if necessary.

Gnumeric/Pure Interface
=======================

By default, when a Pure function is called from Gnumeric, it receives its
arguments in a list. However, it is possible to tell Gnumeric about the
expected arguments of the function and also specify a help text to be
displayed in the ``f(x)`` dialog. To describe a given function to Gnumeric,
all you have to do is to define ``gnm_info "<name>"`` (where ``<name>`` is the
name of the function) as either:

* A pair of strings. The first string gives the parameter types (e.g., ``"f"``
  for a single float parameter), the second one is a list of parameter names
  (e.g., ``"x,y,z"``). Optional parameters can be indicated using ``|``, as in
  ``"ff|s"`` (two fixed float arguments, optionally followed by a string).

* Just a help string, in the format indicated below.

* Both parameter types/names and help string, as a triple.

Here's the list of valid parameter types, straight from the
writing-functions.sgml file in the Gnumeric sources::

    b : boolean		identical to f
    f : float 		no errors, string conversion attempted
    s : string		no errors, blanks accepted and passed as empty
    S : scalar		any scalar non-error, blanks passed as empty
    E : scalar		any scalar non blank value
    B : scalar		any scalar even a blank

    r : cell range	content is _NOT_ guaranteed to have been evaluated yet
    A : area		array, range, (range as above), or scalar
    a : array
    ? : anything

For instance, here's a sample description for a binary function which also
includes a help text::

  gnm_info "pure_max" = "ff","x,y","@FUNCTION=pure_max\n\
  @SYNTAX=pure_max(x,y)\n\
  @DESCRIPTION=Computes the maximum of two numbers @x and @y.\n";

Since this function only has fixed arguments, it will be called in curried
form, i.e., as ``pure_max x y``. For instance, the actual definition of
``pure_max`` may look as follows::

  pure_max x y = max x y;

Conversely, if no parameter types and names are given, then the function
accepts any number of parameters of any type, which are passed as a list. For
instance::

  gnm_info "pure_sum" = "@FUNCTION=pure_sum\n\
  @SYNTAX=pure_sum(...)\n\
  @DESCRIPTION=Computes the sum of a collection of numbers.\n";

Here the function will be called as ``pure_sum [x1,x2,...]``, where ``x1``,
``x2``, etc. are the arguments the function is invoked with. Note that in this
case there may be any number of arguments (including zero) of any type, so
your function definition must be prepared to handle this. If a function does
not have a ``gnm_info`` description at all then it is treated in the same
fashion.

A function may also have both fixed and optional arguments::

  gnm_info "foo" = "ff|ff","x,y,z,t";

In this case the fixed arguments are passed in curried form as usual, while
the optional parameters are passed as a list. That is, ``foo`` may be called
as ``foo x y []``, ``foo x y [z]`` or ``foo x y [z,t]``, depending on whether
it is invoked with two, three or four arguments.

The marshalling of types between Gnumeric and Pure is pretty straightforward;
basically, Pure numbers, strings and matrices map to Gnumeric numbers, strings
and arrays, respectively. The following table summarizes the available
conversions:

===============================    ===============================
Pure                               Gnumeric
===============================    ===============================
``gnm_error msg``                  error
``()``                             empty
``4711``, ``4711L``, ``4711.0``    scalar (number)
``"Hello world"``                  string
``[1,2,3]``                        array
``{1,2,3;4,5,6}``                  array (or cell range)
===============================    ===============================

These conversions work both ways. Note that on input, cell ranges are always
passed as matrices to Pure functions (not the cell references
themselves). Conversely, both matrices and lists become Gnumeric arrays on
output, so you'll want to enter this as an array function
(``Ctrl-Shift-Enter`` in Gnumeric). The empty tuple can be used to denote
empty cell values, but note that empty Gnumeric values may become zeros when
passed as float or array arguments.

The pure_func.pure script contains some examples showing how to write
functions which can deal with any numbers of scalars, arrays or ranges, see
the ``ranges`` function and the ``pure_sum`` and ``pure_sums`` examples in the
script for details.

Last but not least, it is also possible to call Gnumeric functions from Pure
using the ``pure_gnmcall`` function which takes the name of the function
(a string) as its first, and the parameters as the second (list) argument. For
instance::

  gnm_info "gnm_bitand" = "ff", "x,y";
  gnm_bitand x y = pure_gnmcall "bitand" [x,y];

Note that ``pure_gnmcall`` is an external C function provided by the Pure
loader. If you want to use it, it must be declared in your Pure script as
follows::

  extern expr* pure_gnmcall(char* name, expr* args);

Asynchronous Data Sources
=========================

Gnumeric/Pure makes it easy to set up asynchronous data sources which draw
values from a Pure computation executed in a background process. This facility
is useful to carry out lengthy computations in the background while you can
continue to work with your spreadsheet. It also allows you to process incoming
data and asynchronous events from special devices (MIDI, sensors, stock
tickers, etc.) in (soft) realtime.

To do this, you simply pass an expression to the ``pure_datasource``
function. This is another external C function provided by the Pure loader,
which is declared in your Pure scripts as follows::

  extern expr* pure_datasource(expr* x);

The argument to ``pure_datasource`` is typically a thunk or stream (lazy list)
which is to be evaluated in the background. The call to ``pure_datasource``
initially returns a ``#N/A`` value (``gnm_error "#N/A"``) while the
computation is still in progress. The cell containing the data source gets
updated automatically as soon as the value becomes available, with
``pure_datasource`` now returning the computed value. E.g., here's how you
would wrap up a lengthy calculation as a thunk and submit it to
``pure_datasource`` which carries out the computation as a background task::

  gnm_info "pure_calc" = "f", "x";
  pure_calc x = pure_datasource (lengthy_calculation x&);
  lengthy_calculation x = sleep 3 $$ foldl (*) 1.0 (1.0..x);

Note that when the arguments of a call involving ``pure_datasource`` change
(because they depend on other cells which may have been updated), the
computation is automatically restarted with the new parameters. Also, a cell
value may draw values from as many independent data sources as you want, so
the definition of a cell may involve multiple ``pure_datasource`` calls.

In the case of a (lazy) list, ``pure_datasource`` returns a new value each
time the next list element becomes available. For instance, the following
function uses an infinite stream to count off the seconds starting from a
given initial value::

  gnm_info "pure_counter" = "f", "start";
  pure_counter x = pure_datasource [sleep (i>x) $$ i | i = x..inf];

Note that in this case the cell containing the call will keep changing as long
as new values are produced (i.e., forever in the above example). The ``Stop
Data Sources`` option in the ``Tools``/``Pure`` menu can be used to stop all
active data sources. ``Reload Pure Scripts`` also does this. You can then
restart the data sources at any time by using ``Recalculate`` (``F9``) to
recompute the spreadsheet.

Also note that because of the special way that ``pure_datasource`` handles
list values, you cannot return a list directly as the result of
``pure_datasource``; instead, you'll have to wrap it up as a singleton list,
such as ``pure_data_source [[lengthy_calculation x,lengthy_calculation y]&]``.
