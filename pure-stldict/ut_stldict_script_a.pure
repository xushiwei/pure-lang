//-- --comment c_off --resume --verbose on
/* ut_stldict_script_a.pure -- examples for basic ops on stldict.

   This is a Pure script with a special format that makes it possible for the
   check_eval.pure script to evaluate single lines of Pure code and compare
   the result to an expected result.
  
     $> pure -q -w
      > run ut_stldict.pure 
      > eval_file "ut_stldict_script_b.pure";
    
   eval_file will print and evaluate each line beginning with "> " and check
   the result against next line beginning with "- ", if any.

   See check_eval.pure for more details.

*/
//-- --comment c_on

//*** Imports *********************************************************
using system, stldict, stlvec;
//- ()

//-- --stop
//*** Make stldict ******************************************************

let sd1 = stldict (<) $ zipwith (=>) ("a".."e") (1..5); members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sv1 = stlvec $ members sd1; members sv1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let v1 = stl::vector (sd1,"b","d"); v1;
//- {"b"=>2,"c"=>3}

let l1 = members (sd1,stl::sdbeg,"e"); l1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sd2 = stldict (>) (sd1,"a","d"); members sd2;
//- ["c"=>3,"b"=>2,"a"=>1]

let sd3 = stldict (<) (sv1,1,stl::svend); members sd3;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sd4 = stldict (<) v1; members sd4;
//- ["b"=>2,"c"=>3]

let sd5 = stldict (<) l1; members sd5;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sd6 = mkstldict (>) 0 ("a".."e"); members sd6;
//- ["e"=>0,"d"=>0,"c"=>0,"b"=>0,"a"=>0]

let sd7 = emptystldict (>); members sd7;
//- []


//-- --resume


//*** Simple Access and Update *************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

sd1!stl::sdbeg;
//- 1

catch id $ sd1!stl::sdend;
//- out_of_bounds

sd1!"a";
//- 1

sd1!"e";
//- 5

update sd1 "a" 100; update sd1 "x" 200; members sd1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

catch err (sd1!"y");
//- err out_of_bounds

stl::set_default sd1 0;
//- 0

stl::get_default sd1;
//- 1,0

sd1!"y";
//- 0

members sd1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

member sd1 "x", member sd1 "z";
//- 1,0

//*** Bidirectional iterator functions *******************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let kb, ke = stl::sdbeg, stl::sdend; kb, ke;
//- stl_begin_iterator,stl_end_iterator

let k1 = next_key sd1 kb; k1;
//- "b"

let k2 = next_key sd1 k1; k2;
//- "c"

let k1 = prev_key sd1 k2; k2;
//- "c"

let k0 = prev_key sd1 k1; k0;
//- stl_begin_iterator

catch id $ prev_key sd1 kb; 
//- out_of_bounds

catch id $ prev_key sd1 k0; 
//- out_of_bounds

let k4 = prev_key sd1 ke; k4;
//- "e"

let k3 = prev_key sd1 k4; k3;
//- "d"

let k4 = next_key sd1 k3; k4;
//- "e"

let k5 = next_key sd1 k4; k5;
//- stl_end_iterator

catch id $ next_key sd1 ke; 
//- out_of_bounds

catch id $ next_key sd1 k5; 
//- out_of_bounds

//-- --stop
//*** Members, keys, vals, first, last ********************************

let sd1 = stldict (<) ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

members sd1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

members (sd1,"b","e");
//- ["b"=>2,"c"=>3,"d"=>4]

members (sd1,"b","e1");
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sd1,"0","x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sd1,stl::sdbeg,"x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sd1,"0",stl::sdend);
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

keys sd1;
//- ["a","b","c","d","e","x","y"]

keys (sd1,"b","e");
//- ["b","c","d"]

keys (sd1,"b","e1");
//- ["b","c","d","e"]

keys (sd1,"0","x");
//- ["a","b","c","d","e"]

keys (sd1,stl::sdbeg,"x");
//- ["a","b","c","d","e"]

keys (sd1,"0",stl::sdend);
//- ["a","b","c","d","e","x","y"]

vals sd1;
//- [100,2,3,4,5,200,0]

vals (sd1,"b","e");
//- [2,3,4]

vals (sd1,"b","e1");
//- [2,3,4,5]

vals (sd1,"0","x");
//- [100,2,3,4,5]

vals (sd1,stl::sdbeg,"x");
//- [100,2,3,4,5]

vals (sd1,"0",stl::sdend);
//- [100,2,3,4,5,200,0]

first sd1;
//- "a"=>100

first (sd1,"b","e");
//- "b"=>2

first (sd1,"b","e1");
//- "b"=>2

first (sd1,"0","x");
//- "a"=>100

first (sd1,stl::sdbeg,"x");
//- "a"=>100

first (sd1,"0",stl::sdend);
//- "a"=>100

last sd1;
//- "y"=>0

last (sd1,"b","e");
//- "d"=>4

last (sd1,"b","e1");
//- "e"=>5

last (sd1,"0","x");
//- "e"=>5

last (sd1,stl::sdbeg,"x");
//- "e"=>5

last (sd1,"0",stl::sdend);
//- "y"=>0

//*** rmfirst, rmlast, erase, insert and delete ********************

let sd1 = stldict (<) ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

let sd2 = stldict (<) ["a"=>1,"b"=>2,"c"=>3];
//- ()

members sd1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

rmfirst sd1; rmlast sd1; members sd1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

rmfirst (sd1,"e","z"); members sd1;
//- ["b"=>2,"c"=>3,"d"=>4,"x"=>200]

rmlast (sd1,"a","x"); members sd1;
//- ["b"=>2,"c"=>3,"x"=>200]

erase (sd1,"c","e"); members sd1;
//- ["b"=>2,"x"=>200]

erase sd1; members sd1;
//- []

stl::null sd1;
//- 1

insert sd1 ("e"=>5); members sd1;
//- ["e"=>5]

stl::null sd1;
//- 0

stl::insert_elms sd1 sd2; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5]

stl::null (sd1,"b","c");
//- 0

stl::null (sd1,"b","b");
//- 1

let sd8 = stldict (<) $ zipwith (=>) ("f".."i") (6..9); members sd8;
//- ["f"=>6,"g"=>7,"h"=>8,"i"=>9]

stl::insert_elms sd1 (sd8,"g","i"); members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8]

stl::insert_elms sd1 $ zipwith (=>) ("j".."l") (10..12); members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8,"j"=>10,"k"=>11,"l"=>12]

delete sd1 "l"; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8,"j"=>10,"k"=>11]

catch id (insert sd1 ("e")); //can only insert rocket pairs
//- bad_argument

//*** allpairs, ==, ~== ***********************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3]

let sd2 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd2;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) sd1 sd2;
//- 0

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) sd2 sd1;
//- 0

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) sd1 (sd2,"a","d");
//- 1

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) (sd2,"a","d") sd1;
//- 1

sd1 == sd2;
//- 0

sd1 ~= sd2;
//- 1

sd1 == (sd2,"a","a"); // oops -- tuple rule trumps;
//- 0

// ** bounds, size *******************************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sd2, lb, up = stl::bounds sd1; (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"a"); (lb, up);
//- stl_begin_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,"a1"); (lb, up);
//- "b","b"

let sd2, lb, up = stl::bounds (sd1,"a","x"); (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"0","x"); (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"x","a"); (lb, up);
//- stl_end_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,stl::sdbeg,"a"); (lb, up);
//- stl_begin_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,stl::sdend,"x"); (lb, up);
//- stl_end_iterator,stl_end_iterator

stl::size sd1;
//- 4

stl::size (sd1,"b","d");
//- 2

stl::size (sd1,"c",stl::sdend);
//- 2


//** map, map_keys, map_vals **************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

map (\(k=>v)->k+1=>v+10) sd1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

map_keys (+1) sd1;
//- ["b","c","d","e"]

map_vals (+1) sd1;
//- [2,3,4,5]

map (\(k=>v)->k=>v+10) (sd1,stl::sdbeg,stl::sdend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sd1,stl::sdbeg,"x");
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sd1,stl::sdbeg,"d");
//- ["a"=>11,"b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (sd1,stl::sdbeg,"a");
//- []

map (\(k=>v)->k=>v+10) (sd1,"0",stl::sdend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sd1,"b","d");
//- ["b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (sd1,"x","a");
//- []

//** listmap, catmap, catmap_keys, catmap_vals *************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

listmap (\(k=>v)->k+1=>v+10) sd1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) sd1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) (sd1,"a","b");
//- ["b"=>11]

catmap_keys (\x->[x,x+10]) sd1;
//- ["a","k","b","l","c","m","d","n"]

catmap_keys (\x->[x,x+10]) (sd1,"a","a");
//- []

catmap_vals (\x->[x,x+10]) sd1;
//- [1,11,2,12,3,13,4,14]

catmap_vals (\x->[x,x+10]) (sd1,"a","a");
//- []

[ k+1 | (k=>y) = sd1];
//- ["b","c","d","e"]

[ k=>v |  (k=>v) = sd1; v mod 2];
//- ["a"=>1,"c"=>3]

{ k+1 | (k=>y) = sd1};
//- {"b","c","d","e"}

{ {k;v} |  (k=>v) = sd1; v mod 2};
//- {"a","c";1,3}

//** foldl, foldl1, foldr, foldr1 ***********************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} sd1;
//- {"abcd",10}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sd1,"a","d");
//- {"abc",6}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sd1,"b",stl::sdend);
//- {"bcd",9}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sd1,"b","d");
//- {"bc",5}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sd1,"b","b");
//- {"",0}

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) sd1;
//- "abcd"=>10

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"a","d");
//- "abc"=>6

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b",stl::sdend);
//- "bcd"=>9

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b","d");
//- "bc"=>5

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b","b"); (); // fails
//- ()

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} sd1;
//- {"dcba",10}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sd1,"a","d");
//- {"cba",6}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sd1,"b",stl::sdend);
//- {"dcb",9}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sd1,"b","d");
//- {"cb",5}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sd1,"b","b");
//- {"",0}

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) sd1;
//- "abcd"=>10

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"a","d");
//- "abc"=>6

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b",stl::sdend);
//- "bcd"=>9

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b","d");
//- "bc"=>5

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sd1,"b","b"); (); // fails
//- ()

//*** do, filter *******************************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sd2 = emptystldict (>); ();
//- ()

do (\(k=>v) -> update sd2 k v) sd1; members sd2;
//- ["d"=>4,"c"=>3,"b"=>2,"a"=>1]

erase sd2; do (\(k=>v) -> update sd2 k v) (sd1,"a","d"); members sd2;
//- ["c"=>3,"b"=>2,"a"=>1]

erase sd2; do (\(k=>v) -> update sd2 k v) (sd1,"b","x"); members sd2;
//- ["d"=>4,"c"=>3,"b"=>2]

erase sd2; do (\(k=>v) -> update sd2 k v) (sd1,"0","0"); members sd2;
//- []

erase sd2; do (\(k=>v) -> update sd2 k v) (sd1,"x","x"); members sd2;
//- []

erase sd2; do (\(k=>v) -> update sd2 k v) (sd1,"d","x"); members sd2;
//- ["d"=>4]

filter (\(k=>v) -> v mod 2) sd1;
//- ["a"=>1,"c"=>3]

filter (\(k=>v) -> v mod 2) (sd1,"a","c");
//- ["a"=>1]

filter (\(k=>v) -> v mod 2) (sd1,"c",stl::sdend);
//- ["c"=>3]

filter (\(k=>v) -> v mod 2) (sd1,"d","d");
//- []

//** Set operations ******************************************************

let sd1 = stldict (<) ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sd2 = stldict (<) ["b"=>20,"c"=>30,"d"=>40,"e"=>50]; members sd2;
//- ["b"=>20,"c"=>30,"d"=>40,"e"=>50]

members (sd1 + sd1);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

members (sd1 + sd2);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>50]

members (sd2 + sd1);
//- ["a"=>1,"b"=>20,"c"=>30,"d"=>40,"e"=>50]

members (sd1 - sd1);
//- []

members (sd1 - sd2);
//- ["a"=>1]

members (sd2 - sd1);
//- ["e"=>50]

members (sd1 * sd1);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

members (sd1 * sd2);
//- ["b"=>2,"c"=>3,"d"=>4]

members (sd2 * sd1);
//- ["b"=>20,"c"=>30,"d"=>40]

members (sd1 / sd1);
//- []

members (sd1 / sd2);
//- ["a"=>1,"e"=>50]

members (sd2 / sd1);
//- ["a"=>1,"e"=>50]

members $ (sd1,"b","d") + (sd2, "c","e");
//- ["b"=>2,"c"=>3,"d"=>40]

members $ (sd1,"b","d") - (sd2, "c","e");
//- ["b"=>2]

members $ (sd1,"b","d") * (sd2, "c","e");
//- ["c"=>3]

members $ (sd1,"b","d") / (sd2, "c","e");
//- ["b"=>2,"d"=>40]

//** Cache sensitive sequences ****************************************

let sd1 = stldict (<) $ zipwith (=>) ("a".."j") (1..10); members sd1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

stl::set_sd_trace 1;
//- ()

member sd1 "a";
//- 1

sd1!"a";
//- 1

delete sd1 "b"; members sd1;
//- ["a"=>1,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

sd1!"a";
//- 1

member sd1 "a";
//- 1

delete sd1 "a"; members sd1;
//- ["c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

member sd1 "a";
//- 0

sd1!"e";
//- 5

rmfirst sd1;
//- ()

sd1!"e";
//- 5

member sd1 "c";
//- 0

sd1!"e"
//- 5

rmlast sd1; members sd1;
//- ["d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9]

sd1!"e";
//- 5

member sd1 "k";
//- 0

sd1!"e";
//- 5

erase (sd1, "h", stl::sdend); members sd1;
//- ["d"=>4,"e"=>5,"f"=>6,"g"=>7]

sd1!"e";
//- 5

member sd1 "i";
//- 0

member sd1 "e";
//- 1

stl::set_sd_trace 0;
//- ()

//*** Fancy updating - C++ default value style ********************* 

let sd1 = emptystldict (>); members sd1;
//- []

stl::set_default sd1 0; stl::get_default sd1;
//- 1,0

update_with (+) sd1 "a" 1; update_with (+) sd1 "a" 1; members sd1;
//- ["a"=>2]

erase sd1; #sd1;
//- 0

stl::set_default sd1 []; stl::get_default sd1;
//- 1,[]

update_with (:) sd1 "a" 1; update_with (:) sd1 "a" 2; members sd1;
//- ["a"=>[2,1]]

erase sd1; #sd1;
//- 0

stl::set_default sd1 emptystlvec; stl::get_default sd1; ();
//- ()

update_with (flip append) sd1 "a" 1; ();
//- ()

update_with (flip append) sd1 "a" 2; ();
//- ()

members (sd1!"a");
//- [1,2]

