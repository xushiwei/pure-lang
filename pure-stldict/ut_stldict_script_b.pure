//-- --stop //stop processing by check

/* ut_stldict_script_b.pure -- examples for basic ops on stlset.

   This is a Pure script with a special format that makes it possible for the
   check_eval.pure script to evaluate single lines of Pure code and compare
   the result to an expected result.

      $> pure -q -w
      > run check_eval.pure 
      > check "ut_stldict_script_b.pure";
    
   check will print and evaluate each executable line and check the
   result against next line beginning with "//- ", if any.

   See check_eval.pure for more details.

using system, stldict, stlvec;

*/

//-- --resume //start up here

//*** Make stlset ******************************************************

let sd1 = stlset (<) ("a".."e"); members sd1;
//- ["a","b","c","d","e"]

let sv1 = stlvec $ members sd1; members sv1;
//- ["a","b","c","d","e"]

let v1 = stl::vector (sd1,"b","d"); v1;
//- {"b","c"}

let l1 = members (sd1,stl::sdbeg,"e"); l1;
//- ["a","b","c","d"]
//-
let sd2 = stlset (>) (sd1,"a","d"); members sd2;
//- ["c","b","a"]

let sd3 = stlset (<) (sv1,1,stl::svend); members sd3;
//- ["b","c","d","e"]

let sd4 = stlset (<) v1; members sd4;
//- ["b","c"]

let sd5 = stlset (<) l1; members sd5;
//- ["a","b","c","d"]

let sd7 = emptystlset (>); members sd7;
//- []

//*** Simple Access and Update *************************************

let sd1 = stlset (<) ("a".."e"); members sd1;
//- ["a","b","c","d","e"]

sd1!"a";
//- "a"

sd1!"e";
//- "e"

update sd1 "a" 100; update sd1 "x" 200; members sd1;
//- ["a","b","c","d","e","x"]

catch err (sd1!"y");
//- err out_of_bounds

stl::set_default sd1 not_a_member; stl::get_default sd1;
//- 1,not_a_member

sd1!"y";
//- not_a_member

members sd1;
//- ["a","b","c","d","e","x"]

member sd1 "x", member sd1 "z";
//- 1,0

//*** Members, keys, vals, first, last ********************************

let sd1 = stlset (<) ["a","b","c","d","e","x","y"]; members sd1;
//- ["a","b","c","d","e","x","y"]

members (sd1,"b","e");
//- ["b","c","d"]

members (sd1,"b","e1");
//- ["b","c","d","e"]

members (sd1,"0","x");
//- ["a","b","c","d","e"]

members (sd1,stl::sdbeg,"x");
//- ["a","b","c","d","e"]

members (sd1,"0",stl::sdend);
//- ["a","b","c","d","e","x","y"]

keys sd1;
//- ["a","b","c","d","e","x","y"]

keys (sd1,"b","e");
//- ["b","c","d"]

keys (sd1,"b","e1");
//- ["b","c","d","e"]

keys (sd1,"0","x");
//- ["a","b","c","d","e"]

keys (sd1,stl::sdbeg,"x");
//- ["a","b","c","d","e"]

keys (sd1,"0",stl::sdend);
//- ["a","b","c","d","e","x","y"]

vals sd1;
//- ["a","b","c","d","e","x","y"]

vals (sd1,"b","e");
//- ["b","c","d"]

vals (sd1,"b","e1");
//- ["b","c","d","e"]

vals (sd1,"0","x");
//- ["a","b","c","d","e"]

vals (sd1,stl::sdbeg,"x");
//- ["a","b","c","d","e"]

vals (sd1,"0",stl::sdend);
//- ["a","b","c","d","e","x","y"]

first sd1;
//- "a"

first (sd1,"b","e");
//- "b"

first (sd1,"b","e1");
//- "b"

first (sd1,"0","x");
//- "a"

first (sd1,stl::sdbeg,"x");
//- "a"

first (sd1,"0",stl::sdend);
//- "a"

last sd1;
//- "y"

last (sd1,"b","e");
//- "d"

last (sd1,"b","e1");
//- "e"

last (sd1,"0","x");
//- "e"

last (sd1,stl::sdbeg,"x");
//- "e"

last (sd1,"0",stl::sdend);
//- "y"

//*** rmfirst, rmlast, erase, insert and delete ********************

let sd1 = stlset (<) ["a","b","c","d","e","x","y"]; members sd1; 
//- ["a","b","c","d","e","x","y"]

let sd2 = stlset (<) ["a","b","c"]; members sd2;
//- ["a","b","c"]

rmfirst sd1; rmlast sd1; members sd1;
//- ["b","c","d","e","x"]

rmfirst (sd1,"e","z"); members sd1;
//- ["b","c","d","x"]

rmlast (sd1,"a","x"); members sd1;
//- ["b","c","x"]

erase (sd1,"c","e"); members sd1;
//- ["b","x"]

erase sd1; members sd1;
//- []

stl::null sd1;
//- 1

insert sd1 "e"; members sd1;
//- ["e"]

stl::null sd1;
//- 0

stl::insert_elms sd1 sd2; members sd1;
//- ["a","b","c","e"]

stl::null (sd1,"b","c");
//- 0

stl::null (sd1,"b","b");
//- 1

let sd8 = stlset (<) ("f".."i"); members sd8;
//- ["f","g","h","i"]

stl::insert_elms sd1 (sd8,"g","i"); members sd1;
//- ["a","b","c","e","g","h"]

stl::insert_elms sd1 $ ("j".."l"); members sd1;
//- ["a","b","c","e","g","h","j","k","l"]

delete sd1 "l"; members sd1;
//- ["a","b","c","e","g","h","j","k"]

delete_val sd1 "k"; members sd1;
//- ["a","b","c","e","g","h","j"]

delete_val sd1 "j"; members sd1;
//- ["a","b","c","e","g","h"]

delete_all sd1 "j"; members sd1;
//- ["a","b","c","e","g","h"]

// FIX - SEG FAULT

// catch bad_element (insert sd1 ("e"=>5)); //COMPARING CAUSES FAILED_COND
// //- bad_element failed_cond

//*** allpairs, ==, ~== ***********************************************

let sd1 = stlset (<) ["a","b","c"]; members sd1;
//- ["a","b","c"]

let sd2 = stlset (<) ["a","b","c","d"]; members sd2;
//- ["a","b","c","d"]

stl::allpairs (\k1 k2-> k1==k2) sd1 sd2;
//- 0

stl::allpairs (\k1 k2-> k1==k2) sd2 sd1;
//- 0

stl::allpairs (\k1 k2-> k1==k2) sd1 (sd2,"a","d");
//- 1

stl::allpairs (\k1 k2-> k1==k2) (sd2,"a","d") sd1;
//- 1

stl::allpairs (\k1 k2-> k1==k2) sd1 (sd2,"a","b");
//- 0

sd1 == sd2;
//- 0

sd1 ~= sd2;
//- 1

sd1 == (sd2,"a","a"); // oops -- tuple rule trumps;
//- 0

// ** bounds, size *******************************************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

let sd2, lb, up = stl::bounds sd1; (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"a"); (lb, up);
//- stl_begin_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,"a1"); (lb, up);
//- "b","b"

let sd2, lb, up = stl::bounds (sd1,"a","x"); (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"0","x"); (lb, up);
//- stl_begin_iterator,stl_end_iterator

let sd2, lb, up = stl::bounds (sd1,"x","a"); (lb, up);
//- stl_end_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,stl::sdbeg,"a"); (lb, up);
//- stl_begin_iterator,"b"

let sd2, lb, up = stl::bounds (sd1,stl::sdend,"x"); (lb, up);
//- stl_end_iterator,stl_end_iterator

stl::size sd1;
//- 4

stl::size (sd1,"b","d");
//- 2

stl::size (sd1,"c",stl::sdend);
//- 2

//** map, map_keys, map_vals **************************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

map (\k->k+1) sd1;
//- ["b","c","d","e"]

map_keys (+1) sd1;
//- ["b","c","d","e"]

map_vals (+1) sd1;
//- ["b","c","d","e"]

map (\k->k+1) (sd1,stl::sdbeg,stl::sdend);
//- ["b","c","d","e"]

map (\k->k+1) (sd1,stl::sdbeg,"x");
//- ["b","c","d","e"]

map (\k->k+1)  (sd1,stl::sdbeg,"d");
//- ["b","c","d"]

map (\k->k+1) (sd1,stl::sdbeg,"a");
//- []

map (\k->k+1) (sd1,"0",stl::sdend);
//- ["b","c","d","e"]

map (\k->k+1) (sd1,"b","d");
//- ["c","d"]

map (\k->k+1) (sd1,"x","a");
//- []

//** listmap, catmap, catmap_keys, catmap_vals *************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

listmap (\k->k+1) sd1;
//- ["b","c","d","e"]

catmap (\k->[k+1]) sd1;
//- ["b","c","d","e"]

catmap (\k->[k+1]) (sd1,"a","b");
//- ["b"]

catmap_keys (\x->[x,ord x]) sd1;
//- ["a",97,"b",98,"c",99,"d",100]

catmap_keys (\x->[x,ord x]) (sd1,"a","a");
//- []

catmap_vals (\x->[x,ord x]) sd1;
//- ["a",97,"b",98,"c",99,"d",100]

catmap_vals (\x->[x,ord x]) (sd1,"a","a");
//- []

[ k+1 | k = sd1];
//- ["b","c","d","e"]

[ k | k = sd1; (ord k) mod 2];
//- ["a","c"]

{ k+1 | k = sd1};
//- {"b","c","d","e"}

{ {k;ord k} | k = sd1; (ord k) mod 2};
//- {"a","c";97,99}

//** foldl, foldl1, foldr, foldr1 ***********************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

foldl (\acc k -> k:acc) [] sd1;
//- ["d","c","b","a"]

foldl (\acc k -> k:acc) [] (sd1,"a","d");
//- ["c","b","a"]

foldl (\acc k -> k:acc) [] (sd1,"b",stl::sdend);
//- ["d","c","b"]

foldl (\acc k -> k:acc) [] (sd1,"b","d");
//- ["c","b"]

foldl (\acc k -> k:acc) [] (sd1,"b","b");
//- []

foldl1 (\acc k -> k+acc) sd1;
//- "dcba"

foldl1 (\acc k -> k+acc) (sd1,"a","d");
//- "cba"

foldl1 (\acc k -> k+acc) (sd1,"b",stl::sdend);
//- "dcb"

foldl1 (\acc k -> k+acc) (sd1,"b","d");
//- "cb"

foldl1 (\acc k -> k+acc) (sd1,"b","b"); (); // fails
//- ()

foldr (\k acc -> k:acc) [] sd1;
//- ["a","b","c","d"]

foldr (\k acc -> k:acc) [] (sd1,"a","d");
//- ["a","b","c"]

foldr (\k acc -> k:acc) [] (sd1,"b",stl::sdend);
//- ["b","c","d"]

foldr (\k acc -> k:acc) [] (sd1,"b","d");
//- ["b","c"]

foldr (\k acc -> k:acc) [] (sd1,"b","b");
//- []

foldr1 (\k acc -> k+acc) sd1;
//- "abcd"

foldr1 (\k acc -> k+acc) (sd1,"a","d");
//- "abc"

foldr1 (\k acc -> k+acc) (sd1,"b",stl::sdend);
//- "bcd"

foldr1 (\k acc -> k+acc) (sd1,"b","d");
//- "bc"

foldr1 (\k acc -> k+acc) (sd1,"b","b"); (); // fails
//- ()

//*** do, filter *******************************************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

let sd2 = emptystlset (>); ();
//- ()

do (\k -> update sd2 k 0) sd1; members sd2;
//- ["d","c","b","a"]

erase sd2; do (\k -> update sd2 k 0) (sd1,"a","d"); members sd2;
//- ["c","b","a"]

erase sd2; do (\k -> update sd2 k 0) (sd1,"b","x"); members sd2;
//- ["d","c","b"]

erase sd2; do (\k -> update sd2 k 0) (sd1,"0","0"); members sd2;
//- []

erase sd2; do (\k -> update sd2 k 0) (sd1,"x","x"); members sd2;
//- []

erase sd2; do (\k -> update sd2 k 0) (sd1,"d","x"); members sd2;
//- ["d"]

erase sd2; do (\k -> insert sd2 k) (sd1,"a","d"); members sd2;
//- ["c","b","a"]

erase sd2; do (\k -> insert sd2 k) (sd1,"b","x"); members sd2;
//- ["d","c","b"]

erase sd2; do (\k -> insert sd2 k) (sd1,"0","0"); members sd2;
//- []

erase sd2; do (\k -> insert sd2 k) (sd1,"x","x"); members sd2;
//- []

erase sd2; do (\k -> insert sd2 k) (sd1,"d","x"); members sd2;
//- ["d"]

filter (\k -> (ord k) mod 2) sd1;
//- ["a","c"]

filter (\k -> (ord k) mod 2) (sd1,"a","c");
//- ["a"]

filter (\k -> (ord k) mod 2) (sd1,"c",stl::sdend);
//- ["c"]

filter (\k -> (ord k) mod 2) (sd1,"d","d");
//- []

//** Set operations ******************************************************

let sd1 = stlset (<) ["a","b","c","d"]; members sd1;
//- ["a","b","c","d"]

let sd2 = stlset (<) ["b","c","d","e"]; members sd1;
//- ["a","b","c","d"]

members (sd1 + sd1);
//- ["a","b","c","d"]

members (sd1 + sd2);
//- ["a","b","c","d","e"]

members (sd2 + sd1);
//- ["a","b","c","d","e"]

members (sd1 - sd1);
//- []

members (sd1 - sd2);
//- ["a"]

members (sd2 - sd1);
//- ["e"]

members (sd1 * sd1);
//- ["a","b","c","d"]

members (sd1 * sd2);
//- ["b","c","d"]

members (sd2 * sd1);
//- ["b","c","d"]

members (sd1 / sd1);
//- []

members (sd1 / sd2);
//- ["a","e"]

members (sd2 / sd1);
//- ["a","e"]

members $ (sd1,"b","d") + (sd2, "c","e");
//- ["b","c","d"]

members $ (sd1,"b","d") - (sd2, "c","e");
//- ["b"]

members $ (sd1,"b","d") * (sd2, "c","e");
//- ["c"]

members $ (sd1,"b","d") / (sd2, "c","e");
//- ["b","d"]

