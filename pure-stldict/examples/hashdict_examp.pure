
/* Some basic examples for the hashdict module. This is intended to be fed to
   the interpreter in a piecemeal fashion (best done using "Send Current Line"
   in Emacs). To see the results, you can also run the script from the command
   line as follows: pure < hashdict_examp.pure

   NOTE: In this directory you'll also find a log file generated by running
   this script through Pure. You can run the script yourself and compare the
   results with the log to see whether the hashdict module works ok on your
   system. The Makefile has a target which automatizes this; simply run 'make
   check' in the main source directory. However, note that 'make check' may in
   some cases detect some slight differences even if the module is working
   properly, depending on which compiler, STL and Pure version you use.
   (Harmless differences manifest themselves in different hashdict element
   orders, since these aren't defined by the STL.) */

using hashdict;

public foo bar baz; // free symbols used below

/* Create a hashdict and populate it with some Pure data. Both keys and values
   may be arbitrary Pure expressions. Note that in general the elements may be
   stored in an apparently random order (not necessarily the order in which
   they were inserted). */

let m = hashdict [foo=>99, bar=>bar 4711L, baz=>1..5]; m;

/* Note that hashdicts are printed using the format 'hashdict [key=>val,...]'
   by default, which reconstructs the value when used as a literal in Pure
   code. It is also possible to define a custom pretty-printing, using your
   own preferred symbol in place of 'hashdict'. In particular, the symbol may
   also be an outfix symbol so that hashdicts can be printed and entered in a
   bracketed format analogous to list and matrix notation. The following code
   shows how to make this work. To these ends, we introduce a nonfix symbol
   {$$} denoting the empty hashdict (note that this must be written as is,
   with no spaces between the "brackets"), and a corresponding pair of outfix
   symbols {$ $} which will be used to denote non-empty hashes. */

nonfix {$$};  // empty hashdict
outfix {$ $}; // hashdict brackets

// Define the above as macros which expand to proper hashdict values.
// NOTE: This uses the new built-in __list__ macro from Pure 0.49 or later.

def {$$} = hashdict [];
def {$ xs@(_,_) $} = hashdict (__list__ xs);
def {$ x $} = hashdict [x];

/* Now we can use the notation {$ key=>val, ... $} to enter hashdict literals
   in Pure code, and a call to the hashdict_symbol function also makes the
   hashdict pretty-printer use this notation. */

hashdict_symbol ({$ $});

let m = {$ foo=>99, bar=>bar 4711L, baz=>1..5 $}; m;

/* The pretty-printing can be changed at any time. E.g., to revert to the
   default: */

hashdict_symbol hashdict;
m;

// Query the dict.
m!bar;  // => bar 4711L
keys m; // => [foo,bar,baz]
vals m; // => [99,bar 4711L,[1,2,3,4,5]]
list m; // => [foo=>99,bar=>bar 4711L,baz=>[1,2,3,4,5]]

// Membership test.
member m foo, member m bar;

// Delete an element. Note that hashdicts are mutable, so you need to take a
// copy if you want to preserve the original value.
let m1 = copy m;
delete m foo; m1;
m!foo;  // => out_of_bounds exception
keys m; // => [bar,baz]
vals m; // => [bar 4711L,[1,2,3,4,5]]
list m; // => [bar=>bar 4711L,baz=>[1,2,3,4,5]]

member m foo, member m bar;

// Hashdicts can also be used in list and matrix comprehensions.
[x,y | x=>y = m1];
{x,y | x=>y = m1; listp y};

/* You can check two hashdicts for syntactic equality, which holds if and only
   if they contain the same elements, in the same order. But note that this is
   somewhat flaky because the order of elements in a hashdict may depend on how
   it is constructed. */

m===m, m===m1, m === copy m,
hashdict [97=>98,"a"=>"b"] === hashdict ["a"=>"b",97=>98]; // => 1,0,1,0

/* So the above isn't useful if you want to verify that two hashdicts contain
   the same elements, irrespective of the particular order in which the
   members are listed. This can be done using the semantic equality
   operation. */

m==m, m==m1, m == copy m,
hashdict [97=>98,"a"=>"b"] == hashdict ["a"=>"b",97=>98]; // => 1,0,1,1

/* A hashdict x is considered a subdict of a hashdict y iff all key=>val pairs
   of x are also contained in y. */

m<=m1, m<m1, m>=m, m>m; // => 1,1,1,0

/* Hashdicts can also serve as a hashed set data structure which contains only
   keys but no values. In this case the value associated with a key defaults
   to the key itself. */

let m = hashdict [99, bar 4711L, 1..5]; m;

member m 99;
m!99;
delete m 99;
member m 99;
m!99;
insert m 99;

// You can also mix singleton elements with ordinary key-value associations.
delete m (bar 4711L);
insert m (bar=>bar 4711L);
m!99;
m!bar;

/* Basic set-like operations like union, intersection etc. are provided as
   well. */

let m1 = hashdict [5,1,3,11,3];
let m2 = hashdict (3..6);

m1;m2;
m1+m2; // => hashdict [11,1,3,4,5,6]
m1-m2; // => hashdict [11,1]
m1*m2; // => hashdict [3,5]

// These operations also work with general hashdicts, of course.
hashdict [foo=>99,baz=>1..5] + hashdict [bar=>bar 4711L];

/* Multidicts are supported, too. These differ from the ordinary hashdicts in
   that they may contain multiple key-value associations for each key. They
   are implemented by the hashmdict type, which provides pretty much the same
   API as the hashdict type. */

let m1 = hashmdict [5,1,3,11,3];
let m2 = hashmdict (3..6);

m1;m2;
m1+m2; // => hashmdict [11,1,3,3,3,4,5,5,6]
m1-m2; // => hashmdict [11,1,3]
m1*m2; // => hashmdict [3,5]

let m = hashmdict [foo=>99,baz=>1..5] + hashmdict [baz=>bar 4711L]; m;

/* Note that indexing works a bit differently from ordinary hashdicts in that
   the list of *all* associations for a given key is returned (which may be
   empty if the key is not in the dict). */

m!![foo,bar,baz];

/* Like hashdicts, hashmdicts can be compared for syntactic and semantic
   equality. The latter also properly deals with the case that members may
   be listed in any order. (This may become slow in degenerate cases where the
   hashmdict contains much more members than distinct keys.) */

hashmdict [97=>98,97=>99] === hashmdict [97=>99,97=>98]; // => 0
hashmdict [97=>98,97=>99] == hashmdict [97=>99,97=>98]; // => 1
