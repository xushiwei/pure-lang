//-- --comment c_off --resume --verbose off

/* ut_script_stlmap.pure -- examples for basic ops on stlmap.

   This is a Pure script with a special format that makes it possible for the
   check_eval.pure script to evaluate single lines of Pure code and compare
   the result to an expected result.
  
       $> pure -q -w
      > run check_eval.pure 
      > check "ut_script_stlmap.pure"
    
    check will print and evaluate single line Pure statements and check
    the result against next line beginning with "//- ", if any.

*/

//*** Imports *********************************************************

using system, stlmap, stlvec;
//- ()

//*** Make stlmap ******************************************************

let sm1 = stlmap $ zipwith (=>) ("a".."e") (1..5); members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sv1 = stlvec $ members sm1; members sv1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let v1 = stl::vector (sm1,"b","d"); v1;
//- {"b"=>2,"c"=>3}

let l1 = members (sm1,stl::stlbeg,"e"); l1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sm2 = emptystlmap_with (>) (>) (==); members sm2;
//- []

insert_elms sm2 ["a"=>1,"b"=>2]; members sm2;
//- ["b"=>2,"a"=>1]

let sm3 = stlmap (sv1,1,stl::svend); members sm3;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm4 = stlmap v1; members sm4;
//- ["b"=>2,"c"=>3]

let sm5 = stlmap l1; members sm5;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sm6 = mkstlmap 0 ("a".."e"); members sm6;
//- ["a"=>0,"b"=>0,"c"=>0,"d"=>0,"e"=>0]

let sm7 = emptystlmap; members sm7;
//- []

//*** Simple Access and Update *************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

sm1!stl::stlbeg;
//- 1

catch id $ sm1!stl::stlend;
//- out_of_bounds

sm1!"a";
//- 1

sm1!"e";
//- 5

update sm1 "a" 100; update sm1 "x" 200; members sm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

catch err (sm1!"y");
//- err out_of_bounds

stl::set_default sm1 0;
//- 0

stl::get_default sm1;
//- 1,0

sm1!"y";
//- 0

members sm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

member sm1 "x", member sm1 "z";
//- 1,0

//*** Bidirectional iterator functions *******************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let kb, ke = stl::stlbeg, stl::stlend; kb, ke;
//- stl::stlbeg,stl::stlend

let k1 = next_key sm1 kb; k1;
//- "b"

let k2 = next_key sm1 k1; k2;
//- "c"

let k1 = prev_key sm1 k2; k2;
//- "c"

let k0 = prev_key sm1 k1; k0;
//- stl::stlbeg

catch id $ prev_key sm1 kb; 
//- out_of_bounds

catch id $ prev_key sm1 k0; 
//- out_of_bounds

let k4 = prev_key sm1 ke; k4;
//- "e"

let k3 = prev_key sm1 k4; k3;
//- "d"

let k4 = next_key sm1 k3; k4;
//- "e"

let k5 = next_key sm1 k4; k5;
//- stl::stlend

catch id $ next_key sm1 ke;
//- stl::stlend

catch id $ next_key sm1 k5; 
//- stl::stlend

//*** Members, keys, vals, first, last ********************************

let sm1 = stlmap ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

members sm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

members (sm1,"b","e");
//- ["b"=>2,"c"=>3,"d"=>4]

members (sm1,"b","e1");
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,"0","x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,stl::stlbeg,"x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,"0",stl::stlend);
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

keys sm1;
//- ["a","b","c","d","e","x","y"]

keys (sm1,"b","e");
//- ["b","c","d"]

keys (sm1,"b","e1");
//- ["b","c","d","e"]

keys (sm1,"0","x");
//- ["a","b","c","d","e"]

keys (sm1,stl::stlbeg,"x");
//- ["a","b","c","d","e"]

keys (sm1,"0",stl::stlend);
//- ["a","b","c","d","e","x","y"]

vals sm1;
//- [100,2,3,4,5,200,0]

vals (sm1,"b","e");
//- [2,3,4]

vals (sm1,"b","e1");
//- [2,3,4,5]

vals (sm1,"0","x");
//- [100,2,3,4,5]

vals (sm1,stl::stlbeg,"x");
//- [100,2,3,4,5]

vals (sm1,"0",stl::stlend);
//- [100,2,3,4,5,200,0]

first sm1;
//- "a"=>100

first (sm1,"b","e");
//- "b"=>2

first (sm1,"b","e1");
//- "b"=>2

first (sm1,"0","x");
//- "a"=>100

first (sm1,stl::stlbeg,"x");
//- "a"=>100

first (sm1,"0",stl::stlend);
//- "a"=>100

last sm1;
//- "y"=>0

last (sm1,"b","e");
//- "d"=>4

last (sm1,"b","e1");
//- "e"=>5

last (sm1,"0","x");
//- "e"=>5

last (sm1,stl::stlbeg,"x");
//- "e"=>5

last (sm1,"0",stl::stlend);
//- "y"=>0

//*** insert - STL_INSERT_SEMANTICS ************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sm2 = stlmap {"k"=>11,"l"=>12,"m"=>13}; members sm2;
//- ["k"=>11,"l"=>12,"m"=>13]

// Update existing elements
insert_elm sm1 ("a"=>10); members sm1; 
//- ["a"=>10,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

insert_elms sm1 ["a"=>11,"f"=>6]; members sm1; 
//- ["a"=>11,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6]

insert_elms sm1 {"a"=>12,"g"=>7}; members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms sm1 (sm2,"x","z"); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms sm1 (sm2,"0","2"); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms sm1 (sm2,"k","k"); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms sm1 (sm2,"k","l"); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"k"=>11]

insert_elms sm1 (sm2,"k","m"); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"k"=>11,"l"=>12]

insert_elms sm1 (sm2,"k",stl::stlend); members sm1;
//- ["a"=>12,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"k"=>11,"l"=>12,"m"=>13]

catch id (insert_elm sm1 ("e")); //can only insert rocket pairs
//- bad_argument

//*** Range specifications - corner cases *******************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>100]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>100]

members (sm1,"0");
//- []

members (sm1,stl::stlbeg);
//- ["a"=>1]

members (sm1,"a");
//- ["a"=>1]

members (sm1,"e");
//- ["e"=>5]

members (sm1,"f");
//- []

members (sm1,"x");
//- ["x"=>100]

members (sm1,"z");
//- []

members (sm1,"0","0");
//- []

members (sm1,"a","0");
//- []

members (sm1,stl::stlbeg,"0");
//- []

members (sm1,stl::stlbeg,"c");
//- ["a"=>1,"b"=>2]

members (sm1,stl::stlbeg,"f");
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,stl::stlbeg,"x");
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (sm1,stl::stlbeg,stl::stlend);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>100]

members (sm1,stl::stlend,stl::stlend);
//- []

members (sm1,"0",stl::stlend);
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>100]

members (sm1,"c",stl::stlend);
//- ["c"=>3,"d"=>4,"e"=>5,"x"=>100]

members (sm1,"c","z");
//- ["c"=>3,"d"=>4,"e"=>5,"x"=>100]

members (sm1,"c","x");
//- ["c"=>3,"d"=>4,"e"=>5]

members (sm1,"c","f");
//- ["c"=>3,"d"=>4,"e"=>5]

members (sm1,stl::stlend,stl::stlbeg);
//- []

members (sm1,"z","c");
//- []

members (sm1,"z","x");
//- []

members (sm1,"z","z");
//- []

members (sm1,"x","c");
//- []

members (sm1,"x","0");
//- []

members (sm1,"x","f");
//- []

//*** rmfirst, rmlast, erase ********************************************

let sm1 = stlmap ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

let sm2 = stlmap ["a"=>1,"b"=>2,"c"=>3];
//- ()

members sm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

rmfirst sm1; rmlast sm1; members sm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

rmfirst (sm1,"e","z"); members sm1;
//- ["b"=>2,"c"=>3,"d"=>4,"x"=>200]

rmlast (sm1,"a","x"); members sm1;
//- ["b"=>2,"c"=>3,"x"=>200]

erase (sm1,"c","e"); members sm1;
//- ["b"=>2,"x"=>200]

erase sm1; members sm1;
//- []

stl::null sm1;
//- 1

insert_elm sm1 ("e"=>5); members sm1;
//- ["e"=>5]

stl::null sm1;
//- 0

insert_elms sm1 sm2; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5]

stl::null (sm1,"b","c");
//- 0

stl::null (sm1,"b","b");
//- 1

let sm3 = stlmap $ zipwith (=>) ("f".."i") (6..9); members sm3;
//- ["f"=>6,"g"=>7,"h"=>8,"i"=>9]

insert_elms sm1 (sm3,"g","i"); members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8]

insert_elms sm1 $ zipwith (=>) ("j".."l") (10..12); members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8,"j"=>10,"k"=>11,"l"=>12]

erase_if (\(_=>v)->v mod 2) (sm1,"a","g");
//- 3

members sm1;
//- ["b"=>2,"g"=>7,"h"=>8,"j"=>10,"k"=>11,"l"=>12]

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

erase_if (cst 1) (sm1,"a","b");
//- 1

members sm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

erase_if (cst 1) (sm1,"c");
//- 1

members sm1;
//- ["b"=>2,"d"=>4,"e"=>5]

//*** delete, delete_all, delete_if, delete_val *************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

delete sm1 "d"; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5]

delete_all sm1 "c"; members sm1;
//- ["a"=>1,"b"=>2,"e"=>5]

delete_val sm1 ("a"=>3); members sm1;
//- ["a"=>1,"b"=>2,"e"=>5]

delete_val sm1 ("a"=>1); members sm1;
//- ["b"=>2,"e"=>5]

delete_if (\(_=>v)->v>10) sm1 "e"; members sm1;
//- ["b"=>2,"e"=>5]

delete_if (\(_=>v)->v>0) sm1 "e"; members sm1;
//- ["b"=>2]

//*** comparison operators ************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = stlmap ["a"=>0,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm3 = stlmap ["b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm4 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4];
//- ()

let sm5 = stlmap ["a"=>1,"b"=>2,"d"=>4,"e"=>4];
//- ()

let sm6 = emptystlmap;
//- ()

sm1 < sm1;
//- 0

sm1 < sm2;
//- 0

sm1 < sm3;
//- 1

sm1 < sm4;
//- 0

sm1 < sm5;
//- 1

sm1 < sm6;
//- 0

sm2 < sm1;
//- 0

sm3 < sm1;
//- 0

sm4 < sm1;
//- 1

sm5 < sm1;
//- 0

sm6 < sm1;
//- 1

sm6 < sm6;
//- 0

//*** equal ******************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = stlmap ["a"=>2,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm3 = stlmap ["a"=>0,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm4 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>6];
//- ()

let sm5 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>4];
//- ()

let sm6 = stlmap ["b"=>2,"c"=>3,"d"=>4,"e"=>4];
//- ()

let sm7 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4];
//- ()

let sm8 = stlmap ["a"=>1,"b"=>2,"c"=>3,"e"=>5];
//- ()

let sm9 = emptystlmap;
//- ()

sm1 == sm1;
//- 1

sm1 == sm2;
//- 0

sm1 == sm3;
//- 0

sm1 == sm4;
//- 0

sm1 == sm5;
//- 0

sm1 == sm6;
//- 0

sm1 == sm7;
//- 0

sm1 == sm8;
//- 0

sm1 == sm9;
//- 0

sm2 == sm1;
//- 0

sm3 == sm1;
//- 0

sm4 == sm1;
//- 0

sm5 == sm1;
//- 0

sm6 == sm1;
//- 0

sm7 == sm1;
//- 0

sm8 == sm1;
//- 0

sm9 == sm1;
//- 0

sm9 == sm9;
//- 1

//*** operators *********************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5];
//- ()

let sm2 = stlmap ["a"=>1,"b"=>2,"c"=>3];
//- ()

let sm3 = emptystlmap;
//- ()

sm1 < sm1;
//- 0

sm1 <= sm1;
//- 1

sm1 > sm1;
//- 0

sm1 >= sm1;
//- 1

sm1 == sm1;
//- 1

sm1 ~= sm1;
//- 0

sm1 < sm2;
//- 0

sm1 <= sm2;
//- 0

sm1 > sm2;
//- 1

sm1 >= sm2;
//- 1

sm1 == sm2;
//- 0

sm1 ~= sm2;
//- 1

sm1 < sm3;
//- 0

sm1 <= sm3;
//- 0

sm1 > sm3;
//- 1

sm1 >= sm3;
//- 1

sm1 == sm3;
//- 0

sm1 ~= sm3;
//- 1

sm1 < sm1;
//- 0

sm1 <= sm1;
//- 1

sm1 > sm1;
//- 0

sm1 >= sm1;
//- 1

sm1 == sm1;
//- 1

sm1 ~= sm1;
//- 0

// ** bounds, size *******************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"b"=>3,"b"=>1,"c"=>3,"d"=>4]; members sm1;
//- ["a"=>1,"b"=>1,"c"=>3,"d"=>4]

let sm2, lb, up = stl::bounds sm1; (lb, up);
//- stl::stlbeg,stl::stlend

let sm2, lb, up = stl::bounds (sm1,"a"); (lb, up);
//- stl::stlbeg,"b"

let sm2, lb, up = stl::bounds (sm1,"a1"); (lb, up);
//- stl::stlend,stl::stlend

let sm2, lb, ub = stl::bounds (sm1,"b"); (lb, ub);
//- "b","c"

members (sm2, lb, ub);
//- ["b"=>1]

let sm2, lb, up = stl::bounds (sm1,"a","x"); (lb, up);
//- stl::stlbeg,stl::stlend

let sm2, lb, up = stl::bounds (sm1,"0","x"); (lb, up);
//- stl::stlbeg,stl::stlend

let sm2, lb, up = stl::bounds (sm1,"x","a"); (lb, up);
//- stl::stlend,stl::stlend

let sm2, lb, ub = stl::bounds (sm1,"a","b"); (lb, ub);
//- stl::stlbeg,"b"

members (sm2, lb, ub);
//- ["a"=>1]

let sm2, lb, up = stl::bounds (sm1,stl::stlbeg,"b"); (lb, up);
//- stl::stlbeg,"b"

let sm2, lb, up = stl::bounds (sm1,stl::stlend,"x"); (lb, up);
//- stl::stlend,stl::stlend

stl::size sm1;
//- 4

stl::size (sm1,"b","d");
//- 2

stl::size (sm1,"c",stl::stlend);
//- 2


//** map, map_keys, map_vals **************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

map (\(k=>v)->k+1=>v+10) sm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

map_keys (+1) sm1;
//- ["b","c","d","e"]

map_vals (+1) sm1;
//- [2,3,4,5]

map (\(k=>v)->k=>v+10) (sm1,stl::stlbeg,stl::stlend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sm1,stl::stlbeg,"x");
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sm1,stl::stlbeg,"d");
//- ["a"=>11,"b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (sm1,stl::stlbeg,"a");
//- []

map (\(k=>v)->k=>v+10) (sm1,"0",stl::stlend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (sm1,"b","d");
//- ["b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (sm1,"x","a");
//- []

//** listmap, catmap, catmap_keys, catmap_vals *************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

listmap (\(k=>v)->k+1=>v+10) sm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) sm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) (sm1,"a","b");
//- ["b"=>11]

catmap_keys (\x->[x,x+10]) sm1;
//- ["a","k","b","l","c","m","d","n"]

catmap_keys (\x->[x,x+10]) (sm1,"a","a");
//- []

catmap_vals (\x->[x,x+10]) sm1;
//- [1,11,2,12,3,13,4,14]

catmap_vals (\x->[x,x+10]) (sm1,"a","a");
//- []

[ k+1 | (k=>y) = sm1];
//- ["b","c","d","e"]

[ k=>v |  (k=>v) = sm1; v mod 2];
//- ["a"=>1,"c"=>3]

{ k+1 | (k=>y) = sm1};
//- {"b","c","d","e"}

{ {k;v} |  (k=>v) = sm1; v mod 2};
//- {"a","c";1,3}

//** foldl, foldl1, foldr, foldr1 ***********************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} sm1;
//- {"abcd",10}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sm1,"a","d");
//- {"abc",6}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sm1,"b",stl::stlend);
//- {"bcd",9}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sm1,"b","d");
//- {"bc",5}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (sm1,"b","b");
//- {"",0}

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) sm1;
//- "abcd"=>10

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"a","d");
//- "abc"=>6

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b",stl::stlend);
//- "bcd"=>9

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b","d");
//- "bc"=>5

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b","b"); (); // fails
//- ()

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} sm1;
//- {"dcba",10}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sm1,"a","d");
//- {"cba",6}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sm1,"b",stl::stlend);
//- {"dcb",9}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sm1,"b","d");
//- {"cb",5}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (sm1,"b","b");
//- {"",0}

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) sm1;
//- "abcd"=>10

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"a","d");
//- "abc"=>6

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b",stl::stlend);
//- "bcd"=>9

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b","d");
//- "bc"=>5

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (sm1,"b","b"); (); // fails
//- ()

//*** do, filter *******************************************************

let sm1 = stlmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let sm2 = emptystlmap_with (>) (>) (==); [];
//- []

do (\(k=>v) -> update sm2 k v) sm1; members sm2;
//- ["d"=>4,"c"=>3,"b"=>2,"a"=>1]

erase sm2; do (\(k=>v) -> update sm2 k v) (sm1,"a","d"); members sm2;
//- ["c"=>3,"b"=>2,"a"=>1]

erase sm2; do (\(k=>v) -> update sm2 k v) (sm1,"b","x"); members sm2;
//- ["d"=>4,"c"=>3,"b"=>2]

erase sm2; do (\(k=>v) -> update sm2 k v) (sm1,"0","0"); members sm2;
//- []

erase sm2; do (\(k=>v) -> update sm2 k v) (sm1,"x","x"); members sm2;
//- []

erase sm2; do (\(k=>v) -> update sm2 k v) (sm1,"d","x"); members sm2;
//- ["d"=>4]

filter (\(k=>v) -> v mod 2) sm1;
//- ["a"=>1,"c"=>3]

filter (\(k=>v) -> v mod 2) (sm1,"a","c");
//- ["a"=>1]

filter (\(k=>v) -> v mod 2) (sm1,"c",stl::stlend);
//- ["c"=>3]

filter (\(k=>v) -> v mod 2) (sm1,"d","d");
//- []

//** Set operations ******************************************************

let sm1 = stlmap ["a"=>11,"b"=>12,"c"=>14,"d"=>15]; members sm1;
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15]

let sm2 = stlmap ["a"=>11,"b"=>21,"c"=>14,"e"=>25]; members sm2;
//- ["a"=>11,"b"=>21,"c"=>14,"e"=>25]

members (sm1 + sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15]

members (sm1 + sm2);
//- ["a"=>11,"b"=>21,"c"=>14,"d"=>15,"e"=>25]

members (sm2 + sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15,"e"=>25]

members (sm1 - sm1);
//- []

members (sm1 - sm2);
//- ["b"=>12,"d"=>15]

members (sm2 - sm1);
//- ["b"=>21,"e"=>25]

members (sm1 * sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15]

members (sm1 * sm2);
//- ["a"=>11,"c"=>14]

members (sm2 * sm1);
//- ["a"=>11,"c"=>14]

members (stl::merge sm1 sm2);
//- ["a"=>11,"b"=>21,"c"=>14,"d"=>15,"e"=>25]

members (stl::merge sm2 sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15,"e"=>25]

members (stl::set_union sm1 sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15]

members (stl::set_union sm1 sm2);
//- ["a"=>11,"b"=>21,"c"=>14,"d"=>15,"e"=>25]

members (stl::set_union sm2 sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15,"e"=>25]

members (stl::set_intersection sm1 sm1);
//- ["a"=>11,"b"=>12,"c"=>14,"d"=>15]

members (stl::set_intersection sm1 sm2);
//- ["a"=>11,"b"=>21,"c"=>14]

members (stl::set_intersection sm2 sm1);
//- ["a"=>11,"b"=>12,"c"=>14]

members (stl::set_difference sm1 sm1);
//- []

members (stl::set_difference sm1 sm2);
//- ["d"=>15]

members (stl::set_difference sm2 sm1);
//- ["e"=>25]

members (stl::set_symmetric_difference sm1 sm1);
//- []

members (stl::set_symmetric_difference sm1 sm2);
//- ["d"=>15,"e"=>25]

members (stl::set_symmetric_difference sm2 sm1);
//- ["d"=>15,"e"=>25]

stl::set_includes sm1 (sm1,"b","d");
//- 1

stl::set_includes (sm1,"b","d") sm1;
//- 0

stl::set_includes sm2 (sm1,"a","b");
//- 1

//** Cache sensitive sequences ****************************************

let sm1 = stlmap $ zipwith (=>) ("a".."j") (1..10); members sm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

stl::set_sm_trace 1;
//- ()

member sm1 "a";
//- 1

sm1!"a";
//- 1

erase (sm1,"b"); members sm1;
//- ["a"=>1,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

sm1!"a";
//- 1

member sm1 "a";
//- 1

erase (sm1,"a"); members sm1;
//- ["c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

member sm1 "a";
//- 0

sm1!"e";
//- 5

rmfirst sm1;
//- 1

sm1!"e";
//- 5

member sm1 "c";
//- 0

sm1!"e"
//- 5

rmlast sm1; members sm1;
//- ["d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9]

sm1!"e";
//- 5

member sm1 "k";
//- 0

sm1!"e";
//- 5

erase (sm1, "h", stl::stlend); members sm1;
//- ["d"=>4,"e"=>5,"f"=>6,"g"=>7]

sm1!"e";
//- 5

member sm1 "i";
//- 0

member sm1 "e";
//- 1

stl::set_sm_trace 0;
//- ()

//*** Fancy updating - C++ default value style ********************* 

let sm1 = emptystlmap; members sm1;
//- []

stl::set_default sm1 0; stl::get_default sm1;
//- 1,0

update_with (+) sm1 "a" 1; update_with (+) sm1 "a" 1; members sm1;
//- ["a"=>2]

erase sm1; #sm1;
//- 0

stl::set_default sm1 []; stl::get_default sm1;
//- 1,[]

update_with (:) sm1 "a" 1; update_with (:) sm1 "a" 2; members sm1;
//- ["a"=>[2,1]]

erase sm1; #sm1;
//- 0

stl::set_default sm1 emptystlvec; stl::get_default sm1; ();
//- ()

update_with (flip append) sm1 "a" 1; ();
//- ()

update_with (flip append) sm1 "a" 2; ();
//- ()

members (sm1!"a");
//- [1,2]

