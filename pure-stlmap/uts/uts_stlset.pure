/* uts_stlset.pure -- tests for stlset */
//-- --comment c_on --verbose off

//*** Imports *********************************************************

using system, stlmap, stlvec;
//- ()

//*** Constructors ******************************************************

let sv1 = ::stlvec ["a","b","c","d","e"]; members sv1;
//- ["a","b","c","d","e"]

let sm1 = stlset ["a","b","c","d","e"]; members sm1;
//- ["a","b","c","d","e"]

let sm1 = stlset {"a","b","c","d","e"}; members sm1;
//- ["a","b","c","d","e"]

let sm1 = stlset sv1; members sm1;
//- ["a","b","c","d","e"]

let sm2 = stlset sm1; members sm2;
//- ["a","b","c","d","e"]

let sm2 = stlset (sm1,"c","z"); members sm2;
//- ["c","d","e"]

/*** Info ***************************************************************/

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let sm2 = stlset ["b","c","d"];
//- ()

let ok, smx, f, l = stl::range_info sm1; ok;
//- 1

smx===sm1, f==stl::begin sm1, l==stl::pastend sm1;
//- 1,1,1

let ok, smx, f, l = stl::range_info (sm1,"b","e"); ok;
//- 1

members (f,l);
//- ["b","c","d"]

#sm1;
//- 5

stl::distance (sm1,"b",stl::smend);
//- 4

stl::empty emptystlset;
//- 1

stl::count sm1 "c";
//- 1

stl::container_info sm1;
//- 1,(<),[],[],[]

/*** Accessing Ranges as stlvecs or lists ******************************/

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let sv1 = stlvec sm1; members sv1;
//- ["a","b","c","d","e"]

stl::vector (sm1,"b","d");;
stl::vector (sm1,"b","d");;
//- {"b","c"}

members (sm1,stl::smbeg,stl::smbeg);
//- []

members (sm1,stl::smbeg,stl::smend);
//- ["a","b","c","d","e"]

members (sm1,stl::smend,stl::smbeg);
//- []

members (sm1,stl::smend,stl::smend);
//- []

members (sm1,"0","c");
//- ["a","b"]

members (sm1,"a","d");
//- ["a","b","c"]

members (sm1,"b","d");
//- ["b","c"]

members (sm1,"b",stl::smend);
//- ["b","c","d","e"]

members (sm1,"c","e");
//- ["c","d"]

members (sm1,"d","b");
//- []

keys (sm1,"a",stl::smend);
//- ["a","b","c","d","e"]

keys (sm1,"a","e");
//- ["a","b","c","d"]

keys (sm1,"b","d");
//- ["b","c"]

vals (sm1,"a",stl::smend);
//- ["a","b","c","d","e"]

vals (sm1,"a","e");
//- ["a","b","c","d"]

vals (sm1,"b","d");
//- ["b","c"]

/*** Accessing Ranges using Streams **********************************/

let sm1 = stlset ["a","b","c","d","e"];
//- ()

head $ stream sm1;
//- "a"

list $ stream sm1;
//- ["a","b","c","d","e"]

list $ take 3 (stream sm1);
//- ["a","b","c"]

list $ take 10 (stream sm1);
//- ["a","b","c","d","e"]

list $ take 10 $ drop 2 (stream sm1);
//- ["c","d","e"]

//*** Insert *************************************************************/

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let sm2 = mkstlset (>);
//- ()

insert sm2 ("a".."c");
//- 3

members sm2;
//- ["c","b","a"]

insert sm2 {"c","d"};
//- 1

members sm2;
//- ["d","c","b","a"]

insert sm2 sm1;
//- 1

members sm2;
//- ["e","d","c","b","a"]

insert sm2 "b";
//- 0

insert sm2 ["f"]; 
//- 1

members sm2;
//- ["f","e","d","c","b","a"]

//*** erase ***************************************************************/

// Erase element at position

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

erase (sm1,i_begin); 
//- 1

members sm1;
//- ["b","c","d","e"]

erase (sm1,i_d); members sm1;
//- ["b","c","e"]

erase (sm1,i_b); members sm1;
//- ["c","e"]

// Erase ranges

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

stl::get_elm i_b;
//- "b"

erase (sm1,i_b,i_d);
//- 2

members sm1;
//- ["a","d","e"]

catch id $ stl::get_elm i_b;
//- bad_argument

erase (sm1,i_d,i_pastend);
//- 2

members sm1;
//- ["a"]

erase (sm1,i_begin,i_pastend);
//- 1

members sm1;
//- []

// Attempt erase with bad iterators

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let sm2 = stlset ["a","b","c","d","e"];
//- ()

let i_b, i_d = stl::find sm1 "b", stl::find sm1 "d"; 
//- ()

catch id $ erase (sm2,i_b);
//- bad_argument

catch id $ erase (sm2,i_b,i_d);
//- bad_argument

// Erase members with given key

let sm1 = stlset ["a","b","c","d","e"];
//- ()

erase (sm1,"0");
//- 0

erase (sm1,"z");
//- 0

erase (sm1,"b");
//- 1

members sm1;
//- ["a","c","d","e"]

erase (sm1,"a"); members sm1;
//- ["c","d","e"]

erase (sm1,"e"); members sm1;
//- ["c","d"]

//*** swap ***************************************************************/

let sm1 = stlset ["a","b"];
//- ()

let sm2 = stlset ["c","d","e"];
//- ()

stl::swap sm1 sm2;
//- ()

members sm1;
//- ["c","d","e"]

members sm2;
//- ["a","b"]

//** Equality and Lexicographical Comparison ****************************/

let sm1 = stlset ["a","b","c","d"];
//- ()

let sm2 = stlset ["b","c","d"];
//- ()

stl::map_equal sm1 sm1;
//- 1

stl::map_equal sm1 sm2;
//- 0

stl::map_equal sm2 sm1;
//- 0

stl::map_equal (sm1,"b","e") sm1;
//- 0

stl::map_equal (sm1,"b","e") sm2;
//- 1

stl::map_equal (sm1,"b","d") (sm2,stl::smbeg, "d");
//- 1

sm1 == sm1;
//- 1

sm1 == sm2;
//- 0

sm2 == sm1;
//- 0

sm1 ~= sm1;
//- 0

sm1 ~= sm2;
//- 1

sm1 <  sm1;
//- 0

sm1 <  sm2;
//- 1

sm2 <  sm1;
//- 0

sm1 <= sm1;
//- 1

sm1 <= sm2;
//- 1

sm2 <= sm1;
//- 0

sm1 >  sm1;
//- 0

sm1 >  sm2;
//- 0

sm2 >  sm1;
//- 1

sm1 >= sm1;
//- 1

sm1 >= sm2;
//- 0

sm2 >= sm1;
//- 1

(sm1,"b",stl::smend) == sm2; // note tuple overrided issue
//- 0

stl::map_equal sm1 sm1;
//- 1

stl::map_equal sm1 sm2;
//- 0

stl::map_equal (sm1,"b",stl::smend) sm2;
//- 1

stl::map_equal (sm1,"c",stl::smend) sm2;
//- 0

stl::map_equal (sm1,"c",stl::smend) (sm2,"c",stl::smend);
//- 1

stl::map_equal sm2 (sm1,"b",stl::smend);
//- 1

(sm1,"b",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < (sm2,"c",stl::smend);
//- 0

(sm1,"b",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < sm2;
//- 0

(sm1,"c",stl::smend) < (sm2,"c",stl::smend);
//- 0

//*** STL Set Algorithms *********************************************

let sm1 = stlset ["a","b","c"];
//- ()

let sm2 = stlset ["b","c","d"];
//- ()

let sm3 = stlset ["a","b","c","d"];
//- ()

let sm = stl::map_merge sm1 sm2; members sm;
//- ["a","b","c","d"]

let sm = stl::map_merge sm3 sm2; members sm;
//- ["a","b","c","d"]

let sm = stl::map_merge sm2 sm3; members sm;
//- ["a","b","c","d"]

let sm = stl::map_union sm1 sm2; members sm;
//- ["a","b","c","d"]

let sm = stl::map_union sm3 sm2; members sm;
//- ["a","b","c","d"]

let sm = stl::map_union sm2 sm3; members sm;
//- ["a","b","c","d"]

let sm = stl::map_intersection sm1 sm2; members sm;
//- ["b","c"]

let sm = stl::map_intersection sm3 sm2; members sm;
//- ["b","c","d"]

let sm = stl::map_intersection sm2 sm3; members sm;
//- ["b","c","d"]

let sm = stl::map_difference sm1 sm2; members sm;
//- ["a"]

let sm = stl::map_difference sm3 sm2; members sm;
//- ["a"]

let sm = stl::map_difference sm2 sm3; members sm;
//- []

let sm = stl::map_symmetric_difference sm1 sm2; members sm;
//- ["a","d"]

let sm = stl::map_symmetric_difference sm3 sm2; members sm;
//- ["a"]

let sm = stl::map_symmetric_difference sm2 sm3; members sm;
//- ["a"]

stl::map_includes sm1 sm2;
//- 0

stl::map_includes sm3 sm2;
//- 1

stl::map_includes sm2 sm3;
//- 0

//*** Mapping *****************************************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_e = stl::find sm1 "b", stl::find sm1 "e";
//- ()

listmap (\e->e+10) sm1;
//- ["k","l","m","n","o"]

listmap (\e->e+10) (i_begin,i_pastend);
//- ["k","l","m","n","o"]

catch id $ listmap (\e->e+10) (i_pastend,i_begin);
//- bad_argument

listmap (\e->e+10) (i_begin,i_begin);
//- []

listmap (\e->e+10) (i_pastend,i_pastend);
//- []

listmap (\e->e+10) (i_b,i_e);
//- ["l","m","n"]

catch id $ listmap (\e->e+10) (i_e,i_b);
//- bad_argument

listmap (\e->e+10) (i_b,i_pastend)
//- ["l","m","n","o"]

catch id $ listmap (\e->e+10) (i_pastend,i_b)
//- bad_argument

listmap (\e->e+10) sm1;
//- ["k","l","m","n","o"]

catmap (\e->[e+10]) (i_begin,i_pastend);
//- ["k","l","m","n","o"]

catch id $ catmap (\e->[e+10]) (i_pastend,i_begin);
//- bad_argument

catmap (\e->[e+10]) (i_begin,i_begin);
//- []

catmap (\e->[e+10]) (i_pastend,i_pastend);
//- []

catmap (\e->[e+10]) (i_b,i_e);
//- ["l","m","n"]

catch id $ catmap (\e->[e+10]) (i_e,i_b);
//- bad_argument

catmap (\e->[e+10]) (i_b,i_pastend)
//- ["l","m","n","o"]

catch id $ catmap (\e->[e+10]) (i_pastend,i_b)
//- bad_argument

[ e+1 | e = sm1];
//- ["b","c","d","e","f"]

[ e | e = sm1; (ord e) mod 2];
//- ["a","c","e"]

{ e | e = sm1};
//- {"a","b","c","d","e"}

{ {e} |  e = sm1; (ord e) mod 2};
//- {"a","c","e"}

//** foldl, foldl1 **************************************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_e = stl::find sm1 "b", stl::find sm1 "e";
//- ()

foldl (\acc e -> e:acc) ["x"] (i_begin,i_b);
//- ["a","x"]

foldl (\acc e -> e:acc) ["x"] (i_b,i_pastend);
//- ["e","d","c","b","x"]

catch id $ foldl (\acc e -> e:acc) ["x"] (i_pastend,i_b);
//- bad_argument

foldl1 (\acc e -> e+","+acc) sm1;
//- "e,d,c,b,a"

catch id $ foldl1 (\acc e -> e+","+acc) (i_begin,i_begin);
//- bad_argument

foldl1 (\acc e -> e+","+acc) (i_begin,i_pastend);
//- "e,d,c,b,a"

catch id $ foldl1 (\acc e -> e+","+acc) (i_pastend,i_begin);
//- bad_argument

catch id $ foldl1 (\acc e -> e+","+acc) (i_pastend,i_pastend);
//- bad_argument

catch id $ foldl1 (\acc e -> e+","+acc) (i_b,i_b);
//- bad_argument

foldl1 (\acc e -> e+","+acc) (i_b,i_e);
//- "d,c,b"

catch id $ foldl1 (\acc e -> e+","+acc) (i_e,i_b);
//- bad_argument

catch id $ foldl1 (\acc e -> e+","+acc) (i_e,i_e);
//- bad_argument

catch id $ foldl1 (\acc e -> e+","+acc) (i_b,i_begin);
//- bad_argument

foldl1 (\acc e -> e+","+acc) (i_begin,i_b);
//- "a"

foldl1 (\acc e -> e+","+acc) (i_b,i_pastend);
//- "e,d,c,b"

catch id $ foldl1 (\acc e -> e+","+acc) (i_pastend,i_b);
//- bad_argument

//** foldr, foldr1 **************************************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let i_begin, i_pastend = stl::begin sm1, stl::pastend sm1;
//- ()

let i_b, i_e = stl::find sm1 "b", stl::find sm1 "e";
//- ()

foldr (\e acc -> e:acc) ["x"] sm1;
//- ["a","b","c","d","e","x"]

foldr (\e acc -> e:acc) ["x"] (i_begin,i_begin);
//- ["x"]

foldr (\e acc -> e:acc) ["x"] (i_begin,i_pastend);
//- ["a","b","c","d","e","x"]

catch id $ foldr (\e acc -> e:acc) ["x"] (i_pastend,i_begin);
//- bad_argument

foldr (\e acc -> e:acc) ["x"] (i_pastend,i_pastend);
//- ["x"]

foldr (\e acc -> e:acc) ["x"] (i_b,i_b);
//- ["x"]

foldr (\e acc -> e:acc) ["x"] (i_b,i_e);
//- ["b","c","d","x"]

catch id $ foldr (\e acc -> e:acc) ["x"] (i_e,i_b);
//- bad_argument

foldr (\e acc -> e:acc) ["x"] (i_e,i_e);
//- ["x"]

catch id $ foldr (\e acc -> e:acc) ["x"] (i_b,i_begin);
//- bad_argument

foldr (\e acc -> e:acc) ["x"] (i_begin,i_b);
//- ["a","x"]

foldr (\e acc -> e:acc) ["x"] (i_b,i_pastend);
//- ["b","c","d","e","x"]

catch id $ foldr (\e acc -> e:acc) ["x"] (i_pastend,i_b);
//- bad_argument

foldr1 (\e acc -> e+","+acc) sm1;
//- "a,b,c,d,e"

catch id $ foldr1 (\e acc -> e+","+acc) (i_begin,i_begin);
//- bad_argument

foldr1 (\e acc -> e+","+acc) (i_begin,i_pastend);
//- "a,b,c,d,e"

catch id $ foldr1 (\e acc -> e+","+acc) (i_pastend,i_begin);
//- bad_argument

catch id $ foldr1 (\e acc -> e+","+acc) (i_pastend,i_pastend);
//- bad_argument

catch id $ foldr1 (\e acc -> e+","+acc) (i_b,i_b);
//- bad_argument

foldr1 (\e acc -> e+","+acc) (i_b,i_e);
//- "b,c,d"

catch id $ foldr1 (\e acc -> e+","+acc) (i_e,i_b);
//- bad_argument

catch id $ foldr1 (\e acc -> e+","+acc) (i_e,i_e);
//- bad_argument

catch id $ foldr1 (\e acc -> e+","+acc) (i_b,i_begin);
//- bad_argument

foldr1 (\e acc -> e+","+acc) (i_begin,i_b);
//- "a"

foldr1 (\e acc -> e+","+acc) (i_b,i_pastend);
//- "b,c,d,e"

catch id $ foldr1 (\e acc -> e+","+acc) (i_pastend,i_b);
//- bad_argument

//*** do, filter *******************************************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()

let sm2 = mkstlset (>);
//- ()

do (\x -> insert sm2 x) sm1; members sm2;
//- ["e","d","c","b","a"]

filter (\e -> (ord e) mod 2) sm1;
//- ["a","c","e"]

//*** rowmap, rowcatmap, colmap colcatmap ********************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()


rowmap (\e->(e,ord e)) sm1;
//- {("a",97);("b",98);("c",99);("d",100);("e",101)}

rowcatmap (\e->{e,ord e})sm1;
//- {"a",97;"b",98;"c",99;"d",100;"e",101}

rowcatmap (\e->if ord e mod 2 then {e,ord e} else {}) sm1;
//- {"a",97;"c",99;"e",101}

colmap (\e->(e,ord e)) sm1;
//- {("a",97),("b",98),("c",99),("d",100),("e",101)}
 
colcatmap (\e->{e;ord e})sm1;
//- {"a","b","c","d","e";97,98,99,100,101}

colcatmap (\e->if ord e mod 2 then {e;ord e} else {}) sm1;
//- {"a","c","e";97,99,101}

//*** Key Oriented Functions *********************************************

let sm1 = stlset ["a","b","c","d","e"];
//- ()

sm1!stl::smbeg, sm1!"a", sm1!"d", sm1!"e"
//- "a","a","d","e"

catch id $ sm1!"0";
//- out_of_bounds

member sm1 "0", member sm1 "a", member sm1 "c";
//- 0,1,1

member sm1 "e", member sm1 "f", member sm1 stl::smbeg;
//- 1,0,1

stl::bounds sm1;
//- stl::smbeg,stl::smend

stl::bounds (sm1,"0","z");
//- stl::smbeg,stl::smend

stl::bounds (sm1,"b","d");
//- "b","d"

stl::bounds (sm1,"0","z");
//- stl::smbeg,stl::smend

stl::bounds (sm1,"b","d");
//- "b","d"

stl::bounds (sm1,"d","b");
//- "d","d"

catch id $ stl::prev_key sm1 "a";
//- out_of_bounds

stl::prev_key sm1 "b";
//- stl::smbeg

stl::prev_key sm1 "e";
//- "d"

stl::prev_key sm1 stl::smend;
//- "e"

stl::next_key sm1 "a";
//- "b"

stl::next_key sm1 "d";
//- "e"

stl::next_key sm1 "e";
//- stl::smend

stl::next_key sm1 stl::smend;
//- stl::smend

