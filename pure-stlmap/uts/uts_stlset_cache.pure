/* uts_stlset_cache.pure -- tests for caching keys for stlsets */
//-- --comment c++_on --verbose off

//*** Imports *********************************************************

using system, stlmap;
//- ()

//*** Set up some keys ************************************************

let [ak,bk,ck,dk,ek] = "a".."e";
//- ()

[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

//*** Check FIFO ordering of cached keys ******************************

let sm = stlset ["a","b","c","d","e"];
//- ()

sm!ak,sm!bk,sm!ck;
//- "a","b","c"

// cache: ak,bk,ck 
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,2,1,1]

sm!ak;
//- "a"

// cache: bk,ck,ak 
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,2,1,1]

--- trace cache hit, key: "c"
sm!ck;
//- "c"

// cache: bk,ak,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,2,1,1]

sm!ck;
//- "c"

// cache: bk,ak,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,2,1,1]

sm!ek
//- "e"

// cache: ak,ck,ek
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,2,1,2]

catch id $ sm!"x";
//- out_of_bounds

// cache: ak,ck,ek
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,2,1,2]

sm!"e";
//- "e"

// cache: ck,ek,"e"
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,2,1,2]

sm!"e"; 
//- "e"

// cache: ek,"e","e"
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,2]

//*** Check Removal of Invalid Iterators (last in pos = 0) ****************

~stlset or stlset: 0xadf7120
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

// push forward so the physical cache is "c","a","b" ("c" is last_in)
sm!ek,sm!ak,sm!bk,sm!ck;
//- "e","a","b","c"

erase (sm,ak);  // erase first cache element
//- 1

// cache: bk,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,2,1,1]

sm!dk,sm!ek;  // push "b" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,1,2,2]


~stlset or stlset: 0xc153048
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ek,sm!ak,sm!bk,sm!ck;
//- "e","a","b","c"

erase (sm,bk);  // erase middle cache element
//- 1

// cache: ak,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,2,1,1]

sm!dk,sm!ek;  // push "a" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,1,2,2]

~stlset or stlset: 0xaf94e70
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ek,sm!ak,sm!bk,sm!ck;
//- "e","a","b","c"

erase (sm,ck);  // erase last cache element
//- 1

// cache: ak,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,1,1,1]

sm!dk,sm!ek;  // push "a" out of cache
//- "d","e"

// cache: dk,ek,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,1,2,2]

//*** Check Removal of Invalid Iterators (last in pos = 1) ****************

~stlset or stlset: 0xadf7120
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

// push forward so the physical cache is "b","c","a" ("c" is last_in)
sm!dk,sm!ek,sm!ak,sm!bk,sm!ck;
//- "d","e","a","b","c"

erase (sm,ak);  // erase first cache element
//- 1

// cache: bk,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,2,1,1]

sm!dk,sm!ek;  // push "b" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,2,2,2]


~stlset or stlset: 0xc153048
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ek,sm!ak,sm!bk,sm!ck;
//- "e","a","b","c"

erase (sm,bk);  // erase middle cache element
//- 1

// cache: ak,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,2,1,1]

sm!dk,sm!ek;  // push "a" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,1,2,2]

~stlset or stlset: 0xaf94e70
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ek,sm!ak,sm!bk,sm!ck;
//- "e","a","b","c"

erase (sm,ck);  // erase last cache element
//- 1

// cache: ak,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,1,1,1]

sm!dk,sm!ek;  // push "a" out of cache
//- "d","e"

// cache: dk,ek,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,1,2,2]

//*** Check Removal of Invalid Iterators (last in pos = 2) ****************

~stlset or stlset: 0xb4f1940
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

// physical cache is "a","b","c" ("c" is last_in)
sm!ak,sm!bk,sm!ck;
//- "a","b","c"

erase (sm,ak);  // erase first cache element
//- 1

// cache: bk,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,2,1,1]

sm!dk,sm!ek;  // push "b" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,2,2,2]


~stlset or stlset: 0xbbc1c90
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ak,sm!bk,sm!ck;
//- "a","b","c"

erase (sm,bk);  // erase middle cache element
//- 1

// cache: ak,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,1,2,1,1]

sm!dk,sm!ek;  // push "a" out of cache
//- "d","e"

// cache: dk,ek,ck
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,2,2,2]

~stlset or stlset: 0xadf7fc8
let sm = stlset ["a","b","c","d","e"];
//- ()

// cache: empty
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,1,1,1,1]

sm!ak,sm!bk,sm!ck;
//- "a","b","c"

erase (sm,ck);  // erase last cache element
//- 1

// cache: ak,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [2,2,1,1,1]

sm!dk,sm!ek;  // push "a" out of cash
//- "d","e"

// cache: dk,ek,bk
[stl::refc ak,stl::refc bk,stl::refc ck,stl::refc dk,stl::refc ek]
//- [1,2,1,2,2]


