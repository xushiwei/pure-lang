/* stlmap.pure: Pure interface to C++ STL map
    
--- DRAFT - FOR DISCUSSON PURPOSES ONLY ---

Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlmap, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlmap distribution package for details.

*/
 
using stlbase;
using "lib:stlassoc";

namespace stl;

/*** C++ Support **********************************************************/

extern expr* sm_type_tags();
private extern expr* sm_make_empty(expr* kcmp, expr* vcmp, expr* veql,
                                   expr* default_val, int ko);
private extern void  sm_delete(void* smp);
private extern void  sm_iter_delete(void* smip);

extern expr* sm_container_info(expr* rng); 
extern int   sm_size(expr* rng);
extern int   sm_count(expr* pxsmp, expr* key);
extern bool  sm_empty(expr* rng);
extern bool  sm_is_set(expr* rng);
extern expr* sm_find(expr* pxsmp, expr* key, int what);
extern expr* sm_copy_iter(expr* pxsmip);
extern expr* sm_begin(expr* pxsmp);
extern expr* sm_end(expr* pxsmp); 
extern expr* sm_bounds(expr* pxsmp, expr* key, int what);
extern expr* sm_range_info(expr* rng);
extern expr* sm_move_iter(expr* pxsmp, int count);
extern expr* sm_iter_is_at(expr* pxsmip, int where);
extern expr* sm_iter_info(expr* pxsmip);
extern expr* sm_equal_iter(expr* pxsmp, expr* pxsmp);
extern expr* sm_get_at(expr* pxsmip, int what);
extern expr* sm_get_elm_at_inc(expr* pxsmip);
extern expr* sm_put_at(expr* pxsmip, expr* val);
extern expr* sm_insert_hinted(expr*map, expr* iter, expr* kv);
extern expr* sm_insert_elm(expr* map, expr* kv);
extern int   sm_insert(expr* map, expr* src);
extern int   sm_insert_elms_stlvec(expr* map, void* svp);
extern int   sm_insert_elms_stlmap(expr* map, expr* rng);
extern void  sm_swap(expr* sac1, expr* sac2);
extern int   sm_erase(expr* sac, expr* trg);
extern int   sm_clear(expr* map);
extern int   sm_equal(expr* rng1, expr* rng2);
extern int   sm_less(expr* rng1, expr* rng2);
extern bool  sm_includes(expr* rng1, expr* rng2);
extern expr* sm_setop(int op, expr* rng1, expr* rng2);
extern expr* sm_make_vector(expr* rng);
extern void* sm_fill_stlvec(expr* rng, void* v);
extern expr* sm_listmap(expr* fun, expr* rng, int what);
extern expr* sm_listcatmap(expr* fun, expr* rng, int what);
extern expr* sm_foldl(expr* fun, expr* val, expr* rng);
extern expr* sm_foldl1(expr* fun, expr* rng);
extern expr* sm_foldr(expr* fun, expr* val, expr* rng);
extern expr* sm_foldr1(expr* fun, expr* rng);
extern void  sm_do(expr* fun, expr* rng);
extern int   sm_member(expr* map, expr* key);
extern expr* sm_bounding_keys(expr* rng);
extern expr* sm_prev_key(expr* map, expr* key);
extern expr* sm_next_key(expr* map, expr* key);
extern expr* sm_update(expr* map, expr* key, expr* val);
extern expr* sm_update_with(expr* map, expr* key, expr* unaryfun);

/*** Global Definitions **************************************************/

namespace ;

public emptystlmap mkstlmap emptystlset mkstlset member members erase
  update_elm update_elm_with insert_elm; 

let stlmap_t, stlmap_iter_t = stl::sm_type_tags;

type stlmap x::pointer = check_ptrtag stlmap_t x;     //c++ map
type stlset x::pointer = check_ptrtag stlmap_t x && stl::sm_is_set x;

type stlmap_iter x::pointer = check_ptrtag stlmap_iter_t x;

type stlmap_rng x::stlmap | stlmap_rng (x::stlmap, _);
type stlmap_rng (x::stlmap_iter, y::stlmap_iter);

namespace stl;

/*** Helpers **************************************************************/

private 
  sm_lower_bound
  sm_iter sm_key sm_val sm_elm 
  sm_merge sm_union sm_difference sm_intersection sm_symmetric_difference 
  compatible_ranges;

const sm_lower_bound = 1;
const sm_upper_bound = 2;
const sm_equal_range = 3;

const sm_key = 1;
const sm_val = 2;
const sm_elm = 3;
const sm_iter = 4;
const sm_iter_dflt = 5;

const sm_merge = 1;
const sm_union = 2;
const sm_difference = 3;
const sm_intersection = 4;
const sm_symmetric_difference = 5;

const sm_at_beginning = 1;
const sm_at_pastend = 2; 

compatible_ranges rng1::stlmap_rng rng2 = 
  if sm_is_set rng1 then sm_is_set rng2 else ~sm_is_set rng2;

/*** Iterators **********************************************************/

iterator pos::stlmap_iter = sm_copy_iter pos;

begin sm::stlmap = sm_begin sm;

pastend sm::stlmap = sm_end sm;

find sm::stlmap key = sm_find sm key sm_iter;

l_bound sm::stlmap key = sm_bounds sm key sm_lower_bound;

u_bound sm::stlmap key = sm_bounds sm key sm_upper_bound;

lu_bounds sm::stlmap key = sm_bounds sm key sm_equal_range;

beginp pos::stlmap_iter = sm_iter_is_at pos sm_at_beginning;

endp pos::stlmap_iter = sm_iter_is_at pos sm_at_pastend;

get_info pos::stlmap_iter = sm_iter_info pos;

::get pos::stlmap_iter = sm_get_at pos sm_elm;   // like *p

get_key pos::stlmap_iter = sm_get_at pos sm_key; // p->first

get_val pos::stlmap_iter = sm_get_at pos sm_val; // p->second

::put pos::stlmap_iter val = sm_put_at pos val;

inc pos::stlmap_iter = sm_move_iter pos 1;

dec pos::stlmap_iter = sm_move_iter pos (-1);

move pos::stlmap_iter n::int = sm_move_iter pos n;

insert_elm sm::stlmap (elm,pos::stlmap_iter) = sm_insert_hinted sm pos elm;

insert_elm sm::stlmap elm = sm_insert_elm sm elm;

/*** Iterator Operators ****************************************************/

(::==) pos1::stlmap_iter pos2::stlmap_iter = sm_equal_iter pos1 pos2;

(::^) sm::stlmap key = sm_find sm key sm_iter_dflt;  // inserts like [k]

/***  Constructors *********************************************************/

::emptystlmap                    = sm_make_empty (<) (<) (==) [] 0;

::mkstlmap (kcmp,dflt,vcmp,veql) = sm_make_empty kcmp vcmp veql dflt 0;
::mkstlmap (kcmp,dflt,vcmp)      = sm_make_empty kcmp vcmp (==) dflt 0;
::mkstlmap (kcmp,dflt)           = sm_make_empty kcmp (<) (==) dflt  0;
::mkstlmap kcmp                  = sm_make_empty kcmp (<) (==) [] 0;

::stlmap xs = sm when
  sm = ::emptystlmap;
  sm_insert sm xs;
end if listp xs || matrixp xs;

::stlmap (STLVEC svp) = sm when
  sm = ::emptystlmap;
  sm_insert_elms_stlvec sm svp;
end;

::stlmap rng::stlmap_rng = sm when
  _,params = sm_container_info rng;
  sm = mkstlmap params;
  sm_insert_elms_stlmap sm rng;
end if ~sm_is_set rng;

::emptystlset = sm_make_empty (<) (<) (==) [] 1;

::mkstlset kcmp = sm_make_empty kcmp (<) (==) [] 1;

::stlset xs = ss when
  ss = ::emptystlset;
  sm_insert ss xs;
end if listp xs || matrixp xs;

::stlset (STLVEC svp) = ss when
  ss = ::emptystlset;
  sm_insert_elms_stlvec ss svp;
end;

::stlset rng::stlmap_rng = ss when
  _,kc,_ = sm_container_info rng;
  ss = mkstlset kc;
  sm_insert_elms_stlmap ss rng;
end if sm_is_set rng;

/*** Info ***************************************************************/

container_info rng::stlmap_rng = sm_container_info rng;

(::#) sm::stlmap = sm_size sm;

empty sm::stlmap = sm_empty sm;

count sm::stlmap key = sm_count sm key;

range_info rng::stlmap_rng = sm_range_info rng;

distance rng::stlmap_rng = sm_size rng;

/*** Range Access ****************************************************/

::stream rng::stlmap_rng = gen first with 
  gen i = if sm_equal_iter i last then [] 
          else sm_get_elm_at_inc i : (gen i &);  
end if valid when 
  valid,m,b,last = sm_range_info rng;
  first = sm_copy_iter b;
end;

::members rng::stlmap_rng = sm_listmap 0 rng sm_elm; 

::keys rng::stlmap_rng = sm_listmap 0 rng sm_key;// if ~sm_is_set rng;

::vals rng::stlmap_rng = sm_listmap 0 rng sm_val;// if ~sm_is_set rng;

vector rng::stlmap_rng = sm_make_vector rng;

::stlvec rng::stlmap_rng = sv if ok when
  sv = emptystlvec;
  ok = case sv of  
    STLVEC v = sm_fill_stlvec rng v $$ 1;
    _ = 0;
  end;
end;

/*** Modifiers *********************************************************/

::insert sm::stlmap (STLVEC svp) = sm_insert_elms_stlvec sm svp;

::insert sm::stlmap rng::stlmap_rng = sm_insert_elms_stlmap sm rng;

::insert sm::stlmap src = sm_insert sm src;

::update sm::stlmap key val = sm_update sm key val;

::update_elm sm::stlmap (k=>v) = sm_update sm k v;

::update_elm_with f sm::stlmap (k=>x) = sm_update_with sm k (f x);

::erase sm::stlmap = sm_clear sm;

::erase (sm::stlmap,i::stlmap_iter, j::stlmap_iter) = sm_erase sm (i,j);

::erase (sm::stlmap,pos::stlmap_iter) = sm_erase sm pos;

::erase (sm::stlmap,key1,key2) = sm_erase sm (sm,key1,key2);

::erase (sm::stlmap,key) = sm_erase sm (sm,key);

swap sm1::stlmap sm2::stlmap = sm_swap sm1 sm2;

swap ss1::stlset ss2::stlset = sm_swap ss1 ss2;

/*** Equality and Lexicographical Comparison ***************************/

map_equal rng1::stlmap_rng rng2::stlmap_rng = sm_equal rng1 rng2
  if compatible_ranges rng1 rng2;

(::==) sac1::stlmap sac2::stlmap = sm_equal sac1 sac2
  if compatible_ranges sac1 sac2;

(::~=) sac1::stlmap sac2::stlmap = ~sm_equal sac1 sac2
  if compatible_ranges sac1 sac2;

(::<) rng1::stlmap_rng rng2::stlmap_rng = sm_less rng1 rng2
  if compatible_ranges rng1 rng2;

(::<=) rng1::stlmap_rng rng2::stlmap_rng = ~sm_less rng2 rng1
  if compatible_ranges rng1 rng2;

(::>) rng1::stlmap_rng rng2::stlmap_rng = sm_less rng2 rng1
  if compatible_ranges rng1 rng2;

(::>=) rng1::stlmap_rng rng2::stlmap_rng = ~sm_less rng1 rng2
  if compatible_ranges rng1 rng2;

/** STL Set Algorithms ***************************************************/

map_merge rng1::stlmap_rng rng2::stlmap_rng = 
  sm_setop sm_merge rng1 rng2 if compatible_ranges rng1 rng2;

map_union rng1::stlmap_rng rng2::stlmap_rng = 
  sm_setop sm_union rng1 rng2 if compatible_ranges rng1 rng2;

map_difference rng1::stlmap_rng rng2::stlmap_rng = 
  sm_setop sm_difference rng1 rng2 if compatible_ranges rng1 rng2;

map_intersection rng1::stlmap_rng rng2::stlmap_rng = 
  sm_setop sm_intersection rng1 rng2 if compatible_ranges rng1 rng2;

map_symmetric_difference rng1::stlmap_rng rng2::stlmap_rng = 
  sm_setop sm_symmetric_difference rng1 rng2 if compatible_ranges rng1 rng2;

map_includes rng1::stlmap_rng rng2::stlmap_rng =
  sm_includes rng1 rng2 if compatible_ranges rng1 rng2;

/*** Key Oriented Interface Functions *********************************/

(::!) sm::stlmap key = sm_find sm key sm_val;

::get (sm::stlmap,key) = sm_find sm key sm_elm; 

::member sm::stlmap key = sm_member sm key;

bounding_keys rng::stlmap_rng = sm_bounding_keys rng;

next_key sm::stlmap key = sm_next_key sm key;

prev_key sm::stlmap key = sm_prev_key sm key;

/*** Mapping and Folding *************************************************/

::map f rng::stlmap_rng = sm_listmap f rng sm_elm;

::foldl f x rng::stlmap_rng = sm_foldl f x rng;

::foldl1 f rng::stlmap_rng = sm_foldl1 f rng;

::foldr f x rng::stlmap_rng = sm_foldr f x rng;

::foldr1 f rng::stlmap_rng = sm_foldr1 f rng;

::do f rng::stlmap_rng = sm_do f rng; 

::filter p rng::stlmap_rng = sm_foldr f [] rng with
  f x xs = res when
    res = case p x of
      1 = x:xs;
      0 = xs;
      y = throw failed_cond;
    end;
  end;
end;

::listmap f rng::stlmap_rng = sm_listmap f rng sm_elm;

::catmap f rng::stlmap_rng = sm_listcatmap f rng sm_elm;

::rowmap f rng::stlmap_rng = rowcat (sm_listmap f rng sm_elm);

::rowcatmap f rng::stlmap_rng = rowcat (sm_listmap f rng sm_elm);

::colmap f rng::stlmap_rng = colcat (sm_listmap f rng sm_elm);

::colcatmap f rng::stlmap_rng = colcat (sm_listmap f rng sm_elm);

