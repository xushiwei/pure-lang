//-- --comment c_off --resume --verbose off

/* ut_script_stlmmap.pure -- examples for basic ops on stlmmap.

   This is a Pure script with a special format that makes it possible for the
   check_eval.pure script to evaluate single lines of Pure code and compare
   the result to an expected result.
  
     $> pure -q -w
      > run check_eval.pure 
      > check "ut_script_stlmmap.pure"
    
    check will print and evaluate single line Pure statements and check
    the result against next line beginning with "//- ", if any.

   See check_eval.pure for more details.

*/

//*** Imports *********************************************************

using system, stlmmap, stlvec;
//- ()

//*** Make stlmmap ******************************************************

let smm1 = stlmmap $ zipwith (=>) ("a".."e") (1..5); members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let sv1 = stlvec $ members smm1; members sv1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let v1 = stl::vector (smm1,"b","d"); v1;
//- {"b"=>2,"c"=>3}

let l1 = members (smm1,stl::stlbeg,"e"); l1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let smm2 = emptystlmmap_with (>); members smm2;
//- []

insert_elms smm2 ["a"=>1,"b"=>2]; members smm2;
//- ["b"=>2,"a"=>1]

let smm3 = stlmmap (sv1,1,stl::svend); members smm3;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

let smm4 = stlmmap v1; members smm4;
//- ["b"=>2,"c"=>3]

let smm5 = stlmmap l1; members smm5;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let smm6 = mkstlmmap 0 ("a".."e"); members smm6;
//- ["a"=>0,"b"=>0,"c"=>0,"d"=>0,"e"=>0]

let smm7 = emptystlmmap; members smm7;
//- []

//*** Simple Access and Update *************************************

let smm1 = stlmmap ["a"=>1,"a"=>2,"a"=>3,"d"=>4,"e"=>5]; members smm1;
//- ["a"=>1,"a"=>2,"a"=>3,"d"=>4,"e"=>5]

smm1!stl::stlbeg;
//- [1,2,3]

catch id $ smm1!stl::stlend;
//- out_of_bounds

smm1!"a";
//- [1,2,3]

smm1!"e";
//- [5]

update smm1 "a" 100; update smm1 "x" 200; members smm1;
//- ["a"=>1,"a"=>2,"a"=>3,"a"=>100,"d"=>4,"e"=>5,"x"=>200]

catch err (smm1!"y");
//- err out_of_bounds

stl::set_default smm1 0;
//- 0

stl::get_default smm1;
//- 1,0

smm1!"y";
//- 0

members smm1;
//- ["a"=>1,"a"=>2,"a"=>3,"a"=>100,"d"=>4,"e"=>5,"x"=>200]

member smm1 "x", member smm1 "z";
//- 1,0

//*** Bidirectional iterator functions *******************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let kb, ke = stl::stlbeg, stl::stlend; kb, ke;
//- stl_begin_iterator,stl_end_iterator

let k1 = next_key smm1 kb; k1;
//- "b"

let k2 = next_key smm1 k1; k2;
//- "c"

let k1 = prev_key smm1 k2; k2;
//- "c"

let k0 = prev_key smm1 k1; k0;
//- stl_begin_iterator

catch id $ prev_key smm1 kb; 
//- out_of_bounds

catch id $ prev_key smm1 k0; 
//- out_of_bounds

let k4 = prev_key smm1 ke; k4;
//- "e"

let k3 = prev_key smm1 k4; k3;
//- "d"

let k4 = next_key smm1 k3; k4;
//- "e"

let k5 = next_key smm1 k4; k5;
//- stl_end_iterator

catch id $ next_key smm1 ke; 
//- out_of_bounds

//*** Members, keys, vals, first, last ********************************

let smm1 = stlmmap ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

members smm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

members (smm1,"b","e");
//- ["b"=>2,"c"=>3,"d"=>4]

members (smm1,"b","e1");
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (smm1,"0","x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (smm1,stl::stlbeg,"x");
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

members (smm1,"0",stl::stlend);
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

keys smm1;
//- ["a","b","c","d","e","x","y"]

keys (smm1,"b","e");
//- ["b","c","d"]

keys (smm1,"b","e1");
//- ["b","c","d","e"]

keys (smm1,"0","x");
//- ["a","b","c","d","e"]

keys (smm1,stl::stlbeg,"x");
//- ["a","b","c","d","e"]

keys (smm1,"0",stl::stlend);
//- ["a","b","c","d","e","x","y"]

vals smm1;
//- [100,2,3,4,5,200,0]

vals (smm1,"b","e");
//- [2,3,4]

vals (smm1,"b","e1");
//- [2,3,4,5]

vals (smm1,"0","x");
//- [100,2,3,4,5]

vals (smm1,stl::stlbeg,"x");
//- [100,2,3,4,5]

vals (smm1,"0",stl::stlend);
//- [100,2,3,4,5,200,0]

first smm1;
//- "a"=>100

first (smm1,"b","e");
//- "b"=>2

first (smm1,"b","e1");
//- "b"=>2

first (smm1,"0","x");
//- "a"=>100

first (smm1,stl::stlbeg,"x");
//- "a"=>100

first (smm1,"0",stl::stlend);
//- "a"=>100

last smm1;
//- "y"=>0

last (smm1,"b","e");
//- "d"=>4

last (smm1,"b","e1");
//- "e"=>5

last (smm1,"0","x");
//- "e"=>5

last (smm1,stl::stlbeg,"x");
//- "e"=>5

last (smm1,"0",stl::stlend);
//- "y"=>0

//*** insert - *******************************************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

let smm2 = stlmmap {"k"=>11,"l"=>12,"m"=>13}; members smm2;
//- ["k"=>11,"l"=>12,"m"=>13]

insert smm1 ("a"=>10); members smm1; 
//- ["a"=>1,"a"=>10,"b"=>2,"c"=>3,"d"=>4,"e"=>5]

insert_elms smm1 ["a"=>10,"f"=>6]; members smm1; 
//- ["a"=>1,"a"=>10,"a"=>10,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6]

insert_elms smm1 {"a"=>10,"g"=>7}; members smm1;
//- ["a"=>1,"a"=>10,"a"=>10,"a"=>10,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

delete_all smm1 "a"; members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms smm1 (smm2,"x","z"); members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms smm1 (smm2,"0","2"); members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms smm1 (smm2,"k","k"); members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7]

insert_elms smm1 (smm2,"k","l"); members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"k"=>11]

do (delete smm1) ("a".."e"); members smm1;
//- ["f"=>6,"g"=>7,"k"=>11]

insert_elms smm1 (smm2,"k=>10","m"); members smm1;
//- ["f"=>6,"g"=>7,"k"=>11,"l"=>12]

insert_elms smm1 (smm2,"k",stl::stlend); members smm1;
//- ["f"=>6,"g"=>7,"k"=>11,"k"=>11,"l"=>12,"l"=>12,"m"=>13]

do (delete_all smm1) ("k".."m"); members smm1;
//- ["f"=>6,"g"=>7]

insert_elms smm1 ["a"=>10,"b"=>21,"b"=>20]; members smm1;
//- ["a"=>10,"b"=>21,"b"=>20,"f"=>6,"g"=>7]

insert_elms smm1 {"b"=>20,"b"=>22}; members smm1;
//- ["a"=>10,"b"=>21,"b"=>20,"b"=>20,"b"=>22,"f"=>6,"g"=>7]

catch id (insert smm1 ("e")); //can only insert rocket pairs
//- bad_argument

//*** rmfirst, rmlast, erase and ***************************************

let smm1 = stlmmap ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0];
//- ()

members smm1;
//- ["a"=>100,"b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200,"y"=>0]

let smm2 = stlmmap ["a"=>1,"b"=>2,"c"=>3];
//- ()

rmfirst smm1; rmlast smm1; members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"e"=>5,"x"=>200]

rmfirst (smm1,"e","z"); members smm1;
//- ["b"=>2,"c"=>3,"d"=>4,"x"=>200]

rmlast (smm1,"a","x"); members smm1;
//- ["b"=>2,"c"=>3,"x"=>200]

erase (smm1,"c","e"); members smm1;
//- ["b"=>2,"x"=>200]

erase smm1; members smm1;
//- []

stl::null smm1;
//- 1

insert smm1 ("e"=>5); members smm1;
//- ["e"=>5]

stl::null smm1;
//- 0

insert_elms smm1 smm2; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5]

stl::null (smm1,"b","c");
//- 0

stl::null (smm1,"b","b");
//- 1

let smm3 = stlmmap ["f"=>6,"g"=>7,"h"=>8,"i"=>9]; members smm3;
//- ["f"=>6,"g"=>7,"h"=>8,"i"=>9]

insert_elms smm1 (smm3,"g","i"); members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7,"h"=>8]

delete smm1 "h"; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"g"=>7]

insert_elms smm1 ["e"=>7,"e"=>6]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"e"=>5,"e"=>7,"e"=>6,"g"=>7]

//*** delete, delete_all, delete_if, delete_all_if

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>5,"d"=>6,"d"=>7,"d"=>8]; 
//- ()

members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>5,"d"=>6,"d"=>7,"d"=>8]

delete_if (==1) smm1 "d"; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>5,"d"=>6,"d"=>7,"d"=>8]

delete_if (==6) smm1 "d"; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>5,"d"=>7,"d"=>8]

delete_all_if (>100) smm1 "d"; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>5,"d"=>7,"d"=>8]

delete_all_if (<8) smm1 "d"; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>8]

//*** allpairs, ==, ~== ***********************************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3]

let smm2 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members smm2;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) smm1 smm2;
//- 0

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) smm2 smm1;
//- 0

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) smm1 (smm2,"a","d");
//- 1

stl::allpairs (\k1 v1 k2 v2-> k1==k2 && v1==v2) (smm2,"a","d") smm1;
//- 1

smm1 == smm2;
//- 0

smm1 ~= smm2;
//- 1

smm1 == (smm2,"a","a"); // oops -- tuple rule trumps;
//- 0

// ** bounds, size *******************************************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"b"=>3,"b"=>1,"c"=>3,"d"=>4]; members smm1;
//- ["a"=>1,"b"=>2,"b"=>3,"b"=>1,"c"=>3,"d"=>4]

let smm2, lb, ub = stl::bounds smm1; (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let smm2, lb, ub = stl::bounds (smm1,"a"); (lb, ub);
//- stl_begin_iterator,"b"

let smm2, lb, ub = stl::bounds (smm1,"a1"); (lb, ub);
//- "b","b"

let smm2, lb, ub = stl::bounds (smm1,"b"); (lb, ub);
//- "b","c"

members (smm2, lb, ub);
//- ["b"=>2,"b"=>3,"b"=>1]

let smm2, lb, ub = stl::bounds (smm1,"a","x"); (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let smm2, lb, ub = stl::bounds (smm1,"0","x"); (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let smm2, lb, ub = stl::bounds (smm1,"x","a"); (lb, ub);
//- stl_end_iterator,"b"

let smm2, lb, ub = stl::bounds (smm1,"a","b"); (lb, ub);
//- stl_begin_iterator,"c"

members (smm2, lb, ub);
//- ["a"=>1,"b"=>2,"b"=>3,"b"=>1]

let smm2, lb, ub = stl::bounds (smm1,stl::stlbeg,"a"); (lb, ub);
//- stl_begin_iterator,"b"

let smm2, lb, ub = stl::bounds (smm1,stl::stlend,"x"); (lb, ub);
//- stl_end_iterator,stl_end_iterator

stl::size smm1;
//- 6

stl::size (smm1,"b","d");
//- 4

stl::size (smm1,"c",stl::stlend);
//- 2


//** map, map_keys, map_vals **************************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

map (\(k=>v)->k+1=>v+10) smm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

map_keys (+1) smm1;
//- ["b","c","d","e"]

map_vals (+1) smm1;
//- [2,3,4,5]

map (\(k=>v)->k=>v+10) (smm1,stl::stlbeg,stl::stlend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (smm1,stl::stlbeg,"x");
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (smm1,stl::stlbeg,"d");
//- ["a"=>11,"b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (smm1,stl::stlbeg,"a");
//- []

map (\(k=>v)->k=>v+10) (smm1,"0",stl::stlend);
//- ["a"=>11,"b"=>12,"c"=>13,"d"=>14]

map (\(k=>v)->k=>v+10) (smm1,"b","d");
//- ["b"=>12,"c"=>13]

map (\(k=>v)->k=>v+10) (smm1,"x","a");
//- []

//** listmap, catmap, catmap_keys, catmap_vals *************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

listmap (\(k=>v)->k+1=>v+10) smm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) smm1;
//- ["b"=>11,"c"=>12,"d"=>13,"e"=>14]

catmap (\(k=>v)->[k+1=>v+10]) (smm1,"a","b");
//- ["b"=>11]

catmap_keys (\x->[x,x+10]) smm1;
//- ["a","k","b","l","c","m","d","n"]

catmap_keys (\x->[x,x+10]) (smm1,"a","a");
//- []

catmap_vals (\x->[x,x+10]) smm1;
//- [1,11,2,12,3,13,4,14]

catmap_vals (\x->[x,x+10]) (smm1,"a","a");
//- []

[ k+1 | (k=>y) = smm1];
//- ["b","c","d","e"]

[ k=>v |  (k=>v) = smm1; v mod 2];
//- ["a"=>1,"c"=>3]

{ k+1 | (k=>y) = smm1};
//- {"b","c","d","e"}

{ {k;v} |  (k=>v) = smm1; v mod 2};
//- {"a","c";1,3}

//** foldl, foldl1, foldr, foldr1 ***********************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} smm1;
//- {"abcd",10}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (smm1,"a","d");
//- {"abc",6}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (smm1,"b",stl::stlend);
//- {"bcd",9}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (smm1,"b","d");
//- {"bc",5}

foldl (\{r,l} (k=>v) -> {r+k,l+v}) {"",0} (smm1,"b","b");
//- {"",0}

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) smm1;
//- "abcd"=>10

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"a","d");
//- "abc"=>6

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b",stl::stlend);
//- "bcd"=>9

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b","d");
//- "bc"=>5

foldl1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b","b"); (); // fails
//- ()

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} smm1;
//- {"dcba",10}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (smm1,"a","d");
//- {"cba",6}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (smm1,"b",stl::stlend);
//- {"dcb",9}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (smm1,"b","d");
//- {"cb",5}

foldr (\(k=>v) {r,l} -> {r+k,l+v}) {"",0} (smm1,"b","b");
//- {"",0}

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) smm1;
//- "abcd"=>10

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"a","d");
//- "abc"=>6

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b",stl::stlend);
//- "bcd"=>9

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b","d");
//- "bc"=>5

foldr1 (\(r=>l) (k=>v) -> (r+k=>l+v)) (smm1,"b","b"); (); // fails
//- ()

//*** do, filter *******************************************************

let smm1 = stlmmap ["a"=>1,"b"=>2,"c"=>3,"d"=>4]; members smm1;
//- ["a"=>1,"b"=>2,"c"=>3,"d"=>4]

let smm2 = emptystlmmap_with (>); [];
//- []

do (\(k=>v) -> update smm2 k v) smm1; members smm2;
//- ["d"=>4,"c"=>3,"b"=>2,"a"=>1]

erase smm2; do (\(k=>v) -> update smm2 k v) (smm1,"a","d"); members smm2;
//- ["c"=>3,"b"=>2,"a"=>1]

erase smm2; do (\(k=>v) -> update smm2 k v) (smm1,"b","x"); members smm2;
//- ["d"=>4,"c"=>3,"b"=>2]

erase smm2; do (\(k=>v) -> update smm2 k v) (smm1,"0","0"); members smm2;
//- []

erase smm2; do (\(k=>v) -> update smm2 k v) (smm1,"x","x"); members smm2;
//- []

erase smm2; do (\(k=>v) -> update smm2 k v) (smm1,"d","x"); members smm2;
//- ["d"=>4]

filter (\(k=>v) -> v mod 2) smm1;
//- ["a"=>1,"c"=>3]

filter (\(k=>v) -> v mod 2) (smm1,"a","c");
//- ["a"=>1]

filter (\(k=>v) -> v mod 2) (smm1,"c",stl::stlend);
//- ["c"=>3]

filter (\(k=>v) -> v mod 2) (smm1,"d","d");
//- []

//** Cache sensitive sequences ****************************************

let smm1 = stlmmap ["a"=>1,"a"=>2,"a"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]
//- ()

stl::set_smm_trace 1;
//- ()

member smm1 "a";
//- 1

smm1!"a";
//- [1,2,3]

delete smm1 "a"; members smm1;
//- ["a"=>2,"a"=>3,"d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

smm1!"a";
//- [2,3]

member smm1 "a";
//- 1


delete_all smm1 "a"; members smm1;
//- ["d"=>4,"e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9,"j"=>10]

catch id (smm1!"a");
//- out_of_bounds

member smm1 "a";
//- 0

smm1!"e";
//- [5]

rmfirst smm1;
//- ()

smm1!"e";
//- [5]

member smm1 "d";
//- 0

smm1!"e"
//- [5]

rmlast smm1; members smm1;
//- ["e"=>5,"f"=>6,"g"=>7,"h"=>8,"i"=>9]

smm1!"e";
//- [5]

member smm1 "k";
//- 0

smm1!"e";
//- [5]

erase (smm1, "h", stl::stlend); members smm1;
//- ["e"=>5,"f"=>6,"g"=>7]

smm1!"e";
//- [5]

member smm1 "i";
//- 0

member smm1 "e";
//- 1

stl::set_smm_trace 0;
//- ()

//*** Fancy updating - C++ default value style ********************* 

let smm1 = emptystlmmap; members smm1;
//- []

stl::set_default smm1 0; stl::get_default smm1;
//- 1,0

update_with (+) smm1 "a" 1; update_with (+) smm1 "a" 1; members smm1;
//- ["a"=>2]

erase smm1; #smm1;
//- 0

stl::set_default smm1 []; stl::get_default smm1;
//- 1,[]

update_with (:) smm1 "a" 1; update_with (:) smm1 "a" 2; members smm1;
//- ["a"=>[2,1]]

erase smm1; #smm1;
//- 0

stl::set_default smm1 emptystlvec; stl::get_default smm1; ();
//- ()

update_with (flip append) smm1 "a" 1; ();
//- ()

update_with (flip append) smm1 "a" 2; ();
//- ()

members (smm1!"a");
//- [1,2]

