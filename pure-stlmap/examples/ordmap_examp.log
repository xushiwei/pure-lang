let m = ordmap ["foo"=>99,"bar"=>bar 4711L,"baz"=>1..5];
m;
ordmap ["bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99]
def {$$} = ordmap [];
def {$xs@(_,_)$} = ordmap (__list__ xs);
def {$x$} = ordmap [x];
ordmap_symbol ({$ $});
()
let m = ordmap ["foo"=>99,"bar"=>bar 4711L,"baz"=>1..5];
m;
{$"bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99$}
ordmap_symbol ordmap;
()
m;
ordmap ["bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99]
m!"bar";
bar 4711L
keys m;
["bar","baz","foo"]
vals m;
[bar 4711L,[1,2,3,4,5],99]
list m;
["bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99]
member m "foo",member m "bar";
1,1
let m1 = copy m;
delete m "foo";
ordmap ["bar"=>bar 4711L,"baz"=>[1,2,3,4,5]]
m1;
ordmap ["bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99]
m!"foo";
<stdin>, line 75: unhandled exception 'out_of_bounds' while evaluating 'm!"foo"'
keys m;
["bar","baz"]
vals m;
[bar 4711L,[1,2,3,4,5]]
list m;
["bar"=>bar 4711L,"baz"=>[1,2,3,4,5]]
member m "foo",member m "bar";
0,1
listmap (\(x=>y) -> x,y) m1;
[("bar",bar 4711L),("baz",[1,2,3,4,5]),("foo",99)]
colcatmap (\(x=>y) -> if listp y then {(x,y)} else {}) m1;
{("baz",[1,2,3,4,5])}
m===m,m===m1,m===copy m,ordmap [97=>98]===ordmap [97.0=>98];
1,0,1,0
member (ordmap [97=>98]) 97.0;
1
m==m,m==m1,m==copy m,ordmap [97=>98]==ordmap [97.0=>98];
1,0,1,1
x::ordmap<=y::ordmap = x===y||(all (member y) xks&&vals x===listmap (\k -> y!k) xks when xks = keys x end);
x::ordmap>=y::ordmap = x===y||(all (member x) yks&&vals y===listmap (\k -> x!k) yks when yks = keys y end);
x::ordmap<y::ordmap = x<=y&&#x<#y;
x::ordmap>y::ordmap = x>=y&&#x>#y;
m<=m1,m<m1,m>=m,m>m;
1,1,1,0
let m = ordmap [99,4711L,1.0];
m;
ordmap [1.0,99,4711L]
member m 99;
1
m!99;
99
delete m 99;
ordmap [1.0,4711L]
member m 99;
0
m!99;
<stdin>, line 130: unhandled exception 'out_of_bounds' while evaluating 'm!99'
insert m 99;
ordmap [1.0,99,4711L]
delete m 4711L;
ordmap [1.0,99]
insert m (88=>bar 4711L);
ordmap [1.0,88=>bar 4711L,99]
m!99;
99
m!88;
bar 4711L
x::ordmap+y::ordmap = foldl insert (copy x) (list y);
x::ordmap-y::ordmap = foldl delete (copy x) (keys y);
x::ordmap*y::ordmap = x-(x-y);
let m1 = ordmap [5,1,3,11,3];
let m2 = ordmap (3..6);
m1;
ordmap [1,3,5,11]
m2;
ordmap [3,4,5,6]
m1+m2;
ordmap [1,3,4,5,6,11]
m1-m2;
ordmap [1,11]
m1*m2;
ordmap [3,5]
ordmap ["foo"=>99,"baz"=>1..5]+ordmap ["bar"=>bar 4711L];
ordmap ["bar"=>bar 4711L,"baz"=>[1,2,3,4,5],"foo"=>99]
x::ordmmap+y::ordmmap = foldl insert (copy x) (list y);
x::ordmmap-y::ordmmap = foldl delete (copy x) (keys y);
x::ordmmap*y::ordmmap = x-(x-y);
let m1 = ordmmap [5,1,3,11,3];
let m2 = ordmmap (3..6);
m1;
ordmmap [1,3,3,5,11]
m2;
ordmmap [3,4,5,6]
m1+m2;
ordmmap [1,3,3,3,4,5,5,6,11]
m1-m2;
ordmmap [1,3,11]
m1*m2;
ordmmap [3,5]
let m = ordmmap ["foo"=>99,"baz"=>1..5]+ordmmap ["baz"=>bar 4711L];
m;
ordmmap ["baz"=>[1,2,3,4,5],"baz"=>bar 4711L,"foo"=>99]
m!!["foo","bar","baz"];
[[99],[],[[1,2,3,4,5],bar 4711L]]
ordmmap [97=>98,97.0=>99]===ordmmap [97.0=>98,97=>99];
0
ordmmap [97=>98,97.0=>99]==ordmmap [97.0=>98,97=>99];
1
