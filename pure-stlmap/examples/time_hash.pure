/* time_hash.pure -- lookup times for hashdict and stlhmap.

   Usage: > run time_hash.pure
          > main num_words_in_hash_table

   A lookup is a sequence like "if member set x then set!x else ()". The
   corresponding c functions are called, e.g., hashdict_member rather than
   member.

   There are two tests applicable to both hashdict stlhmap. The "fast" test
   calls the underlying c functions directly. The "plain" test uses the
   Pure member and (!) functions. 

   The "wrapped" test, applicable only to stlhmap, uses versions of member and
   (!) specialized on (STLHMAP x) as opposed to the stlhmap type (a pointer
   tag). The "p_", "w_" and "x_" tests, applicable only to stlhmap, are the
   like plain and wrapped (i.e., comparing pointer tag to data type based
   dispatch) except that they use unique names (e.g., p_member i/o member). The
   difference between x_ and p_ is that p_ uses a defined type, while x_
   uses as defined pointer. I.e., from stlhmap.pure:

     // p_

     extern expr* sh_find_val(expr* pxshp, expr* key);

     extern int   sh_member(expr* pxshp, expr* key);

     type stlhmap x::pointer = check_ptrtag stlhmap_t x;

     p_find hm::stlhmap key = stl::sh_find_val hm key;

     p_member hm::stlhmap key = stl::sh_member hm key;

     // x_

     extern expr* x_sh_find_val(stlhmap* pxshp, expr* key) = x_find;

     extern int   x_sh_member(stlhmap* pxshp, expr* key) = x_member; 

     // w_

     nonfix STLHMAP;

     w_find (STLHMAP hm) key = stl::sh_find_val hm key;

     w_member (STLHMAP hm) key = stl::sh_member hm key;


   The fast times for hashdict and stlhmap are basically the same.

   The times for the plain and wrapped tests depend on the order of the using
   statements for stlhmap and hashdict. If stlhmap comes first in the using
   statement, the stlhmap plain time is about 60% slower than the stlhmap
   wrapped time, and the hashdict time is about 50% slower than the stlhmap
   plain time. However if hashdict comes first in the using statement, both
   the stlhmap times are about 50% slower than the hashdict plain time.

   The times for p_, w_ and x_ tests are, of course, not affected by the order
   of the using statements because they have unique names. Either way, the p_
   time is about 50% slower than the the w_ time. Also, it appears that w_,
   using ptr tags in the call signatures, as opposed to check_ptr guards, is
   twice as fast as a w_. It appears that the x_ call is even faster than the
   raw c call (because of slower marshalling, than x_, on the c++ side).

   Please note that if you want to test changing the the using statement, you
   have to quit and restart Pure, as "clear" will not reload the modules.

*/

using system, stlvec, stlvec::algorithms;

//using hashdict, stlhmap;
using stlhmap, hashdict;

const repeats = 10000;
const lookups = 100;

/*** hashdict *********************************************************/

time_fast_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill     fast hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   fast hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = hashdict_member ss k $$ hashdict_get ss k $$ lookup ks;
end when 
  ss = hashdict [];
end;

time_plain_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill    plain hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup  plain hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = hashdict [];
end;

/*** stlhmap *********************************************************/

time_fast_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill      fast stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup    fast stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = stl::sh_member ss k $$ stl::sh_find_val ss k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_plain_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill     plain stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   plain stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_wrapped_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill   wrapped stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup wrapped stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member wss k $$ wss!k $$ lookup ks;
end when 
  ss = emptystlhset;
  wss = wrap ss;
end;

time_p_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill         p stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       p stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = p_member ss k $$ p_find ss k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_w_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill         w stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       w stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = w_member wss k $$ w_find wss k $$ lookup ks;
end when 
  ss = emptystlhset;
  wss = wrap ss;
end;

time_x_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  printf "\nfill         x stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       x stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = x_member wss k $$ x_find wss k $$ lookup ks;
end when 
  ss = emptystlhset;
  wss = wrap ss;
end;


/*** Harness ********************************************************/

// returns a stlvec of shuffled words and a list of keys
get_words num_words filename = words, keys when
  fp = case fopen filename  "r" of 
    fopen _ _ = pointer 0;
    fp = fp;
  end;
  all_words = if null fp then
                puts "Can't open word file" $$ emptystlvec
              else
                stlvec $ drop 200 (split "\n" (fget fp));
  fclose fp;
  num_words = min (#all_words) num_words;
  num_keys = min num_words lookups; 
  stl::random_shuffle all_words;
  words = stlvec (all_words,stl::svbeg,num_words);
  allkeys = stlvec words;
  stl::random_shuffle allkeys;
  keys = members (allkeys,0,num_keys);
end;

main num_words = () when
  words, keys = get_words num_words "anagram_groups_dict.txt";
  num_words = min num_words (#words);
  printf "Test %d lookups, %d repeats\n" (lookups,repeats);
  time_plain_stlhmap words keys;
  time_wrapped_stlhmap words keys;
  time_fast_stlhmap words keys;
  time_p_stlhmap words keys;
  time_w_stlhmap words keys;
  time_x_stlhmap words keys;
  time_plain_hashdict words keys;
  time_fast_hashdict words keys;
end;
    
/* Sample "with using stlhmap, hashdict" *******************************

> main 1000;
Test 100 lookups, 10000 repeats

fill     plain stlhmap:      0.0 msecs, 1000 words
lookup   plain stlhmap:   1610.0 msecs

fill   wrapped stlhmap:      0.0 msecs, 1000 words
lookup wrapped stlhmap:   1010.0 msecs

fill      fast stlhmap:      0.0 msecs, 1000 words
lookup    fast stlhmap:    560.0 msecs

fill         p stlhmap:      0.0 msecs, 1000 words
lookup       p stlhmap:   1600.0 msecs

fill         w stlhmap:      0.0 msecs, 1000 words
lookup       w stlhmap:    990.0 msecs

fill         x stlhmap:      0.0 msecs, 1000 words
lookup       x stlhmap:    500.0 msecs

fill    plain hashdict:      0.0 msecs, 1000 words
lookup  plain hashdict:   2530.0 msecs

fill     fast hashdict:      0.0 msecs, 1000 words
lookup   fast hashdict:    560.0 msecs
()

*/

/* Sample "with using hashdict, stlhmap" *******************************

> main 1000;
Test 100 lookups, 10000 repeats

fill     plain stlhmap:      0.0 msecs, 1000 words
lookup   plain stlhmap:   2780.0 msecs

fill   wrapped stlhmap:      0.0 msecs, 1000 words
lookup wrapped stlhmap:   2720.0 msecs

fill      fast stlhmap:      0.0 msecs, 1000 words
lookup    fast stlhmap:    560.0 msecs

fill         p stlhmap:      0.0 msecs, 1000 words
lookup       p stlhmap:   1550.0 msecs

fill         w stlhmap:      0.0 msecs, 1000 words
lookup       w stlhmap:    990.0 msecs

fill         x stlhmap:     10.0 msecs, 1000 words
lookup       x stlhmap:    490.0 msecs

fill    plain hashdict:      0.0 msecs, 1000 words
lookup  plain hashdict:   1800.0 msecs

fill     fast hashdict:      0.0 msecs, 1000 words
lookup   fast hashdict:    570.0 msecs
()
> 


*/