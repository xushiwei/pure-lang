/* time_hash.pure -- lookup times for hashdict and stlhmap.

   Usage: > run time_hash.pure
          > main num_words_in_hash_table

   A lookup is a sequence like "if member set x then set!x else ()". The
   corresponding c functions are called, e.g., hashdict_member rather than
   member.

   There are two tests applicable to both hashdict stlhmap. The "fast" test
   calls the underlying c functions directly. The "plain" test uses the
   Pure member and (!) functions. 

   The "wrapped" test, "w_" test, "p_" test "x_" test and are applicable only
   to stlhmap The wrapped test uses versions of member and (!) specialized on
   (STLHMAP x) as opposed to the stlhmap type (a pointer tag). The w_ test is
   the same as the wrapped test except that it uses a unique names, e.g.,
   w_member instead of member. The p_test is like the plain test with no
   type checking. The x_test is like the p_test except that the x_find
   and x_member functions are defined as part of the extern statement.
   
   The times for the plain and wrapped tests depend on the order of the using
   statements for stlhmap and hashdict. The times for the fast, p_, w_ and x_
   tests are, of course, not affected by the order of the using statements
   because they have unique names.

   Please note that if you want to test changing the the using statement, you
   have to quit and restart Pure, as "clear" will not reload the modules.

*/

using system, stlvec, stlvec::algorithms;

//using hashdict, stlhmap;
using stlhmap, hashdict;

const repeats = 10000;
const lookups = 100;

/*** hashdict *********************************************************/

time_fast_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  // printf "fill     fast hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   fast hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = hashdict_member ss k $$ hashdict_get ss k $$ lookup ks;
end when 
  ss = hashdict [];
end;

time_plain_hashdict words keys = () when
  tm = clock;
  do (insert ss) words;
  tm = (clock - tm) / 1000.0;
  // printf "fill    plain hashdict: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup  plain hashdict: %8.1f msecs\n" tm;
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = hashdict [];
end;

/*** stlhmap *********************************************************/

time_fast_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill      fast stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup    fast stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = stl::sh_member ss k $$ stl::sh_find_val ss k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_plain_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill     plain stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup   plain stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member ss k $$ ss!k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_wrapped_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill   wrapped stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup wrapped stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = member wss k $$ wss!k $$ lookup ks;
end when 
  ss = emptystlhset;
  wss = wrap ss;
end;

time_w_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill         w stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       w stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = w_member wss k $$ w_find wss k $$ lookup ks;
end when 
  ss = emptystlhset;
  wss = wrap ss;
end;

time_p_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill         p stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       p stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = p_member ss k $$ p_find ss k $$ lookup ks;
end when 
  ss = emptystlhset;
end;

time_x_stlhmap words keys = () when
  tm = clock;
  insert ss words;
  tm = (clock - tm) / 1000.0;
  // printf "fill         x stlhmap: %8.1f msecs, %d words\n"  (tm,#ss);
  tm = clock;
  spin repeats;
  tm = (clock - tm) / 1000.0;
  printf "lookup       x stlhmap: %8.1f msecs\n" tm;
  puts (get val);
end with
  spin 0 = ();
  spin n = lookup keys $ spin (n-1);
  lookup [] = ();
  lookup (k:ks) = x_member ss k $$ x_find ss k $$ lookup ks;
end when 
  ss = emptystlhset;
  //wss = wrap ss;
end;


/*** Harness ********************************************************/

// returns a stlvec of shuffled words and a list of keys
get_words num_words filename = words, keys when
  fp = case fopen filename  "r" of 
    fopen _ _ = pointer 0;
    fp = fp;
  end;
  all_words = if null fp then
                puts "Can't open word file" $$ emptystlvec
              else
                stlvec $ drop 200 (split "\n" (fget fp));
  fclose fp;
  num_words = min (#all_words) num_words;
  num_keys = min num_words lookups; 
  stl::random_shuffle all_words;
  words = stlvec (all_words,stl::svbeg,num_words);
  allkeys = stlvec words;
  stl::random_shuffle allkeys;
  keys = members (allkeys,0,num_keys);
end;

main num_words = () when
  sep = "--------------------------------------";
  words, keys = get_words num_words "anagram_groups_dict.txt";
  num_words = min num_words (#words);
  printf "Time tests for stlhmap. Map filled with %d words.\n\n" num_words;
  printf "stlhmap vrs hashdict %d lookups, %d repeats\n" (lookups,repeats);
  puts sep;
  time_fast_stlhmap words keys;
  time_plain_stlhmap words keys;
  puts sep;
  time_fast_hashdict words keys;
  time_plain_hashdict words keys;
  puts sep;
  printf "\nstlhmap dispatch comparisons %d lookups, %d repeats\n"
  (lookups,repeats);
  puts sep;
  time_wrapped_stlhmap words keys;
  time_w_stlhmap words keys;
  time_p_stlhmap words keys;
  time_x_stlhmap words keys;
end;
    
/* Sample "with using stlhmap, hashdict" *******************************

> main 1000;
Time tests for stlhmap. Map filled with 1000 words.

stlhmap vrs hashdict 100 lookups, 10000 repeats
--------------------------------------
lookup    fast stlhmap:    560.0 msecs
lookup   plain stlhmap:   1600.0 msecs
--------------------------------------
lookup   fast hashdict:    560.0 msecs
lookup  plain hashdict:   2450.0 msecs
--------------------------------------

stlhmap dispatch comparisons 100 lookups, 10000 repeats
--------------------------------------
lookup wrapped stlhmap:   1010.0 msecs
lookup       w stlhmap:   1000.0 msecs
lookup       p stlhmap:   1000.0 msecs
lookup       x stlhmap:    560.0 msecs
()

*/

/* Sample "with using hashdict, stlhmap" *******************************


> main 1000;
Time tests for stlhmap. Map filled with 1000 words.

stlhmap vrs hashdict 100 lookups, 10000 repeats
--------------------------------------
lookup    fast stlhmap:    550.0 msecs
lookup   plain stlhmap:   2830.0 msecs
--------------------------------------
lookup   fast hashdict:    550.0 msecs
lookup  plain hashdict:   1810.0 msecs
--------------------------------------

stlhmap dispatch comparisons 100 lookups, 10000 repeats
--------------------------------------
lookup wrapped stlhmap:   2760.0 msecs
lookup       w stlhmap:   1000.0 msecs
lookup       p stlhmap:    990.0 msecs
lookup       x stlhmap:    550.0 msecs
()

*/