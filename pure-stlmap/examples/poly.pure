/* poly.pure - polynomial arithmetic using stlmaps. 

Copyright (c) 2012 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlmap, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/


/* Each poly is a closure that has a stlmap (or "term map") whose elements
   represent the terms of a polynomial. Each element has a key that is the
   order of the term and a val that is its coeficient. Coeficients are
   anything that the arithmetic operators (+,-,*,/) are defined on, with %
   used in lieu of / if either coeficient satisfies rationalp.  Terms whose
   coeficient statisfy is_zero are never saved in the poly's underlying
   stlmap. The underlying stlmap's elements are ordered by (>) (i.e., not the
   default ordering which is (<)).

   The value of a poly at x is determined in the usual way based on the order
   and coeficients of its elements. E.g.,

   $> pure -w -q

   > run poly.pure

   > let p1 = mkpoly [1,1];             // x+1
   > let p2 = mkpoly [1,2,1];           // x^2 + 2*x + 1
   > let p3 = mkpoly [10=>10,0,8,1=>1]; // 10*x^10 + 8*x^8 + x 

   > terms p1; terms p3;
   [1=>1,0=>1]
   [10=>10,8=>8,1=>1]
  
   > p1 4, p2 4;
   5,25

   > terms (p1+p2);
   [2=>1,1=>3,0=>2]

   > (p1+p2) 4;
   30

   > (p1+p2) * p1 $ 4;
   150

   > let q,r = p2 / p1; terms q; terms r;
   [1=>1.0,0=>1.0]
   []
   > q 4;
   5.0

  For division rational coeficients are preserved when possible.

   > let p3 = mkpoly [1%1,1%1];
   > let q,r = (p2/p3); terms q;
   [1=>1L%1L,0=>1L%1L]

*/

using system, math, stlmap;
using namespace stl;

/* Operations on term_maps *********************************************/

is_zero x::double = abs x < 1.0e-12;

is_zero x::number = x == 0;

empty_term_map = mkstlmap (>);

mkterms coefs = mk_aux (#coefs-1) coefs with
  mk_aux _ [] = res;
  mk_aux n _ = throw "bad_argument" if n < 0;
  mk_aux n (c:cs) = mk_aux (ord-1) cs when
    ord, coef = case c of
      o=>cf = o,cf;
      o,cf = o,cf;
      cf = n,cf;
    end;
    if ~(integerp ord) then throw "bad_argument" else ();
    if ~is_zero coef then insert res (ord=>coef) else ();
  end;
end when
  res = empty_term_map;
end;

adjust_term tm ord adj = insert tm (ord=>adj) if ~member tm ord;

adjust_term tm ord adj = () when
  coef = adj + tm!ord;
  if is_zero coef then erase (tm,ord) else update_elm tm (ord=>coef);
end;

terms_add tm1 tm2 = do add_term tm2 $$ tm1 with
  add_term (ord=>coef) = adjust_term tm1 ord coef;
end;

terms_sub tm1 tm2 = do sub_term tm2 $$ tm1 with
  sub_term (ord=>coef) = adjust_term tm1 ord (-coef);
end;

terms_mult tm1 tm2 = do add_row tm1 $$ res 
with
  add_row (o1=>c1) = do (add_elm o1 c1) tm2;
  add_elm o1 c1 (o2=>c2) = adjust_term res (o1+o2) (c1*c2);
end when
  res = mkstlmap (>);
end;

terms_divide dividend divisor = mk_quot with  
  mk_quot = quot, rem if empty rem;
  mk_quot = mk_term rem_ord rem_coef $$ mk_quot
    if div_ord <= rem_ord when rem_ord=>rem_coef = get (rem,smbeg) end;
  mk_quot = quot, rem;
  mk_term rem_ord rem_coef = () when
    term_coef = div_coefs rem_coef div_coef;
    term_ord = rem_ord - div_ord;
    insert quot (term_ord=>term_coef);
    do (adjust_rem term_ord (-term_coef)) divisor;
  end;
  div_coefs c1 c2 = if rationalp c1 || rationalp c2 then c1 % c2 else c1 / c2;
  adjust_rem q_ord q_coef (d_ord=>d_coef) = () when
    adj_ord = q_ord + d_ord;
    adj_coef = q_coef * d_coef;
    adjust_term rem adj_ord adj_coef;
  end;
end when
  quot = empty_term_map;
  rem = stlmap dividend;
  div_ord=>div_coef = get (divisor,smbeg);
end;

/*** Polynomials ********************************************************/

type poly x::function = check_ptrtag stlmap_t (x [[smbeg]]);

stlmapp x = check_ptrtag stlmap_t x;

term_map p::poly = p [[smbeg]];

terms (q::poly,r::poly) = members (term_map q), members (term_map r);

terms p::poly = members (term_map p);

mkpoly p1::poly = mkpoly (stlmap $ term_map p1);

mkpoly terms = poly with
  poly [[smbeg]] = tm;
  poly x = foldl (add_term_val x) 0 tm;
  add_term_val x res (ord=>coef) = res + coef * pwr x ord;
  pwr x p = if rationalp x || integerp x then pow x p else x ^ p;
end when
  tm = if typep stlmap terms then terms else mkterms terms;
end;

p1::poly + p2::poly =  mkpoly $ terms_add lhs rhs when
  pt1, pt2 = term_map p1, term_map p2;
  lhs,rhs = if #pt1 > #pt2 then stlmap pt1, pt2 else stlmap pt2, pt1;
end;

p1::poly - p2::poly = mkpoly $ terms_sub (stlmap $ term_map p1) (term_map p2);

p1::poly * p2::poly = mkpoly $ terms_mult (term_map p1) (term_map p2);

p1::poly / p2::poly = mkpoly t1, mkpoly t2 when
  t1, t2 = terms_divide (term_map p1) (term_map p2);
end;

p1::poly ^ 0 = mkpoly [1];

p1::poly ^ 1 = mkpoly p1;

p1::poly ^ n = p1 * (p1 ^ (n-1));
