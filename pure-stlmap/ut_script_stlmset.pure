//-- --comment c_off --resume --verbose off

/* ut_script_stlmset.pure -- examples for basic ops on stlmset.

   This is a Pure script with a special format that makes it possible for the
   check_eval.pure script to evaluate single lines of Pure code and compare
   the result to an expected result.

      $> pure -q -w
      > run check_eval.pure 
      > check "ut_script_stlmset.pure";
    
   check will print and evaluate each executable line and check the
   result against next line beginning with "//- ", if any.

   See check_eval.pure for more details.

*/

//*** Imports *********************************************************

using system, stlmmap, stlvec;
//- ()

//*** Make stlmset ******************************************************

let sms1 = stlmset ("a".."e"); members sms1;
//- ["a","b","c","d","e"]

let sv1 = stlvec $ members sms1; members sv1;
//- ["a","b","c","d","e"]

let v1 = stl::vector (sms1,"b","d"); v1;
//- {"b","c"}

let l1 = members (sms1,stl::stlbeg,"e"); l1;
//- ["a","b","c","d"]

let sms2 = emptystlmset_with (>) (>) (==); members sms2;
//- []

insert_elms sms2 (sms1,"a","d"); members sms2;
//- ["c","b","a"]

let sms3 = stlmset (sv1,1,stl::svend); members sms3;
//- ["b","c","d","e"]

let sms4 = stlmset v1; members sms4;
//- ["b","c"]

let sms5 = stlmset l1; members sms5;
//- ["a","b","c","d"]

//*** stl::size, empty ***********************************************

let sms1 = stlmset ("a".."e"); members sms1;
//- ["a","b","c","d","e"]

#sms1;
//- 5

stl::size (sms1,"b","e");
//- 3

stl::size (sms1,stl::stlbeg,stl::stlend);
//- 5

stl::size (sms1,"b",stl::stlend);
//- 4

stl::size (sms1,"b","b");
//- 0

//*** Simple Access and Insertion *************************************

let sms1 = stlmset ("a".."e"); members sms1;
//- ["a","b","c","d","e"]

sms1!stl::stlbeg;
//- 1

sms1!stl::stlend;
//- 0

sms1!"a";
//- 1

sms1!"e";
//- 1

insert sms1 "a"; insert sms1 "x"; members sms1;
//- ["a","a","b","c","d","e","x"]

catch err (sms1!"y");
//- 0

stl::set_default sms1 not_a_member; (); // set_default fails for stlmsets
//- ()

stl::get_default sms1; (); // get_default fails for stlmsets
//- ()

sms1!"y";
//- 0

members sms1;
//- ["a","a","b","c","d","e","x"]

member sms1 "x", member sms1 "z";
//- 1,0

//*** Bidirectional iterator functions *******************************

let sms1 = stlmset ["a","b","b","d","e"]; members sms1;
//- ["a","b","b","d","e"]

let kb, ke = stl::stlbeg, stl::stlend; kb, ke;
//- stl_begin_iterator,stl_end_iterator

let k1 = next_key sms1 kb; k1;
//- "b"

let k2 = next_key sms1 k1; k2;
//- "d"

let k1 = prev_key sms1 k2; k1;
//- "b"

let k0 = prev_key sms1 k1; k0;
//- stl_begin_iterator

catch id $ prev_key sms1 kb; 
//- out_of_bounds

catch id $ prev_key sms1 k0; 
//- out_of_bounds

let k4 = prev_key sms1 ke; k4;
//- "e"

let k3 = prev_key sms1 k4; k3;
//- "d"

let k4 = next_key sms1 k3; k4;
//- "e"

let k5 = next_key sms1 k4; k5;
//- stl_end_iterator

catch id $ next_key sms1 ke; 
//- out_of_bounds

catch id $ next_key sms1 k5; 
//- out_of_bounds

//*** Members, first, last *********************************************

let sms1 = stlmset ["a","b","c","d","e","x","y"]; members sms1;
//- ["a","b","c","d","e","x","y"]

members (sms1,"b","e");
//- ["b","c","d"]

members (sms1,"b","e1");
//- ["b","c","d","e"]

members (sms1,"0","x");
//- ["a","b","c","d","e"]

members (sms1,stl::stlbeg,"x");
//- ["a","b","c","d","e"]

members (sms1,"0",stl::stlend);
//- ["a","b","c","d","e","x","y"]

first sms1;
//- "a"

first (sms1,"b","e");
//- "b"

first (sms1,"b","e1");
//- "b"

first (sms1,"0","x");
//- "a"

first (sms1,stl::stlbeg,"x");
//- "a"

first (sms1,"0",stl::stlend);
//- "a"

last sms1;
//- "y"

last (sms1,"b","e");
//- "d"

last (sms1,"b","e1");
//- "e"

last (sms1,"0","x");
//- "e"

last (sms1,stl::stlbeg,"x");
//- "e"

last (sms1,"0",stl::stlend);
//- "y"

//*** insert ***********************************************************

let sms1 = stlmset ["a","b","c","d","e"]; members sms1; 
//- ["a","b","c","d","e"]

let sms2 = stlmset ["k","l","m"]; members sms2;
//- ["k","l","m"]

insert sms1 "a"; members sms1; 
//- ["a","a","b","c","d","e"]

insert_elms sms1 ["a","f"]; members sms1; 
//- ["a","a","a","b","c","d","e","f"]

insert_elms sms1 {"a","g"}; members sms1;
//- ["a","a","a","a","b","c","d","e","f","g"]

insert_elms sms1 (sms2,"x","z"); members sms1;
//- ["a","a","a","a","b","c","d","e","f","g"]

insert_elms sms1 (sms2,"0","2"); members sms1;
//- ["a","a","a","a","b","c","d","e","f","g"]

insert_elms sms1 (sms2,"k","k"); members sms1;
//- ["a","a","a","a","b","c","d","e","f","g"]

insert_elms sms1 (sms2,"k","l"); members sms1;
//- ["a","a","a","a","b","c","d","e","f","g","k"]

do (\x->erase (sms1,x)) ("a".."e"); members sms1;
//- ["f","g","k"]

insert_elms sms1 (sms2,"k","m"); members sms1;
//- ["f","g","k","k","l"]

insert_elms sms1 (sms2,"k",stl::stlend); members sms1;
//- ["f","g","k","k","k","l","l","m"]

do (\x->erase (sms1,x)) ("k".."m"); members sms1;
//- ["f","g"]

insert_elms sms1 ["a","b","b"]; members sms1;
//- ["a","b","b","f","g"]

insert_elms sms1 {"a","b","b"}; members sms1;
//- ["a","a","b","b","b","b","f","g"]

catch id (insert sms1 ("e"=>5)); //can't compare string to rocket
//- failed_cond

//*** Range specifications - corner cases *******************************

let sms1 = stlmset ["a","a","b","b","b","e","x","x"]; members sms1;
//- ["a","a","b","b","b","e","x","x"]

members (sms1,"0");
//- []

members (sms1,stl::stlbeg);
//- ["a","a"]

members (sms1,"a");
//- ["a","a"]

members (sms1,"e");
//- ["e"]

members (sms1,"f");
//- []

members (sms1,"x");
//- ["x","x"]

members (sms1,"z");
//- []

members (sms1,"0","0");
//- []

members (sms1,"a","0");
//- []

members (sms1,stl::stlbeg,"0");
//- []

members (sms1,stl::stlbeg,"b");
//- ["a","a"]

members (sms1,stl::stlbeg,"d");
//- ["a","a","b","b","b"]

members (sms1,stl::stlbeg,"e");
//- ["a","a","b","b","b"]

members (sms1,stl::stlbeg,"f");
//- ["a","a","b","b","b","e"]

members (sms1,stl::stlbeg,"x");
//- ["a","a","b","b","b","e"]

members (sms1,stl::stlbeg,"z");
//- ["a","a","b","b","b","e","x","x"]

members (sms1,stl::stlbeg,stl::stlend);
//- ["a","a","b","b","b","e","x","x"]

members (sms1,stl::stlend,stl::stlend);
//- []

members (sms1,"0",stl::stlend);
//- ["a","a","b","b","b","e","x","x"]

members (sms1,"c",stl::stlend);
//- ["e","x","x"]

members (sms1,"c","z");
//- ["e","x","x"]

members (sms1,"b","x");
//- ["b","b","b","e"]

members (sms1,"b","f");
//- ["b","b","b","e"]

members (sms1,stl::stlend,stl::stlbeg);
//- []

members (sms1,"z","c");
//- []

members (sms1,"z","x");
//- []

members (sms1,"z","z");
//- []

members (sms1,"x","c");
//- []

members (sms1,"x","0");
//- []

members (sms1,"x","f");
//- []

//*** rmfirst, rmlast, erase ******************************************

let sms1 = stlmset ["a","b","c","d","e","x","y"]; members sms1; 
//- ["a","b","c","d","e","x","y"]

let sms2 = stlmset ["a","b","c"]; members sms2;
//- ["a","b","c"]

rmfirst sms1; rmlast sms1; members sms1;
//- ["b","c","d","e","x"]

rmfirst (sms1,"e","z"); members sms1;
//- ["b","c","d","x"]

rmlast (sms1,"a","x"); members sms1;
//- ["b","c","x"]

// //-- --stop
erase (sms1,"c"); members sms1;
//- ["b","x"]

erase sms1; members sms1;
//- []

stl::null sms1;
//- 1

insert sms1 "e"; members sms1;
//- ["e"]

stl::null sms1;
//- 0

insert_elms sms1 sms2; members sms1;
//- ["a","b","c","e"]

stl::null (sms1,"b","c");
//- 0

stl::null (sms1,"b","b");
//- 1

let sms3 = stlmset ("f".."i"); members sms3;
//- ["f","g","h","i"]

insert_elms sms1 (sms3,"g","i"); members sms1;
//- ["a","b","c","e","g","h"]

erase (sms1,"h"); members sms1;
//- ["a","b","c","e","g"]

insert_elms sms1 ["e","e"]; members sms1;
//- ["a","b","c","e","e","e","g"]

erase (sms1,"e"); members sms1;
//- ["a","b","c","g"]

erase (sms1,"g"); members sms1;
//- ["a","b","c"]

erase (sms1,"k");
//- 0

erase (sms1,"0");
//- 0

erase (sms1, "a"); members sms1;
//- ["b","c"]

erase (sms1, stl::stlbeg); members sms1;
//- ["c"]

//*** delete, delete_all, delete_if ************************************

let sms1 = stlmset ["a","a","a","b","b","c","c","c"];
//- ()

delete sms1 "0"; members sms1;
//- ["a","a","a","b","b","c","c","c"]

delete sms1 "a"; members sms1;
//- ["a","a","b","b","c","c","c"]

delete sms1 "z"; members sms1;
//- ["a","a","b","b","c","c","c"]

delete_all sms1 "z"; members sms1;
//- ["a","a","b","b","c","c","c"]

delete_all sms1 "c"; members sms1;
//- ["a","a","b","b"]

delete_if (\x->(ord x) mod 2) sms1 "a"; members sms1;
//- ["a","b","b"]

delete_if (\x->(ord x) mod 2) sms1 "a"; members sms1;
//- ["b","b"]

delete_if (\x->(ord x) mod 2) sms1 "b"; members sms1;
//- ["b","b"]

//*** compare ***********************************************************

let sms1 = stlmset ["a","b","b","b","e"];
//- ()

let sms2 = stlmset ["a","b","b"];
//- ()

let sms3 = stlmset ["a","b","c","d","e"];
//- ()

let sms4 = stlmset ["a","b","b","b","b"];
//- ()

let sms5 = stlmset ["0","b","b","b","e"];
//- ()

let sms6 = stlmset ["a","c","d","e"];
//- ()

let sms7 = stlmset ["a","b","f"];
//- ()

let sms8 = stlmset ["a","b","b","b","b","b"];
//- ()

let sms9 = emptystlmset;
//- ()

compare sms1 sms1;
//- 0

compare sms1 sms2;
//- 1

compare sms1 sms3;
//- -1

compare sms1 sms4;
//- 1

compare sms1 sms5;
//- 1

compare sms1 sms6;
//- -1

compare sms1 sms7;
//- -1

compare sms1 sms8;
//- 1

compare sms1 sms9;
//- 1

compare sms2 sms1;
//- -1

compare sms3 sms1;
//- 1

compare sms4 sms1;
//- -1

compare sms5 sms1;
//- -1

compare sms6 sms1;
//- 1

compare sms7 sms1;
//- 1

compare sms8 sms1;
//- -1

compare sms9 sms1;
//- -1

//*** equal ************************************************************


let sms1 = stlmset ["a","b","b","b","e"];
//- ()

let sms2 = stlmset ["a","b","b"];
//- ()

let sms3 = stlmset ["a","b","c","d","e"];
//- ()

let sms4 = stlmset ["a","b","b","b","b"];
//- ()

let sms5 = stlmset ["0","b","b","b","e"];
//- ()

let sms6 = stlmset ["a","c","d","e"];
//- ()

let sms7 = stlmset ["a","b","f"];
//- ()

let sms8 = stlmset ["a","b","b","b","b","b"];
//- ()

let sms9 = emptystlmset;
//- ()

equal sms1 sms1;
//- 1

equal sms1 sms2;
//- 0

equal sms1 sms3;
//- 0

equal sms1 sms4;
//- 0

equal sms1 sms5;
//- 0

equal sms1 sms6;
//- 0

equal sms1 sms7;
//- 0

equal sms1 sms8;
//- 0

equal sms1 sms9;
//- 0

equal sms9 sms9;
//- 1

equal sms2 sms1;
//- 0

equal sms3 sms1;
//- 0

equal sms4 sms1;
//- 0

equal sms5 sms1;
//- 0

equal sms6 sms1;
//- 0

equal sms7 sms1;
//- 0

equal sms8 sms1;
//- 0

equal sms9 sms1;
//- 0

//*** operators ==, ~=, <, <=, >, >= *************************************

let sms1 = stlmset ["a","b","b","b","e"];
//- ()

let sms2 = stlmset ["a","b","b"];
//- ()

let sms3 = emptystlmset;
//- ()

sms1 < sms1;
//- 0

sms1 <= sms1;
//- 1

sms1 > sms1;
//- 0

sms1 >= sms1;
//- 1

sms1 == sms1;
//- 1

sms1 ~= sms1;
//- 0

sms1 < sms2;
//- 0

sms1 <= sms2;
//- 0

sms1 > sms2;
//- 1

sms1 >= sms2;
//- 1

sms1 == sms2;
//- 0

sms1 ~= sms2;
//- 1

sms1 < sms3;
//- 0

sms1 <= sms3;
//- 0

sms1 > sms3;
//- 1

sms1 >= sms3;
//- 1

sms1 == sms3;
//- 0

sms1 ~= sms3;
//- 1

sms1 < sms1;
//- 0

sms1 <= sms1;
//- 1

sms1 > sms1;
//- 0

sms1 >= sms1;
//- 1

sms1 == sms1;
//- 1

sms1 ~= sms1;
//- 0

//*** bounds, size *******************************************************

let sms1 = stlmset ["a","b","b","b","c","d"]; members sms1;
//- ["a","b","b","b","c","d"]

let sms2, lb, ub = stl::bounds sms1; (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let sms2, lb, ub = stl::bounds (sms1,"a"); (lb, ub);
//- stl_begin_iterator,"b"

let sms2, lb, ub = stl::bounds (sms1,"a1"); (lb, ub);
//- "b","b"

let sms2, lb, ub = stl::bounds (sms1,"b"); (lb, ub);
//- "b","c"

members (sms2, lb, ub);
//- ["b","b","b"]

let sms2, lb, ub = stl::bounds (sms1,"a","x"); (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let sms2, lb, ub = stl::bounds (sms1,"0","x"); (lb, ub);
//- stl_begin_iterator,stl_end_iterator

let sms2, lb, ub = stl::bounds (sms1,"x","a"); (lb, ub);
//- stl_end_iterator,"b"

let sms2, lb, ub = stl::bounds (sms1,"a","b"); (lb, ub);
//- stl_begin_iterator,"c"

members (sms2, lb, ub);
//- ["a","b","b","b"]

let sms2, lb, ub = stl::bounds (sms1,stl::stlbeg,"a"); (lb, ub);
//- stl_begin_iterator,"b"

let sms2, lb, ub = stl::bounds (sms1,stl::stlend,"x"); (lb, ub);
//- stl_end_iterator,stl_end_iterator

stl::size sms1;
//- 6

stl::size (sms1,"b","d");
//- 4

stl::size (sms1,"c",stl::stlend);
//- 2

//** map ******************************************************************

let sms1 = stlmset ["a","b","c","d"]; members sms1;
//- ["a","b","c","d"]

map (\k->k+1) sms1;
//- ["b","c","d","e"]

map (\k->k+1) (sms1,stl::stlbeg,stl::stlend);
//- ["b","c","d","e"]

map (\k->k+1) (sms1,stl::stlbeg,"x");
//- ["b","c","d","e"]

map (\k->k+1)  (sms1,stl::stlbeg,"d");
//- ["b","c","d"]

map (\k->k+1) (sms1,stl::stlbeg,"a");
//- []

map (\k->k+1) (sms1,"0",stl::stlend);
//- ["b","c","d","e"]

map (\k->k+1) (sms1,"b","d");
//- ["c","d"]

map (\k->k+1) (sms1,"x","a");
//- []

//** listmap, catmap *************************************************

let sms1 = stlmset ["a","b","c","d"]; members sms1;
//- ["a","b","c","d"]

listmap (\k->k+1) sms1;
//- ["b","c","d","e"]

catmap (\k->[k+1]) sms1;
//- ["b","c","d","e"]

catmap (\k->[k+1]) (sms1,"a","b");
//- ["b"]

[ k+1 | k = sms1];
//- ["b","c","d","e"]

[ k | k = sms1; (ord k) mod 2];
//- ["a","c"]

{ k+1 | k = sms1};
//- {"b","c","d","e"}

{ {k;ord k} | k = sms1; (ord k) mod 2};
//- {"a","c";97,99}

//** foldl, foldl1, foldr, foldr1 ***********************************

let sms1 = stlmset ["a","b","c","d"]; members sms1;
//- ["a","b","c","d"]

foldl (\acc k -> k:acc) [] sms1;
//- ["d","c","b","a"]

foldl (\acc k -> k:acc) [] (sms1,"a","d");
//- ["c","b","a"]

foldl (\acc k -> k:acc) [] (sms1,"b",stl::stlend);
//- ["d","c","b"]

foldl (\acc k -> k:acc) [] (sms1,"b","d");
//- ["c","b"]

foldl (\acc k -> k:acc) [] (sms1,"b","b");
//- []

foldl1 (\acc k -> k+acc) sms1;
//- "dcba"

foldl1 (\acc k -> k+acc) (sms1,"a","d");
//- "cba"

foldl1 (\acc k -> k+acc) (sms1,"b",stl::stlend);
//- "dcb"

foldl1 (\acc k -> k+acc) (sms1,"b","d");
//- "cb"

foldl1 (\acc k -> k+acc) (sms1,"b","b"); (); // fails
//- ()

foldr (\k acc -> k:acc) [] sms1;
//- ["a","b","c","d"]

foldr (\k acc -> k:acc) [] (sms1,"a","d");
//- ["a","b","c"]

foldr (\k acc -> k:acc) [] (sms1,"b",stl::stlend);
//- ["b","c","d"]

foldr (\k acc -> k:acc) [] (sms1,"b","d");
//- ["b","c"]

foldr (\k acc -> k:acc) [] (sms1,"b","b");
//- []

foldr1 (\k acc -> k+acc) sms1;
//- "abcd"

foldr1 (\k acc -> k+acc) (sms1,"a","d");
//- "abc"

foldr1 (\k acc -> k+acc) (sms1,"b",stl::stlend);
//- "bcd"

foldr1 (\k acc -> k+acc) (sms1,"b","d");
//- "bc"

foldr1 (\k acc -> k+acc) (sms1,"b","b"); (); // fails
//- ()

//*** do, filter *******************************************************

let sms1 = stlmset ["a","b","c","d"]; members sms1;
//- ["a","b","c","d"]

let sms2 = emptystlmset_with (>) (>) (==); members sms2;
//- []

do (insert sms2) sms1; members sms2;
//- ["d","c","b","a"]

erase sms2; do (insert sms2) (sms1,"a","d"); members sms2;
//- ["c","b","a"]

erase sms2; do (insert sms2) (sms1,"b","x"); members sms2;
//- ["d","c","b"]

erase sms2; do (insert sms2) (sms1,"0","0"); members sms2;
//- []

erase sms2; do (insert sms2) (sms1,"x","x"); members sms2;
//- []

erase sms2; do (insert sms2) (sms1,"d","x"); members sms2;
//- ["d"]

filter (\k -> (ord k) mod 2) sms1;
//- ["a","c"]

filter (\k -> (ord k) mod 2) (sms1,"a","c");
//- ["a"]

filter (\k -> (ord k) mod 2) (sms1,"c",stl::stlend);
//- ["c"]

filter (\k -> (ord k) mod 2) (sms1,"d","d");
//- []

//** Set operations ******************************************************



let sms1 = stlmset ["a","a","a","b","c"]; members sms1;
//- ["a","a","a","b","c"]

let sms2 = stlmset ["a","a","b","b","d"]; members sms2;
//- ["a","a","b","b","d"]

let sms3 = stlmset ["b","c","d"]; members sms3;
//- ["b","c","d"]

members (sms1 + sms1);
//- ["a","a","a","a","a","a","b","b","c","c"]

members (sms1 + sms2);
//- ["a","a","a","a","a","b","b","b","c","d"]

members (sms2 + sms1);
//- ["a","a","a","a","a","b","b","b","c","d"]

members (sms1 - sms1);
//- []

members (sms1 - sms2);
//- ["a","c"]

members (sms2 - sms1);
//- ["b","d"]

members (sms1 * sms1);
//- ["a","a","a","b","c"]

members (sms1 * sms2);
//- ["a","a","b"]

members (sms2 * sms1);
//- ["a","a","b"]

members (sms1 / sms1);
//- []

members (stl::set_union sms1 sms2);
//- ["a","a","a","b","b","c","d"]

members (stl::set_union sms2 sms1);
//- ["a","a","a","b","b","c","d"]

members (stl::set_intersection sms1 sms1);
//- ["a","a","a","b","c"]

members (stl::set_intersection sms1 sms2);
//- ["a","a","b"]

members (stl::set_intersection sms2 sms1);
//- ["a","a","b"]

members (stl::set_difference sms1 sms1);
//- []

members (stl::set_difference sms1 sms2);
//- ["a","c"]

members (stl::set_difference sms2 sms1);
//- ["b","d"]

members (stl::set_symmetric_difference sms1 sms1);
//- []

members (stl::set_symmetric_difference sms1 sms2);
//- ["a","b","c","d"]

members (stl::set_symmetric_difference sms2 sms1);
//- ["a","b","c","d"]

stl::set_includes sms1 (sms1,"b","d");
//- 1

stl::set_includes (sms1,"b","d") sms1;
//- 0

//** Cache sensitive sequences ****************************************

let sms1 = stlmset ("a".."j"); members sms1;
//- ["a","b","c","d","e","f","g","h","i","j"]

stl::set_smm_trace 1;
//- ()

member sms1 "a";
//- 1

sms1!"a";
//- 1

erase (sms1, "b"); members sms1;
//- ["a","c","d","e","f","g","h","i","j"]

sms1!"a";
//- 1

member sms1 "a";
//- 1

erase (sms1,"a"); members sms1;
//- ["c","d","e","f","g","h","i","j"]

member sms1 "a";
//- 0

member sms1 "e";
//- 1

rmfirst sms1;
//- ()

member sms1 "e";
//- 1

member sms1 "c";
//- 0

member sms1 "e"
//- 1

rmlast sms1; members sms1;
//- ["d","e","f","g","h","i"]

member sms1 "e";
//- 1

member sms1 "j";
//- 0

member sms1 "e";
//- 1

erase (sms1, "h", stl::stlend); members sms1;
//- ["d","e","f","g"]

member sms1 "e";
//- 1

member sms1 "i";
//- 0

member sms1 "e";
//- 1

stl::set_smm_trace 0;
//- ()

