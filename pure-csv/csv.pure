/* CSV library interface

   Date: July 15, 2008
   Updated: November 21,22, 2008 to use namespaces.
   Updated: December 22, 2009: changed the default dialect to a const and 
            modified lookup to take advantage of nonlinear pattern matching.
   Updated: June 11, 2010 to make use of rewritten C module and Pure's built
            in records.
   Updated: July 7, 2010 added space_before_quote_flag and trim_space_flag.
   Updated: July 15, 2010 changed the flags to allow space between before a
            quote or after a quote.
   Updated: July 16, 2010 added optional optional key selection of fields
   Updated: July 21, 2010 fixed write_escaped and write_quoted warnings
   Updated: Sep. 13, 2010 fixed problem writing integer or double matrices
   Updated: Nov. 17, 2010 handle user defined line terminators
*/

namespace csv;

using "lib:csv.so";

private extern csv_t *csv_open(char *, char *, expr *, int);
private extern void csv_close(csv_t *t);
private extern expr *csv_write(csv_t *, void *, int);
private extern expr *csv_read(csv_t *);
private extern expr *csv_getheader(csv_t *);

public
  MINIMAL
  STRING
  ALL
  NO
  LEFT
  RIGHT
  BOTH
  CRLF
  LF
  LIST
  HEADER
  RFC4180
  EXCEL
  error
  dialect
  quote
  escape
  delimiter
  terminator
  quote_flag
  space_around_quoted_field
  trim_space
  open
  close
  header
  getr
  fgetr
  fgetr_lazy
  putr
  fputr;

/* Public dialect options

  delimiter:  Character used to separate fields.
              Type: string
              Default: ","

  escape:     Escape character used to embed delimiter, escape, or return
              characters. If the escape character is not null, then the
              quote character is ignored.
              Type: string
              Default: ""
              Notes:
                Reading: The escape character is dropped and the next char
                         is inserted into the field.
                Writing: The escape character is written into the output
                         stream before the delimiter, escape, or return
                         character.

  quote:      Quote character for embedding delimiters, quotes, and
              returns. The quote character is ignored if the escape
              character is defined.
              Type: string
              Default: "\""

  terminator: Value used for record termination when writing.
              Type: string.
              Default: 
	        Reading: Either a user specified string or if not specivied
                         the file is sniffed for a "\r", "\r\n", or "\n".
		Writing: Either a user specified string or "\r\n" for
         		 Windows platforms or "\n" for everything else.

  quote_flag: Sets whether strings or numbers should be quoted.
              Type: One of {ALL, STRING, MINIMAL}
              Default: ALL
	      Notes:
	        Reading: ALL     - all fields are returned as strings.
			 STRING  - non quoted integer and double fields
                                         are converted.
                         MINIMAL - same as QUOTE_STRING.
                Writing: ALL     - all fields are written enclosed in
                                         quotes.
                         STRING  - only string fields are written
                                         enclosed in quotes.
                         MINIMAL - only fields containing quote, 
                                         delimiter, or return characters are
                                         written with enclosing quotes.

  space_around_quoted_field: Determines how whitespace between quotes and 
              delimiters should be treated.
              Type: One of {NO, LEFT, RIGHT, BOTH}
	      Default: NO
	      Notes:
	        Reading: NO    - follows RFC4180 rules.
                         LEFT  - allows space before a quoted field.
                         RIGHT - allows space after a quoted field.
			 BOTH  - allows space before and after a quoted field.
  
  trim_space: Determines whether leading or trailing whitespace inside a field
              should be removed.
             Type: One of {NO, LEFT, RIGHT, BOTH}
             Default: NO
             Notes:
               Reading: NO    - follows RFC4180 rules.
                        LEFT  - trims leading whitespace from a field.
			RIGHT - trims trailing whitespace from a field.
			BOTH  - trims both leading and trailing whitespace
                                from a field. 
               CAUTION: Trimming space may allow conversion of numbers if
                        quote_flag = MINIMAL since space before a number in a
                        field is normally interpreted as a string.
*/

private
  terminator_opts
  quote_flag_opts
  allow_space_opts
  trim_space_opts;

const quote_flag_opts = {ALL=>0, STRING=>1, MINIMAL=>2};
const allow_space_opts = {NO=>0, LEFT=>32, RIGHT=>16, BOTH=>48};
const trim_space_opts = {NO=>0, LEFT=>8, RIGHT=>4, BOTH=>12};

dialect rec::matrix
  = do (\(x=>y) -> if (member (get dfr) x) then
                     put dfr (update (get dfr) x y)
                   else
                     ()) rec $$
    ({quote=>dfq!quote, escape=>dfq!escape, delimiter=>dfq!delimiter, 
      terminator=>dfq!terminator, flags=> 
      (quote_flag_opts!(dfq!quote_flag) or
       allow_space_opts!(dfq!space_around_quoted_field) or
       trim_space_opts!(dfq!trim_space))} when dfq = get dfr end)
    when
      df = {quote=>"\"", escape=>"", delimiter=>",", terminator=>"", 
            quote_flag=>ALL, space_around_quoted_field=>NO, trim_space=>NO};
      dfr = ref df;
    end;

/* Predefined dialects */
const default = dialect {};
const RFC4180 = dialect {terminator=>"\r\n"};
const EXCEL = dialect {quote_flag=>MINIMAL, 
                       space_around_quoted_field=>BOTH,
                       trim_space=>BOTH};

private file_opts CSV;

const file_opts = {LIST=>1, HEADER=>2};

/* Open a CSV file for reading, "r", writing, "w", or appending, "a",
   with dialect d. For list output, put LIST in the options list and for
   using a header when reading, put HEADER in the options list
*/
open (fname::string, rw_flag::string, d::matrix, opts)
  = if rw_flag ~= "r" && rw_flag ~= "w" && rw_flag ~= "a" then
      throw (error "bad read/write/append flag")
    else if null f then
      throw (error ("cannot open file [" + fname + "]"))
    else
      sentry csv_close f
    when
      badopts = filter (\x -> ~member file_opts x) opts;
      flag_opts = if null badopts then
               	    foldl (or) 0 (map ((!) file_opts) opts)
	          else
	            throw (error ("bad option(s) " + (str badopts)));
      f = csv_open fname rw_flag d flag_opts;
    end;

/* Open a CSV file like above but with the library but output is a vector */
open (fname::string, rw_flag::string, d::matrix)
  = open (fname, rw_flag, d, []);

/* Open a CSV file like above but with the library default dialect */
open (fname::string, rw_flag::string)
  = open (fname, rw_flag, default, []);

/* Open a CSV file for reading with the library default dialect */
open fname::string
  = open (fname, "r", default, []);

/* Close a CSV file. Sentries ensure files will automatically be closed
   and internal buffers will be freed when the file pointer goes out of
   scope. */
close f::pointer = clear_sentry f $$ csv_close f;

/* Header record as an optional way of indexing fields. The
   CSV file must contain a header for this to work. */
header f::pointer 
  = if null h then {} else h when h = csv_getheader f end;

/* Write a record to a CSV file */
putr f::pointer r::matrix = csv_write f (smatrix r) (#r) if rowvectorp r;
putr f::pointer r@(_:_) = csv_write f m (#m) when m = smatrix r; end;

/* Write a list of records to a CSV file */
fputr f::pointer xs@(_:_) = loop xs with
  loop [] = ();
  loop (x:xs) = (putr f x) $$ loop xs;
end;

/* Read a record from a CSV file */
getr f::pointer = csv_read f;

/* Read a list of records from a CSV file */
fgetr f::pointer = loop (getr f) [] with
  loop x xs = reverse xs if null x;
  loop x xs = loop (getr f) (x:xs);
end;

/* Lazily read a list of records from a CSV file */
fgetr_lazy f::pointer = if null r then [] else r:fgetr_lazy f & when
  r = getr f;
end;
