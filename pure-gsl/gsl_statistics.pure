
/* gsl_statistics.pure: GSL wrapper for the Pure programming language. */

/* Copyright (c) 2008 by Albert Graef <Dr.Graef@t-online.de>.
   Copyright (c) 2008 by Robert E. Rucker <erucker@bmc.edu>.

   This file is part of the Pure programming language and system.

   Pure is free software: you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation, either version 3 of the License, or (at your option) any later
   version.

   Pure is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
   details.

   You should have received a copy of the GNU General Public License along
   with this program.  If not, see <http://www.gnu.org/licenses/>. */

using "lib:libgsl";

namespace C;

extern double gsl_stats_mean(double*, size_t, size_t);

extern double gsl_stats_variance(double*, size_t, size_t);
extern double gsl_stats_variance_m(double*, size_t, size_t, double);

extern double gsl_stats_sd(double*, size_t, size_t);
extern double gsl_stats_sd_m(double*, size_t, size_t, double);

extern double gsl_stats_tss(double*, size_t, size_t);
extern double gsl_stats_tss_m(double*, size_t, size_t, double);

extern double gsl_stats_variance_with_fixed_mean
  (double*, size_t, size_t, double);
extern double gsl_stats_sd_with_fixed_mean(double*, size_t, size_t, double);

extern double gsl_stats_absdev(double*, size_t, size_t);
extern double gsl_stats_absdev_m(double*, size_t, size_t, double);

extern double gsl_stats_skew(double*, size_t, size_t);
extern double gsl_stats_skew_m_sd(double*, size_t, size_t, double, double);

extern double gsl_stats_kurtosis(double*, size_t, size_t);
extern double gsl_stats_kurtosis_m_sd(double*, size_t, size_t, double, double);

extern double gsl_stats_lag1_autocorrelation(double*, size_t, size_t);
extern double gsl_stats_lag1_autocorrelation_m(double*, size_t, size_t, double);

extern double gsl_stats_covariance(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_covariance_m
  (double*, size_t, double*, size_t, size_t, double, double);

extern double gsl_stats_wmean(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wvariance(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wvariance_m
  (double*, size_t, double*, size_t, size_t, double);
extern double gsl_stats_wsd(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wsd_m(double*, size_t, double*, size_t, size_t, double);
extern double gsl_stats_wvariance_with_fixed_mean
  (double*, size_t, double*, size_t, size_t, double);
extern double gsl_stats_wsd_with_fixed_mean
  (double*, size_t, double*, size_t, size_t, double);
extern double gsl_stats_wabsdev(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wabsdev_m
  (double*, size_t, double*, size_t, size_t, double);
extern double gsl_stats_wskew(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wskew_m_sd
  (double*, size_t, double*, size_t, size_t, double, double);
extern double gsl_stats_wkurtosis(double*, size_t, double*, size_t, size_t);
extern double gsl_stats_wkurtosis_m_sd
  (double*, size_t, double*, size_t, size_t, double, double);

extern double gsl_stats_correlation(double*, size_t, double*, size_t, size_t);

extern double gsl_stats_median_from_sorted_data(double*, size_t, size_t);
extern double gsl_stats_quantile_from_sorted_data
  (double*, size_t, size_t, double);

extern int gsl_stats_int_max(int*, size_t, size_t);
extern double gsl_stats_max(double*, size_t, size_t);

extern int gsl_stats_int_min(int*, size_t, size_t);
extern double gsl_stats_min(double*, size_t, size_t);

extern expr* wrap_gsl_stats_int_minmax(int*, size_t, size_t);
extern expr* wrap_gsl_stats_minmax(double*, size_t, size_t);

extern int gsl_stats_int_max_index(int*, size_t, size_t);
extern int gsl_stats_max_index(double*, size_t, size_t);

extern int gsl_stats_int_min_index(int*, size_t, size_t);
extern int gsl_stats_min_index(double*, size_t, size_t);

extern expr* wrap_gsl_stats_int_minmax_index(int*, size_t, size_t);
extern expr* wrap_gsl_stats_minmax_index(double*, size_t, size_t);

namespace gsl;

private
  apply1
  dapply1
  dapply1_d
  dapply1_dd
  dapply2
  dapply2_d
  dapply2_dd;

/* Statistics macros. */

def apply1  f  m  =
  if rowvectorp m then
    (v when v = f (pointer m) 1 (#m) end)
  else
    f m;

def dapply1  f  m  =
  if rowvectorp m then
    (v when 
         x = dmatrix m;
         v = f (pointer x) 1 (#m)
       end)
  else
    f m;
  
def dapply1_d  f  m  d  =
  if rowvectorp m then
    (v when
         x = dmatrix m;
         v = f (pointer x) 1 (#m) (double d)
       end)
  else
    f m d;

def dapply1_dd  f  m  d1  d2  =
  if rowvectorp m then
    (v when
         x = dmatrix m;
         v = f (pointer x) 1 (#m) (double d1) (double d2)
       end)
  else
    f m d1 d2;

def dapply2  f  m1  m2  =
  if rowvectorp m1 && rowvectorp m2 && #m1 == #m2 then
    (v when
         x1, x2 = dmatrix m1, dmatrix m2;
         v = f (pointer x1) 1 (pointer x2) 1 (#m1);
       end)
  else
    f m1 m2;

def dapply2_d  f  m1  m2  d  =
  if rowvectorp m1 && rowvectorp m2 && #m1 == #m2 then
    (v when
         x1, x2 = dmatrix m1, dmatrix m2;
         v = f (pointer x1) 1 (pointer x2) 1 (#m1) (double d);
       end)
  else
    f m1 m2 d;

def dapply2_dd  f  m1  m2  d1  d2  =
  if rowvectorp m1 && rowvectorp m2 && #m1 == #m2 then
    (v when
         x1, x2 = dmatrix m1, dmatrix m2;
         v = f (pointer x1) 1 (pointer x2) 1 (#m1) (double d1) (double d2);
       end)
  else
    f m1 m2 d1 d2;

public
  stats_mean
  stats_variance
  stats_variance_m
  stats_sd
  stats_sd_m
  stats_tss
  stats_tss_m
  stats_variance_with_fixed_mean
  stats_sd_with_fixed_mean
  stats_absdev
  stats_absdev_m
  stats_skew
  stats_skew_m_sd
  stats_kurtosis
  stats_kurtosis_m_sd
  stats_lag1_autocorrelation
  stats_lag1_autocorrelation_m
  stats_covariance
  stats_covariance_m
  stats_wmean
  stats_wvariance
  stats_wvariance_m
  stats_wsd
  stats_wsd_m
  stats_wvariance_with_fixed_mean
  stats_wsd_with_fixed_mean
  stats_wabsdev
  stats_wabsdev_m
  stats_wskew
  stats_wskew_m_sd
  stats_wkurtosis
  stats_wkurtosis_m_sd
  stats_max
  stats_min
  stats_minmax
  stats_max_index
  stats_min_index
  stats_minmax_index
  stats_median_from_sorted_data
  stats_quantile_from_sorted_data
  stats_correlation;

using namespace C;

stats_mean  m::matrix
  = dapply1 gsl_stats_mean m;

stats_variance  m::matrix
  = dapply1 gsl_stats_variance m;

stats_variance_m  m::matrix  mean
  = dapply1_d gsl_stats_variance_m m mean;

stats_sd  m::matrix
  = dapply1 gsl_stats_sd m;

stats_sd_m  m::matrix  mean
  = dapply1_d gsl_stats_sd_m m mean;

stats_tss  m::matrix
  = dapply1 gsl_stats_tss m;

stats_tss_m  m::matrix  mean
  = dapply1_d gsl_stats_tss_m m mean;

stats_variance_with_fixed_mean  m::matrix  mean
  = dapply1_d gsl_stats_variance_with_fixed_mean m mean;

stats_sd_with_fixed_mean  m::matrix  mean
  = dapply1_d gsl_stats_sd_with_fixed_mean m mean;

stats_absdev  m::matrix
  = dapply1 gsl_stats_absdev m;

stats_absdev_m  m::matrix  mean
  = dapply1_d gsl_stats_absdev_m m mean;

stats_skew  m::matrix
  = dapply1 gsl_stats_skew m;

stats_skew_m_sd  m::matrix  mean  sd
  = dapply1_dd gsl_stats_skew_m_sd m mean sd if sd >= 0.0;

stats_kurtosis  m::matrix
  = dapply1 gsl_stats_kurtosis m;

stats_kurtosis_m_sd  m::matrix  mean  sd
  = dapply1_dd gsl_stats_kurtosis_m_sd m mean sd if sd >= 0.0;

stats_lag1_autocorrelation  m::matrix
  = dapply1 gsl_stats_lag1_autocorrelation m;

stats_lag1_autocorrelation_m  m::matrix  mean
  = dapply1_d gsl_stats_lag1_autocorrelation_m m mean;

stats_covariance  m1::matrix  m2::matrix
  = dapply2 gsl_stats_covariance m1 m2;

stats_covariance_m  m1::matrix  m2::matrix  mean1  mean2
  = dapply2_dd gsl_stats_covariance_m m1 m2 mean1 mean2;

stats_wmean  w::matrix  m::matrix
  = dapply2 gsl_stats_wmean w m;

stats_wvariance  w::matrix  m::matrix
  = dapply2 gsl_stats_wvariance w m;

stats_wvariance_m  w::matrix  m::matrix  mean
  = dapply2_d gsl_stats_wvariance_m w m mean;

stats_wsd  weights::matrix  m::matrix
  = dapply2 gsl_stats_wsd weights m;

stats_wsd_m  weights::matrix  m::matrix  weighted_mean
  = dapply2_d gsl_stats_wsd_m weights m weighted_mean;

stats_wvariance_with_fixed_mean  weights::matrix  m::matrix  mean
  = dapply2_d gsl_stats_wvariance_with_fixed_mean weights m mean;

stats_wsd_with_fixed_mean  weights::matrix  m::matrix  mean
  = dapply2_d gsl_stats_wsd_with_fixed_mean weights m mean;

stats_wabsdev  weights::matrix  m::matrix
  = dapply2 gsl_stats_wabsdev weights m;

stats_wskew  weights::matrix  m::matrix
  = dapply2 gsl_stats_wskew weights m;

stats_wskew_m_sd  weights::matrix  m::matrix  mean  sd
  = dapply2_dd gsl_stats_wskew_m_sd weights m mean sd if sd >= 0.0;

stats_wkurtosis  weights::matrix  m::matrix
  = dapply2 gsl_stats_wkurtosis weights m;

stats_wkurtosis_m_sd  weights::matrix  m::matrix mean sd
  = dapply2_dd gsl_stats_wkurtosis_m_sd weights m mean sd if sd >= 0.0;

stats_max  m::matrix
  = apply1 gsl_stats_int_max m if imatrixp m;
  = apply1 gsl_stats_max m if dmatrixp m;

stats_min  m::matrix
  = apply1 gsl_stats_int_min m if imatrixp m;
  = apply1 gsl_stats_min m if dmatrixp m;

stats_minmax  m::matrix
  = apply1 wrap_gsl_stats_int_minmax m if imatrixp m;
  = apply1 wrap_gsl_stats_minmax m if dmatrixp m;

stats_min_index  m::matrix
  = apply1 gsl_stats_int_min_index m if imatrixp m;
  = apply1 gsl_stats_min_index m if dmatrixp m;
  
stats_max_index  m::matrix
  = apply1 gsl_stats_int_max_index m if imatrixp m;
  = apply1 gsl_stats_max_index m if dmatrixp m;

stats_minmax_index  m::matrix
  = apply1 wrap_gsl_stats_int_minmax_index m if imatrixp m;
  = apply1 wrap_gsl_stats_minmax_index m if dmatrixp m;

stats_correlation  m1::matrix  m2::matrix
  = dapply2 gsl_stats_correlation m1 m2;

stats_median_from_sorted_data  m::matrix
  = dapply1 gsl_stats_median_from_sorted_data m;

stats_quantile_from_sorted_data  m::matrix  f::double
  = dapply1_d gsl_stats_quantile_from_sorted_data m f
    if f >= 0.0 && f <= 1.0;
