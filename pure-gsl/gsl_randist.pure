
/* gsl_randist.pure: GSL wrapper for the Pure programming language. */

/* Copyright (c) 2008 by Albert Graef <Dr.Graef@t-online.de>.
   Copyright (c) 2008 by Robert E. Rucker <erucker@bmc.edu>.

   This file is part of the Pure programming language and system.

   Pure is free software: you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation, either version 3 of the License, or (at your option) any later
   version.

   Pure is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
   details.

   You should have received a copy of the GNU General Public License along
   with this program.  If not, see <http://www.gnu.org/licenses/>. */

using "lib:libgsl";

namespace C;

extern double gsl_ran_gaussian_pdf(double, double);
extern double gsl_ran_ugaussian_pdf(double);
extern double gsl_cdf_ugaussian_P(double);
extern double gsl_cdf_gaussian_P(double, double);
extern double gsl_cdf_ugaussian_Q(double);
extern double gsl_cdf_gaussian_Q(double, double);
extern double gsl_cdf_ugaussian_Pinv(double);
extern double gsl_cdf_gaussian_Pinv(double, double);
extern double gsl_cdf_ugaussian_Qinv(double);
extern double gsl_cdf_gaussian_Qinv(double, double);

extern double gsl_ran_gaussian_tail_pdf(double, double, double);
extern double gsl_ran_ugaussian_tail_pdf(double, double);

extern double gsl_ran_bivariate_gaussian_pdf
  (double, double, double, double, double);

extern double gsl_ran_exponential_pdf(double, double);
extern double gsl_cdf_exponential_P(double, double);
extern double gsl_cdf_exponential_Q(double, double);
extern double gsl_cdf_exponential_Pinv(double, double);
extern double gsl_cdf_exponential_Qinv(double, double);

extern double gsl_ran_laplace_pdf(double, double);
extern double gsl_cdf_laplace_P(double, double);
extern double gsl_cdf_laplace_Q(double, double);
extern double gsl_cdf_laplace_Pinv(double, double);
extern double gsl_cdf_laplace_Qinv(double, double);

extern double gsl_ran_exppow_pdf(double, double, double);
extern double gsl_cdf_exppow_P(double, double, double);
extern double gsl_cdf_exppow_Q(double, double, double);

extern double gsl_ran_cauchy_pdf(double, double);
extern double gsl_cdf_cauchy_P(double, double);
extern double gsl_cdf_cauchy_Q(double, double);
extern double gsl_cdf_cauchy_Pinv(double, double);
extern double gsl_cdf_cauchy_Qinv(double, double);

extern double gsl_ran_rayleigh_pdf(double, double);
extern double gsl_cdf_rayleigh_P(double, double);
extern double gsl_cdf_rayleigh_Q(double, double);
extern double gsl_cdf_rayleigh_Pinv(double, double);
extern double gsl_cdf_rayleigh_Qinv(double, double);

extern double gsl_ran_rayleigh_tail_pdf(double, double, double);

extern double gsl_ran_landau_pdf(double);

extern double gsl_ran_gamma_pdf(double, double, double);
extern double gsl_cdf_gamma_P(double, double, double);
extern double gsl_cdf_gamma_Q(double, double, double);
extern double gsl_cdf_gamma_Pinv(double, double, double);
extern double gsl_cdf_gamma_Qinv(double, double, double);

extern double gsl_ran_flat_pdf(double, double, double);
extern double gsl_cdf_flat_P(double, double, double);
extern double gsl_cdf_flat_Q(double, double, double);
extern double gsl_cdf_flat_Pinv(double, double, double);
extern double gsl_cdf_flat_Qinv(double, double, double);

extern double gsl_ran_lognormal_pdf(double, double, double);
extern double gsl_cdf_lognormal_P(double, double, double);
extern double gsl_cdf_lognormal_Q(double, double, double);
extern double gsl_cdf_lognormal_Pinv(double, double, double);
extern double gsl_cdf_lognormal_Qinv(double, double, double);

extern double gsl_ran_chisq_pdf(double, double);
extern double gsl_cdf_chisq_P(double, double);
extern double gsl_cdf_chisq_Q(double, double);
extern double gsl_cdf_chisq_Pinv(double, double);
extern double gsl_cdf_chisq_Qinv(double, double);

extern double gsl_ran_fdist_pdf(double, double, double);
extern double gsl_cdf_fdist_P(double, double, double);
extern double gsl_cdf_fdist_Q(double, double, double);
extern double gsl_cdf_fdist_Pinv(double, double, double);
extern double gsl_cdf_fdist_Qinv(double, double, double);

extern double gsl_ran_tdist_pdf(double, double);
extern double gsl_cdf_tdist_P(double, double);
extern double gsl_cdf_tdist_Q(double, double);
extern double gsl_cdf_tdist_Pinv(double, double);
extern double gsl_cdf_tdist_Qinv(double, double);

extern double gsl_ran_beta_pdf(double, double, double);
extern double gsl_cdf_beta_P(double, double, double);
extern double gsl_cdf_beta_Q(double, double, double);
extern double gsl_cdf_beta_Pinv(double, double, double);
extern double gsl_cdf_beta_Qinv(double, double, double);

extern double gsl_ran_logistic_pdf(double, double);
extern double gsl_cdf_logistic_P(double, double);
extern double gsl_cdf_logistic_Q(double, double);
extern double gsl_cdf_logistic_Pinv(double, double);
extern double gsl_cdf_logistic_Qinv(double, double);

extern double gsl_ran_pareto_pdf(double, double, double);
extern double gsl_cdf_pareto_P(double, double, double);
extern double gsl_cdf_pareto_Q(double, double, double);
extern double gsl_cdf_pareto_Pinv(double, double, double);
extern double gsl_cdf_pareto_Qinv(double, double, double);

extern double gsl_ran_weibull_pdf(double, double, double);
extern double gsl_cdf_weibull_P(double, double, double);
extern double gsl_cdf_weibull_Q(double, double, double);
extern double gsl_cdf_weibull_Pinv(double, double, double);
extern double gsl_cdf_weibull_Qinv(double, double, double);

extern double gsl_ran_gumbel1_pdf(double, double, double);
extern double gsl_cdf_gumbel1_P(double, double, double);
extern double gsl_cdf_gumbel1_Q(double, double, double);
extern double gsl_cdf_gumbel1_Pinv(double, double, double);
extern double gsl_cdf_gumbel1_Qinv(double, double, double);

extern double gsl_ran_gumbel2_pdf(double, double, double);
extern double gsl_cdf_gumbel2_P(double, double, double);
extern double gsl_cdf_gumbel2_Q(double, double, double);
extern double gsl_cdf_gumbel2_Pinv(double, double, double);
extern double gsl_cdf_gumbel2_Qinv(double, double, double);

extern double gsl_ran_dirichlet_pdf(size_t, double*, double*);
extern double gsl_ran_dirichlet_lnpdf(size_t, double*, double*);

extern gsl_ran_discrete_t *gsl_ran_discrete_preproc(size_t, double*);
extern double gsl_ran_discrete_pdf(size_t, gsl_ran_discrete_t*);
extern void gsl_ran_discrete_free(gsl_ran_discrete_t *);

extern double gsl_ran_poisson_pdf(int, double);
extern double gsl_cdf_poisson_P(int, double);
extern double gsl_cdf_poisson_Q(int, double);

extern double gsl_ran_bernoulli_pdf(int, double);

extern double gsl_ran_binomial_pdf(int, double, int);
extern double gsl_cdf_binomial_P(int, double, int);
extern double gsl_cdf_binomial_Q(int, double, int);

extern double gsl_ran_multinomial_pdf(size_t, double*, int*);
extern double gsl_ran_multinomial_lnpdf(size_t, double*, int*);

extern double gsl_ran_negative_binomial_pdf(int, double, double);
extern double gsl_cdf_negative_binomial_P(int, double, double);
extern double gsl_cdf_negative_binomial_Q(int, double, double);

extern double gsl_ran_pascal_pdf(int, double, int);
extern double gsl_cdf_pascal_P(int, double, int);
extern double gsl_cdf_pascal_Q(int, double, int);

extern double gsl_ran_geometric_pdf(int, double);
extern double gsl_cdf_geometric_P(int, double);
extern double gsl_cdf_geometric_Q(int, double);

extern double gsl_ran_hypergeometric_pdf(int, int, int, int);
extern double gsl_cdf_hypergeometric_P(int, int, int, int);
extern double gsl_cdf_hypergeometric_Q(int, int, int, int);

extern double gsl_ran_logarithmic_pdf(int, double);

namespace gsl;

/* P.d.f. macro. */

private
  apply2_ran;

def apply2_ran  f  m1  m2  =
  if rowvectorp m1 && rowvectorp m2 && #m1 == #m2 then
    (v
     when
       x1, x2 = dmatrix m1, dmatrix m2;
       v = f (#m1) (pointer x1) (pointer x2);
     end)
  else
    f m1 m2;

public
  ran_ugaussian_pdf
  ran_gaussian_pdf
  ran_gaussian_tail_pdf
  ran_ugaussian_tail_pdf
  ran_bivariate_gaussian_pdf
  ran_exponential_pdf
  ran_laplace_pdf
  ran_exppow_pdf
  ran_cauchy_pdf
  ran_rayleigh_pdf
  ran_rayleigh_tail_pdf
  ran_landau_pdf
  ran_gamma_pdf
  ran_flat_pdf
  ran_lognormal_pdf
  ran_chisq_pdf
  ran_fdist_pdf
  ran_tdist_pdf
  ran_beta_pdf
  ran_logistic_pdf
  ran_pareto_pdf
  ran_weibull_pdf
  ran_gumbel1_pdf
  ran_gumbel2_pdf
  ran_dirichlet_pdf
  ran_dirichlet_lnpdf
  ran_discrete_preproc
  ran_discrete_pdf
  ran_discrete_free
  ran_poisson_pdf
  ran_bernoulli_pdf
  ran_binomial_pdf
  ran_multinomial_pdf
  ran_multinomial_lnpdf
  ran_negative_binomial_pdf
  ran_pascal_pdf
  ran_geometric_pdf
  ran_hypergeometric_pdf
  ran_logarithmic_pdf

  cdf_ugaussian_P
  cdf_gaussian_P
  cdf_ugaussian_Q
  cdf_gaussian_Q
  cdf_ugaussian_Pinv
  cdf_gaussian_Pinv
  cdf_ugaussian_Qinv
  cdf_gaussian_Qinv
  cdf_exponential_P
  cdf_exponential_Q
  cdf_exponential_Pinv
  cdf_exponential_Qinv
  cdf_laplace_P
  cdf_laplace_Q
  cdf_laplace_Pinv
  cdf_laplace_Qinv
  cdf_exppow_P
  cdf_exppow_Q
  cdf_cauchy_P
  cdf_cauchy_Q
  cdf_cauchy_Pinv
  cdf_cauchy_Qinv
  cdf_rayleigh_P
  cdf_rayleigh_Q
  cdf_rayleigh_Pinv
  cdf_rayleigh_Qinv
  cdf_gamma_P
  cdf_gamma_Q
  cdf_gamma_Pinv
  cdf_gamma_Qinv
  cdf_flat_P
  cdf_flat_Q
  cdf_flat_Pinv
  cdf_flat_Qinv
  cdf_lognormal_P
  cdf_lognormal_Q
  cdf_lognormal_Pinv
  cdf_lognormal_Qinv
  cdf_chisq_P
  cdf_chisq_Q
  cdf_chisq_Pinv
  cdf_chisq_Qinv
  cdf_fdist_P
  cdf_fdist_Q
  cdf_fdist_Pinv
  cdf_fdist_Qinv
  cdf_tdist_P
  cdf_tdist_Q
  cdf_tdist_Pinv
  cdf_tdist_Qinv
  cdf_beta_P
  cdf_beta_Q
  cdf_beta_Pinv
  cdf_beta_Qinv
  cdf_logistic_P
  cdf_logistic_Q
  cdf_logistic_Pinv
  cdf_logistic_Qinv
  cdf_pareto_P
  cdf_pareto_Q
  cdf_pareto_Pinv
  cdf_pareto_Qinv
  cdf_weibull_P
  cdf_weibull_Q
  cdf_weibull_Pinv
  cdf_weibull_Qinv
  cdf_gumbel1_P
  cdf_gumbel1_Q
  cdf_gumbel1_Pinv
  cdf_gumbel1_Qinv
  cdf_gumbel2_P
  cdf_gumbel2_Q
  cdf_gumbel2_Pinv
  cdf_gumbel2_Qinv
  cdf_poisson_P
  cdf_poisson_Q
  cdf_binomial_P
  cdf_binomial_Q
  cdf_negative_binomial_P
  cdf_negative_binomial_Q
  cdf_pascal_P
  cdf_pascal_Q
  cdf_geometric_P
  cdf_geometric_Q
  cdf_hypergeometric_P
  cdf_hypergeometric_Q;

using namespace C;

ran_ugaussian_pdf  x
  = gsl_ran_ugaussian_pdf (double x) if realp x;

ran_gaussian_pdf  x  sigma
  = gsl_ran_gaussian_pdf (double x) (double sigma) if realp x && realp sigma;

ran_gaussian_tail_pdf  x  a  sigma
  = gsl_ran_gaussian_tail_pdf (double x) (double a) (double sigma)
    if realp x && realp a && realp sigma;

ran_ugaussian_tail_pdf  x  a
  = gsl_ran_ugaussian_tail_pdf (double x) (double a) if realp x && realp a;

ran_bivariate_gaussian_pdf  x  y  sigma_x  sigma_y  rho
  = gsl_ran_bivariate_gaussian_pdf
      (double x) (double y) (double sigma_x) (double sigma_y) (double rho)
    if realp x && realp y && realp sigma_x && realp sigma_y && realp rho;

ran_exponential_pdf  x  mu
  = gsl_ran_exponential_pdf (double x) (double mu) if realp x && realp mu;

ran_laplace_pdf  x  a
  = gsl_ran_laplace_pdf (double x) (double a) if realp x && realp a;

ran_exppow_pdf  x  a  b
  = gsl_ran_exppow_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_cauchy_pdf  x  a
  = gsl_ran_cauchy_pdf (double x) (double a) if realp x && realp a;

ran_rayleigh_pdf  x  sigma
  = gsl_ran_rayleigh_pdf (double x) (double sigma) if realp x && realp sigma;

ran_rayleigh_tail_pdf  x  a  sigma
  = gsl_ran_rayleigh_tail_pdf (double x) (double a) (double sigma)
    if realp x && realp a && realp sigma;

ran_landau_pdf  x
  = gsl_ran_landau_pdf x if realp x;

ran_gamma_pdf  x  a  b
  = gsl_ran_gamma_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_flat_pdf  x  a  b
  = gsl_ran_flat_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_lognormal_pdf  x  zeta  sigma
  = gsl_ran_lognormal_pdf (double x) (double zeta) (double sigma)
    if realp x && realp zeta && realp sigma;

ran_chisq_pdf  x  nu
  = gsl_ran_chisq_pdf (double x) (double nu) if realp x && realp nu;

ran_fdist_pdf  x  nu1  nu2
  = gsl_ran_fdist_pdf (double x) (double nu1) (double nu2)
    if realp x && realp nu1 && realp nu2;

ran_tdist_pdf  x  nu
  = gsl_ran_tdist_pdf (double x) (double nu) if realp x && realp nu;

ran_beta_pdf  x  a  b
  = gsl_ran_beta_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_logistic_pdf  x  a
  = gsl_ran_logistic_pdf (double x) (double a) if realp x && realp a;

ran_pareto_pdf  x  a  b
  = gsl_ran_pareto_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_weibull_pdf  x  a  b
  = gsl_ran_weibull_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_gumbel1_pdf  x  a  b
  = gsl_ran_gumbel1_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_gumbel2_pdf  x  a  b
  = gsl_ran_gumbel2_pdf (double x) (double a) (double b)
    if realp x && realp a && realp b;

ran_dirichlet_pdf  alpha::matrix  theta::matrix
  = apply2_ran gsl_ran_dirichlet_pdf alpha theta;

ran_dirichlet_lnpdf  alpha::matrix  theta::matrix
  = apply2_ran gsl_ran_dirichlet_lnpdf alpha theta;

ran_discrete_preproc  p::matrix
  = v
    when
      x = dmatrix p;
      v = gsl_ran_discrete_preproc (#p) (pointer x);
    end
    if rowvectorp p;

ran_discrete_pdf  k::int  p::pointer
  = gsl_ran_discrete_pdf k p if k >= 0;

ran_discrete_free  p::pointer
  = gsl_ran_discrete_free p;

ran_poisson_pdf  k::int  mu
  = gsl_ran_poisson_pdf k (double mu) if realp mu && k >= 0;

ran_bernoulli_pdf  k::int  p
  = gsl_ran_bernoulli_pdf k (double p) if realp p && k >= 0;

ran_binomial_pdf  k::int  p  n::int
  = gsl_ran_binomial_pdf k (double p) n if realp p && k >= 0 && n > 0;

ran_negative_binomial_pdf  k::int  p  n
  = gsl_ran_negative_binomial_pdf k (double p) (double n)
    if realp p && realp n && k >= 0;

ran_multinomial_pdf  p::matrix  n::matrix
  = apply2_ran gsl_ran_multinomial_pdf p n;

ran_multinomial_lnpdf  p::matrix  n::matrix
  = apply2_ran gsl_ran_multinomial_lnpdf p n;

ran_pascal_pdf  k::int  p  n::int
  = gsl_ran_pascal_pdf k (double p) n if realp p && k >= 0;

ran_geometric_pdf  k::int  p
  = gsl_ran_geometric_pdf k (double p) if realp p && k >= 1;

ran_hypergeometric_pdf  k::int  n1::int  n2::int  t::int
  = gsl_ran_hypergeometric_pdf k n1 n2 t
    if k >= 0 && n1 >= 0 && n2 >= 0 && t >= 0;

ran_logarithmic_pdf  k::int  p
  = gsl_ran_logarithmic_pdf k (double p) if k >= 1 && realp p;

cdf_ugaussian_P  x
  = gsl_cdf_ugaussian_P (double x) if realp x;

cdf_gaussian_P  x  sigma
  = gsl_cdf_gaussian_P (double x) (double sigma) if realp x && realp sigma;

cdf_ugaussian_Q  x
  = gsl_cdf_ugaussian_Q (double x) if realp x;

cdf_gaussian_Q  x  sigma
  = gsl_cdf_gaussian_Q (double x) (double sigma) if realp x && realp sigma;

cdf_ugaussian_Pinv  p
  = gsl_cdf_ugaussian_Pinv (double p) if realp p;

cdf_gaussian_Pinv  p  sigma
  = gsl_cdf_gaussian_Pinv (double p) (double sigma) if realp p && realp sigma;

cdf_ugaussian_Qinv  q
  = gsl_cdf_ugaussian_Qinv (double q) if realp q;

cdf_gaussian_Qinv  q  sigma
  = gsl_cdf_gaussian_Qinv (double q) (double sigma) if realp q && realp sigma;

cdf_exponential_P  x  mu
  = gsl_cdf_exponential_P (double x) (double mu) if realp x && realp mu;

cdf_exponential_Q  x  mu
  = gsl_cdf_exponential_Q (double x) (double mu) if realp x && realp mu;

cdf_exponential_Pinv  p  mu
  = gsl_cdf_exponential_Pinv (double p) (double mu) if realp p && realp mu;

cdf_exponential_Qinv  q  mu
  = gsl_cdf_exponential_Qinv (double q) (double mu) if realp q && realp mu;

cdf_laplace_P  x  a
  = gsl_cdf_laplace_P (double x) (double a) if realp x && realp a;

cdf_laplace_Q  x  a
  = gsl_cdf_laplace_Q (double x) (double a) if realp x && realp a;

cdf_laplace_Pinv  p  a
  = gsl_cdf_laplace_Pinv (double p) (double a) if realp p && realp a;

cdf_laplace_Qinv  q  a
  = gsl_cdf_laplace_Qinv (double q) (double a)
    if realp q && realp a;

cdf_exppow_P  x  a  b
  = gsl_cdf_exppow_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_exppow_Q  x  a  b
  = gsl_cdf_exppow_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_cauchy_P  x  a
  = gsl_cdf_cauchy_P (double x) (double a) if realp x && realp a;

cdf_cauchy_Q  x  a
  = gsl_cdf_cauchy_Q (double x) (double a) if realp x && realp a;

cdf_cauchy_Pinv  p  a
  = gsl_cdf_cauchy_Pinv (double p) (double a) if realp p && realp a;

cdf_cauchy_Qinv  q  a
  = gsl_cdf_cauchy_Qinv (double q) (double a) if realp q && realp a;

cdf_rayleigh_P  x  sigma
  = gsl_cdf_rayleigh_P (double x) (double sigma) if realp x && realp sigma;

cdf_rayleigh_Q  x  sigma
  = gsl_cdf_rayleigh_Q (double x) (double sigma) if realp x && realp sigma;

cdf_rayleigh_Pinv  p  sigma
  = gsl_cdf_rayleigh_Pinv (double p) (double sigma) if realp p && realp sigma;

cdf_rayleigh_Qinv  q  sigma
  = gsl_cdf_rayleigh_Qinv (double q) (double sigma) if realp q && realp sigma;

cdf_gamma_P  x  a  b
  = gsl_cdf_gamma_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gamma_Q  x  a  b
  = gsl_cdf_gamma_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gamma_Pinv  p  a  b
  = gsl_cdf_gamma_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_gamma_Qinv  q  a  b
  = gsl_cdf_gamma_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_flat_P  x  a  b
  = gsl_cdf_flat_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_flat_Q  x  a  b
  = gsl_cdf_flat_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_flat_Pinv  p  a  b
  = gsl_cdf_flat_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_flat_Qinv  q  a  b
  = gsl_cdf_flat_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_lognormal_P  x  zeta  sigma
  = gsl_cdf_lognormal_P (double x) (double zeta) (double sigma)
    if realp x && realp zeta && realp sigma;

cdf_lognormal_Q  x  zeta  sigma
  = gsl_cdf_lognormal_Q (double x) (double zeta) (double sigma)
    if realp x && realp zeta && realp sigma;

cdf_lognormal_Pinv  p  zeta  sigma
  = gsl_cdf_lognormal_Pinv (double p) (double zeta) (double sigma)
    if realp p && realp zeta && realp sigma;

cdf_lognormal_Qinv  q  zeta  sigma
  = gsl_cdf_lognormal_Qinv (double q) (double zeta) (double sigma)
    if realp q && realp zeta && realp sigma;

cdf_chisq_P  x  nu
  = gsl_cdf_chisq_P (double x) (double nu) if realp x && realp nu;

cdf_chisq_Q  x  nu
  = gsl_cdf_chisq_Q (double x) (double nu) if realp x && realp nu;

cdf_chisq_Pinv  p  nu
  = gsl_cdf_chisq_P (double p) (double nu) if realp p && realp nu;

cdf_chisq_Qinv  q  nu
  = gsl_cdf_chisq_Qinv (double q) (double nu) if realp q && realp nu;

cdf_fdist_P  x  nu1  nu2
  = gsl_cdf_fdist_P (double x) (double nu1) (double nu2)
    if realp x && realp nu1 && realp nu2;

cdf_fdist_Q  x  nu1  nu2
  = gsl_cdf_fdist_Q (double x) (double nu1) (double nu2)
    if realp x && realp nu1 && realp nu2;

cdf_fdist_Pinv  p  nu1  nu2
  = gsl_cdf_fdist_Pinv (double p) (double nu1) (double nu2)
    if realp p && realp nu1 && realp nu2;

cdf_fdist_Qinv  q  nu1  nu2
  = gsl_cdf_fdist_Qinv (double q) (double nu1) (double nu2)
    if realp q && realp nu1 && realp nu2;

cdf_tdist_P  x  nu
  = gsl_cdf_tdist_P (double x) (double nu) if realp x && realp nu;

cdf_tdist_Q  x  nu
  = gsl_cdf_tdist_Q (double x) (double nu) if realp x && realp nu;

cdf_tdist_Pinv  p  nu
  = gsl_cdf_tdist_Pinv (double p) (double nu) if realp p && realp nu;

cdf_tdist_Qinv  q  nu
  = gsl_cdf_tdist_Qinv (double q) (double nu) if realp q && realp nu;

cdf_beta_P  x  a  b
  = gsl_cdf_beta_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_beta_Q  x  a  b
  = gsl_cdf_beta_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_beta_Pinv  p  a  b
  = gsl_cdf_beta_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_beta_Qinv  q  a  b
  = gsl_cdf_beta_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_logistic_P  x  a
  = gsl_cdf_logistic_P (double x) (double a) if realp x && realp a;

cdf_logistic_Q  x  a
  = gsl_cdf_logistic_Q (double x) (double a) if realp x && realp a;

cdf_logistic_Pinv  p  a
  = gsl_cdf_logistic_Pinv (double p) (double a) if realp p && realp a;

cdf_logistic_Qinv  q  a
  = gsl_cdf_logistic_Qinv (double q) (double a) if realp q && realp a;

cdf_pareto_P  x  a  b
  = gsl_cdf_pareto_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_pareto_Q  x  a  b
  = gsl_cdf_pareto_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_pareto_Pinv  p  a  b
  = gsl_cdf_pareto_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_pareto_Qinv  q  a  b
  = gsl_cdf_pareto_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_weibull_P  x  a  b
  = gsl_cdf_weibull_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_weibull_Q  x  a  b
  = gsl_cdf_weibull_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_weibull_Pinv  p  a  b
  = gsl_cdf_weibull_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_weibull_Qinv  q  a  b
  = gsl_cdf_weibull_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_gumbel1_P  x  a  b
  = gsl_cdf_gumbel1_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gumbel1_Q  x  a  b
  = gsl_cdf_gumbel1_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gumbel1_Pinv  p  a  b
  = gsl_cdf_gumbel1_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_gumbel1_Qinv  q  a  b
  = gsl_cdf_gumbel1_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_gumbel2_P  x  a  b
  = gsl_cdf_gumbel2_P (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gumbel2_Q  x  a  b
  = gsl_cdf_gumbel2_Q (double x) (double a) (double b)
    if realp x && realp a && realp b;

cdf_gumbel2_Pinv  p  a  b
  = gsl_cdf_gumbel2_Pinv (double p) (double a) (double b)
    if realp p && realp a && realp b;

cdf_gumbel2_Qinv  q  a  b
  = gsl_cdf_gumbel2_Qinv (double q) (double a) (double b)
    if realp q && realp a && realp b;

cdf_poisson_P  k::int  mu
  = gsl_cdf_poisson_P k (double mu) if realp mu && k >= 0;

cdf_poisson_Q  k::int  mu
  = gsl_cdf_poisson_Q k (double mu) if realp mu && k >= 0;

cdf_binomial_P  k::int  p  n::int
  = gsl_cdf_binomial_P k (double p) n if realp p && k >= 0 && n > 0;

cdf_binomial_Q  k::int  q  n::int
  = gsl_cdf_binomial_Q k (double q) n if realp q && k >= 0 && n > 0;

cdf_negative_binomial_P  k::int  p  n
  = gsl_cdf_negative_binomial_P k (double p) (double n)
    if realp p && realp n && k >= 0;

cdf_negative_binomial_Q  k::int  p  n
  = gsl_cdf_negative_binomial_Q k (double p) (double n)
    if realp p && realp n && k >= 0;

cdf_pascal_P  k::int  p  n::int
  = gsl_cdf_pascal_P k (double p) n if realp p && k >= 0;

cdf_pascal_Q  k::int  p  n::int
  = gsl_cdf_pascal_Q k (double p) n if realp p && k >= 0;

cdf_geometric_P  k::int  p
  = gsl_cdf_geometric_P k (double p) if realp p && k >= 1;

cdf_geometric_Q  k::int  p
  = gsl_cdf_geometric_Q k (double p) if realp p && k >= 1;

cdf_hypergeometric_P  k::int  n1::int  n2::int  t::int
  = gsl_cdf_hypergeometric_P k n1 n2 t
    if k >= 0 && n1 >= 0 && n2 >= 0 && t >= 0;

cdf_hypergeometric_Q  k::int  n1::int  n2::int  t::int
  = gsl_cdf_hypergeometric_Q k n1 n2 t
    if k >= 0 && n1 >= 0 && n2 >= 0 && t >= 0;
