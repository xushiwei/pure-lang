
/* gsl/sf.pure: GSL wrapper for the Pure programming language. */

/* Copyright (c) 2008 by Albert Graef <Dr.Graef@t-online.de>.
   Copyright (c) 2008 by Robert E. Rucker <erucker@bmc.edu>.

   This file is part of the Pure programming language and system.

   Pure is free software: you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation, either version 3 of the License, or (at your option) any later
   version.

   Pure is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
   details.

   You should have received a copy of the GNU General Public License along
   with this program.  If not, see <http://www.gnu.org/licenses/>. */

/* ..
   
   Special Functions
   -----------------
   
   This module is loaded via the command ``using gsl::sf`` and provides 
   Pure wrappers for the GSL Special Functions. For details, see Chapter 7
   of the GSL manual, 
   
   http://www.gnu.org/software/gsl/manual/html_node/Special-Functions.html.
   
   To load the library, use the Pure command ``using gsl::sf``.
   Modes for the functions must be one of::
   
     GSL_PREC_DOUBLE
     GSL_PREC_SINGLE
     GSL_PREC_APPROX
   
   Results for some of the functions are returned as a Pure list instead of 
   the ``gsl_sf_result`` or  ``gsl_sf_result_e10`` structures in C. In these
   cases, the resulting list is one of the following forms.
   
     - ``[val, err]`` for the ``gsl_sf_result`` struct and
     
     - ``[val, err, e10]`` for the ``gsl_sf_result_e10`` struct.

   Routines
   ~~~~~~~~ */

using "lib:gsl";

namespace gsl;
namespace gsl::sf;

public
  GSL_PREC_DOUBLE
  GSL_PREC_SINGLE
  GSL_PREC_APPROX;

const GSL_PREC_DOUBLE = 0;
const GSL_PREC_SINGLE = 1;
const GSL_PREC_APPROX = 2;
  
private extern double gsl_sf_airy_Ai(double, int);
private extern int gsl_sf_airy_Ai_e(double, int, double*);
private extern double gsl_sf_airy_Ai_scaled(double, int);
private extern int gsl_sf_airy_Ai_scaled_e(double, int, double*);

public
  airy_Ai
  airy_Ai_e
  airy_Ai_scaled
  airy_Ai_scaled_e;
  
/* .. _airy_Ai:
   
   ``airy_Ai x`` and ``airy_Ai (x, mode::int)``
     implements ``gsl_sf_airy_Ai``. The first form computes the function with
     ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_e:
   
   ``airy_Ai_e x`` and ``airy_Ai_e (x, mode::int)``
     implements ``gsl_sf_airy_Ai_e``. The first form computes the function 
     with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_scaled:
   
   ``airy_Ai_scaled x`` and ``airy_Ai_scaled (x, mode::int)``
     implements ``gsl_sf_airy_Ai_scaled``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_scaled_e:
        
   ``airy_Ai_scaled_e x`` and ``airy_Ai_scaled_e (x, mode::int)``
     implements ``gsl_sf_airy_Ai_scaled_e``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
*/

airy_Ai  (x, mode::int)
  = gsl_sf_airy_Ai (double x) mode;

airy_Ai  x
  = gsl_sf_airy_Ai (double x) GSL_PREC_DOUBLE;

airy_Ai_e  (x, mode::int)
  = gsl_sf_airy_Ai_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_e  x
  = gsl_sf_airy_Ai_e (double x) GSL_PREC_DOUBLE (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_scaled  (x, mode::int)
  = gsl_sf_airy_Ai_scaled (double x) mode;

airy_Ai_scaled  x
  = gsl_sf_airy_Ai_scaled (double x) GSL_PREC_DOUBLE;

airy_Ai_scaled_e  (x, mode::int)
  = gsl_sf_airy_Ai_scaled_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_scaled_e  x
  = gsl_sf_airy_Ai_scaled_e (double x) GSL_PREC_DOUBLE (pointer m)
    $$ list m
    when
      m = {0.0, 0.0};
    end;

private extern double gsl_sf_airy_Bi(double, int);
private extern int gsl_sf_airy_Bi_e(double, int, double*);
private extern double gsl_sf_airy_Bi_scaled(double, int);
private extern int gsl_sf_airy_Bi_scaled_e(double, int, double*);

public
  airy_Bi
  airy_Bi_e
  airy_Bi_scaled
  airy_Bi_scaled_e;

/* .. _airy_Bi:
      
   ``airy_Bi x`` and ``airy_Bi (x, mode::int)``
     implements ``gsl_sf_airy_Bi``. The first form computes the function with
     ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_e:
   
   ``airy_Bi_e x`` and ``airy_Bi_e (x, mode::int)``
     implements ``gsl_sf_airy_Bi_e``. The first form computes the function 
     with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_scaled:
   
   ``airy_Bi_scaled x`` and ``airy_Bi_scaled (x, mode::int)``
     implements ``gsl_sf_airy_Bi_scaled``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_scaled_e:
        
   ``airy_Bi_scaled_e x`` and ``airy_Bi_scaled_e (x, mode::int)``
     implements ``gsl_sf_airy_Bi_scaled_e``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
*/

airy_Bi  (x, mode::int)
  = gsl_sf_airy_Bi (double x) mode;

airy_Bi  x
  = gsl_sf_airy_Bi (double x) GSL_PREC_DOUBLE;

airy_Bi_e  (x, mode::int)
  = gsl_sf_airy_Bi_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_e  x
  = gsl_sf_airy_Bi_e (double x) GSL_PREC_DOUBLE (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_scaled  (x, mode::int)
  = gsl_sf_airy_Bi_scaled (double x) mode;

airy_Bi_scaled  x
  = gsl_sf_airy_Bi_scaled (double x) GSL_PREC_DOUBLE;

airy_Bi_scaled_e  (x, mode::int)
  = gsl_sf_airy_Bi_scaled_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_scaled_e  x
  = gsl_sf_airy_Bi_scaled_e (double x) GSL_PREC_DOUBLE (pointer m)
    $$ list m
    when
      m = {0.0, 0.0};
    end;

private extern double gsl_sf_airy_Ai_deriv(double, int);
private extern int gsl_sf_airy_Ai_deriv_e(double, int, double*);
private extern double gsl_sf_airy_Ai_deriv_scaled(double, int);
private extern int gsl_sf_airy_Ai_deriv_scaled_e(double, int, double*);
private extern double gsl_sf_airy_Bi_deriv(double, int);
private extern int gsl_sf_airy_Bi_deriv_e(double, int, double*);
private extern double gsl_sf_airy_Bi_deriv_scaled(double, int);
private extern int gsl_sf_airy_Bi_deriv_scaled_e(double, int, double*);

public
  airy_Ai_deriv
  airy_Ai_deriv_e
  airy_Ai_deriv_scaled
  airy_Ai_deriv_scaled_e;
  airy_Bi_deriv
  airy_Bi_deriv_e
  airy_Bi_deriv_scaled
  airy_Bi_deriv_scaled_e;

/* .. _airy_Ai_deriv:
      
   ``airy_Ai_deriv x`` and ``airy_Ai_deriv (x, mode::int)``
     implements ``gsl_sf_airy_Ai_deriv``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_deriv_e:
   
   ``airy_Ai_deriv_e x`` and ``airy_Ai_deriv_e (x, mode::int)``
     implements ``gsl_sf_airy_Ai_deriv_e``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_deriv_scaled:
   
   ``airy_Ai_deriv_scaled x`` and ``airy_Ai_deriv_scaled (x, mode::int)``
     implements ``gsl_sf_airy_Ai_deriv_scaled``. The first form computes 
     the function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Ai_deriv_scaled_e:
        
   ``airy_Ai_deriv_scaled_e x`` and ``airy_Ai_deriv_scaled_e (x, mode::int)``
     implements ``gsl_sf_airy_Ai_deriv_scaled_e``. The first form computes 
     the function with ``mode = GSL_PREC_DOUBLE``.

 .. _airy_Bi_deriv:
      
   ``airy_Bi_deriv x`` and ``airy_Bi_deriv (x, mode::int)``
     implements ``gsl_sf_airy_Bi_deriv``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_deriv_e:
   
   ``airy_Bi_deriv_e x`` and ``airy_Bi_deriv_e (x, mode::int)``
     implements ``gsl_sf_airy_Bi_deriv_e``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_deriv_scaled:
   
   ``airy_Bi_deriv_scaled x`` and ``airy_Bi_deriv_scaled (x, mode::int)``
     implements ``gsl_sf_airy_Bi_deriv_scaled``. The first form computes the
     function with ``mode = GSL_PREC_DOUBLE``.
     
   .. _airy_Bi_deriv_scaled_e:
        
   ``airy_Bi_deriv_scaled_e x`` and ``airy_Bi_deriv_scaled_e (x, mode::int)``
     implements ``gsl_sf_airy_Bi_deriv_scaled_e``. The first form computes
     the function with ``mode = GSL_PREC_DOUBLE``.*/

airy_Ai_deriv  (x, mode::int)
  = gsl_sf_airy_Ai_deriv (double x) mode;

airy_Ai_deriv  x
  = gsl_sf_airy_Ai_deriv (double x) GSL_PREC_DOUBLE;

airy_Ai_deriv_e  (x, mode::int)
  = gsl_sf_airy_Ai_deriv_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_deriv_e  x
  = gsl_sf_airy_Ai_deriv_e (double x) GSL_PREC_DOUBLE (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_deriv_scaled  (x, mode::int)
  = gsl_sf_airy_Ai_deriv_scaled (double x) mode;

airy_Ai_deriv_scaled  x
  = gsl_sf_airy_Ai_deriv_scaled (double x) GSL_PREC_DOUBLE;

airy_Ai_deriv_scaled_e  (x, mode::int)
  = gsl_sf_airy_Ai_deriv_scaled_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Ai_deriv_scaled_e  x
  = gsl_sf_airy_Ai_deriv_scaled_e (double x) GSL_PREC_DOUBLE (pointer m)
    $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_deriv  (x, mode::int)
  = gsl_sf_airy_Bi_deriv (double x) mode;

airy_Bi_deriv  x
  = gsl_sf_airy_Bi_deriv (double x) GSL_PREC_DOUBLE;

airy_Bi_deriv_e  (x, mode::int)
  = gsl_sf_airy_Bi_deriv_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_deriv_e  x
  = gsl_sf_airy_Bi_deriv_e (double x) GSL_PREC_DOUBLE (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_deriv_scaled  (x, mode::int)
  = gsl_sf_airy_Bi_deriv_scaled (double x) mode;

airy_Bi_deriv_scaled  x
  = gsl_sf_airy_Bi_deriv_scaled (double x) GSL_PREC_DOUBLE;

airy_Bi_deriv_scaled_e  (x, mode::int)
  = gsl_sf_airy_Bi_deriv_scaled_e (double x) mode (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end;

airy_Bi_deriv_scaled_e  x
  = gsl_sf_airy_Bi_deriv_scaled_e (double x) GSL_PREC_DOUBLE (pointer m)
    $$ list m
    when
      m = {0.0, 0.0};
    end;

private extern double gsl_sf_airy_zero_Ai(int);
private extern int gsl_sf_airy_zero_Ai_e(int, double*);
private extern double gsl_sf_airy_zero_Bi(int);
private extern int gsl_sf_airy_zero_Bi_e(int, double*);

public
  airy_zero_Ai
  airy_zero_Ai_e
  airy_zero_Bi
  airy_zero_Bi_e;

/* .. _airy_zero_Ai:
      
   ``airy_zero_Ai s``
     implements ``gsl_sf_airy_zero_Ai``.
     
   .. _airy_zero_Ai_e:
   
   ``airy_zero_Ai_e s``
     implements ``gsl_sf_airy_zero_Ai_e``.
     
 .. _airy_zero_Bi:
      
   ``airy_zero_Bi s``
     implements ``gsl_sf_airy_zero_Bi``.
     
   .. _airy_zero_Bi_e:
   
   ``airy_zero_Bi_e s``
     implements ``gsl_sf_airy_zero_Bi_e``.
*/

airy_zero_Ai  s::int
  = gsl_sf_airy_zero_Ai s if s >= 0;

airy_zero_Ai_e  s::int
  = gsl_sf_airy_zero_Ai_e s (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end
    if s >= 0;

airy_zero_Bi  s::int
  = gsl_sf_airy_zero_Bi s if s >= 0;

airy_zero_Bi_e  s::int
  = gsl_sf_airy_zero_Bi_e s (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end
    if s >= 0;

private extern double gsl_sf_airy_zero_Ai_deriv(int);
private extern int gsl_sf_airy_zero_Ai_deriv_e(int, double*);
private extern double gsl_sf_airy_zero_Bi_deriv(int);
private extern int gsl_sf_airy_zero_Bi_deriv_e(int, double*);

public
  airy_zero_Ai_deriv
  airy_zero_Ai_e_deriv
  airy_zero_Bi_deriv
  airy_zero_Bi_deriv_e;

/* .. _airy_zero_Ai_deriv:
      
   ``airy_zero_Ai_deriv s``
     implements ``gsl_sf_airy_zero_Ai_deriv``.
     
   .. _airy_zero_Ai_deriv_e:
   
   ``airy_zero_Ai_deriv_e s``
     implements ``gsl_sf_airy_zero_Ai_deriv_e``.
     
 .. _airy_zero_Bi_deriv:
      
   ``airy_zero_Bi_deriv s``
     implements ``gsl_sf_airy_zero_Bi_deriv``.
     
   .. _airy_zero_Bi_deriv_e:
   
   ``airy_zero_Bi_deriv_e s``
     implements ``gsl_sf_airy_zero_Bi_deriv_e``.
*/

airy_zero_Ai_deriv  s::int
  = gsl_sf_airy_zero_Ai_deriv s if s >= 0;

airy_zero_Ai_deriv_e  s::int
  = gsl_sf_airy_zero_Ai_deriv_e s (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end
    if s >= 0;

airy_zero_Bi_deriv  s::int
  = gsl_sf_airy_zero_Bi_deriv s if s >= 0;

airy_zero_Bi_deriv_e  s::int
  = gsl_sf_airy_zero_Bi_deriv_e s (pointer m) $$ list m
    when
      m = {0.0, 0.0};
    end
    if s >= 0;

/* ..
   
   Examples
   ~~~~~~~~
   
   The following illustrate the Airy functions.

   ::
   
     > using gsl::sf;
     > using namespace gsl::sf;
     > airy_Ai (-1.2); // defaults to GSL_PREC_DOUBLE
     0.52619437480212
     > airy_Ai_scaled (-1.2);
     0.52619437480212
     > airy_Ai (-1.2,GSL_PREC_APPROX);
     0.526194374771687
     > airy_Ai_scaled (-1.2, GSL_PREC_SINGLE);
     0.526194374771687
     > airy_Ai_e (-1.2);
     [0.52619437480212,1.88330586480371e-15]
     > airy_Ai_e (-1.2,GSL_PREC_APPROX);
     [0.526194374771687,1.01942940819652e-08]
     > airy_Ai_scaled_e (-1.2);
     [0.52619437480212,1.88330586480371e-15]
     > airy_Ai_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.526194374771687,1.01942940819652e-08]
     > airy_Bi (-1.2);
     -0.015821370184632
     > airy_Bi_scaled (-1.2);
     -0.015821370184632
     > airy_Bi (-1.2,GSL_PREC_APPROX);
     -0.0158213701898015
     > airy_Bi_scaled (-1.2, GSL_PREC_SINGLE);
     -0.0158213701898015
     > airy_Bi_e (-1.2);
     [-0.015821370184632,1.31448899295896e-16]
     > airy_Bi_e (-1.2,GSL_PREC_APPROX);
     [-0.0158213701898015,4.10638404843775e-10]
     > airy_Bi_scaled_e (-1.2);
     [-0.015821370184632,1.31448899295896e-16]
     > airy_Bi_scaled_e (-1.2,GSL_PREC_APPROX);
     [-0.0158213701898015,4.10638404843775e-10]
     > airy_Ai_deriv (-1.2); // defaults to GSL_PREC_DOUBLE
     0.107031569272281
     > airy_Ai_deriv_scaled (-1.2);
     0.107031569272281
     > airy_Ai_deriv (-1.2,GSL_PREC_APPROX);
     0.107031569264504
     > airy_Ai_deriv_scaled (-1.2, GSL_PREC_SINGLE);
     0.107031569264504
     > airy_Ai_deriv_e (-1.2);
     [0.107031569272281,3.02919983680384e-16]
     > airy_Ai_deriv_e (-1.2,GSL_PREC_APPROX);
     [0.107031569264504,9.25921017197604e-11]
     > airy_Ai_deriv_scaled_e (-1.2);
     [0.107031569272281,3.02919983680384e-16]
     > airy_Ai_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.107031569264504,9.25921017197604e-11]
     > airy_Bi_deriv (-1.2); 
     0.601710157437464
     > airy_Bi_deriv_scaled (-1.2);
     0.601710157437464
     > airy_Bi_deriv (-1.2,GSL_PREC_APPROX);
     0.601710157441937
     > airy_Bi_deriv_scaled (-1.2, GSL_PREC_SINGLE);
     0.601710157441937
     > airy_Bi_deriv_e (-1.2);
     [0.601710157437464,1.7029557943563e-15]
     > airy_Bi_deriv_e (-1.2,GSL_PREC_APPROX);
     [0.601710157441937,5.20534347823991e-10]
     > airy_Bi_deriv_scaled_e (-1.2);
     [0.601710157437464,1.7029557943563e-15]
     > airy_Bi_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.601710157441937,5.20534347823991e-10]
     > airy_zero_Ai 2;
     -4.08794944413097
     > airy_zero_Ai_e 3;
     [-5.52055982809555,1.22581052599448e-15]
     > airy_zero_Bi 2;
     -3.27109330283635
     > airy_zero_Bi_e 3;
     [-4.83073784166202,1.07263927554824e-15]
     > airy_zero_Ai_deriv 2;
     -3.24819758217984
     > airy_zero_Ai_deriv_e 3;
     [-4.82009921117874,1.07027702504564e-15]
     > airy_zero_Bi_deriv 2;
     -4.07315508907183
     > airy_zero_Bi_deriv_e 3;
     [-5.5123957296636,1.22399773198358e-15]
*/
