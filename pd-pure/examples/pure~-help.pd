#N canvas 297 208 727 475 12;
#X obj 24 19 pure~;
#X obj 37 149 osc~ 220;
#X obj 105 149 osc~ 2;
#X obj 106 178 +~ 1;
#N canvas 0 0 450 300 (subpatch) 0;
#X array mul~ 1764 float 2;
#X coords 0 1 1764 -1 200 140 1;
#X restore 33 268 graph;
#X obj 151 182 tgl 15 0 empty scope-on empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 151 202 metro 40;
#X obj 38 179 *~ 0.3;
#X obj 25 211 mul~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array randomwave1~ 1764 float 2;
#X coords 0 1 1764 -1 200 140 1;
#X restore 289 268 graph;
#X obj 391 156 tgl 15 0 empty scope-on empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 391 176 metro 40;
#X obj 559 312 tgl 20 0 empty empty empty 17 7 0 10 -203904 -1 -1 0
1;
#X obj 291 176 randomwave1~;
#X text 539 286 Toggle here to start.;
#X text 14 128 Basic amplitude modulation example.;
#X text 288 129 An example of a Pure audio object which generates random
samples.;
#X text 31 429 Audio data can also be transferred between Pure objects
and Pd sample arrays. Open the wavetest patch for an example.;
#X obj 471 438 wavetest;
#X obj 554 76 pure-remote;
#X text 553 58 Remote control.;
#X text 513 98 Open subpatch for details.;
#X obj 585 11 pure;
#X text 502 35 Click Help for control examples.;
#X text 84 14 Pure audio object examples. These are indicated by a
trailing tilde in the object name. The corresponding Pure function
has the _dsp suffix tacked on to it. E.g. \, the mul~ object below
is implemented by the function mul_dsp in the mul~.pure script. Also
note that each Pure audio object has one control inlet/outlet pair
on the left. The other inlets and outlets are for signal connections.
;
#X msg 559 348 \; scope-on \$1 \; pd dsp \$1;
#X obj 151 230 tabwrite~ mul~;
#X obj 391 215 tabwrite~ randomwave1~;
#X connect 1 0 7 0;
#X connect 2 0 3 0;
#X connect 3 0 8 2;
#X connect 5 0 6 0;
#X connect 6 0 26 0;
#X connect 7 0 8 1;
#X connect 8 1 26 0;
#X connect 10 0 11 0;
#X connect 11 0 27 0;
#X connect 12 0 25 0;
#X connect 13 1 27 0;
