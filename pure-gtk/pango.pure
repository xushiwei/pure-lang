/* /usr/include/pango-1.0/pango/pango.h: */
using "lib:pango";

namespace pango;
const pango::SCALE = 1024;
const pango::ATTR_INDEX_FROM_TEXT_BEGINNING = 0;
const pango::ANALYSIS_FLAG_CENTERED_BASELINE = 1;
const pango::VERSION_MAJOR = 1;
const pango::VERSION_MINOR = 28;
const pango::VERSION_MICRO = 3;
const pango::VERSION_STRING = "1.28.3";
const pango::ALIGN_LEFT = 0;
const pango::ALIGN_CENTER = 1;
const pango::ALIGN_RIGHT = 2;
const pango::ATTR_INVALID = 0;
const pango::ATTR_LANGUAGE = 1;
const pango::ATTR_FAMILY = 2;
const pango::ATTR_STYLE = 3;
const pango::ATTR_WEIGHT = 4;
const pango::ATTR_VARIANT = 5;
const pango::ATTR_STRETCH = 6;
const pango::ATTR_SIZE = 7;
const pango::ATTR_FONT_DESC = 8;
const pango::ATTR_FOREGROUND = 9;
const pango::ATTR_BACKGROUND = 10;
const pango::ATTR_UNDERLINE = 11;
const pango::ATTR_STRIKETHROUGH = 12;
const pango::ATTR_RISE = 13;
const pango::ATTR_SHAPE = 14;
const pango::ATTR_SCALE = 15;
const pango::ATTR_FALLBACK = 16;
const pango::ATTR_LETTER_SPACING = 17;
const pango::ATTR_UNDERLINE_COLOR = 18;
const pango::ATTR_STRIKETHROUGH_COLOR = 19;
const pango::ATTR_ABSOLUTE_SIZE = 20;
const pango::ATTR_GRAVITY = 21;
const pango::ATTR_GRAVITY_HINT = 22;
const pango::BIDI_TYPE_L = 0;
const pango::BIDI_TYPE_LRE = 1;
const pango::BIDI_TYPE_LRO = 2;
const pango::BIDI_TYPE_R = 3;
const pango::BIDI_TYPE_AL = 4;
const pango::BIDI_TYPE_RLE = 5;
const pango::BIDI_TYPE_RLO = 6;
const pango::BIDI_TYPE_PDF = 7;
const pango::BIDI_TYPE_EN = 8;
const pango::BIDI_TYPE_ES = 9;
const pango::BIDI_TYPE_ET = 10;
const pango::BIDI_TYPE_AN = 11;
const pango::BIDI_TYPE_CS = 12;
const pango::BIDI_TYPE_NSM = 13;
const pango::BIDI_TYPE_BN = 14;
const pango::BIDI_TYPE_B = 15;
const pango::BIDI_TYPE_S = 16;
const pango::BIDI_TYPE_WS = 17;
const pango::BIDI_TYPE_ON = 18;
const pango::COVERAGE_NONE = 0;
const pango::COVERAGE_FALLBACK = 1;
const pango::COVERAGE_APPROXIMATE = 2;
const pango::COVERAGE_EXACT = 3;
const pango::DIRECTION_LTR = 0;
const pango::DIRECTION_RTL = 1;
const pango::DIRECTION_TTB_LTR = 2;
const pango::DIRECTION_TTB_RTL = 3;
const pango::DIRECTION_WEAK_LTR = 4;
const pango::DIRECTION_WEAK_RTL = 5;
const pango::DIRECTION_NEUTRAL = 6;
const pango::ELLIPSIZE_NONE = 0;
const pango::ELLIPSIZE_START = 1;
const pango::ELLIPSIZE_MIDDLE = 2;
const pango::ELLIPSIZE_END = 3;
const pango::FONT_MASK_FAMILY = 1;
const pango::FONT_MASK_STYLE = 2;
const pango::FONT_MASK_VARIANT = 4;
const pango::FONT_MASK_WEIGHT = 8;
const pango::FONT_MASK_STRETCH = 16;
const pango::FONT_MASK_SIZE = 32;
const pango::FONT_MASK_GRAVITY = 64;
const pango::GRAVITY_SOUTH = 0;
const pango::GRAVITY_EAST = 1;
const pango::GRAVITY_NORTH = 2;
const pango::GRAVITY_WEST = 3;
const pango::GRAVITY_AUTO = 4;
const pango::GRAVITY_HINT_NATURAL = 0;
const pango::GRAVITY_HINT_STRONG = 1;
const pango::GRAVITY_HINT_LINE = 2;
const pango::RENDER_PART_FOREGROUND = 0;
const pango::RENDER_PART_BACKGROUND = 1;
const pango::RENDER_PART_UNDERLINE = 2;
const pango::RENDER_PART_STRIKETHROUGH = 3;
const pango::SCRIPT_INVALID_CODE = -1;
const pango::SCRIPT_COMMON = 0;
const pango::SCRIPT_INHERITED = 1;
const pango::SCRIPT_ARABIC = 2;
const pango::SCRIPT_ARMENIAN = 3;
const pango::SCRIPT_BENGALI = 4;
const pango::SCRIPT_BOPOMOFO = 5;
const pango::SCRIPT_CHEROKEE = 6;
const pango::SCRIPT_COPTIC = 7;
const pango::SCRIPT_CYRILLIC = 8;
const pango::SCRIPT_DESERET = 9;
const pango::SCRIPT_DEVANAGARI = 10;
const pango::SCRIPT_ETHIOPIC = 11;
const pango::SCRIPT_GEORGIAN = 12;
const pango::SCRIPT_GOTHIC = 13;
const pango::SCRIPT_GREEK = 14;
const pango::SCRIPT_GUJARATI = 15;
const pango::SCRIPT_GURMUKHI = 16;
const pango::SCRIPT_HAN = 17;
const pango::SCRIPT_HANGUL = 18;
const pango::SCRIPT_HEBREW = 19;
const pango::SCRIPT_HIRAGANA = 20;
const pango::SCRIPT_KANNADA = 21;
const pango::SCRIPT_KATAKANA = 22;
const pango::SCRIPT_KHMER = 23;
const pango::SCRIPT_LAO = 24;
const pango::SCRIPT_LATIN = 25;
const pango::SCRIPT_MALAYALAM = 26;
const pango::SCRIPT_MONGOLIAN = 27;
const pango::SCRIPT_MYANMAR = 28;
const pango::SCRIPT_OGHAM = 29;
const pango::SCRIPT_OLD_ITALIC = 30;
const pango::SCRIPT_ORIYA = 31;
const pango::SCRIPT_RUNIC = 32;
const pango::SCRIPT_SINHALA = 33;
const pango::SCRIPT_SYRIAC = 34;
const pango::SCRIPT_TAMIL = 35;
const pango::SCRIPT_TELUGU = 36;
const pango::SCRIPT_THAANA = 37;
const pango::SCRIPT_THAI = 38;
const pango::SCRIPT_TIBETAN = 39;
const pango::SCRIPT_CANADIAN_ABORIGINAL = 40;
const pango::SCRIPT_YI = 41;
const pango::SCRIPT_TAGALOG = 42;
const pango::SCRIPT_HANUNOO = 43;
const pango::SCRIPT_BUHID = 44;
const pango::SCRIPT_TAGBANWA = 45;
const pango::SCRIPT_BRAILLE = 46;
const pango::SCRIPT_CYPRIOT = 47;
const pango::SCRIPT_LIMBU = 48;
const pango::SCRIPT_OSMANYA = 49;
const pango::SCRIPT_SHAVIAN = 50;
const pango::SCRIPT_LINEAR_B = 51;
const pango::SCRIPT_TAI_LE = 52;
const pango::SCRIPT_UGARITIC = 53;
const pango::SCRIPT_NEW_TAI_LUE = 54;
const pango::SCRIPT_BUGINESE = 55;
const pango::SCRIPT_GLAGOLITIC = 56;
const pango::SCRIPT_TIFINAGH = 57;
const pango::SCRIPT_SYLOTI_NAGRI = 58;
const pango::SCRIPT_OLD_PERSIAN = 59;
const pango::SCRIPT_KHAROSHTHI = 60;
const pango::SCRIPT_UNKNOWN = 61;
const pango::SCRIPT_BALINESE = 62;
const pango::SCRIPT_CUNEIFORM = 63;
const pango::SCRIPT_PHOENICIAN = 64;
const pango::SCRIPT_PHAGS_PA = 65;
const pango::SCRIPT_NKO = 66;
const pango::SCRIPT_KAYAH_LI = 67;
const pango::SCRIPT_LEPCHA = 68;
const pango::SCRIPT_REJANG = 69;
const pango::SCRIPT_SUNDANESE = 70;
const pango::SCRIPT_SAURASHTRA = 71;
const pango::SCRIPT_CHAM = 72;
const pango::SCRIPT_OL_CHIKI = 73;
const pango::SCRIPT_VAI = 74;
const pango::SCRIPT_CARIAN = 75;
const pango::SCRIPT_LYCIAN = 76;
const pango::SCRIPT_LYDIAN = 77;
const pango::STRETCH_ULTRA_CONDENSED = 0;
const pango::STRETCH_EXTRA_CONDENSED = 1;
const pango::STRETCH_CONDENSED = 2;
const pango::STRETCH_SEMI_CONDENSED = 3;
const pango::STRETCH_NORMAL = 4;
const pango::STRETCH_SEMI_EXPANDED = 5;
const pango::STRETCH_EXPANDED = 6;
const pango::STRETCH_EXTRA_EXPANDED = 7;
const pango::STRETCH_ULTRA_EXPANDED = 8;
const pango::STYLE_NORMAL = 0;
const pango::STYLE_OBLIQUE = 1;
const pango::STYLE_ITALIC = 2;
const pango::TAB_LEFT = 0;
const pango::UNDERLINE_NONE = 0;
const pango::UNDERLINE_SINGLE = 1;
const pango::UNDERLINE_DOUBLE = 2;
const pango::UNDERLINE_LOW = 3;
const pango::UNDERLINE_ERROR = 4;
const pango::VARIANT_NORMAL = 0;
const pango::VARIANT_SMALL_CAPS = 1;
const pango::WEIGHT_THIN = 100;
const pango::WEIGHT_ULTRALIGHT = 200;
const pango::WEIGHT_LIGHT = 300;
const pango::WEIGHT_BOOK = 380;
const pango::WEIGHT_NORMAL = 400;
const pango::WEIGHT_MEDIUM = 500;
const pango::WEIGHT_SEMIBOLD = 600;
const pango::WEIGHT_BOLD = 700;
const pango::WEIGHT_ULTRABOLD = 800;
const pango::WEIGHT_HEAVY = 900;
const pango::WEIGHT_ULTRAHEAVY = 1000;
const pango::WRAP_WORD = 0;
const pango::WRAP_CHAR = 1;
const pango::WRAP_WORD_CHAR = 2;
extern PangoCoverage* pango_coverage_new() = coverage_new;
extern PangoCoverage* pango_coverage_ref(PangoCoverage*) = coverage_ref;
extern void pango_coverage_unref(PangoCoverage*) = coverage_unref;
extern PangoCoverage* pango_coverage_copy(PangoCoverage*) = coverage_copy;
extern int pango_coverage_get(PangoCoverage*, int) = coverage_get;
extern void pango_coverage_set(PangoCoverage*, int, int) = coverage_set;
extern void pango_coverage_max(PangoCoverage*, PangoCoverage*) = coverage_max;
extern void pango_coverage_to_bytes(PangoCoverage*, char**, int*) = coverage_to_bytes;
extern PangoCoverage* pango_coverage_from_bytes(char*, int) = coverage_from_bytes;
extern int pango_units_from_double(double) = units_from_double;
extern double pango_units_to_double(int) = units_to_double;
extern void pango_extents_to_pixels(PangoRectangle*, PangoRectangle*) = extents_to_pixels;
extern long pango_matrix_get_type() = matrix_get_type;
extern PangoMatrix* pango_matrix_copy(PangoMatrix*) = matrix_copy;
extern void pango_matrix_free(PangoMatrix*) = matrix_free;
extern void pango_matrix_translate(PangoMatrix*, double, double) = matrix_translate;
extern void pango_matrix_scale(PangoMatrix*, double, double) = matrix_scale;
extern void pango_matrix_rotate(PangoMatrix*, double) = matrix_rotate;
extern void pango_matrix_concat(PangoMatrix*, PangoMatrix*) = matrix_concat;
extern void pango_matrix_transform_point(PangoMatrix*, double*, double*) = matrix_transform_point;
extern void pango_matrix_transform_distance(PangoMatrix*, double*, double*) = matrix_transform_distance;
extern void pango_matrix_transform_rectangle(PangoMatrix*, PangoRectangle*) = matrix_transform_rectangle;
extern void pango_matrix_transform_pixel_rectangle(PangoMatrix*, PangoRectangle*) = matrix_transform_pixel_rectangle;
extern double pango_matrix_get_font_scale_factor(PangoMatrix*) = matrix_get_font_scale_factor;
extern int pango_script_for_unichar(int) = script_for_unichar;
extern PangoScriptIter* pango_script_iter_new(char*, int) = script_iter_new;
extern void pango_script_iter_get_range(PangoScriptIter*, char**, char**, int*) = script_iter_get_range;
extern int pango_script_iter_next(PangoScriptIter*) = script_iter_next;
extern void pango_script_iter_free(PangoScriptIter*) = script_iter_free;
extern long pango_language_get_type() = language_get_type;
extern PangoLanguage* pango_language_from_string(char*) = language_from_string;
extern char* pango_language_to_string(PangoLanguage*) = language_to_string;
extern char* pango_language_get_sample_string(PangoLanguage*) = language_get_sample_string;
extern PangoLanguage* pango_language_get_default() = language_get_default;
extern int pango_language_matches(PangoLanguage*, char*) = language_matches;
extern int pango_language_includes_script(PangoLanguage*, int) = language_includes_script;
extern int* pango_language_get_scripts(PangoLanguage*, int*) = language_get_scripts;
extern PangoLanguage* pango_script_get_sample_language(int) = script_get_sample_language;
extern double pango_gravity_to_rotation(int) = gravity_to_rotation;
extern int pango_gravity_get_for_matrix(PangoMatrix*) = gravity_get_for_matrix;
extern int pango_gravity_get_for_script(int, int, int) = gravity_get_for_script;
extern int pango_gravity_get_for_script_and_width(int, int, int, int) = gravity_get_for_script_and_width;
extern int pango_bidi_type_for_unichar(int) = bidi_type_for_unichar;
extern int pango_unichar_direction(int) = unichar_direction;
extern int pango_find_base_dir(char*, int) = find_base_dir;
extern int pango_get_mirror_char(int, int*) = get_mirror_char;
extern long pango_font_description_get_type() = font_description_get_type;
extern PangoFontDescription* pango_font_description_new() = font_description_new;
extern PangoFontDescription* pango_font_description_copy(PangoFontDescription*) = font_description_copy;
extern PangoFontDescription* pango_font_description_copy_static(PangoFontDescription*) = font_description_copy_static;
extern int pango_font_description_hash(PangoFontDescription*) = font_description_hash;
extern int pango_font_description_equal(PangoFontDescription*, PangoFontDescription*) = font_description_equal;
extern void pango_font_description_free(PangoFontDescription*) = font_description_free;
extern void pango_font_descriptions_free(PangoFontDescription**, int) = font_descriptions_free;
extern void pango_font_description_set_family(PangoFontDescription*, char*) = font_description_set_family;
extern void pango_font_description_set_family_static(PangoFontDescription*, char*) = font_description_set_family_static;
extern char* pango_font_description_get_family(PangoFontDescription*) = font_description_get_family;
extern void pango_font_description_set_style(PangoFontDescription*, int) = font_description_set_style;
extern int pango_font_description_get_style(PangoFontDescription*) = font_description_get_style;
extern void pango_font_description_set_variant(PangoFontDescription*, int) = font_description_set_variant;
extern int pango_font_description_get_variant(PangoFontDescription*) = font_description_get_variant;
extern void pango_font_description_set_weight(PangoFontDescription*, int) = font_description_set_weight;
extern int pango_font_description_get_weight(PangoFontDescription*) = font_description_get_weight;
extern void pango_font_description_set_stretch(PangoFontDescription*, int) = font_description_set_stretch;
extern int pango_font_description_get_stretch(PangoFontDescription*) = font_description_get_stretch;
extern void pango_font_description_set_size(PangoFontDescription*, int) = font_description_set_size;
extern int pango_font_description_get_size(PangoFontDescription*) = font_description_get_size;
extern void pango_font_description_set_absolute_size(PangoFontDescription*, double) = font_description_set_absolute_size;
extern int pango_font_description_get_size_is_absolute(PangoFontDescription*) = font_description_get_size_is_absolute;
extern void pango_font_description_set_gravity(PangoFontDescription*, int) = font_description_set_gravity;
extern int pango_font_description_get_gravity(PangoFontDescription*) = font_description_get_gravity;
extern int pango_font_description_get_set_fields(PangoFontDescription*) = font_description_get_set_fields;
extern void pango_font_description_unset_fields(PangoFontDescription*, int) = font_description_unset_fields;
extern void pango_font_description_merge(PangoFontDescription*, PangoFontDescription*, int) = font_description_merge;
extern void pango_font_description_merge_static(PangoFontDescription*, PangoFontDescription*, int) = font_description_merge_static;
extern int pango_font_description_better_match(PangoFontDescription*, PangoFontDescription*, PangoFontDescription*) = font_description_better_match;
extern PangoFontDescription* pango_font_description_from_string(char*) = font_description_from_string;
extern char* pango_font_description_to_string(PangoFontDescription*) = font_description_to_string;
extern char* pango_font_description_to_filename(PangoFontDescription*) = font_description_to_filename;
extern long pango_font_metrics_get_type() = font_metrics_get_type;
extern PangoFontMetrics* pango_font_metrics_ref(PangoFontMetrics*) = font_metrics_ref;
extern void pango_font_metrics_unref(PangoFontMetrics*) = font_metrics_unref;
extern int pango_font_metrics_get_ascent(PangoFontMetrics*) = font_metrics_get_ascent;
extern int pango_font_metrics_get_descent(PangoFontMetrics*) = font_metrics_get_descent;
extern int pango_font_metrics_get_approximate_char_width(PangoFontMetrics*) = font_metrics_get_approximate_char_width;
extern int pango_font_metrics_get_approximate_digit_width(PangoFontMetrics*) = font_metrics_get_approximate_digit_width;
extern int pango_font_metrics_get_underline_position(PangoFontMetrics*) = font_metrics_get_underline_position;
extern int pango_font_metrics_get_underline_thickness(PangoFontMetrics*) = font_metrics_get_underline_thickness;
extern int pango_font_metrics_get_strikethrough_position(PangoFontMetrics*) = font_metrics_get_strikethrough_position;
extern int pango_font_metrics_get_strikethrough_thickness(PangoFontMetrics*) = font_metrics_get_strikethrough_thickness;
extern long pango_font_family_get_type() = font_family_get_type;
extern void pango_font_family_list_faces(PangoFontFamily*, PangoFontFace***, int*) = font_family_list_faces;
extern char* pango_font_family_get_name(PangoFontFamily*) = font_family_get_name;
extern int pango_font_family_is_monospace(PangoFontFamily*) = font_family_is_monospace;
extern long pango_font_face_get_type() = font_face_get_type;
extern PangoFontDescription* pango_font_face_describe(PangoFontFace*) = font_face_describe;
extern char* pango_font_face_get_face_name(PangoFontFace*) = font_face_get_face_name;
extern void pango_font_face_list_sizes(PangoFontFace*, int**, int*) = font_face_list_sizes;
extern int pango_font_face_is_synthesized(PangoFontFace*) = font_face_is_synthesized;
extern long pango_font_get_type() = font_get_type;
extern PangoFontDescription* pango_font_describe(PangoFont*) = font_describe;
extern PangoFontDescription* pango_font_describe_with_absolute_size(PangoFont*) = font_describe_with_absolute_size;
extern PangoCoverage* pango_font_get_coverage(PangoFont*, PangoLanguage*) = font_get_coverage;
extern PangoEngineShape* pango_font_find_shaper(PangoFont*, PangoLanguage*, int) = font_find_shaper;
extern PangoFontMetrics* pango_font_get_metrics(PangoFont*, PangoLanguage*) = font_get_metrics;
extern void pango_font_get_glyph_extents(PangoFont*, int, PangoRectangle*, PangoRectangle*) = font_get_glyph_extents;
extern PangoFontMap* pango_font_get_font_map(PangoFont*) = font_get_font_map;
extern long pango_color_get_type() = color_get_type;
extern PangoColor* pango_color_copy(PangoColor*) = color_copy;
extern void pango_color_free(PangoColor*) = color_free;
extern int pango_color_parse(PangoColor*, char*) = color_parse;
extern char* pango_color_to_string(PangoColor*) = color_to_string;
extern int pango_attr_type_register(char*) = attr_type_register;
extern char* pango_attr_type_get_name(int) = attr_type_get_name;
extern void pango_attribute_init(PangoAttribute*, PangoAttrClass*) = attribute_init;
extern PangoAttribute* pango_attribute_copy(PangoAttribute*) = attribute_copy;
extern void pango_attribute_destroy(PangoAttribute*) = attribute_destroy;
extern int pango_attribute_equal(PangoAttribute*, PangoAttribute*) = attribute_equal;
extern PangoAttribute* pango_attr_language_new(PangoLanguage*) = attr_language_new;
extern PangoAttribute* pango_attr_family_new(char*) = attr_family_new;
extern PangoAttribute* pango_attr_foreground_new(short, short, short) = attr_foreground_new;
extern PangoAttribute* pango_attr_background_new(short, short, short) = attr_background_new;
extern PangoAttribute* pango_attr_size_new(int) = attr_size_new;
extern PangoAttribute* pango_attr_size_new_absolute(int) = attr_size_new_absolute;
extern PangoAttribute* pango_attr_style_new(int) = attr_style_new;
extern PangoAttribute* pango_attr_weight_new(int) = attr_weight_new;
extern PangoAttribute* pango_attr_variant_new(int) = attr_variant_new;
extern PangoAttribute* pango_attr_stretch_new(int) = attr_stretch_new;
extern PangoAttribute* pango_attr_font_desc_new(PangoFontDescription*) = attr_font_desc_new;
extern PangoAttribute* pango_attr_underline_new(int) = attr_underline_new;
extern PangoAttribute* pango_attr_underline_color_new(short, short, short) = attr_underline_color_new;
extern PangoAttribute* pango_attr_strikethrough_new(int) = attr_strikethrough_new;
extern PangoAttribute* pango_attr_strikethrough_color_new(short, short, short) = attr_strikethrough_color_new;
extern PangoAttribute* pango_attr_rise_new(int) = attr_rise_new;
extern PangoAttribute* pango_attr_scale_new(double) = attr_scale_new;
extern PangoAttribute* pango_attr_fallback_new(int) = attr_fallback_new;
extern PangoAttribute* pango_attr_letter_spacing_new(int) = attr_letter_spacing_new;
extern PangoAttribute* pango_attr_shape_new(PangoRectangle*, PangoRectangle*) = attr_shape_new;
extern PangoAttribute* pango_attr_shape_new_with_data(PangoRectangle*, PangoRectangle*, void*, void*, void*) = attr_shape_new_with_data;
extern PangoAttribute* pango_attr_gravity_new(int) = attr_gravity_new;
extern PangoAttribute* pango_attr_gravity_hint_new(int) = attr_gravity_hint_new;
extern long pango_attr_list_get_type() = attr_list_get_type;
extern PangoAttrList* pango_attr_list_new() = attr_list_new;
extern PangoAttrList* pango_attr_list_ref(PangoAttrList*) = attr_list_ref;
extern void pango_attr_list_unref(PangoAttrList*) = attr_list_unref;
extern PangoAttrList* pango_attr_list_copy(PangoAttrList*) = attr_list_copy;
extern void pango_attr_list_insert(PangoAttrList*, PangoAttribute*) = attr_list_insert;
extern void pango_attr_list_insert_before(PangoAttrList*, PangoAttribute*) = attr_list_insert_before;
extern void pango_attr_list_change(PangoAttrList*, PangoAttribute*) = attr_list_change;
extern void pango_attr_list_splice(PangoAttrList*, PangoAttrList*, int, int) = attr_list_splice;
extern PangoAttrList* pango_attr_list_filter(PangoAttrList*, void*, void*) = attr_list_filter;
extern PangoAttrIterator* pango_attr_list_get_iterator(PangoAttrList*) = attr_list_get_iterator;
extern void pango_attr_iterator_range(PangoAttrIterator*, int*, int*) = attr_iterator_range;
extern int pango_attr_iterator_next(PangoAttrIterator*) = attr_iterator_next;
extern PangoAttrIterator* pango_attr_iterator_copy(PangoAttrIterator*) = attr_iterator_copy;
extern void pango_attr_iterator_destroy(PangoAttrIterator*) = attr_iterator_destroy;
extern PangoAttribute* pango_attr_iterator_get(PangoAttrIterator*, int) = attr_iterator_get;
extern void pango_attr_iterator_get_font(PangoAttrIterator*, PangoFontDescription*, PangoLanguage**, GSList**) = attr_iterator_get_font;
extern GSList* pango_attr_iterator_get_attrs(PangoAttrIterator*) = attr_iterator_get_attrs;
extern int pango_parse_markup(char*, int, int, PangoAttrList**, char**, int*, GError**) = parse_markup;
extern long pango_item_get_type() = item_get_type;
extern PangoItem* pango_item_new() = item_new;
extern PangoItem* pango_item_copy(PangoItem*) = item_copy;
extern void pango_item_free(PangoItem*) = item_free;
extern PangoItem* pango_item_split(PangoItem*, int, int) = item_split;
extern void pango_break(char*, int, PangoAnalysis*, PangoLogAttr*, int) = break;
extern void pango_find_paragraph_boundary(char*, int, int*, int*) = find_paragraph_boundary;
extern void pango_get_log_attrs(char*, int, int, PangoLanguage*, PangoLogAttr*, int) = get_log_attrs;
extern long pango_fontset_get_type() = fontset_get_type;
extern PangoFont* pango_fontset_get_font(PangoFontset*, int) = fontset_get_font;
extern PangoFontMetrics* pango_fontset_get_metrics(PangoFontset*) = fontset_get_metrics;
extern void pango_fontset_foreach(PangoFontset*, void*, void*) = fontset_foreach;
extern long pango_font_map_get_type() = font_map_get_type;
extern PangoContext* pango_font_map_create_context(PangoFontMap*) = font_map_create_context;
extern PangoFont* pango_font_map_load_font(PangoFontMap*, PangoContext*, PangoFontDescription*) = font_map_load_font;
extern PangoFontset* pango_font_map_load_fontset(PangoFontMap*, PangoContext*, PangoFontDescription*, PangoLanguage*) = font_map_load_fontset;
extern void pango_font_map_list_families(PangoFontMap*, PangoFontFamily***, int*) = font_map_list_families;
extern long pango_context_get_type() = context_get_type;
extern PangoContext* pango_context_new() = context_new;
extern void pango_context_set_font_map(PangoContext*, PangoFontMap*) = context_set_font_map;
extern PangoFontMap* pango_context_get_font_map(PangoContext*) = context_get_font_map;
extern void pango_context_list_families(PangoContext*, PangoFontFamily***, int*) = context_list_families;
extern PangoFont* pango_context_load_font(PangoContext*, PangoFontDescription*) = context_load_font;
extern PangoFontset* pango_context_load_fontset(PangoContext*, PangoFontDescription*, PangoLanguage*) = context_load_fontset;
extern PangoFontMetrics* pango_context_get_metrics(PangoContext*, PangoFontDescription*, PangoLanguage*) = context_get_metrics;
extern void pango_context_set_font_description(PangoContext*, PangoFontDescription*) = context_set_font_description;
extern PangoFontDescription* pango_context_get_font_description(PangoContext*) = context_get_font_description;
extern PangoLanguage* pango_context_get_language(PangoContext*) = context_get_language;
extern void pango_context_set_language(PangoContext*, PangoLanguage*) = context_set_language;
extern void pango_context_set_base_dir(PangoContext*, int) = context_set_base_dir;
extern int pango_context_get_base_dir(PangoContext*) = context_get_base_dir;
extern void pango_context_set_base_gravity(PangoContext*, int) = context_set_base_gravity;
extern int pango_context_get_base_gravity(PangoContext*) = context_get_base_gravity;
extern int pango_context_get_gravity(PangoContext*) = context_get_gravity;
extern void pango_context_set_gravity_hint(PangoContext*, int) = context_set_gravity_hint;
extern int pango_context_get_gravity_hint(PangoContext*) = context_get_gravity_hint;
extern void pango_context_set_matrix(PangoContext*, PangoMatrix*) = context_set_matrix;
extern PangoMatrix* pango_context_get_matrix(PangoContext*) = context_get_matrix;
extern GList* pango_itemize(PangoContext*, char*, int, int, PangoAttrList*, PangoAttrIterator*) = itemize;
extern GList* pango_itemize_with_base_dir(PangoContext*, int, char*, int, int, PangoAttrList*, PangoAttrIterator*) = itemize_with_base_dir;
extern PangoGlyphString* pango_glyph_string_new() = glyph_string_new;
extern void pango_glyph_string_set_size(PangoGlyphString*, int) = glyph_string_set_size;
extern long pango_glyph_string_get_type() = glyph_string_get_type;
extern PangoGlyphString* pango_glyph_string_copy(PangoGlyphString*) = glyph_string_copy;
extern void pango_glyph_string_free(PangoGlyphString*) = glyph_string_free;
extern void pango_glyph_string_extents(PangoGlyphString*, PangoFont*, PangoRectangle*, PangoRectangle*) = glyph_string_extents;
extern int pango_glyph_string_get_width(PangoGlyphString*) = glyph_string_get_width;
extern void pango_glyph_string_extents_range(PangoGlyphString*, int, int, PangoFont*, PangoRectangle*, PangoRectangle*) = glyph_string_extents_range;
extern void pango_glyph_string_get_logical_widths(PangoGlyphString*, char*, int, int, int*) = glyph_string_get_logical_widths;
extern void pango_glyph_string_index_to_x(PangoGlyphString*, char*, int, PangoAnalysis*, int, int, int*) = glyph_string_index_to_x;
extern void pango_glyph_string_x_to_index(PangoGlyphString*, char*, int, PangoAnalysis*, int, int*, int*) = glyph_string_x_to_index;
extern void pango_shape(char*, int, PangoAnalysis*, PangoGlyphString*) = shape;
extern GList* pango_reorder_items(GList*) = reorder_items;
extern long pango_attr_type_get_type() = attr_type_get_type;
extern long pango_underline_get_type() = underline_get_type;
extern long pango_bidi_type_get_type() = bidi_type_get_type;
extern long pango_direction_get_type() = direction_get_type;
extern long pango_coverage_level_get_type() = coverage_level_get_type;
extern long pango_style_get_type() = style_get_type;
extern long pango_variant_get_type() = variant_get_type;
extern long pango_weight_get_type() = weight_get_type;
extern long pango_stretch_get_type() = stretch_get_type;
extern long pango_font_mask_get_type() = font_mask_get_type;
extern long pango_gravity_get_type() = gravity_get_type;
extern long pango_gravity_hint_get_type() = gravity_hint_get_type;
extern long pango_alignment_get_type() = alignment_get_type;
extern long pango_wrap_mode_get_type() = wrap_mode_get_type;
extern long pango_ellipsize_mode_get_type() = ellipsize_mode_get_type;
extern long pango_render_part_get_type() = render_part_get_type;
extern long pango_script_get_type() = script_get_type;
extern long pango_tab_align_get_type() = tab_align_get_type;
extern long pango_glyph_item_get_type() = glyph_item_get_type;
extern PangoGlyphItem* pango_glyph_item_split(PangoGlyphItem*, char*, int) = glyph_item_split;
extern PangoGlyphItem* pango_glyph_item_copy(PangoGlyphItem*) = glyph_item_copy;
extern void pango_glyph_item_free(PangoGlyphItem*) = glyph_item_free;
extern GSList* pango_glyph_item_apply_attrs(PangoGlyphItem*, char*, PangoAttrList*) = glyph_item_apply_attrs;
extern void pango_glyph_item_letter_space(PangoGlyphItem*, char*, PangoLogAttr*, int) = glyph_item_letter_space;
extern void pango_glyph_item_get_logical_widths(PangoGlyphItem*, char*, int*) = glyph_item_get_logical_widths;
extern long pango_glyph_item_iter_get_type() = glyph_item_iter_get_type;
extern PangoGlyphItemIter* pango_glyph_item_iter_copy(PangoGlyphItemIter*) = glyph_item_iter_copy;
extern void pango_glyph_item_iter_free(PangoGlyphItemIter*) = glyph_item_iter_free;
extern int pango_glyph_item_iter_init_start(PangoGlyphItemIter*, PangoGlyphItem*, char*) = glyph_item_iter_init_start;
extern int pango_glyph_item_iter_init_end(PangoGlyphItemIter*, PangoGlyphItem*, char*) = glyph_item_iter_init_end;
extern int pango_glyph_item_iter_next_cluster(PangoGlyphItemIter*) = glyph_item_iter_next_cluster;
extern int pango_glyph_item_iter_prev_cluster(PangoGlyphItemIter*) = glyph_item_iter_prev_cluster;
extern PangoTabArray* pango_tab_array_new(int, int) = tab_array_new;
extern PangoTabArray* pango_tab_array_new_with_positions(int, int, int, int, ...) = tab_array_new_with_positions;
extern long pango_tab_array_get_type() = tab_array_get_type;
extern PangoTabArray* pango_tab_array_copy(PangoTabArray*) = tab_array_copy;
extern void pango_tab_array_free(PangoTabArray*) = tab_array_free;
extern int pango_tab_array_get_size(PangoTabArray*) = tab_array_get_size;
extern void pango_tab_array_resize(PangoTabArray*, int) = tab_array_resize;
extern void pango_tab_array_set_tab(PangoTabArray*, int, int, int) = tab_array_set_tab;
extern void pango_tab_array_get_tab(PangoTabArray*, int, int*, int*) = tab_array_get_tab;
extern void pango_tab_array_get_tabs(PangoTabArray*, int**, int**) = tab_array_get_tabs;
extern int pango_tab_array_get_positions_in_pixels(PangoTabArray*) = tab_array_get_positions_in_pixels;
extern long pango_layout_get_type() = layout_get_type;
extern PangoLayout* pango_layout_new(PangoContext*) = layout_new;
extern PangoLayout* pango_layout_copy(PangoLayout*) = layout_copy;
extern PangoContext* pango_layout_get_context(PangoLayout*) = layout_get_context;
extern void pango_layout_set_attributes(PangoLayout*, PangoAttrList*) = layout_set_attributes;
extern PangoAttrList* pango_layout_get_attributes(PangoLayout*) = layout_get_attributes;
extern void pango_layout_set_text(PangoLayout*, char*, int) = layout_set_text;
extern char* pango_layout_get_text(PangoLayout*) = layout_get_text;
extern void pango_layout_set_markup(PangoLayout*, char*, int) = layout_set_markup;
extern void pango_layout_set_markup_with_accel(PangoLayout*, char*, int, int, int*) = layout_set_markup_with_accel;
extern void pango_layout_set_font_description(PangoLayout*, PangoFontDescription*) = layout_set_font_description;
extern PangoFontDescription* pango_layout_get_font_description(PangoLayout*) = layout_get_font_description;
extern void pango_layout_set_width(PangoLayout*, int) = layout_set_width;
extern int pango_layout_get_width(PangoLayout*) = layout_get_width;
extern void pango_layout_set_height(PangoLayout*, int) = layout_set_height;
extern int pango_layout_get_height(PangoLayout*) = layout_get_height;
extern void pango_layout_set_wrap(PangoLayout*, int) = layout_set_wrap;
extern int pango_layout_get_wrap(PangoLayout*) = layout_get_wrap;
extern int pango_layout_is_wrapped(PangoLayout*) = layout_is_wrapped;
extern void pango_layout_set_indent(PangoLayout*, int) = layout_set_indent;
extern int pango_layout_get_indent(PangoLayout*) = layout_get_indent;
extern void pango_layout_set_spacing(PangoLayout*, int) = layout_set_spacing;
extern int pango_layout_get_spacing(PangoLayout*) = layout_get_spacing;
extern void pango_layout_set_justify(PangoLayout*, int) = layout_set_justify;
extern int pango_layout_get_justify(PangoLayout*) = layout_get_justify;
extern void pango_layout_set_auto_dir(PangoLayout*, int) = layout_set_auto_dir;
extern int pango_layout_get_auto_dir(PangoLayout*) = layout_get_auto_dir;
extern void pango_layout_set_alignment(PangoLayout*, int) = layout_set_alignment;
extern int pango_layout_get_alignment(PangoLayout*) = layout_get_alignment;
extern void pango_layout_set_tabs(PangoLayout*, PangoTabArray*) = layout_set_tabs;
extern PangoTabArray* pango_layout_get_tabs(PangoLayout*) = layout_get_tabs;
extern void pango_layout_set_single_paragraph_mode(PangoLayout*, int) = layout_set_single_paragraph_mode;
extern int pango_layout_get_single_paragraph_mode(PangoLayout*) = layout_get_single_paragraph_mode;
extern void pango_layout_set_ellipsize(PangoLayout*, int) = layout_set_ellipsize;
extern int pango_layout_get_ellipsize(PangoLayout*) = layout_get_ellipsize;
extern int pango_layout_is_ellipsized(PangoLayout*) = layout_is_ellipsized;
extern int pango_layout_get_unknown_glyphs_count(PangoLayout*) = layout_get_unknown_glyphs_count;
extern void pango_layout_context_changed(PangoLayout*) = layout_context_changed;
extern void pango_layout_get_log_attrs(PangoLayout*, PangoLogAttr**, int*) = layout_get_log_attrs;
extern void pango_layout_index_to_pos(PangoLayout*, int, PangoRectangle*) = layout_index_to_pos;
extern void pango_layout_index_to_line_x(PangoLayout*, int, int, int*, int*) = layout_index_to_line_x;
extern void pango_layout_get_cursor_pos(PangoLayout*, int, PangoRectangle*, PangoRectangle*) = layout_get_cursor_pos;
extern void pango_layout_move_cursor_visually(PangoLayout*, int, int, int, int, int*, int*) = layout_move_cursor_visually;
extern int pango_layout_xy_to_index(PangoLayout*, int, int, int*, int*) = layout_xy_to_index;
extern void pango_layout_get_extents(PangoLayout*, PangoRectangle*, PangoRectangle*) = layout_get_extents;
extern void pango_layout_get_pixel_extents(PangoLayout*, PangoRectangle*, PangoRectangle*) = layout_get_pixel_extents;
extern void pango_layout_get_size(PangoLayout*, int*, int*) = layout_get_size;
extern void pango_layout_get_pixel_size(PangoLayout*, int*, int*) = layout_get_pixel_size;
extern int pango_layout_get_baseline(PangoLayout*) = layout_get_baseline;
extern int pango_layout_get_line_count(PangoLayout*) = layout_get_line_count;
extern PangoLayoutLine* pango_layout_get_line(PangoLayout*, int) = layout_get_line;
extern PangoLayoutLine* pango_layout_get_line_readonly(PangoLayout*, int) = layout_get_line_readonly;
extern GSList* pango_layout_get_lines(PangoLayout*) = layout_get_lines;
extern GSList* pango_layout_get_lines_readonly(PangoLayout*) = layout_get_lines_readonly;
extern long pango_layout_line_get_type() = layout_line_get_type;
extern PangoLayoutLine* pango_layout_line_ref(PangoLayoutLine*) = layout_line_ref;
extern void pango_layout_line_unref(PangoLayoutLine*) = layout_line_unref;
extern int pango_layout_line_x_to_index(PangoLayoutLine*, int, int*, int*) = layout_line_x_to_index;
extern void pango_layout_line_index_to_x(PangoLayoutLine*, int, int, int*) = layout_line_index_to_x;
extern void pango_layout_line_get_x_ranges(PangoLayoutLine*, int, int, int**, int*) = layout_line_get_x_ranges;
extern void pango_layout_line_get_extents(PangoLayoutLine*, PangoRectangle*, PangoRectangle*) = layout_line_get_extents;
extern void pango_layout_line_get_pixel_extents(PangoLayoutLine*, PangoRectangle*, PangoRectangle*) = layout_line_get_pixel_extents;
extern long pango_layout_iter_get_type() = layout_iter_get_type;
extern PangoLayoutIter* pango_layout_get_iter(PangoLayout*) = layout_get_iter;
extern PangoLayoutIter* pango_layout_iter_copy(PangoLayoutIter*) = layout_iter_copy;
extern void pango_layout_iter_free(PangoLayoutIter*) = layout_iter_free;
extern int pango_layout_iter_get_index(PangoLayoutIter*) = layout_iter_get_index;
extern PangoLayoutRun* pango_layout_iter_get_run(PangoLayoutIter*) = layout_iter_get_run;
extern PangoLayoutRun* pango_layout_iter_get_run_readonly(PangoLayoutIter*) = layout_iter_get_run_readonly;
extern PangoLayoutLine* pango_layout_iter_get_line(PangoLayoutIter*) = layout_iter_get_line;
extern PangoLayoutLine* pango_layout_iter_get_line_readonly(PangoLayoutIter*) = layout_iter_get_line_readonly;
extern int pango_layout_iter_at_last_line(PangoLayoutIter*) = layout_iter_at_last_line;
extern PangoLayout* pango_layout_iter_get_layout(PangoLayoutIter*) = layout_iter_get_layout;
extern int pango_layout_iter_next_char(PangoLayoutIter*) = layout_iter_next_char;
extern int pango_layout_iter_next_cluster(PangoLayoutIter*) = layout_iter_next_cluster;
extern int pango_layout_iter_next_run(PangoLayoutIter*) = layout_iter_next_run;
extern int pango_layout_iter_next_line(PangoLayoutIter*) = layout_iter_next_line;
extern void pango_layout_iter_get_char_extents(PangoLayoutIter*, PangoRectangle*) = layout_iter_get_char_extents;
extern void pango_layout_iter_get_cluster_extents(PangoLayoutIter*, PangoRectangle*, PangoRectangle*) = layout_iter_get_cluster_extents;
extern void pango_layout_iter_get_run_extents(PangoLayoutIter*, PangoRectangle*, PangoRectangle*) = layout_iter_get_run_extents;
extern void pango_layout_iter_get_line_extents(PangoLayoutIter*, PangoRectangle*, PangoRectangle*) = layout_iter_get_line_extents;
extern void pango_layout_iter_get_line_yrange(PangoLayoutIter*, int*, int*) = layout_iter_get_line_yrange;
extern void pango_layout_iter_get_layout_extents(PangoLayoutIter*, PangoRectangle*, PangoRectangle*) = layout_iter_get_layout_extents;
extern int pango_layout_iter_get_baseline(PangoLayoutIter*) = layout_iter_get_baseline;
extern long pango_renderer_get_type() = renderer_get_type;
extern void pango_renderer_draw_layout(PangoRenderer*, PangoLayout*, int, int) = renderer_draw_layout;
extern void pango_renderer_draw_layout_line(PangoRenderer*, PangoLayoutLine*, int, int) = renderer_draw_layout_line;
extern void pango_renderer_draw_glyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int) = renderer_draw_glyphs;
extern void pango_renderer_draw_glyph_item(PangoRenderer*, char*, PangoGlyphItem*, int, int) = renderer_draw_glyph_item;
extern void pango_renderer_draw_rectangle(PangoRenderer*, int, int, int, int, int) = renderer_draw_rectangle;
extern void pango_renderer_draw_error_underline(PangoRenderer*, int, int, int, int) = renderer_draw_error_underline;
extern void pango_renderer_draw_trapezoid(PangoRenderer*, int, double, double, double, double, double, double) = renderer_draw_trapezoid;
extern void pango_renderer_draw_glyph(PangoRenderer*, PangoFont*, int, double, double) = renderer_draw_glyph;
extern void pango_renderer_activate(PangoRenderer*) = renderer_activate;
extern void pango_renderer_deactivate(PangoRenderer*) = renderer_deactivate;
extern void pango_renderer_part_changed(PangoRenderer*, int) = renderer_part_changed;
extern void pango_renderer_set_color(PangoRenderer*, int, PangoColor*) = renderer_set_color;
extern PangoColor* pango_renderer_get_color(PangoRenderer*, int) = renderer_get_color;
extern void pango_renderer_set_matrix(PangoRenderer*, PangoMatrix*) = renderer_set_matrix;
extern PangoMatrix* pango_renderer_get_matrix(PangoRenderer*) = renderer_get_matrix;
extern PangoLayout* pango_renderer_get_layout(PangoRenderer*) = renderer_get_layout;
extern PangoLayoutLine* pango_renderer_get_layout_line(PangoRenderer*) = renderer_get_layout_line;
extern char** pango_split_file_list(char*) = split_file_list;
extern char* pango_trim_string(char*) = trim_string;
extern int pango_read_line(FILE*, GString*) = read_line;
extern int pango_skip_space(char**) = skip_space;
extern int pango_scan_word(char**, GString*) = scan_word;
extern int pango_scan_string(char**, GString*) = scan_string;
extern int pango_scan_int(char**, int*) = scan_int;
extern int pango_parse_enum(long, char*, int*, int, char**) = parse_enum;
extern int pango_parse_style(char*, int*, int) = parse_style;
extern int pango_parse_variant(char*, int*, int) = parse_variant;
extern int pango_parse_weight(char*, int*, int) = parse_weight;
extern int pango_parse_stretch(char*, int*, int) = parse_stretch;
extern void pango_quantize_line_geometry(int*, int*) = quantize_line_geometry;
extern char* pango_log2vis_get_embedding_levels(char*, int, int*) = log2vis_get_embedding_levels;
extern int pango_is_zero_width(int) = is_zero_width;
extern int pango_version() = version;
extern char* pango_version_string() = version_string;
extern char* pango_version_check(int, int, int) = version_check;
