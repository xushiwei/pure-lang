/* /usr/include/glib-2.0/glib.h: */
using "lib:glib";

namespace glib;
const glib::FALSE = 0;
const glib::E = 2.71828182845905;
const glib::LN2 = 0.693147180559945;
const glib::LN10 = 2.30258509299405;
const glib::PI = 3.14159265358979;
const glib::PI_2 = 1.5707963267949;
const glib::PI_4 = 0.785398163397448;
const glib::SQRT2 = 1.4142135623731;
const glib::LITTLE_ENDIAN = 1234;
const glib::BIG_ENDIAN = 4321;
const glib::PDP_ENDIAN = 3412;
const glib::IEEE754_FLOAT_BIAS = 127;
const glib::IEEE754_DOUBLE_BIAS = 1023;
const glib::LOG_2_BASE_10 = 0.301029995663981;
const glib::DIR_SEPARATOR_S = "/";
const glib::SEARCHPATH_SEPARATOR_S = ":";
const glib::MUTEX_DEBUG_MAGIC = -119436585;
const glib::MEM_ALIGN = 8;
const glib::ALLOC_ONLY = 1;
const glib::ALLOC_AND_FREE = 2;
const glib::ALLOCATOR_LIST = 1;
const glib::ALLOCATOR_SLIST = 2;
const glib::ALLOCATOR_NODE = 3;
const glib::DATALIST_FLAGS_MASK = 3;
const glib::HOOK_FLAG_USER_SHIFT = 4;
const glib::PRIORITY_HIGH = -100;
const glib::PRIORITY_DEFAULT = 0;
const glib::PRIORITY_HIGH_IDLE = 100;
const glib::PRIORITY_DEFAULT_IDLE = 200;
const glib::PRIORITY_LOW = 300;
const glib::KEY_FILE_DESKTOP_GROUP = "Desktop Entry";
const glib::KEY_FILE_DESKTOP_KEY_TYPE = "Type";
const glib::KEY_FILE_DESKTOP_KEY_VERSION = "Version";
const glib::KEY_FILE_DESKTOP_KEY_NAME = "Name";
const glib::KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName";
const glib::KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay";
const glib::KEY_FILE_DESKTOP_KEY_COMMENT = "Comment";
const glib::KEY_FILE_DESKTOP_KEY_ICON = "Icon";
const glib::KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden";
const glib::KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn";
const glib::KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn";
const glib::KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec";
const glib::KEY_FILE_DESKTOP_KEY_EXEC = "Exec";
const glib::KEY_FILE_DESKTOP_KEY_PATH = "Path";
const glib::KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal";
const glib::KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType";
const glib::KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories";
const glib::KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify";
const glib::KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass";
const glib::KEY_FILE_DESKTOP_KEY_URL = "URL";
const glib::KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = "X-SUSE-Gettext-Domain";
const glib::KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application";
const glib::KEY_FILE_DESKTOP_TYPE_LINK = "Link";
const glib::KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory";
const glib::LOG_LEVEL_USER_SHIFT = 8;
const glib::OPTION_REMAINING = "";
const glib::CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const glib::CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";
const glib::CSET_DIGITS = "0123456789";
const glib::STR_DELIMITERS = "_-|> <.";
const glib::ASCII_DTOSTR_BUF_SIZE = 29;
const glib::USEC_PER_SEC = 1000000;
const glib::URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@";
const glib::URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;=";
const glib::ASCII_ALNUM = 1;
const glib::ASCII_ALPHA = 2;
const glib::ASCII_CNTRL = 4;
const glib::ASCII_DIGIT = 8;
const glib::ASCII_GRAPH = 16;
const glib::ASCII_LOWER = 32;
const glib::ASCII_PRINT = 64;
const glib::ASCII_PUNCT = 128;
const glib::ASCII_SPACE = 256;
const glib::ASCII_UPPER = 512;
const glib::ASCII_XDIGIT = 1024;
const glib::BOOKMARK_FILE_ERROR_INVALID_URI = 0;
const glib::BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
const glib::BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
const glib::BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
const glib::BOOKMARK_FILE_ERROR_READ = 4;
const glib::BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
const glib::BOOKMARK_FILE_ERROR_WRITE = 6;
const glib::BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;
const glib::CHECKSUM_MD5 = 0;
const glib::CHECKSUM_SHA1 = 1;
const glib::CHECKSUM_SHA256 = 2;
const glib::CONVERT_ERROR_NO_CONVERSION = 0;
const glib::CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
const glib::CONVERT_ERROR_FAILED = 2;
const glib::CONVERT_ERROR_PARTIAL_INPUT = 3;
const glib::CONVERT_ERROR_BAD_URI = 4;
const glib::CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;
const glib::DATE_DAY = 0;
const glib::DATE_MONTH = 1;
const glib::DATE_YEAR = 2;
const glib::DATE_BAD_MONTH = 0;
const glib::DATE_JANUARY = 1;
const glib::DATE_FEBRUARY = 2;
const glib::DATE_MARCH = 3;
const glib::DATE_APRIL = 4;
const glib::DATE_MAY = 5;
const glib::DATE_JUNE = 6;
const glib::DATE_JULY = 7;
const glib::DATE_AUGUST = 8;
const glib::DATE_SEPTEMBER = 9;
const glib::DATE_OCTOBER = 10;
const glib::DATE_NOVEMBER = 11;
const glib::DATE_DECEMBER = 12;
const glib::DATE_BAD_WEEKDAY = 0;
const glib::DATE_MONDAY = 1;
const glib::DATE_TUESDAY = 2;
const glib::DATE_WEDNESDAY = 3;
const glib::DATE_THURSDAY = 4;
const glib::DATE_FRIDAY = 5;
const glib::DATE_SATURDAY = 6;
const glib::DATE_SUNDAY = 7;
const glib::ERR_UNKNOWN = 0;
const glib::ERR_UNEXP_EOF = 1;
const glib::ERR_UNEXP_EOF_IN_STRING = 2;
const glib::ERR_UNEXP_EOF_IN_COMMENT = 3;
const glib::ERR_NON_DIGIT_IN_CONST = 4;
const glib::ERR_DIGIT_RADIX = 5;
const glib::ERR_FLOAT_RADIX = 6;
const glib::ERR_FLOAT_MALFORMED = 7;
const glib::FILE_ERROR_EXIST = 0;
const glib::FILE_ERROR_ISDIR = 1;
const glib::FILE_ERROR_ACCES = 2;
const glib::FILE_ERROR_NAMETOOLONG = 3;
const glib::FILE_ERROR_NOENT = 4;
const glib::FILE_ERROR_NOTDIR = 5;
const glib::FILE_ERROR_NXIO = 6;
const glib::FILE_ERROR_NODEV = 7;
const glib::FILE_ERROR_ROFS = 8;
const glib::FILE_ERROR_TXTBSY = 9;
const glib::FILE_ERROR_FAULT = 10;
const glib::FILE_ERROR_LOOP = 11;
const glib::FILE_ERROR_NOSPC = 12;
const glib::FILE_ERROR_NOMEM = 13;
const glib::FILE_ERROR_MFILE = 14;
const glib::FILE_ERROR_NFILE = 15;
const glib::FILE_ERROR_BADF = 16;
const glib::FILE_ERROR_INVAL = 17;
const glib::FILE_ERROR_PIPE = 18;
const glib::FILE_ERROR_AGAIN = 19;
const glib::FILE_ERROR_INTR = 20;
const glib::FILE_ERROR_IO = 21;
const glib::FILE_ERROR_PERM = 22;
const glib::FILE_ERROR_NOSYS = 23;
const glib::FILE_ERROR_FAILED = 24;
const glib::FILE_TEST_IS_REGULAR = 1;
const glib::FILE_TEST_IS_SYMLINK = 2;
const glib::FILE_TEST_IS_DIR = 4;
const glib::FILE_TEST_IS_EXECUTABLE = 8;
const glib::FILE_TEST_EXISTS = 16;
const glib::HOOK_FLAG_ACTIVE = 1;
const glib::HOOK_FLAG_IN_CALL = 2;
const glib::HOOK_FLAG_MASK = 15;
const glib::IO_CHANNEL_ERROR_FBIG = 0;
const glib::IO_CHANNEL_ERROR_INVAL = 1;
const glib::IO_CHANNEL_ERROR_IO = 2;
const glib::IO_CHANNEL_ERROR_ISDIR = 3;
const glib::IO_CHANNEL_ERROR_NOSPC = 4;
const glib::IO_CHANNEL_ERROR_NXIO = 5;
const glib::IO_CHANNEL_ERROR_OVERFLOW = 6;
const glib::IO_CHANNEL_ERROR_PIPE = 7;
const glib::IO_CHANNEL_ERROR_FAILED = 8;
const glib::IO_IN = 1;
const glib::IO_OUT = 4;
const glib::IO_PRI = 2;
const glib::IO_ERR = 8;
const glib::IO_HUP = 16;
const glib::IO_NVAL = 32;
const glib::IO_ERROR_NONE = 0;
const glib::IO_ERROR_AGAIN = 1;
const glib::IO_ERROR_INVAL = 2;
const glib::IO_ERROR_UNKNOWN = 3;
const glib::IO_FLAG_APPEND = 1;
const glib::IO_FLAG_NONBLOCK = 2;
const glib::IO_FLAG_IS_READABLE = 4;
const glib::IO_FLAG_IS_WRITEABLE = 8;
const glib::IO_FLAG_IS_SEEKABLE = 16;
const glib::IO_FLAG_MASK = 31;
const glib::IO_FLAG_GET_MASK = 31;
const glib::IO_FLAG_SET_MASK = 1;
const glib::IO_STATUS_ERROR = 0;
const glib::IO_STATUS_NORMAL = 1;
const glib::IO_STATUS_EOF = 2;
const glib::IO_STATUS_AGAIN = 3;
const glib::KEY_FILE_ERROR_UNKNOWN_ENCODING = 0;
const glib::KEY_FILE_ERROR_PARSE = 1;
const glib::KEY_FILE_ERROR_NOT_FOUND = 2;
const glib::KEY_FILE_ERROR_KEY_NOT_FOUND = 3;
const glib::KEY_FILE_ERROR_GROUP_NOT_FOUND = 4;
const glib::KEY_FILE_ERROR_INVALID_VALUE = 5;
const glib::KEY_FILE_NONE = 0;
const glib::KEY_FILE_KEEP_COMMENTS = 1;
const glib::KEY_FILE_KEEP_TRANSLATIONS = 2;
const glib::LOG_FLAG_RECURSION = 1;
const glib::LOG_FLAG_FATAL = 2;
const glib::LOG_LEVEL_ERROR = 4;
const glib::LOG_LEVEL_CRITICAL = 8;
const glib::LOG_LEVEL_WARNING = 16;
const glib::LOG_LEVEL_MESSAGE = 32;
const glib::LOG_LEVEL_INFO = 64;
const glib::LOG_LEVEL_DEBUG = 128;
const glib::LOG_LEVEL_MASK = -2;
const glib::MARKUP_COLLECT_INVALID = 0;
const glib::MARKUP_COLLECT_STRING = 1;
const glib::MARKUP_COLLECT_STRDUP = 2;
const glib::MARKUP_COLLECT_BOOLEAN = 3;
const glib::MARKUP_COLLECT_TRISTATE = 4;
const glib::MARKUP_COLLECT_OPTIONAL = 65536;
const glib::MARKUP_ERROR_BAD_UTF8 = 0;
const glib::MARKUP_ERROR_EMPTY = 1;
const glib::MARKUP_ERROR_PARSE = 2;
const glib::MARKUP_ERROR_UNKNOWN_ELEMENT = 3;
const glib::MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4;
const glib::MARKUP_ERROR_INVALID_CONTENT = 5;
const glib::MARKUP_ERROR_MISSING_ATTRIBUTE = 6;
const glib::MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1;
const glib::MARKUP_TREAT_CDATA_AS_TEXT = 2;
const glib::MARKUP_PREFIX_ERROR_POSITION = 4;
const glib::NORMALIZE_DEFAULT = 0;
const glib::NORMALIZE_NFD = 0;
const glib::NORMALIZE_DEFAULT_COMPOSE = 1;
const glib::NORMALIZE_NFC = 1;
const glib::NORMALIZE_ALL = 2;
const glib::NORMALIZE_NFKD = 2;
const glib::NORMALIZE_ALL_COMPOSE = 3;
const glib::NORMALIZE_NFKC = 3;
const glib::ONCE_STATUS_NOTCALLED = 0;
const glib::ONCE_STATUS_PROGRESS = 1;
const glib::ONCE_STATUS_READY = 2;
const glib::OPTION_ARG_NONE = 0;
const glib::OPTION_ARG_STRING = 1;
const glib::OPTION_ARG_INT = 2;
const glib::OPTION_ARG_CALLBACK = 3;
const glib::OPTION_ARG_FILENAME = 4;
const glib::OPTION_ARG_STRING_ARRAY = 5;
const glib::OPTION_ARG_FILENAME_ARRAY = 6;
const glib::OPTION_ARG_DOUBLE = 7;
const glib::OPTION_ARG_INT64 = 8;
const glib::OPTION_ERROR_UNKNOWN_OPTION = 0;
const glib::OPTION_ERROR_BAD_VALUE = 1;
const glib::OPTION_ERROR_FAILED = 2;
const glib::OPTION_FLAG_HIDDEN = 1;
const glib::OPTION_FLAG_IN_MAIN = 2;
const glib::OPTION_FLAG_REVERSE = 4;
const glib::OPTION_FLAG_NO_ARG = 8;
const glib::OPTION_FLAG_FILENAME = 16;
const glib::OPTION_FLAG_OPTIONAL_ARG = 32;
const glib::OPTION_FLAG_NOALIAS = 64;
const glib::REGEX_CASELESS = 1;
const glib::REGEX_MULTILINE = 2;
const glib::REGEX_DOTALL = 4;
const glib::REGEX_EXTENDED = 8;
const glib::REGEX_ANCHORED = 16;
const glib::REGEX_DOLLAR_ENDONLY = 32;
const glib::REGEX_UNGREEDY = 512;
const glib::REGEX_RAW = 2048;
const glib::REGEX_NO_AUTO_CAPTURE = 4096;
const glib::REGEX_OPTIMIZE = 8192;
const glib::REGEX_DUPNAMES = 524288;
const glib::REGEX_NEWLINE_CR = 1048576;
const glib::REGEX_NEWLINE_LF = 2097152;
const glib::REGEX_NEWLINE_CRLF = 1;
const glib::REGEX_ERROR_COMPILE = 0;
const glib::REGEX_ERROR_OPTIMIZE = 1;
const glib::REGEX_ERROR_REPLACE = 2;
const glib::REGEX_ERROR_MATCH = 3;
const glib::REGEX_ERROR_INTERNAL = 4;
const glib::REGEX_ERROR_STRAY_BACKSLASH = 101;
const glib::REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
const glib::REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
const glib::REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
const glib::REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
const glib::REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
const glib::REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
const glib::REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
const glib::REGEX_ERROR_NOTHING_TO_REPEAT = 109;
const glib::REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
const glib::REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
const glib::REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
const glib::REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
const glib::REGEX_ERROR_UNTERMINATED_COMMENT = 118;
const glib::REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
const glib::REGEX_ERROR_MEMORY_ERROR = 121;
const glib::REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
const glib::REGEX_ERROR_MALFORMED_CONDITION = 126;
const glib::REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
const glib::REGEX_ERROR_ASSERTION_EXPECTED = 128;
const glib::REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
const glib::REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
const glib::REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
const glib::REGEX_ERROR_INVALID_CONDITION = 135;
const glib::REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
const glib::REGEX_ERROR_INFINITE_LOOP = 140;
const glib::REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
const glib::REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
const glib::REGEX_ERROR_MALFORMED_PROPERTY = 146;
const glib::REGEX_ERROR_UNKNOWN_PROPERTY = 147;
const glib::REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
const glib::REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
const glib::REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
const glib::REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
const glib::REGEX_ERROR_DEFINE_REPETION = 155;
const glib::REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
const glib::REGEX_ERROR_MISSING_BACK_REFERENCE = 157;
const glib::REGEX_MATCH_ANCHORED = 16;
const glib::REGEX_MATCH_NOTBOL = 128;
const glib::REGEX_MATCH_NOTEOL = 256;
const glib::REGEX_MATCH_NOTEMPTY = 1024;
const glib::REGEX_MATCH_PARTIAL = 32768;
const glib::REGEX_MATCH_NEWLINE_CR = 1048576;
const glib::REGEX_MATCH_NEWLINE_LF = 2097152;
const glib::REGEX_MATCH_NEWLINE_CRLF = 1;
const glib::REGEX_MATCH_NEWLINE_ANY = 4194304;
const glib::SEEK_CUR = 0;
const glib::SEEK_SET = 1;
const glib::SEEK_END = 2;
const glib::SHELL_ERROR_BAD_QUOTING = 0;
const glib::SHELL_ERROR_EMPTY_STRING = 1;
const glib::SHELL_ERROR_FAILED = 2;
const glib::SLICE_CONFIG_ALWAYS_MALLOC = 1;
const glib::SLICE_CONFIG_BYPASS_MAGAZINES = 2;
const glib::SLICE_CONFIG_WORKING_SET_MSECS = 3;
const glib::SLICE_CONFIG_COLOR_INCREMENT = 4;
const glib::SLICE_CONFIG_CHUNK_SIZES = 5;
const glib::SLICE_CONFIG_CONTENTION_COUNTER = 6;
const glib::SPAWN_ERROR_FORK = 0;
const glib::SPAWN_ERROR_READ = 1;
const glib::SPAWN_ERROR_CHDIR = 2;
const glib::SPAWN_ERROR_ACCES = 3;
const glib::SPAWN_ERROR_PERM = 4;
const glib::SPAWN_ERROR_2BIG = 5;
const glib::SPAWN_ERROR_NOEXEC = 6;
const glib::SPAWN_ERROR_NAMETOOLONG = 7;
const glib::SPAWN_ERROR_NOENT = 8;
const glib::SPAWN_ERROR_NOMEM = 9;
const glib::SPAWN_ERROR_NOTDIR = 10;
const glib::SPAWN_ERROR_LOOP = 11;
const glib::SPAWN_ERROR_TXTBUSY = 12;
const glib::SPAWN_ERROR_IO = 13;
const glib::SPAWN_ERROR_NFILE = 14;
const glib::SPAWN_ERROR_MFILE = 15;
const glib::SPAWN_ERROR_INVAL = 16;
const glib::SPAWN_ERROR_ISDIR = 17;
const glib::SPAWN_ERROR_LIBBAD = 18;
const glib::SPAWN_ERROR_FAILED = 19;
const glib::SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
const glib::SPAWN_DO_NOT_REAP_CHILD = 2;
const glib::SPAWN_SEARCH_PATH = 4;
const glib::SPAWN_STDOUT_TO_DEV_NULL = 8;
const glib::SPAWN_STDERR_TO_DEV_NULL = 16;
const glib::SPAWN_CHILD_INHERITS_STDIN = 32;
const glib::SPAWN_FILE_AND_ARGV_ZERO = 64;
const glib::TEST_LOG_NONE = 0;
const glib::TEST_LOG_ERROR = 1;
const glib::TEST_LOG_START_BINARY = 2;
const glib::TEST_LOG_LIST_CASE = 3;
const glib::TEST_LOG_SKIP_CASE = 4;
const glib::TEST_LOG_START_CASE = 5;
const glib::TEST_LOG_STOP_CASE = 6;
const glib::TEST_LOG_MIN_RESULT = 7;
const glib::TEST_LOG_MAX_RESULT = 8;
const glib::TEST_LOG_MESSAGE = 9;
const glib::TEST_TRAP_SILENCE_STDOUT = 128;
const glib::TEST_TRAP_SILENCE_STDERR = 256;
const glib::TEST_TRAP_INHERIT_STDIN = 512;
const glib::THREAD_ERROR_AGAIN = 0;
const glib::THREAD_PRIORITY_LOW = 0;
const glib::THREAD_PRIORITY_NORMAL = 1;
const glib::THREAD_PRIORITY_HIGH = 2;
const glib::THREAD_PRIORITY_URGENT = 3;
const glib::TOKEN_EOF = 0;
const glib::TOKEN_LEFT_PAREN = 40;
const glib::TOKEN_RIGHT_PAREN = 41;
const glib::TOKEN_LEFT_CURLY = 123;
const glib::TOKEN_RIGHT_CURLY = 125;
const glib::TOKEN_LEFT_BRACE = 91;
const glib::TOKEN_RIGHT_BRACE = 93;
const glib::TOKEN_EQUAL_SIGN = 61;
const glib::TOKEN_COMMA = 44;
const glib::TOKEN_NONE = 256;
const glib::TOKEN_ERROR = 257;
const glib::TOKEN_CHAR = 258;
const glib::TOKEN_BINARY = 259;
const glib::TOKEN_OCTAL = 260;
const glib::TOKEN_INT = 261;
const glib::TOKEN_HEX = 262;
const glib::TOKEN_FLOAT = 263;
const glib::TOKEN_STRING = 264;
const glib::TOKEN_SYMBOL = 265;
const glib::TOKEN_IDENTIFIER = 266;
const glib::TOKEN_IDENTIFIER_NULL = 267;
const glib::TOKEN_COMMENT_SINGLE = 268;
const glib::TOKEN_COMMENT_MULTI = 269;
const glib::TOKEN_LAST = 270;
const glib::TRAVERSE_LEAVES = 1;
const glib::TRAVERSE_NON_LEAVES = 2;
const glib::TRAVERSE_ALL = 1;
const glib::TRAVERSE_MASK = 3;
const glib::TRAVERSE_LEAFS = 1;
const glib::TRAVERSE_NON_LEAFS = 2;
const glib::IN_ORDER = 0;
const glib::PRE_ORDER = 1;
const glib::POST_ORDER = 2;
const glib::LEVEL_ORDER = 3;
const glib::UNICODE_BREAK_MANDATORY = 0;
const glib::UNICODE_BREAK_CARRIAGE_RETURN = 1;
const glib::UNICODE_BREAK_LINE_FEED = 2;
const glib::UNICODE_BREAK_COMBINING_MARK = 3;
const glib::UNICODE_BREAK_SURROGATE = 4;
const glib::UNICODE_BREAK_ZERO_WIDTH_SPACE = 5;
const glib::UNICODE_BREAK_INSEPARABLE = 6;
const glib::UNICODE_BREAK_NON_BREAKING_GLUE = 7;
const glib::UNICODE_BREAK_CONTINGENT = 8;
const glib::UNICODE_BREAK_SPACE = 9;
const glib::UNICODE_BREAK_AFTER = 10;
const glib::UNICODE_BREAK_BEFORE = 11;
const glib::UNICODE_BREAK_BEFORE_AND_AFTER = 12;
const glib::UNICODE_BREAK_HYPHEN = 13;
const glib::UNICODE_BREAK_NON_STARTER = 14;
const glib::UNICODE_BREAK_OPEN_PUNCTUATION = 15;
const glib::UNICODE_BREAK_CLOSE_PUNCTUATION = 16;
const glib::UNICODE_BREAK_QUOTATION = 17;
const glib::UNICODE_BREAK_EXCLAMATION = 18;
const glib::UNICODE_BREAK_IDEOGRAPHIC = 19;
const glib::UNICODE_BREAK_NUMERIC = 20;
const glib::UNICODE_BREAK_INFIX_SEPARATOR = 21;
const glib::UNICODE_BREAK_SYMBOL = 22;
const glib::UNICODE_BREAK_ALPHABETIC = 23;
const glib::UNICODE_BREAK_PREFIX = 24;
const glib::UNICODE_BREAK_POSTFIX = 25;
const glib::UNICODE_BREAK_COMPLEX_CONTEXT = 26;
const glib::UNICODE_BREAK_AMBIGUOUS = 27;
const glib::UNICODE_BREAK_UNKNOWN = 28;
const glib::UNICODE_BREAK_NEXT_LINE = 29;
const glib::UNICODE_BREAK_WORD_JOINER = 30;
const glib::UNICODE_BREAK_HANGUL_L_JAMO = 31;
const glib::UNICODE_BREAK_HANGUL_V_JAMO = 32;
const glib::UNICODE_BREAK_HANGUL_T_JAMO = 33;
const glib::UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34;
const glib::UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35;
const glib::UNICODE_SCRIPT_INVALID_CODE = -1;
const glib::UNICODE_SCRIPT_COMMON = 0;
const glib::UNICODE_SCRIPT_INHERITED = 1;
const glib::UNICODE_SCRIPT_ARABIC = 2;
const glib::UNICODE_SCRIPT_ARMENIAN = 3;
const glib::UNICODE_SCRIPT_BENGALI = 4;
const glib::UNICODE_SCRIPT_BOPOMOFO = 5;
const glib::UNICODE_SCRIPT_CHEROKEE = 6;
const glib::UNICODE_SCRIPT_COPTIC = 7;
const glib::UNICODE_SCRIPT_CYRILLIC = 8;
const glib::UNICODE_SCRIPT_DESERET = 9;
const glib::UNICODE_SCRIPT_DEVANAGARI = 10;
const glib::UNICODE_SCRIPT_ETHIOPIC = 11;
const glib::UNICODE_SCRIPT_GEORGIAN = 12;
const glib::UNICODE_SCRIPT_GOTHIC = 13;
const glib::UNICODE_SCRIPT_GREEK = 14;
const glib::UNICODE_SCRIPT_GUJARATI = 15;
const glib::UNICODE_SCRIPT_GURMUKHI = 16;
const glib::UNICODE_SCRIPT_HAN = 17;
const glib::UNICODE_SCRIPT_HANGUL = 18;
const glib::UNICODE_SCRIPT_HEBREW = 19;
const glib::UNICODE_SCRIPT_HIRAGANA = 20;
const glib::UNICODE_SCRIPT_KANNADA = 21;
const glib::UNICODE_SCRIPT_KATAKANA = 22;
const glib::UNICODE_SCRIPT_KHMER = 23;
const glib::UNICODE_SCRIPT_LAO = 24;
const glib::UNICODE_SCRIPT_LATIN = 25;
const glib::UNICODE_SCRIPT_MALAYALAM = 26;
const glib::UNICODE_SCRIPT_MONGOLIAN = 27;
const glib::UNICODE_SCRIPT_MYANMAR = 28;
const glib::UNICODE_SCRIPT_OGHAM = 29;
const glib::UNICODE_SCRIPT_OLD_ITALIC = 30;
const glib::UNICODE_SCRIPT_ORIYA = 31;
const glib::UNICODE_SCRIPT_RUNIC = 32;
const glib::UNICODE_SCRIPT_SINHALA = 33;
const glib::UNICODE_SCRIPT_SYRIAC = 34;
const glib::UNICODE_SCRIPT_TAMIL = 35;
const glib::UNICODE_SCRIPT_TELUGU = 36;
const glib::UNICODE_SCRIPT_THAANA = 37;
const glib::UNICODE_SCRIPT_THAI = 38;
const glib::UNICODE_SCRIPT_TIBETAN = 39;
const glib::UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40;
const glib::UNICODE_SCRIPT_YI = 41;
const glib::UNICODE_SCRIPT_TAGALOG = 42;
const glib::UNICODE_SCRIPT_HANUNOO = 43;
const glib::UNICODE_SCRIPT_BUHID = 44;
const glib::UNICODE_SCRIPT_TAGBANWA = 45;
const glib::UNICODE_SCRIPT_BRAILLE = 46;
const glib::UNICODE_SCRIPT_CYPRIOT = 47;
const glib::UNICODE_SCRIPT_LIMBU = 48;
const glib::UNICODE_SCRIPT_OSMANYA = 49;
const glib::UNICODE_SCRIPT_SHAVIAN = 50;
const glib::UNICODE_SCRIPT_LINEAR_B = 51;
const glib::UNICODE_SCRIPT_TAI_LE = 52;
const glib::UNICODE_SCRIPT_UGARITIC = 53;
const glib::UNICODE_SCRIPT_NEW_TAI_LUE = 54;
const glib::UNICODE_SCRIPT_BUGINESE = 55;
const glib::UNICODE_SCRIPT_GLAGOLITIC = 56;
const glib::UNICODE_SCRIPT_TIFINAGH = 57;
const glib::UNICODE_SCRIPT_SYLOTI_NAGRI = 58;
const glib::UNICODE_SCRIPT_OLD_PERSIAN = 59;
const glib::UNICODE_SCRIPT_KHAROSHTHI = 60;
const glib::UNICODE_SCRIPT_UNKNOWN = 61;
const glib::UNICODE_SCRIPT_BALINESE = 62;
const glib::UNICODE_SCRIPT_CUNEIFORM = 63;
const glib::UNICODE_SCRIPT_PHOENICIAN = 64;
const glib::UNICODE_SCRIPT_PHAGS_PA = 65;
const glib::UNICODE_SCRIPT_NKO = 66;
const glib::UNICODE_SCRIPT_KAYAH_LI = 67;
const glib::UNICODE_SCRIPT_LEPCHA = 68;
const glib::UNICODE_SCRIPT_REJANG = 69;
const glib::UNICODE_SCRIPT_SUNDANESE = 70;
const glib::UNICODE_SCRIPT_SAURASHTRA = 71;
const glib::UNICODE_SCRIPT_CHAM = 72;
const glib::UNICODE_SCRIPT_OL_CHIKI = 73;
const glib::UNICODE_SCRIPT_VAI = 74;
const glib::UNICODE_SCRIPT_CARIAN = 75;
const glib::UNICODE_SCRIPT_LYCIAN = 76;
const glib::UNICODE_SCRIPT_LYDIAN = 77;
const glib::UNICODE_CONTROL = 0;
const glib::UNICODE_FORMAT = 1;
const glib::UNICODE_UNASSIGNED = 2;
const glib::UNICODE_PRIVATE_USE = 3;
const glib::UNICODE_SURROGATE = 4;
const glib::UNICODE_LOWERCASE_LETTER = 5;
const glib::UNICODE_MODIFIER_LETTER = 6;
const glib::UNICODE_OTHER_LETTER = 7;
const glib::UNICODE_TITLECASE_LETTER = 8;
const glib::UNICODE_UPPERCASE_LETTER = 9;
const glib::UNICODE_COMBINING_MARK = 10;
const glib::UNICODE_ENCLOSING_MARK = 11;
const glib::UNICODE_NON_SPACING_MARK = 12;
const glib::UNICODE_DECIMAL_NUMBER = 13;
const glib::UNICODE_LETTER_NUMBER = 14;
const glib::UNICODE_OTHER_NUMBER = 15;
const glib::UNICODE_CONNECT_PUNCTUATION = 16;
const glib::UNICODE_DASH_PUNCTUATION = 17;
const glib::UNICODE_CLOSE_PUNCTUATION = 18;
const glib::UNICODE_FINAL_PUNCTUATION = 19;
const glib::UNICODE_INITIAL_PUNCTUATION = 20;
const glib::UNICODE_OTHER_PUNCTUATION = 21;
const glib::UNICODE_OPEN_PUNCTUATION = 22;
const glib::UNICODE_CURRENCY_SYMBOL = 23;
const glib::UNICODE_MODIFIER_SYMBOL = 24;
const glib::UNICODE_MATH_SYMBOL = 25;
const glib::UNICODE_OTHER_SYMBOL = 26;
const glib::UNICODE_LINE_SEPARATOR = 27;
const glib::UNICODE_PARAGRAPH_SEPARATOR = 28;
const glib::UNICODE_SPACE_SEPARATOR = 29;
const glib::USER_DIRECTORY_DESKTOP = 0;
const glib::USER_DIRECTORY_DOCUMENTS = 1;
const glib::USER_DIRECTORY_DOWNLOAD = 2;
const glib::USER_DIRECTORY_MUSIC = 3;
const glib::USER_DIRECTORY_PICTURES = 4;
const glib::USER_DIRECTORY_PUBLIC_SHARE = 5;
const glib::USER_DIRECTORY_TEMPLATES = 6;
const glib::USER_DIRECTORY_VIDEOS = 7;
const glib::USER_N_DIRECTORIES = 8;
extern GArray* Pure_g_array_new(int, int, int) = array_new;
extern GArray* Pure_g_array_sized_new(int, int, int, int) = array_sized_new;
extern char* Pure_g_array_free(GArray*, int) = array_free;
extern GArray* Pure_g_array_append_vals(GArray*, void*, int) = array_append_vals;
extern GArray* Pure_g_array_prepend_vals(GArray*, void*, int) = array_prepend_vals;
extern GArray* Pure_g_array_insert_vals(GArray*, int, void*, int) = array_insert_vals;
extern GArray* Pure_g_array_set_size(GArray*, int) = array_set_size;
extern GArray* Pure_g_array_remove_index(GArray*, int) = array_remove_index;
extern GArray* Pure_g_array_remove_index_fast(GArray*, int) = array_remove_index_fast;
extern GArray* Pure_g_array_remove_range(GArray*, int, int) = array_remove_range;
extern void Pure_g_array_sort(GArray*, void*) = array_sort;
extern void Pure_g_array_sort_with_data(GArray*, void*, void*) = array_sort_with_data;
extern GPtrArray* Pure_g_ptr_array_new() = ptr_array_new;
extern GPtrArray* Pure_g_ptr_array_sized_new(int) = ptr_array_sized_new;
extern void** Pure_g_ptr_array_free(GPtrArray*, int) = ptr_array_free;
extern void Pure_g_ptr_array_set_size(GPtrArray*, int) = ptr_array_set_size;
extern void* Pure_g_ptr_array_remove_index(GPtrArray*, int) = ptr_array_remove_index;
extern void* Pure_g_ptr_array_remove_index_fast(GPtrArray*, int) = ptr_array_remove_index_fast;
extern int Pure_g_ptr_array_remove(GPtrArray*, void*) = ptr_array_remove;
extern int Pure_g_ptr_array_remove_fast(GPtrArray*, void*) = ptr_array_remove_fast;
extern void Pure_g_ptr_array_remove_range(GPtrArray*, int, int) = ptr_array_remove_range;
extern void Pure_g_ptr_array_add(GPtrArray*, void*) = ptr_array_add;
extern void Pure_g_ptr_array_sort(GPtrArray*, void*) = ptr_array_sort;
extern void Pure_g_ptr_array_sort_with_data(GPtrArray*, void*, void*) = ptr_array_sort_with_data;
extern void Pure_g_ptr_array_foreach(GPtrArray*, void*, void*) = ptr_array_foreach;
extern GByteArray* Pure_g_byte_array_new() = byte_array_new;
extern GByteArray* Pure_g_byte_array_sized_new(int) = byte_array_sized_new;
extern char* Pure_g_byte_array_free(GByteArray*, int) = byte_array_free;
extern GByteArray* Pure_g_byte_array_append(GByteArray*, char*, int) = byte_array_append;
extern GByteArray* Pure_g_byte_array_prepend(GByteArray*, char*, int) = byte_array_prepend;
extern GByteArray* Pure_g_byte_array_set_size(GByteArray*, int) = byte_array_set_size;
extern GByteArray* Pure_g_byte_array_remove_index(GByteArray*, int) = byte_array_remove_index;
extern GByteArray* Pure_g_byte_array_remove_index_fast(GByteArray*, int) = byte_array_remove_index_fast;
extern GByteArray* Pure_g_byte_array_remove_range(GByteArray*, int, int) = byte_array_remove_range;
extern void Pure_g_byte_array_sort(GByteArray*, void*) = byte_array_sort;
extern void Pure_g_byte_array_sort_with_data(GByteArray*, void*, void*) = byte_array_sort_with_data;
extern int Pure_g_quark_try_string(char*) = quark_try_string;
extern int Pure_g_quark_from_static_string(char*) = quark_from_static_string;
extern int Pure_g_quark_from_string(char*) = quark_from_string;
extern char* Pure_g_quark_to_string(int) = quark_to_string;
extern char* Pure_g_intern_string(char*) = intern_string;
extern char* Pure_g_intern_static_string(char*) = intern_static_string;
extern GError* Pure_g_error_new(int, int, char*) = error_new;
extern GError* Pure_g_error_new_literal(int, int, char*) = error_new_literal;
extern void Pure_g_error_free(GError*) = error_free;
extern GError* Pure_g_error_copy(GError*) = error_copy;
extern int Pure_g_error_matches(GError*, int, int) = error_matches;
extern void Pure_g_set_error(GError**, int, int, char*) = set_error;
extern void Pure_g_set_error_literal(GError**, int, int, char*) = set_error_literal;
extern void Pure_g_propagate_error(GError**, GError*) = propagate_error;
extern void Pure_g_clear_error(GError**) = clear_error;
extern void Pure_g_prefix_error(GError**, char*) = prefix_error;
extern void Pure_g_propagate_prefixed_error(GError**, GError*, char*) = propagate_prefixed_error;
extern char* Pure_g_get_user_name() = get_user_name;
extern char* Pure_g_get_real_name() = get_real_name;
extern char* Pure_g_get_home_dir() = get_home_dir;
extern char* Pure_g_get_tmp_dir() = get_tmp_dir;
extern char* Pure_g_get_host_name() = get_host_name;
extern char* Pure_g_get_prgname() = get_prgname;
extern void Pure_g_set_prgname(char*) = set_prgname;
extern char* Pure_g_get_application_name() = get_application_name;
extern void Pure_g_set_application_name(char*) = set_application_name;
extern char* Pure_g_get_user_data_dir() = get_user_data_dir;
extern char* Pure_g_get_user_config_dir() = get_user_config_dir;
extern char* Pure_g_get_user_cache_dir() = get_user_cache_dir;
extern char** Pure_g_get_system_data_dirs() = get_system_data_dirs;
extern char** Pure_g_get_system_config_dirs() = get_system_config_dirs;
extern char** Pure_g_get_language_names() = get_language_names;
extern char* Pure_g_get_user_special_dir(int) = get_user_special_dir;
extern int Pure_g_parse_debug_string(char*, GDebugKey*, int) = parse_debug_string;
extern int Pure_g_snprintf(char*, int, char*) = snprintf;
extern int Pure_g_vsnprintf(char*, int, char*, void*) = vsnprintf;
extern int Pure_g_path_is_absolute(char*) = path_is_absolute;
extern char* Pure_g_path_skip_root(char*) = path_skip_root;
extern char* Pure_g_basename(char*) = basename;
extern char* Pure_g_get_current_dir() = get_current_dir;
extern char* Pure_g_path_get_basename(char*) = path_get_basename;
extern char* Pure_g_path_get_dirname(char*) = path_get_dirname;
extern void Pure_g_nullify_pointer(void**) = nullify_pointer;
extern char* Pure_g_getenv(char*) = getenv;
extern int Pure_g_setenv(char*, char*, int) = setenv;
extern void Pure_g_unsetenv(char*) = unsetenv;
extern char** Pure_g_listenv() = listenv;
extern void Pure_g_atexit(void*) = atexit;
extern char* Pure_g_find_program_in_path(char*) = find_program_in_path;
extern int Pure_g_bit_nth_lsf(int, int) = bit_nth_lsf;
extern int Pure_g_bit_nth_msf(int, int) = bit_nth_msf;
extern int Pure_g_bit_storage(int) = bit_storage;
extern void Pure_g_trash_stack_push(GTrashStack**, void*) = trash_stack_push;
extern void* Pure_g_trash_stack_pop(GTrashStack**) = trash_stack_pop;
extern void* Pure_g_trash_stack_peek(GTrashStack**) = trash_stack_peek;
extern int Pure_g_trash_stack_height(GTrashStack**) = trash_stack_height;
extern char* Pure_glib_check_version(int, int, int) = lib_check_version;
extern int Pure_g_atomic_int_exchange_and_add(int*, int) = atomic_int_exchange_and_add;
extern void Pure_g_atomic_int_add(int*, int) = atomic_int_add;
extern int Pure_g_atomic_int_compare_and_exchange(int*, int, int) = atomic_int_compare_and_exchange;
extern int Pure_g_atomic_pointer_compare_and_exchange(void**, void*, void*) = atomic_pointer_compare_and_exchange;
extern int Pure_g_atomic_int_get(int*) = atomic_int_get;
extern void Pure_g_atomic_int_set(int*, int) = atomic_int_set;
extern void* Pure_g_atomic_pointer_get(void**) = atomic_pointer_get;
extern void Pure_g_atomic_pointer_set(void**, void*) = atomic_pointer_set;
extern int Pure_g_thread_error_quark() = thread_error_quark;
extern GMutex* Pure_g_static_mutex_get_mutex_impl(GMutex**) = static_mutex_get_mutex_impl;
extern GThread* Pure_g_thread_create_full(void*, void*, int, int, int, int, GError**) = thread_create_full;
extern GThread* Pure_g_thread_self() = thread_self;
extern void Pure_g_thread_exit(void*) = thread_exit;
extern void* Pure_g_thread_join(GThread*) = thread_join;
extern void Pure_g_thread_set_priority(GThread*, int) = thread_set_priority;
extern void Pure_g_static_mutex_init(GStaticMutex*) = static_mutex_init;
extern void Pure_g_static_mutex_free(GStaticMutex*) = static_mutex_free;
extern void Pure_g_static_private_init(GStaticPrivate*) = static_private_init;
extern void* Pure_g_static_private_get(GStaticPrivate*) = static_private_get;
extern void Pure_g_static_private_set(GStaticPrivate*, void*, void*) = static_private_set;
extern void Pure_g_static_private_free(GStaticPrivate*) = static_private_free;
extern void Pure_g_static_rec_mutex_init(GStaticRecMutex*) = static_rec_mutex_init;
extern void Pure_g_static_rec_mutex_lock(GStaticRecMutex*) = static_rec_mutex_lock;
extern int Pure_g_static_rec_mutex_trylock(GStaticRecMutex*) = static_rec_mutex_trylock;
extern void Pure_g_static_rec_mutex_unlock(GStaticRecMutex*) = static_rec_mutex_unlock;
extern void Pure_g_static_rec_mutex_lock_full(GStaticRecMutex*, int) = static_rec_mutex_lock_full;
extern int Pure_g_static_rec_mutex_unlock_full(GStaticRecMutex*) = static_rec_mutex_unlock_full;
extern void Pure_g_static_rec_mutex_free(GStaticRecMutex*) = static_rec_mutex_free;
extern void Pure_g_static_rw_lock_init(GStaticRWLock*) = static_rw_lock_init;
extern void Pure_g_static_rw_lock_reader_lock(GStaticRWLock*) = static_rw_lock_reader_lock;
extern int Pure_g_static_rw_lock_reader_trylock(GStaticRWLock*) = static_rw_lock_reader_trylock;
extern void Pure_g_static_rw_lock_reader_unlock(GStaticRWLock*) = static_rw_lock_reader_unlock;
extern void Pure_g_static_rw_lock_writer_lock(GStaticRWLock*) = static_rw_lock_writer_lock;
extern int Pure_g_static_rw_lock_writer_trylock(GStaticRWLock*) = static_rw_lock_writer_trylock;
extern void Pure_g_static_rw_lock_writer_unlock(GStaticRWLock*) = static_rw_lock_writer_unlock;
extern void Pure_g_static_rw_lock_free(GStaticRWLock*) = static_rw_lock_free;
extern void Pure_g_thread_foreach(void*, void*) = thread_foreach;
extern void* Pure_g_once_impl(GOnce*, void*, void*) = once_impl;
extern int Pure_g_once_init_enter(int*) = once_init_enter;
extern int Pure_g_once_init_enter_impl(int*) = once_init_enter_impl;
extern void Pure_g_once_init_leave(int*, int) = once_init_leave;
extern GAsyncQueue* Pure_g_async_queue_new() = async_queue_new;
extern GAsyncQueue* Pure_g_async_queue_new_full(void*) = async_queue_new_full;
extern void Pure_g_async_queue_lock(GAsyncQueue*) = async_queue_lock;
extern void Pure_g_async_queue_unlock(GAsyncQueue*) = async_queue_unlock;
extern GAsyncQueue* Pure_g_async_queue_ref(GAsyncQueue*) = async_queue_ref;
extern void Pure_g_async_queue_unref(GAsyncQueue*) = async_queue_unref;
extern void Pure_g_async_queue_ref_unlocked(GAsyncQueue*) = async_queue_ref_unlocked;
extern void Pure_g_async_queue_unref_and_unlock(GAsyncQueue*) = async_queue_unref_and_unlock;
extern void Pure_g_async_queue_push(GAsyncQueue*, void*) = async_queue_push;
extern void Pure_g_async_queue_push_unlocked(GAsyncQueue*, void*) = async_queue_push_unlocked;
extern void Pure_g_async_queue_push_sorted(GAsyncQueue*, void*, void*, void*) = async_queue_push_sorted;
extern void Pure_g_async_queue_push_sorted_unlocked(GAsyncQueue*, void*, void*, void*) = async_queue_push_sorted_unlocked;
extern void* Pure_g_async_queue_pop(GAsyncQueue*) = async_queue_pop;
extern void* Pure_g_async_queue_pop_unlocked(GAsyncQueue*) = async_queue_pop_unlocked;
extern void* Pure_g_async_queue_try_pop(GAsyncQueue*) = async_queue_try_pop;
extern void* Pure_g_async_queue_try_pop_unlocked(GAsyncQueue*) = async_queue_try_pop_unlocked;
extern void* Pure_g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*) = async_queue_timed_pop;
extern void* Pure_g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*) = async_queue_timed_pop_unlocked;
extern int Pure_g_async_queue_length(GAsyncQueue*) = async_queue_length;
extern int Pure_g_async_queue_length_unlocked(GAsyncQueue*) = async_queue_length_unlocked;
extern void Pure_g_async_queue_sort(GAsyncQueue*, void*, void*) = async_queue_sort;
extern void Pure_g_async_queue_sort_unlocked(GAsyncQueue*, void*, void*) = async_queue_sort_unlocked;
extern void Pure_g_on_error_query(char*) = on_error_query;
extern void Pure_g_on_error_stack_trace(char*) = on_error_stack_trace;
extern int Pure_g_base64_encode_step(char*, int, int, char*, int*, int*) = base64_encode_step;
extern int Pure_g_base64_encode_close(int, char*, int*, int*) = base64_encode_close;
extern char* Pure_g_base64_encode(char*, int) = base64_encode;
extern int Pure_g_base64_decode_step(char*, int, char*, int*, int*) = base64_decode_step;
extern char* Pure_g_base64_decode(char*, int*) = base64_decode;
extern int Pure_g_bookmark_file_error_quark() = bookmark_file_error_quark;
extern GBookmarkFile* Pure_g_bookmark_file_new() = bookmark_file_new;
extern void Pure_g_bookmark_file_free(GBookmarkFile*) = bookmark_file_free;
extern int Pure_g_bookmark_file_load_from_file(GBookmarkFile*, char*, GError**) = bookmark_file_load_from_file;
extern int Pure_g_bookmark_file_load_from_data(GBookmarkFile*, char*, int, GError**) = bookmark_file_load_from_data;
extern int Pure_g_bookmark_file_load_from_data_dirs(GBookmarkFile*, char*, char**, GError**) = bookmark_file_load_from_data_dirs;
extern char* Pure_g_bookmark_file_to_data(GBookmarkFile*, int*, GError**) = bookmark_file_to_data;
extern int Pure_g_bookmark_file_to_file(GBookmarkFile*, char*, GError**) = bookmark_file_to_file;
extern void Pure_g_bookmark_file_set_title(GBookmarkFile*, char*, char*) = bookmark_file_set_title;
extern char* Pure_g_bookmark_file_get_title(GBookmarkFile*, char*, GError**) = bookmark_file_get_title;
extern void Pure_g_bookmark_file_set_description(GBookmarkFile*, char*, char*) = bookmark_file_set_description;
extern char* Pure_g_bookmark_file_get_description(GBookmarkFile*, char*, GError**) = bookmark_file_get_description;
extern void Pure_g_bookmark_file_set_mime_type(GBookmarkFile*, char*, char*) = bookmark_file_set_mime_type;
extern char* Pure_g_bookmark_file_get_mime_type(GBookmarkFile*, char*, GError**) = bookmark_file_get_mime_type;
extern void Pure_g_bookmark_file_set_groups(GBookmarkFile*, char*, char**, int) = bookmark_file_set_groups;
extern void Pure_g_bookmark_file_add_group(GBookmarkFile*, char*, char*) = bookmark_file_add_group;
extern int Pure_g_bookmark_file_has_group(GBookmarkFile*, char*, char*, GError**) = bookmark_file_has_group;
extern char** Pure_g_bookmark_file_get_groups(GBookmarkFile*, char*, int*, GError**) = bookmark_file_get_groups;
extern void Pure_g_bookmark_file_add_application(GBookmarkFile*, char*, char*, char*) = bookmark_file_add_application;
extern int Pure_g_bookmark_file_has_application(GBookmarkFile*, char*, char*, GError**) = bookmark_file_has_application;
extern char** Pure_g_bookmark_file_get_applications(GBookmarkFile*, char*, int*, GError**) = bookmark_file_get_applications;
extern int Pure_g_bookmark_file_set_app_info(GBookmarkFile*, char*, char*, char*, int, int, GError**) = bookmark_file_set_app_info;
extern int Pure_g_bookmark_file_get_app_info(GBookmarkFile*, char*, char*, char**, int*, int*, GError**) = bookmark_file_get_app_info;
extern void Pure_g_bookmark_file_set_is_private(GBookmarkFile*, char*, int) = bookmark_file_set_is_private;
extern int Pure_g_bookmark_file_get_is_private(GBookmarkFile*, char*, GError**) = bookmark_file_get_is_private;
extern void Pure_g_bookmark_file_set_icon(GBookmarkFile*, char*, char*, char*) = bookmark_file_set_icon;
extern int Pure_g_bookmark_file_get_icon(GBookmarkFile*, char*, char**, char**, GError**) = bookmark_file_get_icon;
extern void Pure_g_bookmark_file_set_added(GBookmarkFile*, char*, int) = bookmark_file_set_added;
extern int Pure_g_bookmark_file_get_added(GBookmarkFile*, char*, GError**) = bookmark_file_get_added;
extern void Pure_g_bookmark_file_set_modified(GBookmarkFile*, char*, int) = bookmark_file_set_modified;
extern int Pure_g_bookmark_file_get_modified(GBookmarkFile*, char*, GError**) = bookmark_file_get_modified;
extern void Pure_g_bookmark_file_set_visited(GBookmarkFile*, char*, int) = bookmark_file_set_visited;
extern int Pure_g_bookmark_file_get_visited(GBookmarkFile*, char*, GError**) = bookmark_file_get_visited;
extern int Pure_g_bookmark_file_has_item(GBookmarkFile*, char*) = bookmark_file_has_item;
extern int Pure_g_bookmark_file_get_size(GBookmarkFile*) = bookmark_file_get_size;
extern char** Pure_g_bookmark_file_get_uris(GBookmarkFile*, int*) = bookmark_file_get_uris;
extern int Pure_g_bookmark_file_remove_group(GBookmarkFile*, char*, char*, GError**) = bookmark_file_remove_group;
extern int Pure_g_bookmark_file_remove_application(GBookmarkFile*, char*, char*, GError**) = bookmark_file_remove_application;
extern int Pure_g_bookmark_file_remove_item(GBookmarkFile*, char*, GError**) = bookmark_file_remove_item;
extern int Pure_g_bookmark_file_move_item(GBookmarkFile*, char*, char*, GError**) = bookmark_file_move_item;
extern void* Pure_g_slice_alloc(int) = slice_alloc;
extern void* Pure_g_slice_alloc0(int) = slice_alloc0;
extern void* Pure_g_slice_copy(int, void*) = slice_copy;
extern void Pure_g_slice_free1(int, void*) = slice_free1;
extern void Pure_g_slice_free_chain_with_offset(int, void*, int) = slice_free_chain_with_offset;
extern void Pure_g_slice_set_config(int, int) = slice_set_config;
extern int Pure_g_slice_get_config(int) = slice_get_config;
extern int* Pure_g_slice_get_config_state(int, int, int*) = slice_get_config_state;
extern void* Pure_g_malloc(int) = malloc;
extern void* Pure_g_malloc0(int) = malloc0;
extern void* Pure_g_realloc(void*, int) = realloc;
extern void Pure_g_free(void*) = free;
extern void* Pure_g_try_malloc(int) = try_malloc;
extern void* Pure_g_try_malloc0(int) = try_malloc0;
extern void* Pure_g_try_realloc(void*, int) = try_realloc;
extern void Pure_g_mem_set_vtable(GMemVTable*) = mem_set_vtable;
extern int Pure_g_mem_is_system_malloc() = mem_is_system_malloc;
extern void Pure_g_mem_profile() = mem_profile;
extern GMemChunk* Pure_g_mem_chunk_new(char*, int, int, int) = mem_chunk_new;
extern void Pure_g_mem_chunk_destroy(GMemChunk*) = mem_chunk_destroy;
extern void* Pure_g_mem_chunk_alloc(GMemChunk*) = mem_chunk_alloc;
extern void* Pure_g_mem_chunk_alloc0(GMemChunk*) = mem_chunk_alloc0;
extern void Pure_g_mem_chunk_free(GMemChunk*, void*) = mem_chunk_free;
extern void Pure_g_mem_chunk_clean(GMemChunk*) = mem_chunk_clean;
extern void Pure_g_mem_chunk_reset(GMemChunk*) = mem_chunk_reset;
extern void Pure_g_mem_chunk_print(GMemChunk*) = mem_chunk_print;
extern void Pure_g_mem_chunk_info() = mem_chunk_info;
extern void Pure_g_blow_chunks() = blow_chunks;
extern GAllocator* Pure_g_allocator_new(char*, int) = allocator_new;
extern void Pure_g_allocator_free(GAllocator*) = allocator_free;
extern GList* Pure_g_list_alloc() = list_alloc;
extern void Pure_g_list_free(GList*) = list_free;
extern void Pure_g_list_free_1(GList*) = list_free_1;
extern GList* Pure_g_list_append(GList*, void*) = list_append;
extern GList* Pure_g_list_prepend(GList*, void*) = list_prepend;
extern GList* Pure_g_list_insert(GList*, void*, int) = list_insert;
extern GList* Pure_g_list_insert_sorted(GList*, void*, void*) = list_insert_sorted;
extern GList* Pure_g_list_insert_sorted_with_data(GList*, void*, void*, void*) = list_insert_sorted_with_data;
extern GList* Pure_g_list_insert_before(GList*, GList*, void*) = list_insert_before;
extern GList* Pure_g_list_concat(GList*, GList*) = list_concat;
extern GList* Pure_g_list_remove(GList*, void*) = list_remove;
extern GList* Pure_g_list_remove_all(GList*, void*) = list_remove_all;
extern GList* Pure_g_list_remove_link(GList*, GList*) = list_remove_link;
extern GList* Pure_g_list_delete_link(GList*, GList*) = list_delete_link;
extern GList* Pure_g_list_reverse(GList*) = list_reverse;
extern GList* Pure_g_list_copy(GList*) = list_copy;
extern GList* Pure_g_list_nth(GList*, int) = list_nth;
extern GList* Pure_g_list_nth_prev(GList*, int) = list_nth_prev;
extern GList* Pure_g_list_find(GList*, void*) = list_find;
extern GList* Pure_g_list_find_custom(GList*, void*, void*) = list_find_custom;
extern int Pure_g_list_position(GList*, GList*) = list_position;
extern int Pure_g_list_index(GList*, void*) = list_index;
extern GList* Pure_g_list_last(GList*) = list_last;
extern GList* Pure_g_list_first(GList*) = list_first;
extern int Pure_g_list_length(GList*) = list_length;
extern void Pure_g_list_foreach(GList*, void*, void*) = list_foreach;
extern GList* Pure_g_list_sort(GList*, void*) = list_sort;
extern GList* Pure_g_list_sort_with_data(GList*, void*, void*) = list_sort_with_data;
extern void* Pure_g_list_nth_data(GList*, int) = list_nth_data;
extern void Pure_g_list_push_allocator(void*) = list_push_allocator;
extern void Pure_g_list_pop_allocator() = list_pop_allocator;
extern GCache* Pure_g_cache_new(void*, void*, void*, void*, void*, void*, void*) = cache_new;
extern void Pure_g_cache_destroy(GCache*) = cache_destroy;
extern void* Pure_g_cache_insert(GCache*, void*) = cache_insert;
extern void Pure_g_cache_remove(GCache*, void*) = cache_remove;
extern void Pure_g_cache_key_foreach(GCache*, void*, void*) = cache_key_foreach;
extern void Pure_g_cache_value_foreach(GCache*, void*, void*) = cache_value_foreach;
extern int Pure_g_checksum_type_get_length(int) = checksum_type_get_length;
extern GChecksum* Pure_g_checksum_new(int) = checksum_new;
extern void Pure_g_checksum_reset(GChecksum*) = checksum_reset;
extern GChecksum* Pure_g_checksum_copy(GChecksum*) = checksum_copy;
extern void Pure_g_checksum_free(GChecksum*) = checksum_free;
extern void Pure_g_checksum_update(GChecksum*, char*, int) = checksum_update;
extern char* Pure_g_checksum_get_string(GChecksum*) = checksum_get_string;
extern void Pure_g_checksum_get_digest(GChecksum*, char*, int*) = checksum_get_digest;
extern char* Pure_g_compute_checksum_for_data(int, char*, int) = compute_checksum_for_data;
extern char* Pure_g_compute_checksum_for_string(int, char*, int) = compute_checksum_for_string;
extern GCompletion* Pure_g_completion_new(void*) = completion_new;
extern void Pure_g_completion_add_items(GCompletion*, GList*) = completion_add_items;
extern void Pure_g_completion_remove_items(GCompletion*, GList*) = completion_remove_items;
extern void Pure_g_completion_clear_items(GCompletion*) = completion_clear_items;
extern GList* Pure_g_completion_complete(GCompletion*, char*, char**) = completion_complete;
extern GList* Pure_g_completion_complete_utf8(GCompletion*, char*, char**) = completion_complete_utf8;
extern void Pure_g_completion_set_compare(GCompletion*, void*) = completion_set_compare;
extern void Pure_g_completion_free(GCompletion*) = completion_free;
extern int Pure_g_convert_error_quark() = convert_error_quark;
extern void/*struct _GIConv*/* Pure_g_iconv_open(char*, char*) = iconv_open;
extern int Pure_g_iconv(void/*struct _GIConv*/*, char**, int*, char**, int*) = iconv;
extern int Pure_g_iconv_close(void/*struct _GIConv*/*) = iconv_close;
extern char* Pure_g_convert(char*, int, char*, char*, int*, int*, GError**) = convert;
extern char* Pure_g_convert_with_iconv(char*, int, void/*struct _GIConv*/*, int*, int*, GError**) = convert_with_iconv;
extern char* Pure_g_convert_with_fallback(char*, int, char*, char*, char*, int*, int*, GError**) = convert_with_fallback;
extern char* Pure_g_locale_to_utf8(char*, int, int*, int*, GError**) = locale_to_utf8;
extern char* Pure_g_locale_from_utf8(char*, int, int*, int*, GError**) = locale_from_utf8;
extern char* Pure_g_filename_to_utf8(char*, int, int*, int*, GError**) = filename_to_utf8;
extern char* Pure_g_filename_from_utf8(char*, int, int*, int*, GError**) = filename_from_utf8;
extern char* Pure_g_filename_from_uri(char*, char**, GError**) = filename_from_uri;
extern char* Pure_g_filename_to_uri(char*, char*, GError**) = filename_to_uri;
extern char* Pure_g_filename_display_name(char*) = filename_display_name;
extern int Pure_g_get_filename_charsets(char***) = get_filename_charsets;
extern char* Pure_g_filename_display_basename(char*) = filename_display_basename;
extern char** Pure_g_uri_list_extract_uris(char*) = uri_list_extract_uris;
extern void Pure_g_datalist_init(GData**) = datalist_init;
extern void Pure_g_datalist_clear(GData**) = datalist_clear;
extern void* Pure_g_datalist_id_get_data(GData**, int) = datalist_id_get_data;
extern void Pure_g_datalist_id_set_data_full(GData**, int, void*, void*) = datalist_id_set_data_full;
extern void* Pure_g_datalist_id_remove_no_notify(GData**, int) = datalist_id_remove_no_notify;
extern void Pure_g_datalist_foreach(GData**, void*, void*) = datalist_foreach;
extern void Pure_g_datalist_set_flags(GData**, int) = datalist_set_flags;
extern void Pure_g_datalist_unset_flags(GData**, int) = datalist_unset_flags;
extern int Pure_g_datalist_get_flags(GData**) = datalist_get_flags;
extern void Pure_g_dataset_destroy(void*) = dataset_destroy;
extern void* Pure_g_dataset_id_get_data(void*, int) = dataset_id_get_data;
extern void Pure_g_dataset_id_set_data_full(void*, int, void*, void*) = dataset_id_set_data_full;
extern void* Pure_g_dataset_id_remove_no_notify(void*, int) = dataset_id_remove_no_notify;
extern void Pure_g_dataset_foreach(void*, void*, void*) = dataset_foreach;
extern GDate* Pure_g_date_new() = date_new;
extern GDate* Pure_g_date_new_dmy(char, int, short) = date_new_dmy;
extern GDate* Pure_g_date_new_julian(int) = date_new_julian;
extern void Pure_g_date_free(GDate*) = date_free;
extern int Pure_g_date_valid(GDate*) = date_valid;
extern int Pure_g_date_valid_day(char) = date_valid_day;
extern int Pure_g_date_valid_month(int) = date_valid_month;
extern int Pure_g_date_valid_year(short) = date_valid_year;
extern int Pure_g_date_valid_weekday(int) = date_valid_weekday;
extern int Pure_g_date_valid_julian(int) = date_valid_julian;
extern int Pure_g_date_valid_dmy(char, int, short) = date_valid_dmy;
extern int Pure_g_date_get_weekday(GDate*) = date_get_weekday;
extern int Pure_g_date_get_month(GDate*) = date_get_month;
extern short Pure_g_date_get_year(GDate*) = date_get_year;
extern char Pure_g_date_get_day(GDate*) = date_get_day;
extern int Pure_g_date_get_julian(GDate*) = date_get_julian;
extern int Pure_g_date_get_day_of_year(GDate*) = date_get_day_of_year;
extern int Pure_g_date_get_monday_week_of_year(GDate*) = date_get_monday_week_of_year;
extern int Pure_g_date_get_sunday_week_of_year(GDate*) = date_get_sunday_week_of_year;
extern int Pure_g_date_get_iso8601_week_of_year(GDate*) = date_get_iso8601_week_of_year;
extern void Pure_g_date_clear(GDate*, int) = date_clear;
extern void Pure_g_date_set_parse(GDate*, char*) = date_set_parse;
extern void Pure_g_date_set_time_t(GDate*, int) = date_set_time_t;
extern void Pure_g_date_set_time_val(GDate*, GTimeVal*) = date_set_time_val;
extern void Pure_g_date_set_time(GDate*, int) = date_set_time;
extern void Pure_g_date_set_month(GDate*, int) = date_set_month;
extern void Pure_g_date_set_day(GDate*, char) = date_set_day;
extern void Pure_g_date_set_year(GDate*, short) = date_set_year;
extern void Pure_g_date_set_dmy(GDate*, char, int, short) = date_set_dmy;
extern void Pure_g_date_set_julian(GDate*, int) = date_set_julian;
extern int Pure_g_date_is_first_of_month(GDate*) = date_is_first_of_month;
extern int Pure_g_date_is_last_of_month(GDate*) = date_is_last_of_month;
extern void Pure_g_date_add_days(GDate*, int) = date_add_days;
extern void Pure_g_date_subtract_days(GDate*, int) = date_subtract_days;
extern void Pure_g_date_add_months(GDate*, int) = date_add_months;
extern void Pure_g_date_subtract_months(GDate*, int) = date_subtract_months;
extern void Pure_g_date_add_years(GDate*, int) = date_add_years;
extern void Pure_g_date_subtract_years(GDate*, int) = date_subtract_years;
extern int Pure_g_date_is_leap_year(short) = date_is_leap_year;
extern char Pure_g_date_get_days_in_month(int, short) = date_get_days_in_month;
extern char Pure_g_date_get_monday_weeks_in_year(short) = date_get_monday_weeks_in_year;
extern char Pure_g_date_get_sunday_weeks_in_year(short) = date_get_sunday_weeks_in_year;
extern int Pure_g_date_days_between(GDate*, GDate*) = date_days_between;
extern int Pure_g_date_compare(GDate*, GDate*) = date_compare;
extern void Pure_g_date_to_struct_tm(GDate*, void/*struct tm*/*) = date_to_struct_tm;
extern void Pure_g_date_clamp(GDate*, GDate*, GDate*) = date_clamp;
extern void Pure_g_date_order(GDate*, GDate*) = date_order;
extern int Pure_g_date_strftime(char*, int, char*, GDate*) = date_strftime;
extern GDir* Pure_g_dir_open(char*, int, GError**) = dir_open;
extern char* Pure_g_dir_read_name(GDir*) = dir_read_name;
extern void Pure_g_dir_rewind(GDir*) = dir_rewind;
extern void Pure_g_dir_close(GDir*) = dir_close;
extern int Pure_g_file_error_quark() = file_error_quark;
extern int Pure_g_file_error_from_errno(int) = file_error_from_errno;
extern int Pure_g_file_test(char*, int) = file_test;
extern int Pure_g_file_get_contents(char*, char**, int*, GError**) = file_get_contents;
extern int Pure_g_file_set_contents(char*, char*, int, GError**) = file_set_contents;
extern char* Pure_g_file_read_link(char*, GError**) = file_read_link;
extern int Pure_g_mkstemp(char*) = mkstemp;
extern int Pure_g_file_open_tmp(char*, char**, GError**) = file_open_tmp;
extern char* Pure_g_format_size_for_display(int) = format_size_for_display;
extern char* Pure_g_build_path(char*, char*) = build_path;
extern char* Pure_g_build_pathv(char*, char**) = build_pathv;
extern char* Pure_g_build_filename(char*) = build_filename;
extern char* Pure_g_build_filenamev(char**) = build_filenamev;
extern int Pure_g_mkdir_with_parents(char*, int) = mkdir_with_parents;
extern GHashTable* Pure_g_hash_table_new(void*, void*) = hash_table_new;
extern GHashTable* Pure_g_hash_table_new_full(void*, void*, void*, void*) = hash_table_new_full;
extern void Pure_g_hash_table_destroy(GHashTable*) = hash_table_destroy;
extern void Pure_g_hash_table_insert(GHashTable*, void*, void*) = hash_table_insert;
extern void Pure_g_hash_table_replace(GHashTable*, void*, void*) = hash_table_replace;
extern int Pure_g_hash_table_remove(GHashTable*, void*) = hash_table_remove;
extern void Pure_g_hash_table_remove_all(GHashTable*) = hash_table_remove_all;
extern int Pure_g_hash_table_steal(GHashTable*, void*) = hash_table_steal;
extern void Pure_g_hash_table_steal_all(GHashTable*) = hash_table_steal_all;
extern void* Pure_g_hash_table_lookup(GHashTable*, void*) = hash_table_lookup;
extern int Pure_g_hash_table_lookup_extended(GHashTable*, void*, void**, void**) = hash_table_lookup_extended;
extern void Pure_g_hash_table_foreach(GHashTable*, void*, void*) = hash_table_foreach;
extern void* Pure_g_hash_table_find(GHashTable*, void*, void*) = hash_table_find;
extern int Pure_g_hash_table_foreach_remove(GHashTable*, void*, void*) = hash_table_foreach_remove;
extern int Pure_g_hash_table_foreach_steal(GHashTable*, void*, void*) = hash_table_foreach_steal;
extern int Pure_g_hash_table_size(GHashTable*) = hash_table_size;
extern GList* Pure_g_hash_table_get_keys(GHashTable*) = hash_table_get_keys;
extern GList* Pure_g_hash_table_get_values(GHashTable*) = hash_table_get_values;
extern void Pure_g_hash_table_iter_init(GHashTableIter*, GHashTable*) = hash_table_iter_init;
extern int Pure_g_hash_table_iter_next(GHashTableIter*, void**, void**) = hash_table_iter_next;
extern GHashTable* Pure_g_hash_table_iter_get_hash_table(GHashTableIter*) = hash_table_iter_get_hash_table;
extern void Pure_g_hash_table_iter_remove(GHashTableIter*) = hash_table_iter_remove;
extern void Pure_g_hash_table_iter_steal(GHashTableIter*) = hash_table_iter_steal;
extern GHashTable* Pure_g_hash_table_ref(GHashTable*) = hash_table_ref;
extern void Pure_g_hash_table_unref(GHashTable*) = hash_table_unref;
extern int Pure_g_str_equal(void*, void*) = str_equal;
extern int Pure_g_str_hash(void*) = str_hash;
extern int Pure_g_int_equal(void*, void*) = int_equal;
extern int Pure_g_int_hash(void*) = int_hash;
extern int Pure_g_direct_hash(void*) = direct_hash;
extern int Pure_g_direct_equal(void*, void*) = direct_equal;
extern void Pure_g_hook_list_init(GHookList*, int) = hook_list_init;
extern void Pure_g_hook_list_clear(GHookList*) = hook_list_clear;
extern GHook* Pure_g_hook_alloc(GHookList*) = hook_alloc;
extern void Pure_g_hook_free(GHookList*, GHook*) = hook_free;
extern GHook* Pure_g_hook_ref(GHookList*, GHook*) = hook_ref;
extern void Pure_g_hook_unref(GHookList*, GHook*) = hook_unref;
extern int Pure_g_hook_destroy(GHookList*, int) = hook_destroy;
extern void Pure_g_hook_destroy_link(GHookList*, GHook*) = hook_destroy_link;
extern void Pure_g_hook_prepend(GHookList*, GHook*) = hook_prepend;
extern void Pure_g_hook_insert_before(GHookList*, GHook*, GHook*) = hook_insert_before;
extern void Pure_g_hook_insert_sorted(GHookList*, GHook*, void*) = hook_insert_sorted;
extern GHook* Pure_g_hook_get(GHookList*, int) = hook_get;
extern GHook* Pure_g_hook_find(GHookList*, int, void*, void*) = hook_find;
extern GHook* Pure_g_hook_find_data(GHookList*, int, void*) = hook_find_data;
extern GHook* Pure_g_hook_find_func(GHookList*, int, void*) = hook_find_func;
extern GHook* Pure_g_hook_find_func_data(GHookList*, int, void*, void*) = hook_find_func_data;
extern GHook* Pure_g_hook_first_valid(GHookList*, int) = hook_first_valid;
extern GHook* Pure_g_hook_next_valid(GHookList*, GHook*, int) = hook_next_valid;
extern int Pure_g_hook_compare_ids(GHook*, GHook*) = hook_compare_ids;
extern void Pure_g_hook_list_invoke(GHookList*, int) = hook_list_invoke;
extern void Pure_g_hook_list_invoke_check(GHookList*, int) = hook_list_invoke_check;
extern void Pure_g_hook_list_marshal(GHookList*, int, void*, void*) = hook_list_marshal;
extern void Pure_g_hook_list_marshal_check(GHookList*, int, void*, void*) = hook_list_marshal_check;
extern GSList* Pure_g_slist_alloc() = slist_alloc;
extern void Pure_g_slist_free(GSList*) = slist_free;
extern void Pure_g_slist_free_1(GSList*) = slist_free_1;
extern GSList* Pure_g_slist_append(GSList*, void*) = slist_append;
extern GSList* Pure_g_slist_prepend(GSList*, void*) = slist_prepend;
extern GSList* Pure_g_slist_insert(GSList*, void*, int) = slist_insert;
extern GSList* Pure_g_slist_insert_sorted(GSList*, void*, void*) = slist_insert_sorted;
extern GSList* Pure_g_slist_insert_sorted_with_data(GSList*, void*, void*, void*) = slist_insert_sorted_with_data;
extern GSList* Pure_g_slist_insert_before(GSList*, GSList*, void*) = slist_insert_before;
extern GSList* Pure_g_slist_concat(GSList*, GSList*) = slist_concat;
extern GSList* Pure_g_slist_remove(GSList*, void*) = slist_remove;
extern GSList* Pure_g_slist_remove_all(GSList*, void*) = slist_remove_all;
extern GSList* Pure_g_slist_remove_link(GSList*, GSList*) = slist_remove_link;
extern GSList* Pure_g_slist_delete_link(GSList*, GSList*) = slist_delete_link;
extern GSList* Pure_g_slist_reverse(GSList*) = slist_reverse;
extern GSList* Pure_g_slist_copy(GSList*) = slist_copy;
extern GSList* Pure_g_slist_nth(GSList*, int) = slist_nth;
extern GSList* Pure_g_slist_find(GSList*, void*) = slist_find;
extern GSList* Pure_g_slist_find_custom(GSList*, void*, void*) = slist_find_custom;
extern int Pure_g_slist_position(GSList*, GSList*) = slist_position;
extern int Pure_g_slist_index(GSList*, void*) = slist_index;
extern GSList* Pure_g_slist_last(GSList*) = slist_last;
extern int Pure_g_slist_length(GSList*) = slist_length;
extern void Pure_g_slist_foreach(GSList*, void*, void*) = slist_foreach;
extern GSList* Pure_g_slist_sort(GSList*, void*) = slist_sort;
extern GSList* Pure_g_slist_sort_with_data(GSList*, void*, void*) = slist_sort_with_data;
extern void* Pure_g_slist_nth_data(GSList*, int) = slist_nth_data;
extern void Pure_g_slist_push_allocator(void*) = slist_push_allocator;
extern void Pure_g_slist_pop_allocator() = slist_pop_allocator;
extern GMainContext* Pure_g_main_context_new() = main_context_new;
extern GMainContext* Pure_g_main_context_ref(GMainContext*) = main_context_ref;
extern void Pure_g_main_context_unref(GMainContext*) = main_context_unref;
extern GMainContext* Pure_g_main_context_default() = main_context_default;
extern int Pure_g_main_context_iteration(GMainContext*, int) = main_context_iteration;
extern int Pure_g_main_context_pending(GMainContext*) = main_context_pending;
extern GSource* Pure_g_main_context_find_source_by_id(GMainContext*, int) = main_context_find_source_by_id;
extern GSource* Pure_g_main_context_find_source_by_user_data(GMainContext*, void*) = main_context_find_source_by_user_data;
extern GSource* Pure_g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, void*) = main_context_find_source_by_funcs_user_data;
extern void Pure_g_main_context_wakeup(GMainContext*) = main_context_wakeup;
extern int Pure_g_main_context_acquire(GMainContext*) = main_context_acquire;
extern void Pure_g_main_context_release(GMainContext*) = main_context_release;
extern int Pure_g_main_context_is_owner(GMainContext*) = main_context_is_owner;
extern int Pure_g_main_context_wait(GMainContext*, GCond*, GMutex*) = main_context_wait;
extern int Pure_g_main_context_prepare(GMainContext*, int*) = main_context_prepare;
extern int Pure_g_main_context_query(GMainContext*, int, int*, GPollFD*, int) = main_context_query;
extern int Pure_g_main_context_check(GMainContext*, int, GPollFD*, int) = main_context_check;
extern void Pure_g_main_context_dispatch(GMainContext*) = main_context_dispatch;
extern void Pure_g_main_context_set_poll_func(GMainContext*, void*) = main_context_set_poll_func;
extern void* Pure_g_main_context_get_poll_func(GMainContext*) = main_context_get_poll_func;
extern void Pure_g_main_context_add_poll(GMainContext*, GPollFD*, int) = main_context_add_poll;
extern void Pure_g_main_context_remove_poll(GMainContext*, GPollFD*) = main_context_remove_poll;
extern int Pure_g_main_depth() = main_depth;
extern GSource* Pure_g_main_current_source() = main_current_source;
extern GMainLoop* Pure_g_main_loop_new(GMainContext*, int) = main_loop_new;
extern void Pure_g_main_loop_run(GMainLoop*) = main_loop_run;
extern void Pure_g_main_loop_quit(GMainLoop*) = main_loop_quit;
extern GMainLoop* Pure_g_main_loop_ref(GMainLoop*) = main_loop_ref;
extern void Pure_g_main_loop_unref(GMainLoop*) = main_loop_unref;
extern int Pure_g_main_loop_is_running(GMainLoop*) = main_loop_is_running;
extern GMainContext* Pure_g_main_loop_get_context(GMainLoop*) = main_loop_get_context;
extern GSource* Pure_g_source_new(GSourceFuncs*, int) = source_new;
extern GSource* Pure_g_source_ref(GSource*) = source_ref;
extern void Pure_g_source_unref(GSource*) = source_unref;
extern int Pure_g_source_attach(GSource*, GMainContext*) = source_attach;
extern void Pure_g_source_destroy(GSource*) = source_destroy;
extern void Pure_g_source_set_priority(GSource*, int) = source_set_priority;
extern int Pure_g_source_get_priority(GSource*) = source_get_priority;
extern void Pure_g_source_set_can_recurse(GSource*, int) = source_set_can_recurse;
extern int Pure_g_source_get_can_recurse(GSource*) = source_get_can_recurse;
extern int Pure_g_source_get_id(GSource*) = source_get_id;
extern GMainContext* Pure_g_source_get_context(GSource*) = source_get_context;
extern void Pure_g_source_set_callback(GSource*, void*, void*, void*) = source_set_callback;
extern void Pure_g_source_set_funcs(GSource*, GSourceFuncs*) = source_set_funcs;
extern int Pure_g_source_is_destroyed(GSource*) = source_is_destroyed;
extern void Pure_g_source_set_callback_indirect(GSource*, void*, GSourceCallbackFuncs*) = source_set_callback_indirect;
extern void Pure_g_source_add_poll(GSource*, GPollFD*) = source_add_poll;
extern void Pure_g_source_remove_poll(GSource*, GPollFD*) = source_remove_poll;
extern void Pure_g_source_get_current_time(GSource*, GTimeVal*) = source_get_current_time;
extern GSource* Pure_g_idle_source_new() = idle_source_new;
extern GSource* Pure_g_child_watch_source_new(int) = child_watch_source_new;
extern GSource* Pure_g_timeout_source_new(int) = timeout_source_new;
extern GSource* Pure_g_timeout_source_new_seconds(int) = timeout_source_new_seconds;
extern void Pure_g_get_current_time(GTimeVal*) = get_current_time;
extern int Pure_g_source_remove(int) = source_remove;
extern int Pure_g_source_remove_by_user_data(void*) = source_remove_by_user_data;
extern int Pure_g_source_remove_by_funcs_user_data(GSourceFuncs*, void*) = source_remove_by_funcs_user_data;
extern int Pure_g_timeout_add_full(int, int, void*, void*, void*) = timeout_add_full;
extern int Pure_g_timeout_add(int, void*, void*) = timeout_add;
extern int Pure_g_timeout_add_seconds_full(int, int, void*, void*, void*) = timeout_add_seconds_full;
extern int Pure_g_timeout_add_seconds(int, void*, void*) = timeout_add_seconds;
extern int Pure_g_child_watch_add_full(int, int, void*, void*, void*) = child_watch_add_full;
extern int Pure_g_child_watch_add(int, void*, void*) = child_watch_add;
extern int Pure_g_idle_add(void*, void*) = idle_add;
extern int Pure_g_idle_add_full(int, void*, void*, void*) = idle_add_full;
extern int Pure_g_idle_remove_by_data(void*) = idle_remove_by_data;
extern int Pure_g_get_charset(char**) = get_charset;
extern int Pure_g_unichar_isalnum(int) = unichar_isalnum;
extern int Pure_g_unichar_isalpha(int) = unichar_isalpha;
extern int Pure_g_unichar_iscntrl(int) = unichar_iscntrl;
extern int Pure_g_unichar_isdigit(int) = unichar_isdigit;
extern int Pure_g_unichar_isgraph(int) = unichar_isgraph;
extern int Pure_g_unichar_islower(int) = unichar_islower;
extern int Pure_g_unichar_isprint(int) = unichar_isprint;
extern int Pure_g_unichar_ispunct(int) = unichar_ispunct;
extern int Pure_g_unichar_isspace(int) = unichar_isspace;
extern int Pure_g_unichar_isupper(int) = unichar_isupper;
extern int Pure_g_unichar_isxdigit(int) = unichar_isxdigit;
extern int Pure_g_unichar_istitle(int) = unichar_istitle;
extern int Pure_g_unichar_isdefined(int) = unichar_isdefined;
extern int Pure_g_unichar_iswide(int) = unichar_iswide;
extern int Pure_g_unichar_iswide_cjk(int) = unichar_iswide_cjk;
extern int Pure_g_unichar_iszerowidth(int) = unichar_iszerowidth;
extern int Pure_g_unichar_ismark(int) = unichar_ismark;
extern int Pure_g_unichar_toupper(int) = unichar_toupper;
extern int Pure_g_unichar_tolower(int) = unichar_tolower;
extern int Pure_g_unichar_totitle(int) = unichar_totitle;
extern int Pure_g_unichar_digit_value(int) = unichar_digit_value;
extern int Pure_g_unichar_xdigit_value(int) = unichar_xdigit_value;
extern int Pure_g_unichar_type(int) = unichar_type;
extern int Pure_g_unichar_break_type(int) = unichar_break_type;
extern int Pure_g_unichar_combining_class(int) = unichar_combining_class;
extern void Pure_g_unicode_canonical_ordering(int*, int) = unicode_canonical_ordering;
extern int* Pure_g_unicode_canonical_decomposition(int, int*) = unicode_canonical_decomposition;
extern int Pure_g_utf8_get_char(char*) = utf8_get_char;
extern int Pure_g_utf8_get_char_validated(char*, int) = utf8_get_char_validated;
extern char* Pure_g_utf8_offset_to_pointer(char*, int) = utf8_offset_to_pointer;
extern int Pure_g_utf8_pointer_to_offset(char*, char*) = utf8_pointer_to_offset;
extern char* Pure_g_utf8_prev_char(char*) = utf8_prev_char;
extern char* Pure_g_utf8_find_next_char(char*, char*) = utf8_find_next_char;
extern char* Pure_g_utf8_find_prev_char(char*, char*) = utf8_find_prev_char;
extern int Pure_g_utf8_strlen(char*, int) = utf8_strlen;
extern char* Pure_g_utf8_strncpy(char*, char*, int) = utf8_strncpy;
extern char* Pure_g_utf8_strchr(char*, int, int) = utf8_strchr;
extern char* Pure_g_utf8_strrchr(char*, int, int) = utf8_strrchr;
extern char* Pure_g_utf8_strreverse(char*, int) = utf8_strreverse;
extern short* Pure_g_utf8_to_utf16(char*, int, int*, int*, GError**) = utf8_to_utf16;
extern int* Pure_g_utf8_to_ucs4(char*, int, int*, int*, GError**) = utf8_to_ucs4;
extern int* Pure_g_utf8_to_ucs4_fast(char*, int, int*) = utf8_to_ucs4_fast;
extern int* Pure_g_utf16_to_ucs4(short*, int, int*, int*, GError**) = utf16_to_ucs4;
extern char* Pure_g_utf16_to_utf8(short*, int, int*, int*, GError**) = utf16_to_utf8;
extern short* Pure_g_ucs4_to_utf16(int*, int, int*, int*, GError**) = ucs4_to_utf16;
extern char* Pure_g_ucs4_to_utf8(int*, int, int*, int*, GError**) = ucs4_to_utf8;
extern int Pure_g_unichar_to_utf8(int, char*) = unichar_to_utf8;
extern int Pure_g_utf8_validate(char*, int, char**) = utf8_validate;
extern int Pure_g_unichar_validate(int) = unichar_validate;
extern char* Pure_g_utf8_strup(char*, int) = utf8_strup;
extern char* Pure_g_utf8_strdown(char*, int) = utf8_strdown;
extern char* Pure_g_utf8_casefold(char*, int) = utf8_casefold;
extern char* Pure_g_utf8_normalize(char*, int, int) = utf8_normalize;
extern int Pure_g_utf8_collate(char*, char*) = utf8_collate;
extern char* Pure_g_utf8_collate_key(char*, int) = utf8_collate_key;
extern char* Pure_g_utf8_collate_key_for_filename(char*, int) = utf8_collate_key_for_filename;
extern int Pure_g_unichar_get_mirror_char(int, int*) = unichar_get_mirror_char;
extern int Pure_g_unichar_get_script(int) = unichar_get_script;
extern GStringChunk* Pure_g_string_chunk_new(int) = string_chunk_new;
extern void Pure_g_string_chunk_free(GStringChunk*) = string_chunk_free;
extern void Pure_g_string_chunk_clear(GStringChunk*) = string_chunk_clear;
extern char* Pure_g_string_chunk_insert(GStringChunk*, char*) = string_chunk_insert;
extern char* Pure_g_string_chunk_insert_len(GStringChunk*, char*, int) = string_chunk_insert_len;
extern char* Pure_g_string_chunk_insert_const(GStringChunk*, char*) = string_chunk_insert_const;
extern GString* Pure_g_string_new(char*) = string_new;
extern GString* Pure_g_string_new_len(char*, int) = string_new_len;
extern GString* Pure_g_string_sized_new(int) = string_sized_new;
extern char* Pure_g_string_free(GString*, int) = string_free;
extern int Pure_g_string_equal(GString*, GString*) = string_equal;
extern int Pure_g_string_hash(GString*) = string_hash;
extern GString* Pure_g_string_assign(GString*, char*) = string_assign;
extern GString* Pure_g_string_truncate(GString*, int) = string_truncate;
extern GString* Pure_g_string_set_size(GString*, int) = string_set_size;
extern GString* Pure_g_string_insert_len(GString*, int, char*, int) = string_insert_len;
extern GString* Pure_g_string_append(GString*, char*) = string_append;
extern GString* Pure_g_string_append_len(GString*, char*, int) = string_append_len;
extern GString* Pure_g_string_append_c(GString*, char) = string_append_c;
extern GString* Pure_g_string_append_unichar(GString*, int) = string_append_unichar;
extern GString* Pure_g_string_prepend(GString*, char*) = string_prepend;
extern GString* Pure_g_string_prepend_c(GString*, char) = string_prepend_c;
extern GString* Pure_g_string_prepend_unichar(GString*, int) = string_prepend_unichar;
extern GString* Pure_g_string_prepend_len(GString*, char*, int) = string_prepend_len;
extern GString* Pure_g_string_insert(GString*, int, char*) = string_insert;
extern GString* Pure_g_string_insert_c(GString*, int, char) = string_insert_c;
extern GString* Pure_g_string_insert_unichar(GString*, int, int) = string_insert_unichar;
extern GString* Pure_g_string_overwrite(GString*, int, char*) = string_overwrite;
extern GString* Pure_g_string_overwrite_len(GString*, int, char*, int) = string_overwrite_len;
extern GString* Pure_g_string_erase(GString*, int, int) = string_erase;
extern GString* Pure_g_string_ascii_down(GString*) = string_ascii_down;
extern GString* Pure_g_string_ascii_up(GString*) = string_ascii_up;
extern void Pure_g_string_vprintf(GString*, char*, void*) = string_vprintf;
extern void Pure_g_string_printf(GString*, char*) = string_printf;
extern void Pure_g_string_append_vprintf(GString*, char*, void*) = string_append_vprintf;
extern void Pure_g_string_append_printf(GString*, char*) = string_append_printf;
extern GString* Pure_g_string_append_uri_escaped(GString*, char*, char*, int) = string_append_uri_escaped;
extern GString* Pure_g_string_down(GString*) = string_down;
extern GString* Pure_g_string_up(GString*) = string_up;
extern void Pure_g_io_channel_init(GIOChannel*) = io_channel_init;
extern GIOChannel* Pure_g_io_channel_ref(GIOChannel*) = io_channel_ref;
extern void Pure_g_io_channel_unref(GIOChannel*) = io_channel_unref;
extern int Pure_g_io_channel_read(GIOChannel*, char*, int, int*) = io_channel_read;
extern int Pure_g_io_channel_write(GIOChannel*, char*, int, int*) = io_channel_write;
extern int Pure_g_io_channel_seek(GIOChannel*, int, int) = io_channel_seek;
extern void Pure_g_io_channel_close(GIOChannel*) = io_channel_close;
extern int Pure_g_io_channel_shutdown(GIOChannel*, int, GError**) = io_channel_shutdown;
extern int Pure_g_io_add_watch_full(GIOChannel*, int, int, void*, void*, void*) = io_add_watch_full;
extern GSource* Pure_g_io_create_watch(GIOChannel*, int) = io_create_watch;
extern int Pure_g_io_add_watch(GIOChannel*, int, void*, void*) = io_add_watch;
extern void Pure_g_io_channel_set_buffer_size(GIOChannel*, int) = io_channel_set_buffer_size;
extern int Pure_g_io_channel_get_buffer_size(GIOChannel*) = io_channel_get_buffer_size;
extern int Pure_g_io_channel_get_buffer_condition(GIOChannel*) = io_channel_get_buffer_condition;
extern int Pure_g_io_channel_set_flags(GIOChannel*, int, GError**) = io_channel_set_flags;
extern int Pure_g_io_channel_get_flags(GIOChannel*) = io_channel_get_flags;
extern void Pure_g_io_channel_set_line_term(GIOChannel*, char*, int) = io_channel_set_line_term;
extern char* Pure_g_io_channel_get_line_term(GIOChannel*, int*) = io_channel_get_line_term;
extern void Pure_g_io_channel_set_buffered(GIOChannel*, int) = io_channel_set_buffered;
extern int Pure_g_io_channel_get_buffered(GIOChannel*) = io_channel_get_buffered;
extern int Pure_g_io_channel_set_encoding(GIOChannel*, char*, GError**) = io_channel_set_encoding;
extern char* Pure_g_io_channel_get_encoding(GIOChannel*) = io_channel_get_encoding;
extern void Pure_g_io_channel_set_close_on_unref(GIOChannel*, int) = io_channel_set_close_on_unref;
extern int Pure_g_io_channel_get_close_on_unref(GIOChannel*) = io_channel_get_close_on_unref;
extern int Pure_g_io_channel_flush(GIOChannel*, GError**) = io_channel_flush;
extern int Pure_g_io_channel_read_line(GIOChannel*, char**, int*, int*, GError**) = io_channel_read_line;
extern int Pure_g_io_channel_read_line_string(GIOChannel*, GString*, int*, GError**) = io_channel_read_line_string;
extern int Pure_g_io_channel_read_to_end(GIOChannel*, char**, int*, GError**) = io_channel_read_to_end;
extern int Pure_g_io_channel_read_chars(GIOChannel*, char*, int, int*, GError**) = io_channel_read_chars;
extern int Pure_g_io_channel_read_unichar(GIOChannel*, int*, GError**) = io_channel_read_unichar;
extern int Pure_g_io_channel_write_chars(GIOChannel*, char*, int, int*, GError**) = io_channel_write_chars;
extern int Pure_g_io_channel_write_unichar(GIOChannel*, int, GError**) = io_channel_write_unichar;
extern int Pure_g_io_channel_seek_position(GIOChannel*, int, int, GError**) = io_channel_seek_position;
extern GIOChannel* Pure_g_io_channel_new_file(char*, char*, GError**) = io_channel_new_file;
extern int Pure_g_io_channel_error_quark() = io_channel_error_quark;
extern int Pure_g_io_channel_error_from_errno(int) = io_channel_error_from_errno;
extern GIOChannel* Pure_g_io_channel_unix_new(int) = io_channel_unix_new;
extern int Pure_g_io_channel_unix_get_fd(GIOChannel*) = io_channel_unix_get_fd;
extern int Pure_g_key_file_error_quark() = key_file_error_quark;
extern GKeyFile* Pure_g_key_file_new() = key_file_new;
extern void Pure_g_key_file_free(GKeyFile*) = key_file_free;
extern void Pure_g_key_file_set_list_separator(GKeyFile*, char) = key_file_set_list_separator;
extern int Pure_g_key_file_load_from_file(GKeyFile*, char*, int, GError**) = key_file_load_from_file;
extern int Pure_g_key_file_load_from_data(GKeyFile*, char*, int, int, GError**) = key_file_load_from_data;
extern int Pure_g_key_file_load_from_dirs(GKeyFile*, char*, char**, char**, int, GError**) = key_file_load_from_dirs;
extern int Pure_g_key_file_load_from_data_dirs(GKeyFile*, char*, char**, int, GError**) = key_file_load_from_data_dirs;
extern char* Pure_g_key_file_to_data(GKeyFile*, int*, GError**) = key_file_to_data;
extern char* Pure_g_key_file_get_start_group(GKeyFile*) = key_file_get_start_group;
extern char** Pure_g_key_file_get_groups(GKeyFile*, int*) = key_file_get_groups;
extern char** Pure_g_key_file_get_keys(GKeyFile*, char*, int*, GError**) = key_file_get_keys;
extern int Pure_g_key_file_has_group(GKeyFile*, char*) = key_file_has_group;
extern int Pure_g_key_file_has_key(GKeyFile*, char*, char*, GError**) = key_file_has_key;
extern char* Pure_g_key_file_get_value(GKeyFile*, char*, char*, GError**) = key_file_get_value;
extern void Pure_g_key_file_set_value(GKeyFile*, char*, char*, char*) = key_file_set_value;
extern char* Pure_g_key_file_get_string(GKeyFile*, char*, char*, GError**) = key_file_get_string;
extern void Pure_g_key_file_set_string(GKeyFile*, char*, char*, char*) = key_file_set_string;
extern char* Pure_g_key_file_get_locale_string(GKeyFile*, char*, char*, char*, GError**) = key_file_get_locale_string;
extern void Pure_g_key_file_set_locale_string(GKeyFile*, char*, char*, char*, char*) = key_file_set_locale_string;
extern int Pure_g_key_file_get_boolean(GKeyFile*, char*, char*, GError**) = key_file_get_boolean;
extern void Pure_g_key_file_set_boolean(GKeyFile*, char*, char*, int) = key_file_set_boolean;
extern int Pure_g_key_file_get_integer(GKeyFile*, char*, char*, GError**) = key_file_get_integer;
extern void Pure_g_key_file_set_integer(GKeyFile*, char*, char*, int) = key_file_set_integer;
extern double Pure_g_key_file_get_double(GKeyFile*, char*, char*, GError**) = key_file_get_double;
extern void Pure_g_key_file_set_double(GKeyFile*, char*, char*, double) = key_file_set_double;
extern char** Pure_g_key_file_get_string_list(GKeyFile*, char*, char*, int*, GError**) = key_file_get_string_list;
extern void Pure_g_key_file_set_string_list(GKeyFile*, char*, char*, char**, int) = key_file_set_string_list;
extern char** Pure_g_key_file_get_locale_string_list(GKeyFile*, char*, char*, char*, int*, GError**) = key_file_get_locale_string_list;
extern void Pure_g_key_file_set_locale_string_list(GKeyFile*, char*, char*, char*, char**, int) = key_file_set_locale_string_list;
extern int* Pure_g_key_file_get_boolean_list(GKeyFile*, char*, char*, int*, GError**) = key_file_get_boolean_list;
extern void Pure_g_key_file_set_boolean_list(GKeyFile*, char*, char*, int*, int) = key_file_set_boolean_list;
extern int* Pure_g_key_file_get_integer_list(GKeyFile*, char*, char*, int*, GError**) = key_file_get_integer_list;
extern void Pure_g_key_file_set_double_list(GKeyFile*, char*, char*, double*, int) = key_file_set_double_list;
extern double* Pure_g_key_file_get_double_list(GKeyFile*, char*, char*, int*, GError**) = key_file_get_double_list;
extern void Pure_g_key_file_set_integer_list(GKeyFile*, char*, char*, int*, int) = key_file_set_integer_list;
extern int Pure_g_key_file_set_comment(GKeyFile*, char*, char*, char*, GError**) = key_file_set_comment;
extern char* Pure_g_key_file_get_comment(GKeyFile*, char*, char*, GError**) = key_file_get_comment;
extern int Pure_g_key_file_remove_comment(GKeyFile*, char*, char*, GError**) = key_file_remove_comment;
extern int Pure_g_key_file_remove_key(GKeyFile*, char*, char*, GError**) = key_file_remove_key;
extern int Pure_g_key_file_remove_group(GKeyFile*, char*, GError**) = key_file_remove_group;
extern GMappedFile* Pure_g_mapped_file_new(char*, int, GError**) = mapped_file_new;
extern int Pure_g_mapped_file_get_length(GMappedFile*) = mapped_file_get_length;
extern char* Pure_g_mapped_file_get_contents(GMappedFile*) = mapped_file_get_contents;
extern void Pure_g_mapped_file_free(GMappedFile*) = mapped_file_free;
extern int Pure_g_markup_error_quark() = markup_error_quark;
extern GMarkupParseContext* Pure_g_markup_parse_context_new(GMarkupParser*, int, void*, void*) = markup_parse_context_new;
extern void Pure_g_markup_parse_context_free(GMarkupParseContext*) = markup_parse_context_free;
extern int Pure_g_markup_parse_context_parse(GMarkupParseContext*, char*, int, GError**) = markup_parse_context_parse;
extern void Pure_g_markup_parse_context_push(GMarkupParseContext*, GMarkupParser*, void*) = markup_parse_context_push;
extern void* Pure_g_markup_parse_context_pop(GMarkupParseContext*) = markup_parse_context_pop;
extern int Pure_g_markup_parse_context_end_parse(GMarkupParseContext*, GError**) = markup_parse_context_end_parse;
extern char* Pure_g_markup_parse_context_get_element(GMarkupParseContext*) = markup_parse_context_get_element;
extern GSList* Pure_g_markup_parse_context_get_element_stack(GMarkupParseContext*) = markup_parse_context_get_element_stack;
extern void Pure_g_markup_parse_context_get_position(GMarkupParseContext*, int*, int*) = markup_parse_context_get_position;
extern void* Pure_g_markup_parse_context_get_user_data(GMarkupParseContext*) = markup_parse_context_get_user_data;
extern char* Pure_g_markup_escape_text(char*, int) = markup_escape_text;
extern char* Pure_g_markup_printf_escaped(char*) = markup_printf_escaped;
extern char* Pure_g_markup_vprintf_escaped(char*, void*) = markup_vprintf_escaped;
extern int Pure_g_markup_collect_attributes(char*, char**, char**, GError**, int, char*) = markup_collect_attributes;
extern int Pure_g_printf_string_upper_bound(char*, void*) = printf_string_upper_bound;
extern int Pure_g_log_set_handler(char*, int, void*, void*) = log_set_handler;
extern void Pure_g_log_remove_handler(char*, int) = log_remove_handler;
extern void Pure_g_log_default_handler(char*, int, char*, void*) = log_default_handler;
extern void* Pure_g_log_set_default_handler(void*, void*) = log_set_default_handler;
extern void Pure_g_log(char*, int, char*) = log;
extern void Pure_g_logv(char*, int, char*, void*) = logv;
extern int Pure_g_log_set_fatal_mask(char*, int) = log_set_fatal_mask;
extern int Pure_g_log_set_always_fatal(int) = log_set_always_fatal;
extern void Pure_g_return_if_fail_warning(char*, char*, char*) = return_if_fail_warning;
extern void Pure_g_warn_message(char*, char*, int, char*, char*) = warn_message;
extern void Pure_g_assert_warning(char*, char*, int, char*, char*) = assert_warning;
extern void Pure_g_print(char*) = print;
extern void* Pure_g_set_print_handler(void*) = set_print_handler;
extern void Pure_g_printerr(char*) = printerr;
extern void* Pure_g_set_printerr_handler(void*) = set_printerr_handler;
extern GNode* Pure_g_node_new(void*) = node_new;
extern void Pure_g_node_destroy(GNode*) = node_destroy;
extern void Pure_g_node_unlink(GNode*) = node_unlink;
extern GNode* Pure_g_node_copy_deep(GNode*, void*, void*) = node_copy_deep;
extern GNode* Pure_g_node_copy(GNode*) = node_copy;
extern GNode* Pure_g_node_insert(GNode*, int, GNode*) = node_insert;
extern GNode* Pure_g_node_insert_before(GNode*, GNode*, GNode*) = node_insert_before;
extern GNode* Pure_g_node_insert_after(GNode*, GNode*, GNode*) = node_insert_after;
extern GNode* Pure_g_node_prepend(GNode*, GNode*) = node_prepend;
extern int Pure_g_node_n_nodes(GNode*, int) = node_n_nodes;
extern GNode* Pure_g_node_get_root(GNode*) = node_get_root;
extern int Pure_g_node_is_ancestor(GNode*, GNode*) = node_is_ancestor;
extern int Pure_g_node_depth(GNode*) = node_depth;
extern GNode* Pure_g_node_find(GNode*, int, int, void*) = node_find;
extern void Pure_g_node_traverse(GNode*, int, int, int, void*, void*) = node_traverse;
extern int Pure_g_node_max_height(GNode*) = node_max_height;
extern void Pure_g_node_children_foreach(GNode*, int, void*, void*) = node_children_foreach;
extern void Pure_g_node_reverse_children(GNode*) = node_reverse_children;
extern int Pure_g_node_n_children(GNode*) = node_n_children;
extern GNode* Pure_g_node_nth_child(GNode*, int) = node_nth_child;
extern GNode* Pure_g_node_last_child(GNode*) = node_last_child;
extern GNode* Pure_g_node_find_child(GNode*, int, void*) = node_find_child;
extern int Pure_g_node_child_position(GNode*, GNode*) = node_child_position;
extern int Pure_g_node_child_index(GNode*, void*) = node_child_index;
extern GNode* Pure_g_node_first_sibling(GNode*) = node_first_sibling;
extern GNode* Pure_g_node_last_sibling(GNode*) = node_last_sibling;
extern void Pure_g_node_push_allocator(void*) = node_push_allocator;
extern void Pure_g_node_pop_allocator() = node_pop_allocator;
extern int Pure_g_option_error_quark() = option_error_quark;
extern GOptionContext* Pure_g_option_context_new(char*) = option_context_new;
extern void Pure_g_option_context_set_summary(GOptionContext*, char*) = option_context_set_summary;
extern char* Pure_g_option_context_get_summary(GOptionContext*) = option_context_get_summary;
extern void Pure_g_option_context_set_description(GOptionContext*, char*) = option_context_set_description;
extern char* Pure_g_option_context_get_description(GOptionContext*) = option_context_get_description;
extern void Pure_g_option_context_free(GOptionContext*) = option_context_free;
extern void Pure_g_option_context_set_help_enabled(GOptionContext*, int) = option_context_set_help_enabled;
extern int Pure_g_option_context_get_help_enabled(GOptionContext*) = option_context_get_help_enabled;
extern void Pure_g_option_context_set_ignore_unknown_options(GOptionContext*, int) = option_context_set_ignore_unknown_options;
extern int Pure_g_option_context_get_ignore_unknown_options(GOptionContext*) = option_context_get_ignore_unknown_options;
extern void Pure_g_option_context_add_main_entries(GOptionContext*, GOptionEntry*, char*) = option_context_add_main_entries;
extern int Pure_g_option_context_parse(GOptionContext*, int*, char***, GError**) = option_context_parse;
extern void Pure_g_option_context_set_translate_func(GOptionContext*, void*, void*, void*) = option_context_set_translate_func;
extern void Pure_g_option_context_set_translation_domain(GOptionContext*, char*) = option_context_set_translation_domain;
extern void Pure_g_option_context_add_group(GOptionContext*, GOptionGroup*) = option_context_add_group;
extern void Pure_g_option_context_set_main_group(GOptionContext*, GOptionGroup*) = option_context_set_main_group;
extern GOptionGroup* Pure_g_option_context_get_main_group(GOptionContext*) = option_context_get_main_group;
extern char* Pure_g_option_context_get_help(GOptionContext*, int, GOptionGroup*) = option_context_get_help;
extern GOptionGroup* Pure_g_option_group_new(char*, char*, char*, void*, void*) = option_group_new;
extern void Pure_g_option_group_set_parse_hooks(GOptionGroup*, void*, void*) = option_group_set_parse_hooks;
extern void Pure_g_option_group_set_error_hook(GOptionGroup*, void*) = option_group_set_error_hook;
extern void Pure_g_option_group_free(GOptionGroup*) = option_group_free;
extern void Pure_g_option_group_add_entries(GOptionGroup*, GOptionEntry*) = option_group_add_entries;
extern void Pure_g_option_group_set_translate_func(GOptionGroup*, void*, void*, void*) = option_group_set_translate_func;
extern void Pure_g_option_group_set_translation_domain(GOptionGroup*, char*) = option_group_set_translation_domain;
extern GPatternSpec* Pure_g_pattern_spec_new(char*) = pattern_spec_new;
extern void Pure_g_pattern_spec_free(GPatternSpec*) = pattern_spec_free;
extern int Pure_g_pattern_spec_equal(GPatternSpec*, GPatternSpec*) = pattern_spec_equal;
extern int Pure_g_pattern_match(GPatternSpec*, int, char*, char*) = pattern_match;
extern int Pure_g_pattern_match_string(GPatternSpec*, char*) = pattern_match_string;
extern int Pure_g_pattern_match_simple(char*, char*) = pattern_match_simple;
extern int Pure_g_spaced_primes_closest(int) = spaced_primes_closest;
extern void Pure_g_qsort_with_data(void*, int, int, void*, void*) = qsort_with_data;
extern GQueue* Pure_g_queue_new() = queue_new;
extern void Pure_g_queue_free(GQueue*) = queue_free;
extern void Pure_g_queue_init(GQueue*) = queue_init;
extern void Pure_g_queue_clear(GQueue*) = queue_clear;
extern int Pure_g_queue_is_empty(GQueue*) = queue_is_empty;
extern int Pure_g_queue_get_length(GQueue*) = queue_get_length;
extern void Pure_g_queue_reverse(GQueue*) = queue_reverse;
extern GQueue* Pure_g_queue_copy(GQueue*) = queue_copy;
extern void Pure_g_queue_foreach(GQueue*, void*, void*) = queue_foreach;
extern GList* Pure_g_queue_find(GQueue*, void*) = queue_find;
extern GList* Pure_g_queue_find_custom(GQueue*, void*, void*) = queue_find_custom;
extern void Pure_g_queue_sort(GQueue*, void*, void*) = queue_sort;
extern void Pure_g_queue_push_head(GQueue*, void*) = queue_push_head;
extern void Pure_g_queue_push_tail(GQueue*, void*) = queue_push_tail;
extern void Pure_g_queue_push_nth(GQueue*, void*, int) = queue_push_nth;
extern void* Pure_g_queue_pop_head(GQueue*) = queue_pop_head;
extern void* Pure_g_queue_pop_tail(GQueue*) = queue_pop_tail;
extern void* Pure_g_queue_pop_nth(GQueue*, int) = queue_pop_nth;
extern void* Pure_g_queue_peek_head(GQueue*) = queue_peek_head;
extern void* Pure_g_queue_peek_tail(GQueue*) = queue_peek_tail;
extern void* Pure_g_queue_peek_nth(GQueue*, int) = queue_peek_nth;
extern int Pure_g_queue_index(GQueue*, void*) = queue_index;
extern void Pure_g_queue_remove(GQueue*, void*) = queue_remove;
extern void Pure_g_queue_remove_all(GQueue*, void*) = queue_remove_all;
extern void Pure_g_queue_insert_before(GQueue*, GList*, void*) = queue_insert_before;
extern void Pure_g_queue_insert_after(GQueue*, GList*, void*) = queue_insert_after;
extern void Pure_g_queue_insert_sorted(GQueue*, void*, void*, void*) = queue_insert_sorted;
extern void Pure_g_queue_push_head_link(GQueue*, GList*) = queue_push_head_link;
extern void Pure_g_queue_push_tail_link(GQueue*, GList*) = queue_push_tail_link;
extern void Pure_g_queue_push_nth_link(GQueue*, int, GList*) = queue_push_nth_link;
extern GList* Pure_g_queue_pop_head_link(GQueue*) = queue_pop_head_link;
extern GList* Pure_g_queue_pop_tail_link(GQueue*) = queue_pop_tail_link;
extern GList* Pure_g_queue_pop_nth_link(GQueue*, int) = queue_pop_nth_link;
extern GList* Pure_g_queue_peek_head_link(GQueue*) = queue_peek_head_link;
extern GList* Pure_g_queue_peek_tail_link(GQueue*) = queue_peek_tail_link;
extern GList* Pure_g_queue_peek_nth_link(GQueue*, int) = queue_peek_nth_link;
extern int Pure_g_queue_link_index(GQueue*, GList*) = queue_link_index;
extern void Pure_g_queue_unlink(GQueue*, GList*) = queue_unlink;
extern void Pure_g_queue_delete_link(GQueue*, GList*) = queue_delete_link;
extern GRand* Pure_g_rand_new_with_seed(int) = rand_new_with_seed;
extern GRand* Pure_g_rand_new_with_seed_array(int*, int) = rand_new_with_seed_array;
extern GRand* Pure_g_rand_new() = rand_new;
extern void Pure_g_rand_free(GRand*) = rand_free;
extern GRand* Pure_g_rand_copy(GRand*) = rand_copy;
extern void Pure_g_rand_set_seed(GRand*, int) = rand_set_seed;
extern void Pure_g_rand_set_seed_array(GRand*, int*, int) = rand_set_seed_array;
extern int Pure_g_rand_int(GRand*) = rand_int;
extern int Pure_g_rand_int_range(GRand*, int, int) = rand_int_range;
extern double Pure_g_rand_double(GRand*) = rand_double;
extern double Pure_g_rand_double_range(GRand*, double, double) = rand_double_range;
extern void Pure_g_random_set_seed(int) = random_set_seed;
extern int Pure_g_random_int() = random_int;
extern int Pure_g_random_int_range(int, int) = random_int_range;
extern double Pure_g_random_double() = random_double;
extern double Pure_g_random_double_range(double, double) = random_double_range;
extern GRelation* Pure_g_relation_new(int) = relation_new;
extern void Pure_g_relation_destroy(GRelation*) = relation_destroy;
extern void Pure_g_relation_index(GRelation*, int, void*, void*) = relation_index;
extern void Pure_g_relation_insert(GRelation*) = relation_insert;
extern int Pure_g_relation_delete(GRelation*, void*, int) = relation_delete;
extern GTuples* Pure_g_relation_select(GRelation*, void*, int) = relation_select;
extern int Pure_g_relation_count(GRelation*, void*, int) = relation_count;
extern int Pure_g_relation_exists(GRelation*) = relation_exists;
extern void Pure_g_relation_print(GRelation*) = relation_print;
extern void Pure_g_tuples_destroy(GTuples*) = tuples_destroy;
extern void* Pure_g_tuples_index(GTuples*, int, int) = tuples_index;
extern int Pure_g_regex_error_quark() = regex_error_quark;
extern GRegex* Pure_g_regex_new(char*, int, int, GError**) = regex_new;
extern GRegex* Pure_g_regex_ref(GRegex*) = regex_ref;
extern void Pure_g_regex_unref(GRegex*) = regex_unref;
extern char* Pure_g_regex_get_pattern(GRegex*) = regex_get_pattern;
extern int Pure_g_regex_get_max_backref(GRegex*) = regex_get_max_backref;
extern int Pure_g_regex_get_capture_count(GRegex*) = regex_get_capture_count;
extern int Pure_g_regex_get_string_number(GRegex*, char*) = regex_get_string_number;
extern char* Pure_g_regex_escape_string(char*, int) = regex_escape_string;
extern int Pure_g_regex_match_simple(char*, char*, int, int) = regex_match_simple;
extern int Pure_g_regex_match(GRegex*, char*, int, GMatchInfo**) = regex_match;
extern int Pure_g_regex_match_full(GRegex*, char*, int, int, int, GMatchInfo**, GError**) = regex_match_full;
extern int Pure_g_regex_match_all(GRegex*, char*, int, GMatchInfo**) = regex_match_all;
extern int Pure_g_regex_match_all_full(GRegex*, char*, int, int, int, GMatchInfo**, GError**) = regex_match_all_full;
extern char** Pure_g_regex_split_simple(char*, char*, int, int) = regex_split_simple;
extern char** Pure_g_regex_split(GRegex*, char*, int) = regex_split;
extern char** Pure_g_regex_split_full(GRegex*, char*, int, int, int, int, GError**) = regex_split_full;
extern char* Pure_g_regex_replace(GRegex*, char*, int, int, char*, int, GError**) = regex_replace;
extern char* Pure_g_regex_replace_literal(GRegex*, char*, int, int, char*, int, GError**) = regex_replace_literal;
extern char* Pure_g_regex_replace_eval(GRegex*, char*, int, int, int, void*, void*, GError**) = regex_replace_eval;
extern int Pure_g_regex_check_replacement(char*, int*, GError**) = regex_check_replacement;
extern GRegex* Pure_g_match_info_get_regex(GMatchInfo*) = match_info_get_regex;
extern char* Pure_g_match_info_get_string(GMatchInfo*) = match_info_get_string;
extern void Pure_g_match_info_free(GMatchInfo*) = match_info_free;
extern int Pure_g_match_info_next(GMatchInfo*, GError**) = match_info_next;
extern int Pure_g_match_info_matches(GMatchInfo*) = match_info_matches;
extern int Pure_g_match_info_get_match_count(GMatchInfo*) = match_info_get_match_count;
extern int Pure_g_match_info_is_partial_match(GMatchInfo*) = match_info_is_partial_match;
extern char* Pure_g_match_info_expand_references(GMatchInfo*, char*, GError**) = match_info_expand_references;
extern char* Pure_g_match_info_fetch(GMatchInfo*, int) = match_info_fetch;
extern int Pure_g_match_info_fetch_pos(GMatchInfo*, int, int*, int*) = match_info_fetch_pos;
extern char* Pure_g_match_info_fetch_named(GMatchInfo*, char*) = match_info_fetch_named;
extern int Pure_g_match_info_fetch_named_pos(GMatchInfo*, char*, int*, int*) = match_info_fetch_named_pos;
extern char** Pure_g_match_info_fetch_all(GMatchInfo*) = match_info_fetch_all;
extern GScanner* Pure_g_scanner_new(GScannerConfig*) = scanner_new;
extern void Pure_g_scanner_destroy(GScanner*) = scanner_destroy;
extern void Pure_g_scanner_input_file(GScanner*, int) = scanner_input_file;
extern void Pure_g_scanner_sync_file_offset(GScanner*) = scanner_sync_file_offset;
extern void Pure_g_scanner_input_text(GScanner*, char*, int) = scanner_input_text;
extern int Pure_g_scanner_get_next_token(GScanner*) = scanner_get_next_token;
extern int Pure_g_scanner_peek_next_token(GScanner*) = scanner_peek_next_token;
extern int Pure_g_scanner_cur_token(GScanner*) = scanner_cur_token;
extern GTokenValue* Pure_g_scanner_cur_value(GScanner*) = scanner_cur_value;
extern int Pure_g_scanner_cur_line(GScanner*) = scanner_cur_line;
extern int Pure_g_scanner_cur_position(GScanner*) = scanner_cur_position;
extern int Pure_g_scanner_eof(GScanner*) = scanner_eof;
extern int Pure_g_scanner_set_scope(GScanner*, int) = scanner_set_scope;
extern void Pure_g_scanner_scope_add_symbol(GScanner*, int, char*, void*) = scanner_scope_add_symbol;
extern void Pure_g_scanner_scope_remove_symbol(GScanner*, int, char*) = scanner_scope_remove_symbol;
extern void* Pure_g_scanner_scope_lookup_symbol(GScanner*, int, char*) = scanner_scope_lookup_symbol;
extern void Pure_g_scanner_scope_foreach_symbol(GScanner*, int, void*, void*) = scanner_scope_foreach_symbol;
extern void* Pure_g_scanner_lookup_symbol(GScanner*, char*) = scanner_lookup_symbol;
extern void Pure_g_scanner_unexp_token(GScanner*, int, char*, char*, char*, char*, int) = scanner_unexp_token;
extern void Pure_g_scanner_error(GScanner*, char*) = scanner_error;
extern void Pure_g_scanner_warn(GScanner*, char*) = scanner_warn;
extern GSequence* Pure_g_sequence_new(void*) = sequence_new;
extern void Pure_g_sequence_free(GSequence*) = sequence_free;
extern int Pure_g_sequence_get_length(GSequence*) = sequence_get_length;
extern void Pure_g_sequence_foreach(GSequence*, void*, void*) = sequence_foreach;
extern void Pure_g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, void*, void*) = sequence_foreach_range;
extern void Pure_g_sequence_sort(GSequence*, void*, void*) = sequence_sort;
extern void Pure_g_sequence_sort_iter(GSequence*, void*, void*) = sequence_sort_iter;
extern GSequenceIter* Pure_g_sequence_get_begin_iter(GSequence*) = sequence_get_begin_iter;
extern GSequenceIter* Pure_g_sequence_get_end_iter(GSequence*) = sequence_get_end_iter;
extern GSequenceIter* Pure_g_sequence_get_iter_at_pos(GSequence*, int) = sequence_get_iter_at_pos;
extern GSequenceIter* Pure_g_sequence_append(GSequence*, void*) = sequence_append;
extern GSequenceIter* Pure_g_sequence_prepend(GSequence*, void*) = sequence_prepend;
extern GSequenceIter* Pure_g_sequence_insert_before(GSequenceIter*, void*) = sequence_insert_before;
extern void Pure_g_sequence_move(GSequenceIter*, GSequenceIter*) = sequence_move;
extern void Pure_g_sequence_swap(GSequenceIter*, GSequenceIter*) = sequence_swap;
extern GSequenceIter* Pure_g_sequence_insert_sorted(GSequence*, void*, void*, void*) = sequence_insert_sorted;
extern GSequenceIter* Pure_g_sequence_insert_sorted_iter(GSequence*, void*, void*, void*) = sequence_insert_sorted_iter;
extern void Pure_g_sequence_sort_changed(GSequenceIter*, void*, void*) = sequence_sort_changed;
extern void Pure_g_sequence_sort_changed_iter(GSequenceIter*, void*, void*) = sequence_sort_changed_iter;
extern void Pure_g_sequence_remove(GSequenceIter*) = sequence_remove;
extern void Pure_g_sequence_remove_range(GSequenceIter*, GSequenceIter*) = sequence_remove_range;
extern void Pure_g_sequence_move_range(GSequenceIter*, GSequenceIter*, GSequenceIter*) = sequence_move_range;
extern GSequenceIter* Pure_g_sequence_search(GSequence*, void*, void*, void*) = sequence_search;
extern GSequenceIter* Pure_g_sequence_search_iter(GSequence*, void*, void*, void*) = sequence_search_iter;
extern void* Pure_g_sequence_get(GSequenceIter*) = sequence_get;
extern void Pure_g_sequence_set(GSequenceIter*, void*) = sequence_set;
extern int Pure_g_sequence_iter_is_begin(GSequenceIter*) = sequence_iter_is_begin;
extern int Pure_g_sequence_iter_is_end(GSequenceIter*) = sequence_iter_is_end;
extern GSequenceIter* Pure_g_sequence_iter_next(GSequenceIter*) = sequence_iter_next;
extern GSequenceIter* Pure_g_sequence_iter_prev(GSequenceIter*) = sequence_iter_prev;
extern int Pure_g_sequence_iter_get_position(GSequenceIter*) = sequence_iter_get_position;
extern GSequenceIter* Pure_g_sequence_iter_move(GSequenceIter*, int) = sequence_iter_move;
extern GSequence* Pure_g_sequence_iter_get_sequence(GSequenceIter*) = sequence_iter_get_sequence;
extern int Pure_g_sequence_iter_compare(GSequenceIter*, GSequenceIter*) = sequence_iter_compare;
extern GSequenceIter* Pure_g_sequence_range_get_midpoint(GSequenceIter*, GSequenceIter*) = sequence_range_get_midpoint;
extern int Pure_g_shell_error_quark() = shell_error_quark;
extern char* Pure_g_shell_quote(char*) = shell_quote;
extern char* Pure_g_shell_unquote(char*, GError**) = shell_unquote;
extern int Pure_g_shell_parse_argv(char*, int*, char***, GError**) = shell_parse_argv;
extern int Pure_g_spawn_error_quark() = spawn_error_quark;
extern int Pure_g_spawn_async(char*, char**, char**, int, void*, void*, int*, GError**) = spawn_async;
extern int Pure_g_spawn_async_with_pipes(char*, char**, char**, int, void*, void*, int*, int*, int*, int*, GError**) = spawn_async_with_pipes;
extern int Pure_g_spawn_sync(char*, char**, char**, int, void*, void*, char**, char**, int*, GError**) = spawn_sync;
extern int Pure_g_spawn_command_line_sync(char*, char**, char**, int*, GError**) = spawn_command_line_sync;
extern int Pure_g_spawn_command_line_async(char*, GError**) = spawn_command_line_async;
extern void Pure_g_spawn_close_pid(int) = spawn_close_pid;
extern char Pure_g_ascii_tolower(char) = ascii_tolower;
extern char Pure_g_ascii_toupper(char) = ascii_toupper;
extern int Pure_g_ascii_digit_value(char) = ascii_digit_value;
extern int Pure_g_ascii_xdigit_value(char) = ascii_xdigit_value;
extern char* Pure_g_strdelimit(char*, char*, char) = strdelimit;
extern char* Pure_g_strcanon(char*, char*, char) = strcanon;
extern char* Pure_g_strerror(int) = strerror;
extern char* Pure_g_strsignal(int) = strsignal;
extern char* Pure_g_strreverse(char*) = strreverse;
extern int Pure_g_strlcpy(char*, char*, int) = strlcpy;
extern int Pure_g_strlcat(char*, char*, int) = strlcat;
extern char* Pure_g_strstr_len(char*, int, char*) = strstr_len;
extern char* Pure_g_strrstr(char*, char*) = strrstr;
extern char* Pure_g_strrstr_len(char*, int, char*) = strrstr_len;
extern int Pure_g_str_has_suffix(char*, char*) = str_has_suffix;
extern int Pure_g_str_has_prefix(char*, char*) = str_has_prefix;
extern double Pure_g_strtod(char*, char**) = strtod;
extern double Pure_g_ascii_strtod(char*, char**) = ascii_strtod;
extern int Pure_g_ascii_strtoull(char*, char**, int) = ascii_strtoull;
extern int Pure_g_ascii_strtoll(char*, char**, int) = ascii_strtoll;
extern char* Pure_g_ascii_dtostr(char*, int, double) = ascii_dtostr;
extern char* Pure_g_ascii_formatd(char*, int, char*, double) = ascii_formatd;
extern char* Pure_g_strchug(char*) = strchug;
extern char* Pure_g_strchomp(char*) = strchomp;
extern int Pure_g_ascii_strcasecmp(char*, char*) = ascii_strcasecmp;
extern int Pure_g_ascii_strncasecmp(char*, char*, int) = ascii_strncasecmp;
extern char* Pure_g_ascii_strdown(char*, int) = ascii_strdown;
extern char* Pure_g_ascii_strup(char*, int) = ascii_strup;
extern int Pure_g_strcasecmp(char*, char*) = strcasecmp;
extern int Pure_g_strncasecmp(char*, char*, int) = strncasecmp;
extern char* Pure_g_strdown(char*) = strdown;
extern char* Pure_g_strup(char*) = strup;
extern char* Pure_g_strdup(char*) = strdup;
extern char* Pure_g_strdup_printf(char*) = strdup_printf;
extern char* Pure_g_strdup_vprintf(char*, void*) = strdup_vprintf;
extern char* Pure_g_strndup(char*, int) = strndup;
extern char* Pure_g_strnfill(int, char) = strnfill;
extern char* Pure_g_strconcat(char*) = strconcat;
extern char* Pure_g_strjoin(char*) = strjoin;
extern char* Pure_g_strcompress(char*) = strcompress;
extern char* Pure_g_strescape(char*, char*) = strescape;
extern void* Pure_g_memdup(void*, int) = memdup;
extern char** Pure_g_strsplit(char*, char*, int) = strsplit;
extern char** Pure_g_strsplit_set(char*, char*, int) = strsplit_set;
extern char* Pure_g_strjoinv(char*, char**) = strjoinv;
extern void Pure_g_strfreev(char**) = strfreev;
extern char** Pure_g_strdupv(char**) = strdupv;
extern int Pure_g_strv_length(char**) = strv_length;
extern char* Pure_g_stpcpy(char*, char*) = stpcpy;
extern char* Pure_g_strip_context(char*, char*) = strip_context;
extern char* Pure_g_dgettext(char*, char*) = dgettext;
extern char* Pure_g_dngettext(char*, char*, char*, int) = dngettext;
extern char* Pure_g_dpgettext(char*, char*, int) = dpgettext;
extern char* Pure_g_dpgettext2(char*, char*, char*) = dpgettext2;
extern int Pure_g_strcmp0(char*, char*) = strcmp0;
extern void Pure_g_test_minimized_result(double, char*) = test_minimized_result;
extern void Pure_g_test_maximized_result(double, char*) = test_maximized_result;
extern void Pure_g_test_init(int*, char***) = test_init;
extern int Pure_g_test_run() = test_run;
extern void Pure_g_test_add_func(char*, void*) = test_add_func;
extern void Pure_g_test_add_data_func(char*, void*, void*) = test_add_data_func;
extern void Pure_g_test_message(char*) = test_message;
extern void Pure_g_test_bug_base(char*) = test_bug_base;
extern void Pure_g_test_bug(char*) = test_bug;
extern void Pure_g_test_timer_start() = test_timer_start;
extern double Pure_g_test_timer_elapsed() = test_timer_elapsed;
extern double Pure_g_test_timer_last() = test_timer_last;
extern void Pure_g_test_queue_free(void*) = test_queue_free;
extern void Pure_g_test_queue_destroy(void*, void*) = test_queue_destroy;
extern int Pure_g_test_trap_fork(int, int) = test_trap_fork;
extern int Pure_g_test_trap_has_passed() = test_trap_has_passed;
extern int Pure_g_test_trap_reached_timeout() = test_trap_reached_timeout;
extern int Pure_g_test_rand_int() = test_rand_int;
extern int Pure_g_test_rand_int_range(int, int) = test_rand_int_range;
extern double Pure_g_test_rand_double() = test_rand_double;
extern double Pure_g_test_rand_double_range(double, double) = test_rand_double_range;
extern GTestCase* Pure_g_test_create_case(char*, int, void*, void*, void*, void*) = test_create_case;
extern GTestSuite* Pure_g_test_create_suite(char*) = test_create_suite;
extern GTestSuite* Pure_g_test_get_root() = test_get_root;
extern void Pure_g_test_suite_add(GTestSuite*, GTestCase*) = test_suite_add;
extern void Pure_g_test_suite_add_suite(GTestSuite*, GTestSuite*) = test_suite_add_suite;
extern int Pure_g_test_run_suite(GTestSuite*) = test_run_suite;
extern void Pure_g_test_trap_assertions(char*, char*, int, char*, int, char*) = test_trap_assertions;
extern void Pure_g_assertion_message(char*, char*, int, char*, char*) = assertion_message;
extern void Pure_g_assertion_message_expr(char*, char*, int, char*, char*) = assertion_message_expr;
extern void Pure_g_assertion_message_cmpstr(char*, char*, int, char*, char*, char*, char*, char*) = assertion_message_cmpstr;
extern void Pure_g_assertion_message_cmpnum(char*, char*, int, char*, char*, double, char*, double, char) = assertion_message_cmpnum;
extern void Pure_g_test_add_vtable(char*, int, void*, void*, void*, void*) = test_add_vtable;
extern char* Pure_g_test_log_type_name(int) = test_log_type_name;
extern GTestLogBuffer* Pure_g_test_log_buffer_new() = test_log_buffer_new;
extern void Pure_g_test_log_buffer_free(GTestLogBuffer*) = test_log_buffer_free;
extern void Pure_g_test_log_buffer_push(GTestLogBuffer*, int, char*) = test_log_buffer_push;
extern GTestLogMsg* Pure_g_test_log_buffer_pop(GTestLogBuffer*) = test_log_buffer_pop;
extern void Pure_g_test_log_msg_free(GTestLogMsg*) = test_log_msg_free;
extern GThreadPool* Pure_g_thread_pool_new(void*, void*, int, int, GError**) = thread_pool_new;
extern void Pure_g_thread_pool_push(GThreadPool*, void*, GError**) = thread_pool_push;
extern void Pure_g_thread_pool_set_max_threads(GThreadPool*, int, GError**) = thread_pool_set_max_threads;
extern int Pure_g_thread_pool_get_max_threads(GThreadPool*) = thread_pool_get_max_threads;
extern int Pure_g_thread_pool_get_num_threads(GThreadPool*) = thread_pool_get_num_threads;
extern int Pure_g_thread_pool_unprocessed(GThreadPool*) = thread_pool_unprocessed;
extern void Pure_g_thread_pool_free(GThreadPool*, int, int) = thread_pool_free;
extern void Pure_g_thread_pool_set_max_unused_threads(int) = thread_pool_set_max_unused_threads;
extern int Pure_g_thread_pool_get_max_unused_threads() = thread_pool_get_max_unused_threads;
extern int Pure_g_thread_pool_get_num_unused_threads() = thread_pool_get_num_unused_threads;
extern void Pure_g_thread_pool_stop_unused_threads() = thread_pool_stop_unused_threads;
extern void Pure_g_thread_pool_set_sort_function(GThreadPool*, void*, void*) = thread_pool_set_sort_function;
extern void Pure_g_thread_pool_set_max_idle_time(int) = thread_pool_set_max_idle_time;
extern int Pure_g_thread_pool_get_max_idle_time() = thread_pool_get_max_idle_time;
extern GTimer* Pure_g_timer_new() = timer_new;
extern void Pure_g_timer_destroy(GTimer*) = timer_destroy;
extern void Pure_g_timer_start(GTimer*) = timer_start;
extern void Pure_g_timer_stop(GTimer*) = timer_stop;
extern void Pure_g_timer_reset(GTimer*) = timer_reset;
extern void Pure_g_timer_continue(GTimer*) = timer_continue;
extern double Pure_g_timer_elapsed(GTimer*, int*) = timer_elapsed;
extern void Pure_g_usleep(int) = usleep;
extern void Pure_g_time_val_add(GTimeVal*, int) = time_val_add;
extern int Pure_g_time_val_from_iso8601(char*, GTimeVal*) = time_val_from_iso8601;
extern char* Pure_g_time_val_to_iso8601(GTimeVal*) = time_val_to_iso8601;
extern GTree* Pure_g_tree_new(void*) = tree_new;
extern GTree* Pure_g_tree_new_with_data(void*, void*) = tree_new_with_data;
extern GTree* Pure_g_tree_new_full(void*, void*, void*, void*) = tree_new_full;
extern void Pure_g_tree_destroy(GTree*) = tree_destroy;
extern void Pure_g_tree_insert(GTree*, void*, void*) = tree_insert;
extern void Pure_g_tree_replace(GTree*, void*, void*) = tree_replace;
extern int Pure_g_tree_remove(GTree*, void*) = tree_remove;
extern int Pure_g_tree_steal(GTree*, void*) = tree_steal;
extern void* Pure_g_tree_lookup(GTree*, void*) = tree_lookup;
extern int Pure_g_tree_lookup_extended(GTree*, void*, void**, void**) = tree_lookup_extended;
extern void Pure_g_tree_foreach(GTree*, void*, void*) = tree_foreach;
extern void Pure_g_tree_traverse(GTree*, void*, int, void*) = tree_traverse;
extern void* Pure_g_tree_search(GTree*, void*, void*) = tree_search;
extern int Pure_g_tree_height(GTree*) = tree_height;
extern int Pure_g_tree_nnodes(GTree*) = tree_nnodes;
extern char* Pure_g_uri_unescape_string(char*, char*) = uri_unescape_string;
extern char* Pure_g_uri_unescape_segment(char*, char*, char*) = uri_unescape_segment;
extern char* Pure_g_uri_parse_scheme(char*) = uri_parse_scheme;
extern char* Pure_g_uri_escape_string(char*, char*, int) = uri_escape_string;
/* /usr/include/glib-2.0/glib-object.h: */
using "lib:glib";

namespace glib;
const glib::TYPE_FUNDAMENTAL_MAX = 255;
const glib::TYPE_FUNDAMENTAL_SHIFT = 2;
const glib::TYPE_RESERVED_GLIB_FIRST = 21;
const glib::TYPE_RESERVED_GLIB_LAST = 31;
const glib::TYPE_RESERVED_BSE_FIRST = 32;
const glib::TYPE_RESERVED_BSE_LAST = 48;
const glib::TYPE_RESERVED_USER_FIRST = 49;
const glib::VALUE_NOCOPY_CONTENTS = 1;
const glib::PARAM_MASK = 255;
const glib::PARAM_USER_SHIFT = 8;
const glib::SIGNAL_FLAGS_MASK = 127;
const glib::SIGNAL_MATCH_MASK = 63;
const glib::CONNECT_AFTER = 1;
const glib::CONNECT_SWAPPED = 2;
const glib::PARAM_READABLE = 1;
const glib::PARAM_WRITABLE = 2;
const glib::PARAM_CONSTRUCT = 4;
const glib::PARAM_CONSTRUCT_ONLY = 8;
const glib::PARAM_LAX_VALIDATION = 16;
const glib::PARAM_STATIC_NAME = 32;
const glib::PARAM_PRIVATE = 32;
const glib::PARAM_STATIC_NICK = 64;
const glib::PARAM_STATIC_BLURB = 128;
const glib::SIGNAL_RUN_FIRST = 1;
const glib::SIGNAL_RUN_LAST = 2;
const glib::SIGNAL_RUN_CLEANUP = 4;
const glib::SIGNAL_NO_RECURSE = 8;
const glib::SIGNAL_DETAILED = 16;
const glib::SIGNAL_ACTION = 32;
const glib::SIGNAL_NO_HOOKS = 64;
const glib::SIGNAL_MATCH_ID = 1;
const glib::SIGNAL_MATCH_DETAIL = 2;
const glib::SIGNAL_MATCH_CLOSURE = 4;
const glib::SIGNAL_MATCH_FUNC = 8;
const glib::SIGNAL_MATCH_DATA = 16;
const glib::SIGNAL_MATCH_UNBLOCKED = 32;
const glib::TYPE_DEBUG_NONE = 0;
const glib::TYPE_DEBUG_OBJECTS = 1;
const glib::TYPE_DEBUG_SIGNALS = 2;
const glib::TYPE_DEBUG_MASK = 3;
const glib::TYPE_FLAG_ABSTRACT = 16;
const glib::TYPE_FLAG_VALUE_ABSTRACT = 32;
const glib::TYPE_FLAG_CLASSED = 1;
const glib::TYPE_FLAG_INSTANTIATABLE = 2;
const glib::TYPE_FLAG_DERIVABLE = 4;
const glib::TYPE_FLAG_DEEP_DERIVABLE = 8;
extern void Pure_g_type_init() = type_init;
extern void Pure_g_type_init_with_debug_flags(int) = type_init_with_debug_flags;
extern char* Pure_g_type_name(int) = type_name;
extern int Pure_g_type_qname(int) = type_qname;
extern int Pure_g_type_from_name(char*) = type_from_name;
extern int Pure_g_type_parent(int) = type_parent;
extern int Pure_g_type_depth(int) = type_depth;
extern int Pure_g_type_next_base(int, int) = type_next_base;
extern int Pure_g_type_is_a(int, int) = type_is_a;
extern void* Pure_g_type_class_ref(int) = type_class_ref;
extern void* Pure_g_type_class_peek(int) = type_class_peek;
extern void* Pure_g_type_class_peek_static(int) = type_class_peek_static;
extern void Pure_g_type_class_unref(void*) = type_class_unref;
extern void* Pure_g_type_class_peek_parent(void*) = type_class_peek_parent;
extern void* Pure_g_type_interface_peek(void*, int) = type_interface_peek;
extern void* Pure_g_type_interface_peek_parent(void*) = type_interface_peek_parent;
extern void* Pure_g_type_default_interface_ref(int) = type_default_interface_ref;
extern void* Pure_g_type_default_interface_peek(int) = type_default_interface_peek;
extern void Pure_g_type_default_interface_unref(void*) = type_default_interface_unref;
extern int* Pure_g_type_children(int, int*) = type_children;
extern int* Pure_g_type_interfaces(int, int*) = type_interfaces;
extern void Pure_g_type_set_qdata(int, int, void*) = type_set_qdata;
extern void* Pure_g_type_get_qdata(int, int) = type_get_qdata;
extern void Pure_g_type_query(int, GTypeQuery*) = type_query;
extern int Pure_g_type_register_static(int, char*, GTypeInfo*, int) = type_register_static;
extern int Pure_g_type_register_static_simple(int, char*, int, void*, int, void*, int) = type_register_static_simple;
extern int Pure_g_type_register_dynamic(int, char*, GTypePlugin*, int) = type_register_dynamic;
extern int Pure_g_type_register_fundamental(int, char*, GTypeInfo*, GTypeFundamentalInfo*, int) = type_register_fundamental;
extern void Pure_g_type_add_interface_static(int, int, GInterfaceInfo*) = type_add_interface_static;
extern void Pure_g_type_add_interface_dynamic(int, int, GTypePlugin*) = type_add_interface_dynamic;
extern void Pure_g_type_interface_add_prerequisite(int, int) = type_interface_add_prerequisite;
extern int* Pure_g_type_interface_prerequisites(int, int*) = type_interface_prerequisites;
extern void Pure_g_type_class_add_private(void*, int) = type_class_add_private;
extern void* Pure_g_type_instance_get_private(GTypeInstance*, int) = type_instance_get_private;
extern GTypePlugin* Pure_g_type_get_plugin(int) = type_get_plugin;
extern GTypePlugin* Pure_g_type_interface_get_plugin(int, int) = type_interface_get_plugin;
extern int Pure_g_type_fundamental_next() = type_fundamental_next;
extern int Pure_g_type_fundamental(int) = type_fundamental;
extern GTypeInstance* Pure_g_type_create_instance(int) = type_create_instance;
extern void Pure_g_type_free_instance(GTypeInstance*) = type_free_instance;
extern void Pure_g_type_add_class_cache_func(void*, void*) = type_add_class_cache_func;
extern void Pure_g_type_remove_class_cache_func(void*, void*) = type_remove_class_cache_func;
extern void Pure_g_type_class_unref_uncached(void*) = type_class_unref_uncached;
extern void Pure_g_type_add_interface_check(void*, void*) = type_add_interface_check;
extern void Pure_g_type_remove_interface_check(void*, void*) = type_remove_interface_check;
extern GTypeValueTable* Pure_g_type_value_table_peek(int) = type_value_table_peek;
extern int Pure_g_type_check_instance(GTypeInstance*) = type_check_instance;
extern GTypeInstance* Pure_g_type_check_instance_cast(GTypeInstance*, int) = type_check_instance_cast;
extern int Pure_g_type_check_instance_is_a(GTypeInstance*, int) = type_check_instance_is_a;
extern GTypeClass* Pure_g_type_check_class_cast(GTypeClass*, int) = type_check_class_cast;
extern int Pure_g_type_check_class_is_a(GTypeClass*, int) = type_check_class_is_a;
extern int Pure_g_type_check_is_value_type(int) = type_check_is_value_type;
extern int Pure_g_type_check_value(GValue*) = type_check_value;
extern int Pure_g_type_check_value_holds(GValue*, int) = type_check_value_holds;
extern int Pure_g_type_test_flags(int, int) = type_test_flags;
extern char* Pure_g_type_name_from_instance(GTypeInstance*) = type_name_from_instance;
extern char* Pure_g_type_name_from_class(GTypeClass*) = type_name_from_class;
extern void* Pure_g_boxed_copy(int, void*) = boxed_copy;
extern void Pure_g_boxed_free(int, void*) = boxed_free;
extern void Pure_g_value_set_boxed(GValue*, void*) = value_set_boxed;
extern void Pure_g_value_set_static_boxed(GValue*, void*) = value_set_static_boxed;
extern void* Pure_g_value_get_boxed(GValue*) = value_get_boxed;
extern void* Pure_g_value_dup_boxed(GValue*) = value_dup_boxed;
extern int Pure_g_boxed_type_register_static(char*, void*, void*) = boxed_type_register_static;
extern void Pure_g_value_take_boxed(GValue*, void*) = value_take_boxed;
extern void Pure_g_value_set_boxed_take_ownership(GValue*, void*) = value_set_boxed_take_ownership;
extern int Pure_g_closure_get_type() = closure_get_type;
extern int Pure_g_value_get_type() = value_get_type;
extern int Pure_g_value_array_get_type() = value_array_get_type;
extern int Pure_g_date_get_type() = date_get_type;
extern int Pure_g_strv_get_type() = strv_get_type;
extern int Pure_g_gstring_get_type() = gstring_get_type;
extern int Pure_g_hash_table_get_type() = hash_table_get_type;
extern int Pure_g_regex_get_type() = regex_get_type;
extern GEnumValue* Pure_g_enum_get_value(GEnumClass*, int) = enum_get_value;
extern GEnumValue* Pure_g_enum_get_value_by_name(GEnumClass*, char*) = enum_get_value_by_name;
extern GEnumValue* Pure_g_enum_get_value_by_nick(GEnumClass*, char*) = enum_get_value_by_nick;
extern GFlagsValue* Pure_g_flags_get_first_value(GFlagsClass*, int) = flags_get_first_value;
extern GFlagsValue* Pure_g_flags_get_value_by_name(GFlagsClass*, char*) = flags_get_value_by_name;
extern GFlagsValue* Pure_g_flags_get_value_by_nick(GFlagsClass*, char*) = flags_get_value_by_nick;
extern void Pure_g_value_set_enum(GValue*, int) = value_set_enum;
extern int Pure_g_value_get_enum(GValue*) = value_get_enum;
extern void Pure_g_value_set_flags(GValue*, int) = value_set_flags;
extern int Pure_g_value_get_flags(GValue*) = value_get_flags;
extern int Pure_g_enum_register_static(char*, GEnumValue*) = enum_register_static;
extern int Pure_g_flags_register_static(char*, GFlagsValue*) = flags_register_static;
extern void Pure_g_enum_complete_type_info(int, GTypeInfo*, GEnumValue*) = enum_complete_type_info;
extern void Pure_g_flags_complete_type_info(int, GTypeInfo*, GFlagsValue*) = flags_complete_type_info;
extern GValue* Pure_g_value_init(GValue*, int) = value_init;
extern void Pure_g_value_copy(GValue*, GValue*) = value_copy;
extern GValue* Pure_g_value_reset(GValue*) = value_reset;
extern void Pure_g_value_unset(GValue*) = value_unset;
extern void Pure_g_value_set_instance(GValue*, void*) = value_set_instance;
extern int Pure_g_value_fits_pointer(GValue*) = value_fits_pointer;
extern void* Pure_g_value_peek_pointer(GValue*) = value_peek_pointer;
extern int Pure_g_value_type_compatible(int, int) = value_type_compatible;
extern int Pure_g_value_type_transformable(int, int) = value_type_transformable;
extern int Pure_g_value_transform(GValue*, GValue*) = value_transform;
extern void Pure_g_value_register_transform_func(int, int, void*) = value_register_transform_func;
extern GParamSpec* Pure_g_param_spec_ref(GParamSpec*) = param_spec_ref;
extern void Pure_g_param_spec_unref(GParamSpec*) = param_spec_unref;
extern void Pure_g_param_spec_sink(GParamSpec*) = param_spec_sink;
extern GParamSpec* Pure_g_param_spec_ref_sink(GParamSpec*) = param_spec_ref_sink;
extern void* Pure_g_param_spec_get_qdata(GParamSpec*, int) = param_spec_get_qdata;
extern void Pure_g_param_spec_set_qdata(GParamSpec*, int, void*) = param_spec_set_qdata;
extern void Pure_g_param_spec_set_qdata_full(GParamSpec*, int, void*, void*) = param_spec_set_qdata_full;
extern void* Pure_g_param_spec_steal_qdata(GParamSpec*, int) = param_spec_steal_qdata;
extern GParamSpec* Pure_g_param_spec_get_redirect_target(GParamSpec*) = param_spec_get_redirect_target;
extern void Pure_g_param_value_set_default(GParamSpec*, GValue*) = param_value_set_default;
extern int Pure_g_param_value_defaults(GParamSpec*, GValue*) = param_value_defaults;
extern int Pure_g_param_value_validate(GParamSpec*, GValue*) = param_value_validate;
extern int Pure_g_param_value_convert(GParamSpec*, GValue*, GValue*, int) = param_value_convert;
extern int Pure_g_param_values_cmp(GParamSpec*, GValue*, GValue*) = param_values_cmp;
extern char* Pure_g_param_spec_get_name(GParamSpec*) = param_spec_get_name;
extern char* Pure_g_param_spec_get_nick(GParamSpec*) = param_spec_get_nick;
extern char* Pure_g_param_spec_get_blurb(GParamSpec*) = param_spec_get_blurb;
extern void Pure_g_value_set_param(GValue*, GParamSpec*) = value_set_param;
extern GParamSpec* Pure_g_value_get_param(GValue*) = value_get_param;
extern GParamSpec* Pure_g_value_dup_param(GValue*) = value_dup_param;
extern void Pure_g_value_take_param(GValue*, GParamSpec*) = value_take_param;
extern void Pure_g_value_set_param_take_ownership(GValue*, GParamSpec*) = value_set_param_take_ownership;
extern int Pure_g_param_type_register_static(char*, GParamSpecTypeInfo*) = param_type_register_static;
extern void* Pure_g_param_spec_internal(int, char*, char*, char*, int) = param_spec_internal;
extern GParamSpecPool* Pure_g_param_spec_pool_new(int) = param_spec_pool_new;
extern void Pure_g_param_spec_pool_insert(GParamSpecPool*, GParamSpec*, int) = param_spec_pool_insert;
extern void Pure_g_param_spec_pool_remove(GParamSpecPool*, GParamSpec*) = param_spec_pool_remove;
extern GParamSpec* Pure_g_param_spec_pool_lookup(GParamSpecPool*, char*, int, int) = param_spec_pool_lookup;
extern GList* Pure_g_param_spec_pool_list_owned(GParamSpecPool*, int) = param_spec_pool_list_owned;
extern GParamSpec** Pure_g_param_spec_pool_list(GParamSpecPool*, int, int*) = param_spec_pool_list;
extern GClosure* Pure_g_cclosure_new(void*, void*, void*) = cclosure_new;
extern GClosure* Pure_g_cclosure_new_swap(void*, void*, void*) = cclosure_new_swap;
extern GClosure* Pure_g_signal_type_cclosure_new(int, int) = signal_type_cclosure_new;
extern GClosure* Pure_g_closure_ref(GClosure*) = closure_ref;
extern void Pure_g_closure_sink(GClosure*) = closure_sink;
extern void Pure_g_closure_unref(GClosure*) = closure_unref;
extern GClosure* Pure_g_closure_new_simple(int, void*) = closure_new_simple;
extern void Pure_g_closure_add_finalize_notifier(GClosure*, void*, void*) = closure_add_finalize_notifier;
extern void Pure_g_closure_remove_finalize_notifier(GClosure*, void*, void*) = closure_remove_finalize_notifier;
extern void Pure_g_closure_add_invalidate_notifier(GClosure*, void*, void*) = closure_add_invalidate_notifier;
extern void Pure_g_closure_remove_invalidate_notifier(GClosure*, void*, void*) = closure_remove_invalidate_notifier;
extern void Pure_g_closure_add_marshal_guards(GClosure*, void*, void*, void*, void*) = closure_add_marshal_guards;
extern void Pure_g_closure_set_marshal(GClosure*, void*) = closure_set_marshal;
extern void Pure_g_closure_set_meta_marshal(GClosure*, void*, void*) = closure_set_meta_marshal;
extern void Pure_g_closure_invalidate(GClosure*) = closure_invalidate;
extern void Pure_g_closure_invoke(GClosure*, GValue*, int, GValue*, void*) = closure_invoke;
extern void Pure_g_cclosure_marshal_VOID__VOID(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__VOID;
extern void Pure_g_cclosure_marshal_VOID__BOOLEAN(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__BOOLEAN;
extern void Pure_g_cclosure_marshal_VOID__CHAR(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__CHAR;
extern void Pure_g_cclosure_marshal_VOID__UCHAR(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UCHAR;
extern void Pure_g_cclosure_marshal_VOID__INT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__INT;
extern void Pure_g_cclosure_marshal_VOID__UINT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UINT;
extern void Pure_g_cclosure_marshal_VOID__LONG(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__LONG;
extern void Pure_g_cclosure_marshal_VOID__ULONG(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__ULONG;
extern void Pure_g_cclosure_marshal_VOID__ENUM(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__ENUM;
extern void Pure_g_cclosure_marshal_VOID__FLAGS(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__FLAGS;
extern void Pure_g_cclosure_marshal_VOID__FLOAT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__FLOAT;
extern void Pure_g_cclosure_marshal_VOID__DOUBLE(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__DOUBLE;
extern void Pure_g_cclosure_marshal_VOID__STRING(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__STRING;
extern void Pure_g_cclosure_marshal_VOID__PARAM(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__PARAM;
extern void Pure_g_cclosure_marshal_VOID__BOXED(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__BOXED;
extern void Pure_g_cclosure_marshal_VOID__POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__POINTER;
extern void Pure_g_cclosure_marshal_VOID__OBJECT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__OBJECT;
extern void Pure_g_cclosure_marshal_VOID__UINT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UINT_POINTER;
extern void Pure_g_cclosure_marshal_BOOLEAN__FLAGS(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_BOOLEAN__FLAGS;
extern void Pure_g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_STRING__OBJECT_POINTER;
extern int Pure_g_signal_newv(char*, int, int, GClosure*, void*, void*, void*, int, int, int*) = signal_newv;
extern int Pure_g_signal_new_valist(char*, int, int, GClosure*, void*, void*, void*, int, int, void*) = signal_new_valist;
extern int Pure_g_signal_new(char*, int, int, int, void*, void*, void*, int, int) = signal_new;
extern int Pure_g_signal_new_class_handler(char*, int, int, void*, void*, void*, void*, int, int) = signal_new_class_handler;
extern void Pure_g_signal_emitv(GValue*, int, int, GValue*) = signal_emitv;
extern void Pure_g_signal_emit_valist(void*, int, int, void*) = signal_emit_valist;
extern void Pure_g_signal_emit(void*, int, int) = signal_emit;
extern void Pure_g_signal_emit_by_name(void*, char*) = signal_emit_by_name;
extern int Pure_g_signal_lookup(char*, int) = signal_lookup;
extern char* Pure_g_signal_name(int) = signal_name;
extern void Pure_g_signal_query(int, GSignalQuery*) = signal_query;
extern int* Pure_g_signal_list_ids(int, int*) = signal_list_ids;
extern int Pure_g_signal_parse_name(char*, int, int*, int*, int) = signal_parse_name;
extern GSignalInvocationHint* Pure_g_signal_get_invocation_hint(void*) = signal_get_invocation_hint;
extern void Pure_g_signal_stop_emission(void*, int, int) = signal_stop_emission;
extern void Pure_g_signal_stop_emission_by_name(void*, char*) = signal_stop_emission_by_name;
extern int Pure_g_signal_add_emission_hook(int, int, void*, void*, void*) = signal_add_emission_hook;
extern void Pure_g_signal_remove_emission_hook(int, int) = signal_remove_emission_hook;
extern int Pure_g_signal_has_handler_pending(void*, int, int, int) = signal_has_handler_pending;
extern int Pure_g_signal_connect_closure_by_id(void*, int, int, GClosure*, int) = signal_connect_closure_by_id;
extern int Pure_g_signal_connect_closure(void*, char*, GClosure*, int) = signal_connect_closure;
extern int Pure_g_signal_connect_data(void*, char*, void*, void*, void*, int) = signal_connect_data;
extern void Pure_g_signal_handler_block(void*, int) = signal_handler_block;
extern void Pure_g_signal_handler_unblock(void*, int) = signal_handler_unblock;
extern void Pure_g_signal_handler_disconnect(void*, int) = signal_handler_disconnect;
extern int Pure_g_signal_handler_is_connected(void*, int) = signal_handler_is_connected;
extern int Pure_g_signal_handler_find(void*, int, int, int, GClosure*, void*, void*) = signal_handler_find;
extern int Pure_g_signal_handlers_block_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_block_matched;
extern int Pure_g_signal_handlers_unblock_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_unblock_matched;
extern int Pure_g_signal_handlers_disconnect_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_disconnect_matched;
extern void Pure_g_signal_override_class_closure(int, int, GClosure*) = signal_override_class_closure;
extern void Pure_g_signal_override_class_handler(char*, int, void*) = signal_override_class_handler;
extern void Pure_g_signal_chain_from_overridden(GValue*, GValue*) = signal_chain_from_overridden;
extern void Pure_g_signal_chain_from_overridden_handler(void*) = signal_chain_from_overridden_handler;
extern int Pure_g_signal_accumulator_true_handled(GSignalInvocationHint*, GValue*, GValue*, void*) = signal_accumulator_true_handled;
extern void Pure_g_signal_handlers_destroy(void*) = signal_handlers_destroy;
extern int Pure_g_initially_unowned_get_type() = initially_unowned_get_type;
extern void Pure_g_object_class_install_property(GObjectClass*, int, GParamSpec*) = object_class_install_property;
extern GParamSpec* Pure_g_object_class_find_property(GObjectClass*, char*) = object_class_find_property;
extern GParamSpec** Pure_g_object_class_list_properties(GObjectClass*, int*) = object_class_list_properties;
extern void Pure_g_object_class_override_property(GObjectClass*, int, char*) = object_class_override_property;
extern void Pure_g_object_interface_install_property(void*, GParamSpec*) = object_interface_install_property;
extern GParamSpec* Pure_g_object_interface_find_property(void*, char*) = object_interface_find_property;
extern GParamSpec** Pure_g_object_interface_list_properties(void*, int*) = object_interface_list_properties;
extern int Pure_g_object_get_type() = object_get_type;
extern void* Pure_g_object_new(int, char*) = object_new;
extern void* Pure_g_object_newv(int, int, GParameter*) = object_newv;
extern GObject* Pure_g_object_new_valist(int, char*, void*) = object_new_valist;
extern void Pure_g_object_set(void*, char*) = object_set;
extern void Pure_g_object_get(void*, char*) = object_get;
extern void* Pure_g_object_connect(void*, char*) = object_connect;
extern void Pure_g_object_disconnect(void*, char*) = object_disconnect;
extern void Pure_g_object_set_valist(GObject*, char*, void*) = object_set_valist;
extern void Pure_g_object_get_valist(GObject*, char*, void*) = object_get_valist;
extern void Pure_g_object_set_property(GObject*, char*, GValue*) = object_set_property;
extern void Pure_g_object_get_property(GObject*, char*, GValue*) = object_get_property;
extern void Pure_g_object_freeze_notify(GObject*) = object_freeze_notify;
extern void Pure_g_object_notify(GObject*, char*) = object_notify;
extern void Pure_g_object_thaw_notify(GObject*) = object_thaw_notify;
extern int Pure_g_object_is_floating(void*) = object_is_floating;
extern void* Pure_g_object_ref_sink(void*) = object_ref_sink;
extern void* Pure_g_object_ref(void*) = object_ref;
extern void Pure_g_object_unref(void*) = object_unref;
extern void Pure_g_object_weak_ref(GObject*, void*, void*) = object_weak_ref;
extern void Pure_g_object_weak_unref(GObject*, void*, void*) = object_weak_unref;
extern void Pure_g_object_add_weak_pointer(GObject*, void**) = object_add_weak_pointer;
extern void Pure_g_object_remove_weak_pointer(GObject*, void**) = object_remove_weak_pointer;
extern void Pure_g_object_add_toggle_ref(GObject*, void*, void*) = object_add_toggle_ref;
extern void Pure_g_object_remove_toggle_ref(GObject*, void*, void*) = object_remove_toggle_ref;
extern void* Pure_g_object_get_qdata(GObject*, int) = object_get_qdata;
extern void Pure_g_object_set_qdata(GObject*, int, void*) = object_set_qdata;
extern void Pure_g_object_set_qdata_full(GObject*, int, void*, void*) = object_set_qdata_full;
extern void* Pure_g_object_steal_qdata(GObject*, int) = object_steal_qdata;
extern void* Pure_g_object_get_data(GObject*, char*) = object_get_data;
extern void Pure_g_object_set_data(GObject*, char*, void*) = object_set_data;
extern void Pure_g_object_set_data_full(GObject*, char*, void*, void*) = object_set_data_full;
extern void* Pure_g_object_steal_data(GObject*, char*) = object_steal_data;
extern void Pure_g_object_watch_closure(GObject*, GClosure*) = object_watch_closure;
extern GClosure* Pure_g_cclosure_new_object(void*, GObject*) = cclosure_new_object;
extern GClosure* Pure_g_cclosure_new_object_swap(void*, GObject*) = cclosure_new_object_swap;
extern GClosure* Pure_g_closure_new_object(int, GObject*) = closure_new_object;
extern void Pure_g_value_set_object(GValue*, void*) = value_set_object;
extern void* Pure_g_value_get_object(GValue*) = value_get_object;
extern void* Pure_g_value_dup_object(GValue*) = value_dup_object;
extern int Pure_g_signal_connect_object(void*, char*, void*, void*, int) = signal_connect_object;
extern void Pure_g_object_force_floating(GObject*) = object_force_floating;
extern void Pure_g_object_run_dispose(GObject*) = object_run_dispose;
extern void Pure_g_value_take_object(GValue*, void*) = value_take_object;
extern void Pure_g_value_set_object_take_ownership(GValue*, void*) = value_set_object_take_ownership;
extern int Pure_g_object_compat_control(int, void*) = object_compat_control;
extern GParamSpec* Pure_g_param_spec_char(char*, char*, char*, char, char, char, int) = param_spec_char;
extern GParamSpec* Pure_g_param_spec_uchar(char*, char*, char*, char, char, char, int) = param_spec_uchar;
extern GParamSpec* Pure_g_param_spec_boolean(char*, char*, char*, int, int) = param_spec_boolean;
extern GParamSpec* Pure_g_param_spec_int(char*, char*, char*, int, int, int, int) = param_spec_int;
extern GParamSpec* Pure_g_param_spec_uint(char*, char*, char*, int, int, int, int) = param_spec_uint;
extern GParamSpec* Pure_g_param_spec_long(char*, char*, char*, int, int, int, int) = param_spec_long;
extern GParamSpec* Pure_g_param_spec_ulong(char*, char*, char*, int, int, int, int) = param_spec_ulong;
extern GParamSpec* Pure_g_param_spec_int64(char*, char*, char*, int, int, int, int) = param_spec_int64;
extern GParamSpec* Pure_g_param_spec_uint64(char*, char*, char*, int, int, int, int) = param_spec_uint64;
extern GParamSpec* Pure_g_param_spec_unichar(char*, char*, char*, int, int) = param_spec_unichar;
extern GParamSpec* Pure_g_param_spec_enum(char*, char*, char*, int, int, int) = param_spec_enum;
extern GParamSpec* Pure_g_param_spec_flags(char*, char*, char*, int, int, int) = param_spec_flags;
extern GParamSpec* Pure_g_param_spec_float(char*, char*, char*, float, float, float, int) = param_spec_float;
extern GParamSpec* Pure_g_param_spec_double(char*, char*, char*, double, double, double, int) = param_spec_double;
extern GParamSpec* Pure_g_param_spec_string(char*, char*, char*, char*, int) = param_spec_string;
extern GParamSpec* Pure_g_param_spec_param(char*, char*, char*, int, int) = param_spec_param;
extern GParamSpec* Pure_g_param_spec_boxed(char*, char*, char*, int, int) = param_spec_boxed;
extern GParamSpec* Pure_g_param_spec_pointer(char*, char*, char*, int) = param_spec_pointer;
extern GParamSpec* Pure_g_param_spec_value_array(char*, char*, char*, GParamSpec*, int) = param_spec_value_array;
extern GParamSpec* Pure_g_param_spec_object(char*, char*, char*, int, int) = param_spec_object;
extern GParamSpec* Pure_g_param_spec_override(char*, GParamSpec*) = param_spec_override;
extern GParamSpec* Pure_g_param_spec_gtype(char*, char*, char*, int, int) = param_spec_gtype;
extern void Pure_g_source_set_closure(GSource*, GClosure*) = source_set_closure;
extern int Pure_g_io_channel_get_type() = io_channel_get_type;
extern int Pure_g_io_condition_get_type() = io_condition_get_type;
extern int Pure_g_type_module_get_type() = type_module_get_type;
extern int Pure_g_type_module_use(GTypeModule*) = type_module_use;
extern void Pure_g_type_module_unuse(GTypeModule*) = type_module_unuse;
extern void Pure_g_type_module_set_name(GTypeModule*, char*) = type_module_set_name;
extern int Pure_g_type_module_register_type(GTypeModule*, int, char*, GTypeInfo*, int) = type_module_register_type;
extern void Pure_g_type_module_add_interface(GTypeModule*, int, int, GInterfaceInfo*) = type_module_add_interface;
extern int Pure_g_type_module_register_enum(GTypeModule*, char*, GEnumValue*) = type_module_register_enum;
extern int Pure_g_type_module_register_flags(GTypeModule*, char*, GFlagsValue*) = type_module_register_flags;
extern int Pure_g_type_plugin_get_type() = type_plugin_get_type;
extern void Pure_g_type_plugin_use(GTypePlugin*) = type_plugin_use;
extern void Pure_g_type_plugin_unuse(GTypePlugin*) = type_plugin_unuse;
extern void Pure_g_type_plugin_complete_type_info(GTypePlugin*, int, GTypeInfo*, GTypeValueTable*) = type_plugin_complete_type_info;
extern void Pure_g_type_plugin_complete_interface_info(GTypePlugin*, int, int, GInterfaceInfo*) = type_plugin_complete_interface_info;
extern GValue* Pure_g_value_array_get_nth(GValueArray*, int) = value_array_get_nth;
extern GValueArray* Pure_g_value_array_new(int) = value_array_new;
extern void Pure_g_value_array_free(GValueArray*) = value_array_free;
extern GValueArray* Pure_g_value_array_copy(GValueArray*) = value_array_copy;
extern GValueArray* Pure_g_value_array_prepend(GValueArray*, GValue*) = value_array_prepend;
extern GValueArray* Pure_g_value_array_append(GValueArray*, GValue*) = value_array_append;
extern GValueArray* Pure_g_value_array_insert(GValueArray*, int, GValue*) = value_array_insert;
extern GValueArray* Pure_g_value_array_remove(GValueArray*, int) = value_array_remove;
extern GValueArray* Pure_g_value_array_sort(GValueArray*, void*) = value_array_sort;
extern GValueArray* Pure_g_value_array_sort_with_data(GValueArray*, void*, void*) = value_array_sort_with_data;
extern void Pure_g_value_set_char(GValue*, char) = value_set_char;
extern char Pure_g_value_get_char(GValue*) = value_get_char;
extern void Pure_g_value_set_uchar(GValue*, char) = value_set_uchar;
extern char Pure_g_value_get_uchar(GValue*) = value_get_uchar;
extern void Pure_g_value_set_boolean(GValue*, int) = value_set_boolean;
extern int Pure_g_value_get_boolean(GValue*) = value_get_boolean;
extern void Pure_g_value_set_int(GValue*, int) = value_set_int;
extern int Pure_g_value_get_int(GValue*) = value_get_int;
extern void Pure_g_value_set_uint(GValue*, int) = value_set_uint;
extern int Pure_g_value_get_uint(GValue*) = value_get_uint;
extern void Pure_g_value_set_long(GValue*, int) = value_set_long;
extern int Pure_g_value_get_long(GValue*) = value_get_long;
extern void Pure_g_value_set_ulong(GValue*, int) = value_set_ulong;
extern int Pure_g_value_get_ulong(GValue*) = value_get_ulong;
extern void Pure_g_value_set_int64(GValue*, int) = value_set_int64;
extern int Pure_g_value_get_int64(GValue*) = value_get_int64;
extern void Pure_g_value_set_uint64(GValue*, int) = value_set_uint64;
extern int Pure_g_value_get_uint64(GValue*) = value_get_uint64;
extern void Pure_g_value_set_float(GValue*, float) = value_set_float;
extern float Pure_g_value_get_float(GValue*) = value_get_float;
extern void Pure_g_value_set_double(GValue*, double) = value_set_double;
extern double Pure_g_value_get_double(GValue*) = value_get_double;
extern void Pure_g_value_set_string(GValue*, char*) = value_set_string;
extern void Pure_g_value_set_static_string(GValue*, char*) = value_set_static_string;
extern char* Pure_g_value_get_string(GValue*) = value_get_string;
extern char* Pure_g_value_dup_string(GValue*) = value_dup_string;
extern void Pure_g_value_set_pointer(GValue*, void*) = value_set_pointer;
extern void* Pure_g_value_get_pointer(GValue*) = value_get_pointer;
extern int Pure_g_gtype_get_type() = gtype_get_type;
extern void Pure_g_value_set_gtype(GValue*, int) = value_set_gtype;
extern int Pure_g_value_get_gtype(GValue*) = value_get_gtype;
extern int Pure_g_pointer_type_register_static(char*) = pointer_type_register_static;
extern char* Pure_g_strdup_value_contents(GValue*) = strdup_value_contents;
extern void Pure_g_value_take_string(GValue*, char*) = value_take_string;
extern void Pure_g_value_set_string_take_ownership(GValue*, char*) = value_set_string_take_ownership;
/* /usr/include/glib-2.0/gio/gio.h: */
using "lib:glib";

namespace glib;
const glib::FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";
const glib::FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";
const glib::FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";
const glib::FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";
const glib::FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";
const glib::FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";
const glib::FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";
const glib::FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";
const glib::FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";
const glib::FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";
const glib::FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";
const glib::FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";
const glib::FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";
const glib::FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";
const glib::FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";
const glib::FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";
const glib::FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";
const glib::FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";
const glib::FILE_ATTRIBUTE_ID_FILE = "id::file";
const glib::FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";
const glib::FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";
const glib::FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";
const glib::FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";
const glib::FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";
const glib::FILE_ATTRIBUTE_TIME_ACCESS = "time::access";
const glib::FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";
const glib::FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";
const glib::FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";
const glib::FILE_ATTRIBUTE_TIME_CREATED = "time::created";
const glib::FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";
const glib::FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";
const glib::FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";
const glib::FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";
const glib::FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";
const glib::FILE_ATTRIBUTE_UNIX_UID = "unix::uid";
const glib::FILE_ATTRIBUTE_UNIX_GID = "unix::gid";
const glib::FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";
const glib::FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";
const glib::FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";
const glib::FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";
const glib::FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";
const glib::FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";
const glib::FILE_ATTRIBUTE_OWNER_USER = "owner::user";
const glib::FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";
const glib::FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";
const glib::FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";
const glib::FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";
const glib::FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";
const glib::FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";
const glib::FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";
const glib::FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";
const glib::FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";
const glib::FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";
const glib::FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";
const glib::FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";
const glib::VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";
const glib::NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";
const glib::VFS_EXTENSION_POINT_NAME = "gio-vfs";
const glib::VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi";
const glib::VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
const glib::VOLUME_IDENTIFIER_KIND_LABEL = "label";
const glib::VOLUME_IDENTIFIER_KIND_UUID = "uuid";
const glib::VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";
const glib::APP_INFO_CREATE_NONE = 0;
const glib::APP_INFO_CREATE_NEEDS_TERMINAL = 1;
const glib::APP_INFO_CREATE_SUPPORTS_URIS = 2;
const glib::ASK_PASSWORD_NEED_PASSWORD = 1;
const glib::ASK_PASSWORD_NEED_USERNAME = 2;
const glib::ASK_PASSWORD_NEED_DOMAIN = 4;
const glib::ASK_PASSWORD_SAVING_SUPPORTED = 8;
const glib::ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16;
const glib::DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0;
const glib::DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1;
const glib::DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2;
const glib::DATA_STREAM_NEWLINE_TYPE_LF = 0;
const glib::DATA_STREAM_NEWLINE_TYPE_CR = 1;
const glib::DATA_STREAM_NEWLINE_TYPE_CR_LF = 2;
const glib::DATA_STREAM_NEWLINE_TYPE_ANY = 3;
const glib::EMBLEM_ORIGIN_UNKNOWN = 0;
const glib::EMBLEM_ORIGIN_DEVICE = 1;
const glib::EMBLEM_ORIGIN_LIVEMETADATA = 2;
const glib::EMBLEM_ORIGIN_TAG = 3;
const glib::FILE_ATTRIBUTE_INFO_NONE = 0;
const glib::FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1;
const glib::FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2;
const glib::FILE_ATTRIBUTE_STATUS_UNSET = 0;
const glib::FILE_ATTRIBUTE_STATUS_SET = 1;
const glib::FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2;
const glib::FILE_ATTRIBUTE_TYPE_INVALID = 0;
const glib::FILE_ATTRIBUTE_TYPE_STRING = 1;
const glib::FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2;
const glib::FILE_ATTRIBUTE_TYPE_BOOLEAN = 3;
const glib::FILE_ATTRIBUTE_TYPE_UINT32 = 4;
const glib::FILE_ATTRIBUTE_TYPE_INT32 = 5;
const glib::FILE_ATTRIBUTE_TYPE_UINT64 = 6;
const glib::FILE_ATTRIBUTE_TYPE_INT64 = 7;
const glib::FILE_ATTRIBUTE_TYPE_OBJECT = 8;
const glib::FILE_COPY_NONE = 0;
const glib::FILE_COPY_OVERWRITE = 1;
const glib::FILE_COPY_BACKUP = 2;
const glib::FILE_COPY_NOFOLLOW_SYMLINKS = 4;
const glib::FILE_COPY_ALL_METADATA = 8;
const glib::FILE_COPY_NO_FALLBACK_FOR_MOVE = 16;
const glib::FILE_CREATE_NONE = 0;
const glib::FILE_CREATE_PRIVATE = 1;
const glib::FILE_MONITOR_EVENT_CHANGED = 0;
const glib::FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1;
const glib::FILE_MONITOR_EVENT_DELETED = 2;
const glib::FILE_MONITOR_EVENT_CREATED = 3;
const glib::FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4;
const glib::FILE_MONITOR_EVENT_PRE_UNMOUNT = 5;
const glib::FILE_MONITOR_EVENT_UNMOUNTED = 6;
const glib::FILE_MONITOR_NONE = 0;
const glib::FILE_MONITOR_WATCH_MOUNTS = 1;
const glib::FILE_QUERY_INFO_NONE = 0;
const glib::FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1;
const glib::FILE_TYPE_UNKNOWN = 0;
const glib::FILE_TYPE_REGULAR = 1;
const glib::FILE_TYPE_DIRECTORY = 2;
const glib::FILE_TYPE_SYMBOLIC_LINK = 3;
const glib::FILE_TYPE_SPECIAL = 4;
const glib::FILE_TYPE_SHORTCUT = 5;
const glib::FILE_TYPE_MOUNTABLE = 6;
const glib::FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0;
const glib::FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1;
const glib::FILESYSTEM_PREVIEW_TYPE_NEVER = 2;
const glib::IO_ERROR_FAILED = 0;
const glib::IO_ERROR_NOT_FOUND = 1;
const glib::IO_ERROR_EXISTS = 2;
const glib::IO_ERROR_IS_DIRECTORY = 3;
const glib::IO_ERROR_NOT_DIRECTORY = 4;
const glib::IO_ERROR_NOT_EMPTY = 5;
const glib::IO_ERROR_NOT_REGULAR_FILE = 6;
const glib::IO_ERROR_NOT_SYMBOLIC_LINK = 7;
const glib::IO_ERROR_NOT_MOUNTABLE_FILE = 8;
const glib::IO_ERROR_FILENAME_TOO_LONG = 9;
const glib::IO_ERROR_INVALID_FILENAME = 10;
const glib::IO_ERROR_TOO_MANY_LINKS = 11;
const glib::IO_ERROR_NO_SPACE = 12;
const glib::IO_ERROR_INVALID_ARGUMENT = 13;
const glib::IO_ERROR_PERMISSION_DENIED = 14;
const glib::IO_ERROR_NOT_SUPPORTED = 15;
const glib::IO_ERROR_NOT_MOUNTED = 16;
const glib::IO_ERROR_ALREADY_MOUNTED = 17;
const glib::IO_ERROR_CLOSED = 18;
const glib::IO_ERROR_CANCELLED = 19;
const glib::IO_ERROR_PENDING = 20;
const glib::IO_ERROR_READ_ONLY = 21;
const glib::IO_ERROR_CANT_CREATE_BACKUP = 22;
const glib::IO_ERROR_WRONG_ETAG = 23;
const glib::IO_ERROR_TIMED_OUT = 24;
const glib::IO_ERROR_WOULD_RECURSE = 25;
const glib::IO_ERROR_BUSY = 26;
const glib::IO_ERROR_WOULD_BLOCK = 27;
const glib::IO_ERROR_HOST_NOT_FOUND = 28;
const glib::IO_ERROR_WOULD_MERGE = 29;
const glib::IO_ERROR_FAILED_HANDLED = 30;
const glib::MOUNT_MOUNT_NONE = 0;
const glib::MOUNT_OPERATION_HANDLED = 0;
const glib::MOUNT_OPERATION_ABORTED = 1;
const glib::MOUNT_OPERATION_UNHANDLED = 2;
const glib::MOUNT_UNMOUNT_NONE = 0;
const glib::MOUNT_UNMOUNT_FORCE = 1;
const glib::OUTPUT_STREAM_SPLICE_NONE = 0;
const glib::OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1;
const glib::OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2;
const glib::PASSWORD_SAVE_NEVER = 0;
const glib::PASSWORD_SAVE_FOR_SESSION = 1;
const glib::PASSWORD_SAVE_PERMANENTLY = 2;
extern int Pure_g_app_info_get_type() = app_info_get_type;
extern GAppInfo* Pure_g_app_info_create_from_commandline(char*, char*, int, GError**) = app_info_create_from_commandline;
extern GAppInfo* Pure_g_app_info_dup(GAppInfo*) = app_info_dup;
extern int Pure_g_app_info_equal(GAppInfo*, GAppInfo*) = app_info_equal;
extern char* Pure_g_app_info_get_id(GAppInfo*) = app_info_get_id;
extern char* Pure_g_app_info_get_name(GAppInfo*) = app_info_get_name;
extern char* Pure_g_app_info_get_description(GAppInfo*) = app_info_get_description;
extern char* Pure_g_app_info_get_executable(GAppInfo*) = app_info_get_executable;
extern GIcon* Pure_g_app_info_get_icon(GAppInfo*) = app_info_get_icon;
extern int Pure_g_app_info_launch(GAppInfo*, GList*, GAppLaunchContext*, GError**) = app_info_launch;
extern int Pure_g_app_info_supports_uris(GAppInfo*) = app_info_supports_uris;
extern int Pure_g_app_info_supports_files(GAppInfo*) = app_info_supports_files;
extern int Pure_g_app_info_launch_uris(GAppInfo*, GList*, GAppLaunchContext*, GError**) = app_info_launch_uris;
extern int Pure_g_app_info_should_show(GAppInfo*) = app_info_should_show;
extern int Pure_g_app_info_set_as_default_for_type(GAppInfo*, char*, GError**) = app_info_set_as_default_for_type;
extern int Pure_g_app_info_set_as_default_for_extension(GAppInfo*, char*, GError**) = app_info_set_as_default_for_extension;
extern int Pure_g_app_info_add_supports_type(GAppInfo*, char*, GError**) = app_info_add_supports_type;
extern int Pure_g_app_info_can_remove_supports_type(GAppInfo*) = app_info_can_remove_supports_type;
extern int Pure_g_app_info_remove_supports_type(GAppInfo*, char*, GError**) = app_info_remove_supports_type;
extern GList* Pure_g_app_info_get_all() = app_info_get_all;
extern GList* Pure_g_app_info_get_all_for_type(char*) = app_info_get_all_for_type;
extern GAppInfo* Pure_g_app_info_get_default_for_type(char*, int) = app_info_get_default_for_type;
extern GAppInfo* Pure_g_app_info_get_default_for_uri_scheme(char*) = app_info_get_default_for_uri_scheme;
extern int Pure_g_app_info_launch_default_for_uri(char*, GAppLaunchContext*, GError**) = app_info_launch_default_for_uri;
extern int Pure_g_app_launch_context_get_type() = app_launch_context_get_type;
extern GAppLaunchContext* Pure_g_app_launch_context_new() = app_launch_context_new;
extern char* Pure_g_app_launch_context_get_display(GAppLaunchContext*, GAppInfo*, GList*) = app_launch_context_get_display;
extern char* Pure_g_app_launch_context_get_startup_notify_id(GAppLaunchContext*, GAppInfo*, GList*) = app_launch_context_get_startup_notify_id;
extern void Pure_g_app_launch_context_launch_failed(GAppLaunchContext*, char*) = app_launch_context_launch_failed;
extern int Pure_g_async_result_get_type() = async_result_get_type;
extern void* Pure_g_async_result_get_user_data(GAsyncResult*) = async_result_get_user_data;
extern GObject* Pure_g_async_result_get_source_object(GAsyncResult*) = async_result_get_source_object;
extern int Pure_g_input_stream_get_type() = input_stream_get_type;
extern int Pure_g_input_stream_read(GInputStream*, void*, int, GCancellable*, GError**) = input_stream_read;
extern int Pure_g_input_stream_read_all(GInputStream*, void*, int, int*, GCancellable*, GError**) = input_stream_read_all;
extern int Pure_g_input_stream_skip(GInputStream*, int, GCancellable*, GError**) = input_stream_skip;
extern int Pure_g_input_stream_close(GInputStream*, GCancellable*, GError**) = input_stream_close;
extern void Pure_g_input_stream_read_async(GInputStream*, void*, int, int, GCancellable*, void*, void*) = input_stream_read_async;
extern int Pure_g_input_stream_read_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_read_finish;
extern void Pure_g_input_stream_skip_async(GInputStream*, int, int, GCancellable*, void*, void*) = input_stream_skip_async;
extern int Pure_g_input_stream_skip_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_skip_finish;
extern void Pure_g_input_stream_close_async(GInputStream*, int, GCancellable*, void*, void*) = input_stream_close_async;
extern int Pure_g_input_stream_close_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_close_finish;
extern int Pure_g_input_stream_is_closed(GInputStream*) = input_stream_is_closed;
extern int Pure_g_input_stream_has_pending(GInputStream*) = input_stream_has_pending;
extern int Pure_g_input_stream_set_pending(GInputStream*, GError**) = input_stream_set_pending;
extern void Pure_g_input_stream_clear_pending(GInputStream*) = input_stream_clear_pending;
extern int Pure_g_filter_input_stream_get_type() = filter_input_stream_get_type;
extern GInputStream* Pure_g_filter_input_stream_get_base_stream(GFilterInputStream*) = filter_input_stream_get_base_stream;
extern int Pure_g_buffered_input_stream_get_type() = buffered_input_stream_get_type;
extern GInputStream* Pure_g_buffered_input_stream_new(GInputStream*) = buffered_input_stream_new;
extern GInputStream* Pure_g_buffered_input_stream_new_sized(GInputStream*, int) = buffered_input_stream_new_sized;
extern int Pure_g_buffered_input_stream_get_buffer_size(GBufferedInputStream*) = buffered_input_stream_get_buffer_size;
extern void Pure_g_buffered_input_stream_set_buffer_size(GBufferedInputStream*, int) = buffered_input_stream_set_buffer_size;
extern int Pure_g_buffered_input_stream_get_available(GBufferedInputStream*) = buffered_input_stream_get_available;
extern int Pure_g_buffered_input_stream_peek(GBufferedInputStream*, void*, int, int) = buffered_input_stream_peek;
extern void* Pure_g_buffered_input_stream_peek_buffer(GBufferedInputStream*, int*) = buffered_input_stream_peek_buffer;
extern int Pure_g_buffered_input_stream_fill(GBufferedInputStream*, int, GCancellable*, GError**) = buffered_input_stream_fill;
extern void Pure_g_buffered_input_stream_fill_async(GBufferedInputStream*, int, int, GCancellable*, void*, void*) = buffered_input_stream_fill_async;
extern int Pure_g_buffered_input_stream_fill_finish(GBufferedInputStream*, GAsyncResult*, GError**) = buffered_input_stream_fill_finish;
extern int Pure_g_buffered_input_stream_read_byte(GBufferedInputStream*, GCancellable*, GError**) = buffered_input_stream_read_byte;
extern int Pure_g_output_stream_get_type() = output_stream_get_type;
extern int Pure_g_output_stream_write(GOutputStream*, void*, int, GCancellable*, GError**) = output_stream_write;
extern int Pure_g_output_stream_write_all(GOutputStream*, void*, int, int*, GCancellable*, GError**) = output_stream_write_all;
extern int Pure_g_output_stream_splice(GOutputStream*, GInputStream*, int, GCancellable*, GError**) = output_stream_splice;
extern int Pure_g_output_stream_flush(GOutputStream*, GCancellable*, GError**) = output_stream_flush;
extern int Pure_g_output_stream_close(GOutputStream*, GCancellable*, GError**) = output_stream_close;
extern void Pure_g_output_stream_write_async(GOutputStream*, void*, int, int, GCancellable*, void*, void*) = output_stream_write_async;
extern int Pure_g_output_stream_write_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_write_finish;
extern void Pure_g_output_stream_splice_async(GOutputStream*, GInputStream*, int, int, GCancellable*, void*, void*) = output_stream_splice_async;
extern int Pure_g_output_stream_splice_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_splice_finish;
extern void Pure_g_output_stream_flush_async(GOutputStream*, int, GCancellable*, void*, void*) = output_stream_flush_async;
extern int Pure_g_output_stream_flush_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_flush_finish;
extern void Pure_g_output_stream_close_async(GOutputStream*, int, GCancellable*, void*, void*) = output_stream_close_async;
extern int Pure_g_output_stream_close_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_close_finish;
extern int Pure_g_output_stream_is_closed(GOutputStream*) = output_stream_is_closed;
extern int Pure_g_output_stream_has_pending(GOutputStream*) = output_stream_has_pending;
extern int Pure_g_output_stream_set_pending(GOutputStream*, GError**) = output_stream_set_pending;
extern void Pure_g_output_stream_clear_pending(GOutputStream*) = output_stream_clear_pending;
extern int Pure_g_filter_output_stream_get_type() = filter_output_stream_get_type;
extern GOutputStream* Pure_g_filter_output_stream_get_base_stream(GFilterOutputStream*) = filter_output_stream_get_base_stream;
extern int Pure_g_buffered_output_stream_get_type() = buffered_output_stream_get_type;
extern GOutputStream* Pure_g_buffered_output_stream_new(GOutputStream*) = buffered_output_stream_new;
extern GOutputStream* Pure_g_buffered_output_stream_new_sized(GOutputStream*, int) = buffered_output_stream_new_sized;
extern int Pure_g_buffered_output_stream_get_buffer_size(GBufferedOutputStream*) = buffered_output_stream_get_buffer_size;
extern void Pure_g_buffered_output_stream_set_buffer_size(GBufferedOutputStream*, int) = buffered_output_stream_set_buffer_size;
extern int Pure_g_buffered_output_stream_get_auto_grow(GBufferedOutputStream*) = buffered_output_stream_get_auto_grow;
extern void Pure_g_buffered_output_stream_set_auto_grow(GBufferedOutputStream*, int) = buffered_output_stream_set_auto_grow;
extern int Pure_g_cancellable_get_type() = cancellable_get_type;
extern GCancellable* Pure_g_cancellable_new() = cancellable_new;
extern int Pure_g_cancellable_is_cancelled(GCancellable*) = cancellable_is_cancelled;
extern int Pure_g_cancellable_set_error_if_cancelled(GCancellable*, GError**) = cancellable_set_error_if_cancelled;
extern int Pure_g_cancellable_get_fd(GCancellable*) = cancellable_get_fd;
extern GCancellable* Pure_g_cancellable_get_current() = cancellable_get_current;
extern void Pure_g_cancellable_push_current(GCancellable*) = cancellable_push_current;
extern void Pure_g_cancellable_pop_current(GCancellable*) = cancellable_pop_current;
extern void Pure_g_cancellable_reset(GCancellable*) = cancellable_reset;
extern void Pure_g_cancellable_cancel(GCancellable*) = cancellable_cancel;
extern int Pure_g_content_type_equals(char*, char*) = content_type_equals;
extern int Pure_g_content_type_is_a(char*, char*) = content_type_is_a;
extern int Pure_g_content_type_is_unknown(char*) = content_type_is_unknown;
extern char* Pure_g_content_type_get_description(char*) = content_type_get_description;
extern char* Pure_g_content_type_get_mime_type(char*) = content_type_get_mime_type;
extern GIcon* Pure_g_content_type_get_icon(char*) = content_type_get_icon;
extern int Pure_g_content_type_can_be_executable(char*) = content_type_can_be_executable;
extern char* Pure_g_content_type_from_mime_type(char*) = content_type_from_mime_type;
extern char* Pure_g_content_type_guess(char*, char*, int, int*) = content_type_guess;
extern char** Pure_g_content_type_guess_for_tree(GFile*) = content_type_guess_for_tree;
extern GList* Pure_g_content_types_get_registered() = content_types_get_registered;
extern int Pure_g_data_input_stream_get_type() = data_input_stream_get_type;
extern GDataInputStream* Pure_g_data_input_stream_new(GInputStream*) = data_input_stream_new;
extern void Pure_g_data_input_stream_set_byte_order(GDataInputStream*, int) = data_input_stream_set_byte_order;
extern int Pure_g_data_input_stream_get_byte_order(GDataInputStream*) = data_input_stream_get_byte_order;
extern void Pure_g_data_input_stream_set_newline_type(GDataInputStream*, int) = data_input_stream_set_newline_type;
extern int Pure_g_data_input_stream_get_newline_type(GDataInputStream*) = data_input_stream_get_newline_type;
extern char Pure_g_data_input_stream_read_byte(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_byte;
extern short Pure_g_data_input_stream_read_int16(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int16;
extern short Pure_g_data_input_stream_read_uint16(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint16;
extern int Pure_g_data_input_stream_read_int32(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int32;
extern int Pure_g_data_input_stream_read_uint32(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint32;
extern int Pure_g_data_input_stream_read_int64(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int64;
extern int Pure_g_data_input_stream_read_uint64(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint64;
extern char* Pure_g_data_input_stream_read_line(GDataInputStream*, int*, GCancellable*, GError**) = data_input_stream_read_line;
extern char* Pure_g_data_input_stream_read_until(GDataInputStream*, char*, int*, GCancellable*, GError**) = data_input_stream_read_until;
extern int Pure_g_data_output_stream_get_type() = data_output_stream_get_type;
extern GDataOutputStream* Pure_g_data_output_stream_new(GOutputStream*) = data_output_stream_new;
extern void Pure_g_data_output_stream_set_byte_order(GDataOutputStream*, int) = data_output_stream_set_byte_order;
extern int Pure_g_data_output_stream_get_byte_order(GDataOutputStream*) = data_output_stream_get_byte_order;
extern int Pure_g_data_output_stream_put_byte(GDataOutputStream*, char, GCancellable*, GError**) = data_output_stream_put_byte;
extern int Pure_g_data_output_stream_put_int16(GDataOutputStream*, short, GCancellable*, GError**) = data_output_stream_put_int16;
extern int Pure_g_data_output_stream_put_uint16(GDataOutputStream*, short, GCancellable*, GError**) = data_output_stream_put_uint16;
extern int Pure_g_data_output_stream_put_int32(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_int32;
extern int Pure_g_data_output_stream_put_uint32(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_uint32;
extern int Pure_g_data_output_stream_put_int64(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_int64;
extern int Pure_g_data_output_stream_put_uint64(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_uint64;
extern int Pure_g_data_output_stream_put_string(GDataOutputStream*, char*, GCancellable*, GError**) = data_output_stream_put_string;
extern int Pure_g_drive_get_type() = drive_get_type;
extern char* Pure_g_drive_get_name(GDrive*) = drive_get_name;
extern GIcon* Pure_g_drive_get_icon(GDrive*) = drive_get_icon;
extern int Pure_g_drive_has_volumes(GDrive*) = drive_has_volumes;
extern GList* Pure_g_drive_get_volumes(GDrive*) = drive_get_volumes;
extern int Pure_g_drive_is_media_removable(GDrive*) = drive_is_media_removable;
extern int Pure_g_drive_has_media(GDrive*) = drive_has_media;
extern int Pure_g_drive_is_media_check_automatic(GDrive*) = drive_is_media_check_automatic;
extern int Pure_g_drive_can_poll_for_media(GDrive*) = drive_can_poll_for_media;
extern int Pure_g_drive_can_eject(GDrive*) = drive_can_eject;
extern void Pure_g_drive_eject(GDrive*, int, GCancellable*, void*, void*) = drive_eject;
extern int Pure_g_drive_eject_finish(GDrive*, GAsyncResult*, GError**) = drive_eject_finish;
extern void Pure_g_drive_poll_for_media(GDrive*, GCancellable*, void*, void*) = drive_poll_for_media;
extern int Pure_g_drive_poll_for_media_finish(GDrive*, GAsyncResult*, GError**) = drive_poll_for_media_finish;
extern char* Pure_g_drive_get_identifier(GDrive*, char*) = drive_get_identifier;
extern char** Pure_g_drive_enumerate_identifiers(GDrive*) = drive_enumerate_identifiers;
extern int Pure_g_icon_get_type() = icon_get_type;
extern int Pure_g_icon_hash(void*) = icon_hash;
extern int Pure_g_icon_equal(GIcon*, GIcon*) = icon_equal;
extern int Pure_g_emblem_get_type() = emblem_get_type;
extern GEmblem* Pure_g_emblem_new(GIcon*) = emblem_new;
extern GEmblem* Pure_g_emblem_new_with_origin(GIcon*, int) = emblem_new_with_origin;
extern GIcon* Pure_g_emblem_get_icon(GEmblem*) = emblem_get_icon;
extern int Pure_g_emblem_get_origin(GEmblem*) = emblem_get_origin;
extern int Pure_g_emblemed_icon_get_type() = emblemed_icon_get_type;
extern GIcon* Pure_g_emblemed_icon_new(GIcon*, GEmblem*) = emblemed_icon_new;
extern GIcon* Pure_g_emblemed_icon_get_icon(GEmblemedIcon*) = emblemed_icon_get_icon;
extern GList* Pure_g_emblemed_icon_get_emblems(GEmblemedIcon*) = emblemed_icon_get_emblems;
extern void Pure_g_emblemed_icon_add_emblem(GEmblemedIcon*, GEmblem*) = emblemed_icon_add_emblem;
extern int Pure_g_file_get_type() = file_get_type;
extern GFile* Pure_g_file_new_for_path(char*) = file_new_for_path;
extern GFile* Pure_g_file_new_for_uri(char*) = file_new_for_uri;
extern GFile* Pure_g_file_new_for_commandline_arg(char*) = file_new_for_commandline_arg;
extern GFile* Pure_g_file_parse_name(char*) = file_parse_name;
extern GFile* Pure_g_file_dup(GFile*) = file_dup;
extern int Pure_g_file_hash(void*) = file_hash;
extern int Pure_g_file_equal(GFile*, GFile*) = file_equal;
extern char* Pure_g_file_get_basename(GFile*) = file_get_basename;
extern char* Pure_g_file_get_path(GFile*) = file_get_path;
extern char* Pure_g_file_get_uri(GFile*) = file_get_uri;
extern char* Pure_g_file_get_parse_name(GFile*) = file_get_parse_name;
extern GFile* Pure_g_file_get_parent(GFile*) = file_get_parent;
extern GFile* Pure_g_file_get_child(GFile*, char*) = file_get_child;
extern GFile* Pure_g_file_get_child_for_display_name(GFile*, char*, GError**) = file_get_child_for_display_name;
extern int Pure_g_file_has_prefix(GFile*, GFile*) = file_has_prefix;
extern char* Pure_g_file_get_relative_path(GFile*, GFile*) = file_get_relative_path;
extern GFile* Pure_g_file_resolve_relative_path(GFile*, char*) = file_resolve_relative_path;
extern int Pure_g_file_is_native(GFile*) = file_is_native;
extern int Pure_g_file_has_uri_scheme(GFile*, char*) = file_has_uri_scheme;
extern char* Pure_g_file_get_uri_scheme(GFile*) = file_get_uri_scheme;
extern GFileInputStream* Pure_g_file_read(GFile*, GCancellable*, GError**) = file_read;
extern void Pure_g_file_read_async(GFile*, int, GCancellable*, void*, void*) = file_read_async;
extern GFileInputStream* Pure_g_file_read_finish(GFile*, GAsyncResult*, GError**) = file_read_finish;
extern GFileOutputStream* Pure_g_file_append_to(GFile*, int, GCancellable*, GError**) = file_append_to;
extern GFileOutputStream* Pure_g_file_create(GFile*, int, GCancellable*, GError**) = file_create;
extern GFileOutputStream* Pure_g_file_replace(GFile*, char*, int, int, GCancellable*, GError**) = file_replace;
extern void Pure_g_file_append_to_async(GFile*, int, int, GCancellable*, void*, void*) = file_append_to_async;
extern GFileOutputStream* Pure_g_file_append_to_finish(GFile*, GAsyncResult*, GError**) = file_append_to_finish;
extern void Pure_g_file_create_async(GFile*, int, int, GCancellable*, void*, void*) = file_create_async;
extern GFileOutputStream* Pure_g_file_create_finish(GFile*, GAsyncResult*, GError**) = file_create_finish;
extern void Pure_g_file_replace_async(GFile*, char*, int, int, int, GCancellable*, void*, void*) = file_replace_async;
extern GFileOutputStream* Pure_g_file_replace_finish(GFile*, GAsyncResult*, GError**) = file_replace_finish;
extern int Pure_g_file_query_exists(GFile*, GCancellable*) = file_query_exists;
extern int Pure_g_file_query_file_type(GFile*, int, GCancellable*) = file_query_file_type;
extern GFileInfo* Pure_g_file_query_info(GFile*, char*, int, GCancellable*, GError**) = file_query_info;
extern void Pure_g_file_query_info_async(GFile*, char*, int, int, GCancellable*, void*, void*) = file_query_info_async;
extern GFileInfo* Pure_g_file_query_info_finish(GFile*, GAsyncResult*, GError**) = file_query_info_finish;
extern GFileInfo* Pure_g_file_query_filesystem_info(GFile*, char*, GCancellable*, GError**) = file_query_filesystem_info;
extern void Pure_g_file_query_filesystem_info_async(GFile*, char*, int, GCancellable*, void*, void*) = file_query_filesystem_info_async;
extern GFileInfo* Pure_g_file_query_filesystem_info_finish(GFile*, GAsyncResult*, GError**) = file_query_filesystem_info_finish;
extern GMount* Pure_g_file_find_enclosing_mount(GFile*, GCancellable*, GError**) = file_find_enclosing_mount;
extern void Pure_g_file_find_enclosing_mount_async(GFile*, int, GCancellable*, void*, void*) = file_find_enclosing_mount_async;
extern GMount* Pure_g_file_find_enclosing_mount_finish(GFile*, GAsyncResult*, GError**) = file_find_enclosing_mount_finish;
extern GFileEnumerator* Pure_g_file_enumerate_children(GFile*, char*, int, GCancellable*, GError**) = file_enumerate_children;
extern void Pure_g_file_enumerate_children_async(GFile*, char*, int, int, GCancellable*, void*, void*) = file_enumerate_children_async;
extern GFileEnumerator* Pure_g_file_enumerate_children_finish(GFile*, GAsyncResult*, GError**) = file_enumerate_children_finish;
extern GFile* Pure_g_file_set_display_name(GFile*, char*, GCancellable*, GError**) = file_set_display_name;
extern void Pure_g_file_set_display_name_async(GFile*, char*, int, GCancellable*, void*, void*) = file_set_display_name_async;
extern GFile* Pure_g_file_set_display_name_finish(GFile*, GAsyncResult*, GError**) = file_set_display_name_finish;
extern int Pure_g_file_delete(GFile*, GCancellable*, GError**) = file_delete;
extern int Pure_g_file_trash(GFile*, GCancellable*, GError**) = file_trash;
extern int Pure_g_file_copy(GFile*, GFile*, int, GCancellable*, void*, void*, GError**) = file_copy;
extern void Pure_g_file_copy_async(GFile*, GFile*, int, int, GCancellable*, void*, void*, void*, void*) = file_copy_async;
extern int Pure_g_file_copy_finish(GFile*, GAsyncResult*, GError**) = file_copy_finish;
extern int Pure_g_file_move(GFile*, GFile*, int, GCancellable*, void*, void*, GError**) = file_move;
extern int Pure_g_file_make_directory(GFile*, GCancellable*, GError**) = file_make_directory;
extern int Pure_g_file_make_directory_with_parents(GFile*, GCancellable*, GError**) = file_make_directory_with_parents;
extern int Pure_g_file_make_symbolic_link(GFile*, char*, GCancellable*, GError**) = file_make_symbolic_link;
extern GFileAttributeInfoList* Pure_g_file_query_settable_attributes(GFile*, GCancellable*, GError**) = file_query_settable_attributes;
extern GFileAttributeInfoList* Pure_g_file_query_writable_namespaces(GFile*, GCancellable*, GError**) = file_query_writable_namespaces;
extern int Pure_g_file_set_attribute(GFile*, char*, int, void*, int, GCancellable*, GError**) = file_set_attribute;
extern int Pure_g_file_set_attributes_from_info(GFile*, GFileInfo*, int, GCancellable*, GError**) = file_set_attributes_from_info;
extern void Pure_g_file_set_attributes_async(GFile*, GFileInfo*, int, int, GCancellable*, void*, void*) = file_set_attributes_async;
extern int Pure_g_file_set_attributes_finish(GFile*, GAsyncResult*, GFileInfo**, GError**) = file_set_attributes_finish;
extern int Pure_g_file_set_attribute_string(GFile*, char*, char*, int, GCancellable*, GError**) = file_set_attribute_string;
extern int Pure_g_file_set_attribute_byte_string(GFile*, char*, char*, int, GCancellable*, GError**) = file_set_attribute_byte_string;
extern int Pure_g_file_set_attribute_uint32(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_uint32;
extern int Pure_g_file_set_attribute_int32(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_int32;
extern int Pure_g_file_set_attribute_uint64(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_uint64;
extern int Pure_g_file_set_attribute_int64(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_int64;
extern void Pure_g_file_mount_enclosing_volume(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_mount_enclosing_volume;
extern int Pure_g_file_mount_enclosing_volume_finish(GFile*, GAsyncResult*, GError**) = file_mount_enclosing_volume_finish;
extern void Pure_g_file_mount_mountable(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_mount_mountable;
extern GFile* Pure_g_file_mount_mountable_finish(GFile*, GAsyncResult*, GError**) = file_mount_mountable_finish;
extern void Pure_g_file_unmount_mountable(GFile*, int, GCancellable*, void*, void*) = file_unmount_mountable;
extern int Pure_g_file_unmount_mountable_finish(GFile*, GAsyncResult*, GError**) = file_unmount_mountable_finish;
extern void Pure_g_file_eject_mountable(GFile*, int, GCancellable*, void*, void*) = file_eject_mountable;
extern int Pure_g_file_eject_mountable_finish(GFile*, GAsyncResult*, GError**) = file_eject_mountable_finish;
extern int Pure_g_file_copy_attributes(GFile*, GFile*, int, GCancellable*, GError**) = file_copy_attributes;
extern GFileMonitor* Pure_g_file_monitor_directory(GFile*, int, GCancellable*, GError**) = file_monitor_directory;
extern GFileMonitor* Pure_g_file_monitor_file(GFile*, int, GCancellable*, GError**) = file_monitor_file;
extern GFileMonitor* Pure_g_file_monitor(GFile*, int, GCancellable*, GError**) = file_monitor;
extern GAppInfo* Pure_g_file_query_default_handler(GFile*, GCancellable*, GError**) = file_query_default_handler;
extern int Pure_g_file_load_contents(GFile*, GCancellable*, char**, int*, char**, GError**) = file_load_contents;
extern void Pure_g_file_load_contents_async(GFile*, GCancellable*, void*, void*) = file_load_contents_async;
extern int Pure_g_file_load_contents_finish(GFile*, GAsyncResult*, char**, int*, char**, GError**) = file_load_contents_finish;
extern void Pure_g_file_load_partial_contents_async(GFile*, GCancellable*, void*, void*, void*) = file_load_partial_contents_async;
extern int Pure_g_file_load_partial_contents_finish(GFile*, GAsyncResult*, char**, int*, char**, GError**) = file_load_partial_contents_finish;
extern int Pure_g_file_replace_contents(GFile*, char*, int, char*, int, int, char**, GCancellable*, GError**) = file_replace_contents;
extern void Pure_g_file_replace_contents_async(GFile*, char*, int, char*, int, int, GCancellable*, void*, void*) = file_replace_contents_async;
extern int Pure_g_file_replace_contents_finish(GFile*, GAsyncResult*, char**, GError**) = file_replace_contents_finish;
extern GFileAttributeInfoList* Pure_g_file_attribute_info_list_new() = file_attribute_info_list_new;
extern GFileAttributeInfoList* Pure_g_file_attribute_info_list_ref(GFileAttributeInfoList*) = file_attribute_info_list_ref;
extern void Pure_g_file_attribute_info_list_unref(GFileAttributeInfoList*) = file_attribute_info_list_unref;
extern GFileAttributeInfoList* Pure_g_file_attribute_info_list_dup(GFileAttributeInfoList*) = file_attribute_info_list_dup;
extern GFileAttributeInfo* Pure_g_file_attribute_info_list_lookup(GFileAttributeInfoList*, char*) = file_attribute_info_list_lookup;
extern void Pure_g_file_attribute_info_list_add(GFileAttributeInfoList*, char*, int, int) = file_attribute_info_list_add;
extern int Pure_g_file_enumerator_get_type() = file_enumerator_get_type;
extern GFileInfo* Pure_g_file_enumerator_next_file(GFileEnumerator*, GCancellable*, GError**) = file_enumerator_next_file;
extern int Pure_g_file_enumerator_close(GFileEnumerator*, GCancellable*, GError**) = file_enumerator_close;
extern void Pure_g_file_enumerator_next_files_async(GFileEnumerator*, int, int, GCancellable*, void*, void*) = file_enumerator_next_files_async;
extern GList* Pure_g_file_enumerator_next_files_finish(GFileEnumerator*, GAsyncResult*, GError**) = file_enumerator_next_files_finish;
extern void Pure_g_file_enumerator_close_async(GFileEnumerator*, int, GCancellable*, void*, void*) = file_enumerator_close_async;
extern int Pure_g_file_enumerator_close_finish(GFileEnumerator*, GAsyncResult*, GError**) = file_enumerator_close_finish;
extern int Pure_g_file_enumerator_is_closed(GFileEnumerator*) = file_enumerator_is_closed;
extern int Pure_g_file_enumerator_has_pending(GFileEnumerator*) = file_enumerator_has_pending;
extern void Pure_g_file_enumerator_set_pending(GFileEnumerator*, int) = file_enumerator_set_pending;
extern GFile* Pure_g_file_enumerator_get_container(GFileEnumerator*) = file_enumerator_get_container;
extern int Pure_g_file_icon_get_type() = file_icon_get_type;
extern GIcon* Pure_g_file_icon_new(GFile*) = file_icon_new;
extern GFile* Pure_g_file_icon_get_file(GFileIcon*) = file_icon_get_file;
extern int Pure_g_file_info_get_type() = file_info_get_type;
extern GFileInfo* Pure_g_file_info_new() = file_info_new;
extern GFileInfo* Pure_g_file_info_dup(GFileInfo*) = file_info_dup;
extern void Pure_g_file_info_copy_into(GFileInfo*, GFileInfo*) = file_info_copy_into;
extern int Pure_g_file_info_has_attribute(GFileInfo*, char*) = file_info_has_attribute;
extern char** Pure_g_file_info_list_attributes(GFileInfo*, char*) = file_info_list_attributes;
extern int Pure_g_file_info_get_attribute_data(GFileInfo*, char*, int*, void**, int*) = file_info_get_attribute_data;
extern int Pure_g_file_info_get_attribute_type(GFileInfo*, char*) = file_info_get_attribute_type;
extern void Pure_g_file_info_remove_attribute(GFileInfo*, char*) = file_info_remove_attribute;
extern int Pure_g_file_info_get_attribute_status(GFileInfo*, char*) = file_info_get_attribute_status;
extern char* Pure_g_file_info_get_attribute_as_string(GFileInfo*, char*) = file_info_get_attribute_as_string;
extern char* Pure_g_file_info_get_attribute_string(GFileInfo*, char*) = file_info_get_attribute_string;
extern char* Pure_g_file_info_get_attribute_byte_string(GFileInfo*, char*) = file_info_get_attribute_byte_string;
extern int Pure_g_file_info_get_attribute_boolean(GFileInfo*, char*) = file_info_get_attribute_boolean;
extern int Pure_g_file_info_get_attribute_uint32(GFileInfo*, char*) = file_info_get_attribute_uint32;
extern int Pure_g_file_info_get_attribute_int32(GFileInfo*, char*) = file_info_get_attribute_int32;
extern int Pure_g_file_info_get_attribute_uint64(GFileInfo*, char*) = file_info_get_attribute_uint64;
extern int Pure_g_file_info_get_attribute_int64(GFileInfo*, char*) = file_info_get_attribute_int64;
extern GObject* Pure_g_file_info_get_attribute_object(GFileInfo*, char*) = file_info_get_attribute_object;
extern void Pure_g_file_info_set_attribute(GFileInfo*, char*, int, void*) = file_info_set_attribute;
extern void Pure_g_file_info_set_attribute_string(GFileInfo*, char*, char*) = file_info_set_attribute_string;
extern void Pure_g_file_info_set_attribute_byte_string(GFileInfo*, char*, char*) = file_info_set_attribute_byte_string;
extern void Pure_g_file_info_set_attribute_boolean(GFileInfo*, char*, int) = file_info_set_attribute_boolean;
extern void Pure_g_file_info_set_attribute_uint32(GFileInfo*, char*, int) = file_info_set_attribute_uint32;
extern void Pure_g_file_info_set_attribute_int32(GFileInfo*, char*, int) = file_info_set_attribute_int32;
extern void Pure_g_file_info_set_attribute_uint64(GFileInfo*, char*, int) = file_info_set_attribute_uint64;
extern void Pure_g_file_info_set_attribute_int64(GFileInfo*, char*, int) = file_info_set_attribute_int64;
extern void Pure_g_file_info_set_attribute_object(GFileInfo*, char*, GObject*) = file_info_set_attribute_object;
extern void Pure_g_file_info_clear_status(GFileInfo*) = file_info_clear_status;
extern int Pure_g_file_info_get_file_type(GFileInfo*) = file_info_get_file_type;
extern int Pure_g_file_info_get_is_hidden(GFileInfo*) = file_info_get_is_hidden;
extern int Pure_g_file_info_get_is_backup(GFileInfo*) = file_info_get_is_backup;
extern int Pure_g_file_info_get_is_symlink(GFileInfo*) = file_info_get_is_symlink;
extern char* Pure_g_file_info_get_name(GFileInfo*) = file_info_get_name;
extern char* Pure_g_file_info_get_display_name(GFileInfo*) = file_info_get_display_name;
extern char* Pure_g_file_info_get_edit_name(GFileInfo*) = file_info_get_edit_name;
extern GIcon* Pure_g_file_info_get_icon(GFileInfo*) = file_info_get_icon;
extern char* Pure_g_file_info_get_content_type(GFileInfo*) = file_info_get_content_type;
extern int Pure_g_file_info_get_size(GFileInfo*) = file_info_get_size;
extern void Pure_g_file_info_get_modification_time(GFileInfo*, GTimeVal*) = file_info_get_modification_time;
extern char* Pure_g_file_info_get_symlink_target(GFileInfo*) = file_info_get_symlink_target;
extern char* Pure_g_file_info_get_etag(GFileInfo*) = file_info_get_etag;
extern int Pure_g_file_info_get_sort_order(GFileInfo*) = file_info_get_sort_order;
extern void Pure_g_file_info_set_attribute_mask(GFileInfo*, GFileAttributeMatcher*) = file_info_set_attribute_mask;
extern void Pure_g_file_info_unset_attribute_mask(GFileInfo*) = file_info_unset_attribute_mask;
extern void Pure_g_file_info_set_file_type(GFileInfo*, int) = file_info_set_file_type;
extern void Pure_g_file_info_set_is_hidden(GFileInfo*, int) = file_info_set_is_hidden;
extern void Pure_g_file_info_set_is_symlink(GFileInfo*, int) = file_info_set_is_symlink;
extern void Pure_g_file_info_set_name(GFileInfo*, char*) = file_info_set_name;
extern void Pure_g_file_info_set_display_name(GFileInfo*, char*) = file_info_set_display_name;
extern void Pure_g_file_info_set_edit_name(GFileInfo*, char*) = file_info_set_edit_name;
extern void Pure_g_file_info_set_icon(GFileInfo*, GIcon*) = file_info_set_icon;
extern void Pure_g_file_info_set_content_type(GFileInfo*, char*) = file_info_set_content_type;
extern void Pure_g_file_info_set_size(GFileInfo*, int) = file_info_set_size;
extern void Pure_g_file_info_set_modification_time(GFileInfo*, GTimeVal*) = file_info_set_modification_time;
extern void Pure_g_file_info_set_symlink_target(GFileInfo*, char*) = file_info_set_symlink_target;
extern void Pure_g_file_info_set_sort_order(GFileInfo*, int) = file_info_set_sort_order;
extern GFileAttributeMatcher* Pure_g_file_attribute_matcher_new(char*) = file_attribute_matcher_new;
extern GFileAttributeMatcher* Pure_g_file_attribute_matcher_ref(GFileAttributeMatcher*) = file_attribute_matcher_ref;
extern void Pure_g_file_attribute_matcher_unref(GFileAttributeMatcher*) = file_attribute_matcher_unref;
extern int Pure_g_file_attribute_matcher_matches(GFileAttributeMatcher*, char*) = file_attribute_matcher_matches;
extern int Pure_g_file_attribute_matcher_matches_only(GFileAttributeMatcher*, char*) = file_attribute_matcher_matches_only;
extern int Pure_g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher*, char*) = file_attribute_matcher_enumerate_namespace;
extern char* Pure_g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher*) = file_attribute_matcher_enumerate_next;
extern int Pure_g_file_input_stream_get_type() = file_input_stream_get_type;
extern GFileInfo* Pure_g_file_input_stream_query_info(GFileInputStream*, char*, GCancellable*, GError**) = file_input_stream_query_info;
extern void Pure_g_file_input_stream_query_info_async(GFileInputStream*, char*, int, GCancellable*, void*, void*) = file_input_stream_query_info_async;
extern GFileInfo* Pure_g_file_input_stream_query_info_finish(GFileInputStream*, GAsyncResult*, GError**) = file_input_stream_query_info_finish;
extern int Pure_g_file_monitor_get_type() = file_monitor_get_type;
extern int Pure_g_file_monitor_cancel(GFileMonitor*) = file_monitor_cancel;
extern int Pure_g_file_monitor_is_cancelled(GFileMonitor*) = file_monitor_is_cancelled;
extern void Pure_g_file_monitor_set_rate_limit(GFileMonitor*, int) = file_monitor_set_rate_limit;
extern void Pure_g_file_monitor_emit_event(GFileMonitor*, GFile*, GFile*, int) = file_monitor_emit_event;
extern int Pure_g_filename_completer_get_type() = filename_completer_get_type;
extern GFilenameCompleter* Pure_g_filename_completer_new() = filename_completer_new;
extern char* Pure_g_filename_completer_get_completion_suffix(GFilenameCompleter*, char*) = filename_completer_get_completion_suffix;
extern char** Pure_g_filename_completer_get_completions(GFilenameCompleter*, char*) = filename_completer_get_completions;
extern void Pure_g_filename_completer_set_dirs_only(GFilenameCompleter*, int) = filename_completer_set_dirs_only;
extern int Pure_g_file_output_stream_get_type() = file_output_stream_get_type;
extern GFileInfo* Pure_g_file_output_stream_query_info(GFileOutputStream*, char*, GCancellable*, GError**) = file_output_stream_query_info;
extern void Pure_g_file_output_stream_query_info_async(GFileOutputStream*, char*, int, GCancellable*, void*, void*) = file_output_stream_query_info_async;
extern GFileInfo* Pure_g_file_output_stream_query_info_finish(GFileOutputStream*, GAsyncResult*, GError**) = file_output_stream_query_info_finish;
extern char* Pure_g_file_output_stream_get_etag(GFileOutputStream*) = file_output_stream_get_etag;
extern int Pure_g_app_info_create_flags_get_type() = app_info_create_flags_get_type;
extern int Pure_g_data_stream_byte_order_get_type() = data_stream_byte_order_get_type;
extern int Pure_g_data_stream_newline_type_get_type() = data_stream_newline_type_get_type;
extern int Pure_g_file_attribute_type_get_type() = file_attribute_type_get_type;
extern int Pure_g_file_attribute_info_flags_get_type() = file_attribute_info_flags_get_type;
extern int Pure_g_file_attribute_status_get_type() = file_attribute_status_get_type;
extern int Pure_g_file_query_info_flags_get_type() = file_query_info_flags_get_type;
extern int Pure_g_file_create_flags_get_type() = file_create_flags_get_type;
extern int Pure_g_mount_mount_flags_get_type() = mount_mount_flags_get_type;
extern int Pure_g_mount_unmount_flags_get_type() = mount_unmount_flags_get_type;
extern int Pure_g_file_copy_flags_get_type() = file_copy_flags_get_type;
extern int Pure_g_file_monitor_flags_get_type() = file_monitor_flags_get_type;
extern int Pure_g_file_type_get_type() = file_type_get_type;
extern int Pure_g_filesystem_preview_type_get_type() = filesystem_preview_type_get_type;
extern int Pure_g_file_monitor_event_get_type() = file_monitor_event_get_type;
extern int Pure_g_io_error_enum_get_type() = io_error_enum_get_type;
extern int Pure_g_ask_password_flags_get_type() = ask_password_flags_get_type;
extern int Pure_g_password_save_get_type() = password_save_get_type;
extern int Pure_g_mount_operation_result_get_type() = mount_operation_result_get_type;
extern int Pure_g_output_stream_splice_flags_get_type() = output_stream_splice_flags_get_type;
extern int Pure_g_emblem_origin_get_type() = emblem_origin_get_type;
extern int Pure_g_io_error_quark() = io_error_quark;
extern int Pure_g_io_error_from_errno(int) = io_error_from_errno;
extern int Pure_g_io_module_get_type() = io_module_get_type;
extern GIOModule* Pure_g_io_module_new(char*) = io_module_new;
extern GList* Pure_g_io_modules_load_all_in_directory(char*) = io_modules_load_all_in_directory;
extern GIOExtensionPoint* Pure_g_io_extension_point_register(char*) = io_extension_point_register;
extern GIOExtensionPoint* Pure_g_io_extension_point_lookup(char*) = io_extension_point_lookup;
extern void Pure_g_io_extension_point_set_required_type(GIOExtensionPoint*, int) = io_extension_point_set_required_type;
extern int Pure_g_io_extension_point_get_required_type(GIOExtensionPoint*) = io_extension_point_get_required_type;
extern GList* Pure_g_io_extension_point_get_extensions(GIOExtensionPoint*) = io_extension_point_get_extensions;
extern GIOExtension* Pure_g_io_extension_point_get_extension_by_name(GIOExtensionPoint*, char*) = io_extension_point_get_extension_by_name;
extern GIOExtension* Pure_g_io_extension_point_implement(char*, int, char*, int) = io_extension_point_implement;
extern int Pure_g_io_extension_get_type(GIOExtension*) = io_extension_get_type;
extern char* Pure_g_io_extension_get_name(GIOExtension*) = io_extension_get_name;
extern int Pure_g_io_extension_get_priority(GIOExtension*) = io_extension_get_priority;
extern GTypeClass* Pure_g_io_extension_ref_class(GIOExtension*) = io_extension_ref_class;
extern void Pure_g_io_scheduler_push_job(void*, void*, void*, int, GCancellable*) = io_scheduler_push_job;
extern void Pure_g_io_scheduler_cancel_all_jobs() = io_scheduler_cancel_all_jobs;
extern int Pure_g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob*, void*, void*, void*) = io_scheduler_job_send_to_mainloop;
extern void Pure_g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob*, void*, void*, void*) = io_scheduler_job_send_to_mainloop_async;
extern int Pure_g_loadable_icon_get_type() = loadable_icon_get_type;
extern GInputStream* Pure_g_loadable_icon_load(GLoadableIcon*, int, char**, GCancellable*, GError**) = loadable_icon_load;
extern void Pure_g_loadable_icon_load_async(GLoadableIcon*, int, GCancellable*, void*, void*) = loadable_icon_load_async;
extern GInputStream* Pure_g_loadable_icon_load_finish(GLoadableIcon*, GAsyncResult*, char**, GError**) = loadable_icon_load_finish;
extern int Pure_g_memory_input_stream_get_type() = memory_input_stream_get_type;
extern GInputStream* Pure_g_memory_input_stream_new() = memory_input_stream_new;
extern GInputStream* Pure_g_memory_input_stream_new_from_data(void*, int, void*) = memory_input_stream_new_from_data;
extern void Pure_g_memory_input_stream_add_data(GMemoryInputStream*, void*, int, void*) = memory_input_stream_add_data;
extern int Pure_g_memory_output_stream_get_type() = memory_output_stream_get_type;
extern GOutputStream* Pure_g_memory_output_stream_new(void*, int, void*, void*) = memory_output_stream_new;
extern void* Pure_g_memory_output_stream_get_data(GMemoryOutputStream*) = memory_output_stream_get_data;
extern int Pure_g_memory_output_stream_get_size(GMemoryOutputStream*) = memory_output_stream_get_size;
extern int Pure_g_memory_output_stream_get_data_size(GMemoryOutputStream*) = memory_output_stream_get_data_size;
extern int Pure_g_mount_get_type() = mount_get_type;
extern GFile* Pure_g_mount_get_root(GMount*) = mount_get_root;
extern char* Pure_g_mount_get_name(GMount*) = mount_get_name;
extern GIcon* Pure_g_mount_get_icon(GMount*) = mount_get_icon;
extern char* Pure_g_mount_get_uuid(GMount*) = mount_get_uuid;
extern GVolume* Pure_g_mount_get_volume(GMount*) = mount_get_volume;
extern GDrive* Pure_g_mount_get_drive(GMount*) = mount_get_drive;
extern int Pure_g_mount_can_unmount(GMount*) = mount_can_unmount;
extern int Pure_g_mount_can_eject(GMount*) = mount_can_eject;
extern void Pure_g_mount_unmount(GMount*, int, GCancellable*, void*, void*) = mount_unmount;
extern int Pure_g_mount_unmount_finish(GMount*, GAsyncResult*, GError**) = mount_unmount_finish;
extern void Pure_g_mount_eject(GMount*, int, GCancellable*, void*, void*) = mount_eject;
extern int Pure_g_mount_eject_finish(GMount*, GAsyncResult*, GError**) = mount_eject_finish;
extern void Pure_g_mount_remount(GMount*, int, GMountOperation*, GCancellable*, void*, void*) = mount_remount;
extern int Pure_g_mount_remount_finish(GMount*, GAsyncResult*, GError**) = mount_remount_finish;
extern void Pure_g_mount_guess_content_type(GMount*, int, GCancellable*, void*, void*) = mount_guess_content_type;
extern char** Pure_g_mount_guess_content_type_finish(GMount*, GAsyncResult*, GError**) = mount_guess_content_type_finish;
extern char** Pure_g_mount_guess_content_type_sync(GMount*, int, GCancellable*, GError**) = mount_guess_content_type_sync;
extern int Pure_g_mount_operation_get_type() = mount_operation_get_type;
extern GMountOperation* Pure_g_mount_operation_new() = mount_operation_new;
extern char* Pure_g_mount_operation_get_username(GMountOperation*) = mount_operation_get_username;
extern void Pure_g_mount_operation_set_username(GMountOperation*, char*) = mount_operation_set_username;
extern char* Pure_g_mount_operation_get_password(GMountOperation*) = mount_operation_get_password;
extern void Pure_g_mount_operation_set_password(GMountOperation*, char*) = mount_operation_set_password;
extern int Pure_g_mount_operation_get_anonymous(GMountOperation*) = mount_operation_get_anonymous;
extern void Pure_g_mount_operation_set_anonymous(GMountOperation*, int) = mount_operation_set_anonymous;
extern char* Pure_g_mount_operation_get_domain(GMountOperation*) = mount_operation_get_domain;
extern void Pure_g_mount_operation_set_domain(GMountOperation*, char*) = mount_operation_set_domain;
extern int Pure_g_mount_operation_get_password_save(GMountOperation*) = mount_operation_get_password_save;
extern void Pure_g_mount_operation_set_password_save(GMountOperation*, int) = mount_operation_set_password_save;
extern int Pure_g_mount_operation_get_choice(GMountOperation*) = mount_operation_get_choice;
extern void Pure_g_mount_operation_set_choice(GMountOperation*, int) = mount_operation_set_choice;
extern void Pure_g_mount_operation_reply(GMountOperation*, int) = mount_operation_reply;
extern int Pure_g_volume_monitor_get_type() = volume_monitor_get_type;
extern GVolumeMonitor* Pure_g_volume_monitor_get() = volume_monitor_get;
extern GList* Pure_g_volume_monitor_get_connected_drives(GVolumeMonitor*) = volume_monitor_get_connected_drives;
extern GList* Pure_g_volume_monitor_get_volumes(GVolumeMonitor*) = volume_monitor_get_volumes;
extern GList* Pure_g_volume_monitor_get_mounts(GVolumeMonitor*) = volume_monitor_get_mounts;
extern GVolume* Pure_g_volume_monitor_get_volume_for_uuid(GVolumeMonitor*, char*) = volume_monitor_get_volume_for_uuid;
extern GMount* Pure_g_volume_monitor_get_mount_for_uuid(GVolumeMonitor*, char*) = volume_monitor_get_mount_for_uuid;
extern GVolume* Pure_g_volume_monitor_adopt_orphan_mount(GMount*) = volume_monitor_adopt_orphan_mount;
extern int Pure_g_native_volume_monitor_get_type() = native_volume_monitor_get_type;
extern int Pure_g_seekable_get_type() = seekable_get_type;
extern int Pure_g_seekable_tell(GSeekable*) = seekable_tell;
extern int Pure_g_seekable_can_seek(GSeekable*) = seekable_can_seek;
extern int Pure_g_seekable_seek(GSeekable*, int, int, GCancellable*, GError**) = seekable_seek;
extern int Pure_g_seekable_can_truncate(GSeekable*) = seekable_can_truncate;
extern int Pure_g_seekable_truncate(GSeekable*, int, GCancellable*, GError**) = seekable_truncate;
extern int Pure_g_simple_async_result_get_type() = simple_async_result_get_type;
extern GSimpleAsyncResult* Pure_g_simple_async_result_new(GObject*, void*, void*, void*) = simple_async_result_new;
extern GSimpleAsyncResult* Pure_g_simple_async_result_new_error(GObject*, void*, void*, int, int, char*) = simple_async_result_new_error;
extern GSimpleAsyncResult* Pure_g_simple_async_result_new_from_error(GObject*, void*, void*, GError*) = simple_async_result_new_from_error;
extern void Pure_g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult*, void*, void*) = simple_async_result_set_op_res_gpointer;
extern void* Pure_g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult*) = simple_async_result_get_op_res_gpointer;
extern void Pure_g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult*, int) = simple_async_result_set_op_res_gssize;
extern int Pure_g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult*) = simple_async_result_get_op_res_gssize;
extern void Pure_g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult*, int) = simple_async_result_set_op_res_gboolean;
extern int Pure_g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult*) = simple_async_result_get_op_res_gboolean;
extern void* Pure_g_simple_async_result_get_source_tag(GSimpleAsyncResult*) = simple_async_result_get_source_tag;
extern void Pure_g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult*, int) = simple_async_result_set_handle_cancellation;
extern void Pure_g_simple_async_result_complete(GSimpleAsyncResult*) = simple_async_result_complete;
extern void Pure_g_simple_async_result_complete_in_idle(GSimpleAsyncResult*) = simple_async_result_complete_in_idle;
extern void Pure_g_simple_async_result_run_in_thread(GSimpleAsyncResult*, void*, int, GCancellable*) = simple_async_result_run_in_thread;
extern void Pure_g_simple_async_result_set_from_error(GSimpleAsyncResult*, GError*) = simple_async_result_set_from_error;
extern int Pure_g_simple_async_result_propagate_error(GSimpleAsyncResult*, GError**) = simple_async_result_propagate_error;
extern void Pure_g_simple_async_result_set_error(GSimpleAsyncResult*, int, int, char*) = simple_async_result_set_error;
extern void Pure_g_simple_async_result_set_error_va(GSimpleAsyncResult*, int, int, char*, void*) = simple_async_result_set_error_va;
extern void Pure_g_simple_async_report_error_in_idle(GObject*, void*, void*, int, int, char*) = simple_async_report_error_in_idle;
extern void Pure_g_simple_async_report_gerror_in_idle(GObject*, void*, void*, GError*) = simple_async_report_gerror_in_idle;
extern int Pure_g_themed_icon_get_type() = themed_icon_get_type;
extern GIcon* Pure_g_themed_icon_new(char*) = themed_icon_new;
extern GIcon* Pure_g_themed_icon_new_with_default_fallbacks(char*) = themed_icon_new_with_default_fallbacks;
extern GIcon* Pure_g_themed_icon_new_from_names(char**, int) = themed_icon_new_from_names;
extern void Pure_g_themed_icon_prepend_name(GThemedIcon*, char*) = themed_icon_prepend_name;
extern void Pure_g_themed_icon_append_name(GThemedIcon*, char*) = themed_icon_append_name;
extern char** Pure_g_themed_icon_get_names(GThemedIcon*) = themed_icon_get_names;
extern int Pure_g_vfs_get_type() = vfs_get_type;
extern int Pure_g_vfs_is_active(GVfs*) = vfs_is_active;
extern GFile* Pure_g_vfs_get_file_for_path(GVfs*, char*) = vfs_get_file_for_path;
extern GFile* Pure_g_vfs_get_file_for_uri(GVfs*, char*) = vfs_get_file_for_uri;
extern char** Pure_g_vfs_get_supported_uri_schemes(GVfs*) = vfs_get_supported_uri_schemes;
extern GFile* Pure_g_vfs_parse_name(GVfs*, char*) = vfs_parse_name;
extern GVfs* Pure_g_vfs_get_default() = vfs_get_default;
extern GVfs* Pure_g_vfs_get_local() = vfs_get_local;
extern int Pure_g_volume_get_type() = volume_get_type;
extern char* Pure_g_volume_get_name(GVolume*) = volume_get_name;
extern GIcon* Pure_g_volume_get_icon(GVolume*) = volume_get_icon;
extern char* Pure_g_volume_get_uuid(GVolume*) = volume_get_uuid;
extern GDrive* Pure_g_volume_get_drive(GVolume*) = volume_get_drive;
extern GMount* Pure_g_volume_get_mount(GVolume*) = volume_get_mount;
extern int Pure_g_volume_can_mount(GVolume*) = volume_can_mount;
extern int Pure_g_volume_can_eject(GVolume*) = volume_can_eject;
extern int Pure_g_volume_should_automount(GVolume*) = volume_should_automount;
extern void Pure_g_volume_mount(GVolume*, int, GMountOperation*, GCancellable*, void*, void*) = volume_mount;
extern int Pure_g_volume_mount_finish(GVolume*, GAsyncResult*, GError**) = volume_mount_finish;
extern void Pure_g_volume_eject(GVolume*, int, GCancellable*, void*, void*) = volume_eject;
extern int Pure_g_volume_eject_finish(GVolume*, GAsyncResult*, GError**) = volume_eject_finish;
extern char* Pure_g_volume_get_identifier(GVolume*, char*) = volume_get_identifier;
extern char** Pure_g_volume_enumerate_identifiers(GVolume*) = volume_enumerate_identifiers;
extern GFile* Pure_g_volume_get_activation_root(GVolume*) = volume_get_activation_root;
/* /usr/include/glib-2.0/gmodule.h: */
using "lib:glib";

namespace glib;
const glib::MODULE_BIND_LAZY = 1;
const glib::MODULE_BIND_LOCAL = 2;
const glib::MODULE_BIND_MASK = 3;
extern int Pure_g_module_supported() = module_supported;
extern GModule* Pure_g_module_open(char*, int) = module_open;
extern int Pure_g_module_close(GModule*) = module_close;
extern void Pure_g_module_make_resident(GModule*) = module_make_resident;
extern char* Pure_g_module_error() = module_error;
extern int Pure_g_module_symbol(GModule*, char*, void**) = module_symbol;
extern char* Pure_g_module_name(GModule*) = module_name;
extern char* Pure_g_module_build_path(char*, char*) = module_build_path;
