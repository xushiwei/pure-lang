/* /usr/include/glib-2.0/glib.h: */
using "lib:glib";

namespace glib;
const glib::FALSE = 0;
const glib::E = 2.71828182845905;
const glib::LN2 = 0.693147180559945;
const glib::LN10 = 2.30258509299405;
const glib::PI = 3.14159265358979;
const glib::PI_2 = 1.5707963267949;
const glib::PI_4 = 0.785398163397448;
const glib::SQRT2 = 1.4142135623731;
const glib::LITTLE_ENDIAN = 1234;
const glib::BIG_ENDIAN = 4321;
const glib::PDP_ENDIAN = 3412;
const glib::IEEE754_FLOAT_BIAS = 127;
const glib::IEEE754_DOUBLE_BIAS = 1023;
const glib::LOG_2_BASE_10 = 0.301029995663981;
const glib::DATALIST_FLAGS_MASK = 3;
const glib::DIR_SEPARATOR_S = "/";
const glib::SEARCHPATH_SEPARATOR_S = ":";
const glib::MEM_ALIGN = 8;
const glib::HOOK_FLAG_USER_SHIFT = 4;
const glib::POLLFD_FORMAT = "%d";
const glib::PRIORITY_HIGH = -100;
const glib::PRIORITY_DEFAULT = 0;
const glib::PRIORITY_HIGH_IDLE = 100;
const glib::PRIORITY_DEFAULT_IDLE = 200;
const glib::PRIORITY_LOW = 300;
const glib::SOURCE_REMOVE = 0;
const glib::UNICODE_COMBINING_MARK = 10;
const glib::UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;
const glib::KEY_FILE_DESKTOP_GROUP = "Desktop Entry";
const glib::KEY_FILE_DESKTOP_KEY_TYPE = "Type";
const glib::KEY_FILE_DESKTOP_KEY_VERSION = "Version";
const glib::KEY_FILE_DESKTOP_KEY_NAME = "Name";
const glib::KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName";
const glib::KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay";
const glib::KEY_FILE_DESKTOP_KEY_COMMENT = "Comment";
const glib::KEY_FILE_DESKTOP_KEY_ICON = "Icon";
const glib::KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden";
const glib::KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn";
const glib::KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn";
const glib::KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec";
const glib::KEY_FILE_DESKTOP_KEY_EXEC = "Exec";
const glib::KEY_FILE_DESKTOP_KEY_PATH = "Path";
const glib::KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal";
const glib::KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType";
const glib::KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories";
const glib::KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify";
const glib::KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass";
const glib::KEY_FILE_DESKTOP_KEY_URL = "URL";
const glib::KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = "X-GNOME-Gettext-Domain";
const glib::KEY_FILE_DESKTOP_KEY_FULLNAME = "X-GNOME-FullName";
const glib::KEY_FILE_DESKTOP_KEY_KEYWORDS = "Keywords";
const glib::KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application";
const glib::KEY_FILE_DESKTOP_TYPE_LINK = "Link";
const glib::KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory";
const glib::LOG_LEVEL_USER_SHIFT = 8;
const glib::OPTION_REMAINING = "";
const glib::CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const glib::CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";
const glib::CSET_DIGITS = "0123456789";
const glib::STR_DELIMITERS = "_-|> <.";
const glib::ASCII_DTOSTR_BUF_SIZE = 29;
const glib::USEC_PER_SEC = 1000000;
const glib::URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@";
const glib::URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;=";
const glib::ASCII_ALNUM = 1;
const glib::ASCII_ALPHA = 2;
const glib::ASCII_CNTRL = 4;
const glib::ASCII_DIGIT = 8;
const glib::ASCII_GRAPH = 16;
const glib::ASCII_LOWER = 32;
const glib::ASCII_PRINT = 64;
const glib::ASCII_PUNCT = 128;
const glib::ASCII_SPACE = 256;
const glib::ASCII_UPPER = 512;
const glib::ASCII_XDIGIT = 1024;
const glib::BOOKMARK_FILE_ERROR_INVALID_URI = 0;
const glib::BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
const glib::BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
const glib::BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
const glib::BOOKMARK_FILE_ERROR_READ = 4;
const glib::BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
const glib::BOOKMARK_FILE_ERROR_WRITE = 6;
const glib::BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;
const glib::CHECKSUM_MD5 = 0;
const glib::CHECKSUM_SHA1 = 1;
const glib::CHECKSUM_SHA256 = 2;
const glib::CONVERT_ERROR_NO_CONVERSION = 0;
const glib::CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
const glib::CONVERT_ERROR_FAILED = 2;
const glib::CONVERT_ERROR_PARTIAL_INPUT = 3;
const glib::CONVERT_ERROR_BAD_URI = 4;
const glib::CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;
const glib::DATE_DAY = 0;
const glib::DATE_MONTH = 1;
const glib::DATE_YEAR = 2;
const glib::DATE_BAD_MONTH = 0;
const glib::DATE_JANUARY = 1;
const glib::DATE_FEBRUARY = 2;
const glib::DATE_MARCH = 3;
const glib::DATE_APRIL = 4;
const glib::DATE_MAY = 5;
const glib::DATE_JUNE = 6;
const glib::DATE_JULY = 7;
const glib::DATE_AUGUST = 8;
const glib::DATE_SEPTEMBER = 9;
const glib::DATE_OCTOBER = 10;
const glib::DATE_NOVEMBER = 11;
const glib::DATE_DECEMBER = 12;
const glib::DATE_BAD_WEEKDAY = 0;
const glib::DATE_MONDAY = 1;
const glib::DATE_TUESDAY = 2;
const glib::DATE_WEDNESDAY = 3;
const glib::DATE_THURSDAY = 4;
const glib::DATE_FRIDAY = 5;
const glib::DATE_SATURDAY = 6;
const glib::DATE_SUNDAY = 7;
const glib::ERR_UNKNOWN = 0;
const glib::ERR_UNEXP_EOF = 1;
const glib::ERR_UNEXP_EOF_IN_STRING = 2;
const glib::ERR_UNEXP_EOF_IN_COMMENT = 3;
const glib::ERR_NON_DIGIT_IN_CONST = 4;
const glib::ERR_DIGIT_RADIX = 5;
const glib::ERR_FLOAT_RADIX = 6;
const glib::ERR_FLOAT_MALFORMED = 7;
const glib::FILE_ERROR_EXIST = 0;
const glib::FILE_ERROR_ISDIR = 1;
const glib::FILE_ERROR_ACCES = 2;
const glib::FILE_ERROR_NAMETOOLONG = 3;
const glib::FILE_ERROR_NOENT = 4;
const glib::FILE_ERROR_NOTDIR = 5;
const glib::FILE_ERROR_NXIO = 6;
const glib::FILE_ERROR_NODEV = 7;
const glib::FILE_ERROR_ROFS = 8;
const glib::FILE_ERROR_TXTBSY = 9;
const glib::FILE_ERROR_FAULT = 10;
const glib::FILE_ERROR_LOOP = 11;
const glib::FILE_ERROR_NOSPC = 12;
const glib::FILE_ERROR_NOMEM = 13;
const glib::FILE_ERROR_MFILE = 14;
const glib::FILE_ERROR_NFILE = 15;
const glib::FILE_ERROR_BADF = 16;
const glib::FILE_ERROR_INVAL = 17;
const glib::FILE_ERROR_PIPE = 18;
const glib::FILE_ERROR_AGAIN = 19;
const glib::FILE_ERROR_INTR = 20;
const glib::FILE_ERROR_IO = 21;
const glib::FILE_ERROR_PERM = 22;
const glib::FILE_ERROR_NOSYS = 23;
const glib::FILE_ERROR_FAILED = 24;
const glib::FILE_TEST_IS_REGULAR = 1;
const glib::FILE_TEST_IS_SYMLINK = 2;
const glib::FILE_TEST_IS_DIR = 4;
const glib::FILE_TEST_IS_EXECUTABLE = 8;
const glib::FILE_TEST_EXISTS = 16;
const glib::FORMAT_SIZE_DEFAULT = 0;
const glib::FORMAT_SIZE_LONG_FORMAT = 1;
const glib::FORMAT_SIZE_IEC_UNITS = 2;
const glib::HOOK_FLAG_ACTIVE = 1;
const glib::HOOK_FLAG_IN_CALL = 2;
const glib::HOOK_FLAG_MASK = 15;
const glib::IO_CHANNEL_ERROR_FBIG = 0;
const glib::IO_CHANNEL_ERROR_INVAL = 1;
const glib::IO_CHANNEL_ERROR_IO = 2;
const glib::IO_CHANNEL_ERROR_ISDIR = 3;
const glib::IO_CHANNEL_ERROR_NOSPC = 4;
const glib::IO_CHANNEL_ERROR_NXIO = 5;
const glib::IO_CHANNEL_ERROR_OVERFLOW = 6;
const glib::IO_CHANNEL_ERROR_PIPE = 7;
const glib::IO_CHANNEL_ERROR_FAILED = 8;
const glib::IO_IN = 1;
const glib::IO_OUT = 4;
const glib::IO_PRI = 2;
const glib::IO_ERR = 8;
const glib::IO_HUP = 16;
const glib::IO_NVAL = 32;
const glib::IO_ERROR_NONE = 0;
const glib::IO_ERROR_AGAIN = 1;
const glib::IO_ERROR_INVAL = 2;
const glib::IO_ERROR_UNKNOWN = 3;
const glib::IO_FLAG_APPEND = 1;
const glib::IO_FLAG_NONBLOCK = 2;
const glib::IO_FLAG_IS_READABLE = 4;
const glib::IO_FLAG_IS_WRITABLE = 8;
const glib::IO_FLAG_IS_SEEKABLE = 16;
const glib::IO_FLAG_MASK = 31;
const glib::IO_FLAG_GET_MASK = 31;
const glib::IO_FLAG_SET_MASK = 3;
const glib::IO_STATUS_ERROR = 0;
const glib::IO_STATUS_NORMAL = 1;
const glib::IO_STATUS_EOF = 2;
const glib::IO_STATUS_AGAIN = 3;
const glib::KEY_FILE_ERROR_UNKNOWN_ENCODING = 0;
const glib::KEY_FILE_ERROR_PARSE = 1;
const glib::KEY_FILE_ERROR_NOT_FOUND = 2;
const glib::KEY_FILE_ERROR_KEY_NOT_FOUND = 3;
const glib::KEY_FILE_ERROR_GROUP_NOT_FOUND = 4;
const glib::KEY_FILE_ERROR_INVALID_VALUE = 5;
const glib::KEY_FILE_NONE = 0;
const glib::KEY_FILE_KEEP_COMMENTS = 1;
const glib::KEY_FILE_KEEP_TRANSLATIONS = 2;
const glib::LOG_FLAG_RECURSION = 1;
const glib::LOG_FLAG_FATAL = 2;
const glib::LOG_LEVEL_ERROR = 4;
const glib::LOG_LEVEL_CRITICAL = 8;
const glib::LOG_LEVEL_WARNING = 16;
const glib::LOG_LEVEL_MESSAGE = 32;
const glib::LOG_LEVEL_INFO = 64;
const glib::LOG_LEVEL_DEBUG = 128;
const glib::LOG_LEVEL_MASK = -4;
const glib::MARKUP_COLLECT_INVALID = 0;
const glib::MARKUP_COLLECT_STRING = 1;
const glib::MARKUP_COLLECT_STRDUP = 2;
const glib::MARKUP_COLLECT_BOOLEAN = 3;
const glib::MARKUP_COLLECT_TRISTATE = 4;
const glib::MARKUP_COLLECT_OPTIONAL = 65536;
const glib::MARKUP_ERROR_BAD_UTF8 = 0;
const glib::MARKUP_ERROR_EMPTY = 1;
const glib::MARKUP_ERROR_PARSE = 2;
const glib::MARKUP_ERROR_UNKNOWN_ELEMENT = 3;
const glib::MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4;
const glib::MARKUP_ERROR_INVALID_CONTENT = 5;
const glib::MARKUP_ERROR_MISSING_ATTRIBUTE = 6;
const glib::MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1;
const glib::MARKUP_TREAT_CDATA_AS_TEXT = 2;
const glib::MARKUP_PREFIX_ERROR_POSITION = 4;
const glib::NORMALIZE_DEFAULT = 0;
const glib::NORMALIZE_NFD = 0;
const glib::NORMALIZE_DEFAULT_COMPOSE = 1;
const glib::NORMALIZE_NFC = 1;
const glib::NORMALIZE_ALL = 2;
const glib::NORMALIZE_NFKD = 2;
const glib::NORMALIZE_ALL_COMPOSE = 3;
const glib::NORMALIZE_NFKC = 3;
const glib::ONCE_STATUS_NOTCALLED = 0;
const glib::ONCE_STATUS_PROGRESS = 1;
const glib::ONCE_STATUS_READY = 2;
const glib::OPTION_ARG_NONE = 0;
const glib::OPTION_ARG_STRING = 1;
const glib::OPTION_ARG_INT = 2;
const glib::OPTION_ARG_CALLBACK = 3;
const glib::OPTION_ARG_FILENAME = 4;
const glib::OPTION_ARG_STRING_ARRAY = 5;
const glib::OPTION_ARG_FILENAME_ARRAY = 6;
const glib::OPTION_ARG_DOUBLE = 7;
const glib::OPTION_ARG_INT64 = 8;
const glib::OPTION_ERROR_UNKNOWN_OPTION = 0;
const glib::OPTION_ERROR_BAD_VALUE = 1;
const glib::OPTION_ERROR_FAILED = 2;
const glib::OPTION_FLAG_HIDDEN = 1;
const glib::OPTION_FLAG_IN_MAIN = 2;
const glib::OPTION_FLAG_REVERSE = 4;
const glib::OPTION_FLAG_NO_ARG = 8;
const glib::OPTION_FLAG_FILENAME = 16;
const glib::OPTION_FLAG_OPTIONAL_ARG = 32;
const glib::OPTION_FLAG_NOALIAS = 64;
const glib::REGEX_CASELESS = 1;
const glib::REGEX_MULTILINE = 2;
const glib::REGEX_DOTALL = 4;
const glib::REGEX_EXTENDED = 8;
const glib::REGEX_ANCHORED = 16;
const glib::REGEX_DOLLAR_ENDONLY = 32;
const glib::REGEX_UNGREEDY = 512;
const glib::REGEX_RAW = 2048;
const glib::REGEX_NO_AUTO_CAPTURE = 4096;
const glib::REGEX_OPTIMIZE = 8192;
const glib::REGEX_DUPNAMES = 524288;
const glib::REGEX_NEWLINE_CR = 1048576;
const glib::REGEX_NEWLINE_LF = 2097152;
const glib::REGEX_NEWLINE_CRLF = 3145728;
const glib::REGEX_ERROR_COMPILE = 0;
const glib::REGEX_ERROR_OPTIMIZE = 1;
const glib::REGEX_ERROR_REPLACE = 2;
const glib::REGEX_ERROR_MATCH = 3;
const glib::REGEX_ERROR_INTERNAL = 4;
const glib::REGEX_ERROR_STRAY_BACKSLASH = 101;
const glib::REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
const glib::REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
const glib::REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
const glib::REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
const glib::REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
const glib::REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
const glib::REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
const glib::REGEX_ERROR_NOTHING_TO_REPEAT = 109;
const glib::REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
const glib::REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
const glib::REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
const glib::REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
const glib::REGEX_ERROR_UNTERMINATED_COMMENT = 118;
const glib::REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
const glib::REGEX_ERROR_MEMORY_ERROR = 121;
const glib::REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
const glib::REGEX_ERROR_MALFORMED_CONDITION = 126;
const glib::REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
const glib::REGEX_ERROR_ASSERTION_EXPECTED = 128;
const glib::REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
const glib::REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
const glib::REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
const glib::REGEX_ERROR_INVALID_CONDITION = 135;
const glib::REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
const glib::REGEX_ERROR_INFINITE_LOOP = 140;
const glib::REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
const glib::REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
const glib::REGEX_ERROR_MALFORMED_PROPERTY = 146;
const glib::REGEX_ERROR_UNKNOWN_PROPERTY = 147;
const glib::REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
const glib::REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
const glib::REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
const glib::REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
const glib::REGEX_ERROR_DEFINE_REPETION = 155;
const glib::REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
const glib::REGEX_ERROR_MISSING_BACK_REFERENCE = 157;
const glib::REGEX_MATCH_ANCHORED = 16;
const glib::REGEX_MATCH_NOTBOL = 128;
const glib::REGEX_MATCH_NOTEOL = 256;
const glib::REGEX_MATCH_NOTEMPTY = 1024;
const glib::REGEX_MATCH_PARTIAL = 32768;
const glib::REGEX_MATCH_NEWLINE_CR = 1048576;
const glib::REGEX_MATCH_NEWLINE_LF = 2097152;
const glib::REGEX_MATCH_NEWLINE_CRLF = 3145728;
const glib::REGEX_MATCH_NEWLINE_ANY = 4194304;
const glib::SEEK_CUR = 0;
const glib::SEEK_SET = 1;
const glib::SEEK_END = 2;
const glib::SHELL_ERROR_BAD_QUOTING = 0;
const glib::SHELL_ERROR_EMPTY_STRING = 1;
const glib::SHELL_ERROR_FAILED = 2;
const glib::SLICE_CONFIG_ALWAYS_MALLOC = 1;
const glib::SLICE_CONFIG_BYPASS_MAGAZINES = 2;
const glib::SLICE_CONFIG_WORKING_SET_MSECS = 3;
const glib::SLICE_CONFIG_COLOR_INCREMENT = 4;
const glib::SLICE_CONFIG_CHUNK_SIZES = 5;
const glib::SLICE_CONFIG_CONTENTION_COUNTER = 6;
const glib::SPAWN_ERROR_FORK = 0;
const glib::SPAWN_ERROR_READ = 1;
const glib::SPAWN_ERROR_CHDIR = 2;
const glib::SPAWN_ERROR_ACCES = 3;
const glib::SPAWN_ERROR_PERM = 4;
const glib::SPAWN_ERROR_TOO_BIG = 5;
const glib::SPAWN_ERROR_2BIG = 5;
const glib::SPAWN_ERROR_NOEXEC = 6;
const glib::SPAWN_ERROR_NAMETOOLONG = 7;
const glib::SPAWN_ERROR_NOENT = 8;
const glib::SPAWN_ERROR_NOMEM = 9;
const glib::SPAWN_ERROR_NOTDIR = 10;
const glib::SPAWN_ERROR_LOOP = 11;
const glib::SPAWN_ERROR_TXTBUSY = 12;
const glib::SPAWN_ERROR_IO = 13;
const glib::SPAWN_ERROR_NFILE = 14;
const glib::SPAWN_ERROR_MFILE = 15;
const glib::SPAWN_ERROR_INVAL = 16;
const glib::SPAWN_ERROR_ISDIR = 17;
const glib::SPAWN_ERROR_LIBBAD = 18;
const glib::SPAWN_ERROR_FAILED = 19;
const glib::SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
const glib::SPAWN_DO_NOT_REAP_CHILD = 2;
const glib::SPAWN_SEARCH_PATH = 4;
const glib::SPAWN_STDOUT_TO_DEV_NULL = 8;
const glib::SPAWN_STDERR_TO_DEV_NULL = 16;
const glib::SPAWN_CHILD_INHERITS_STDIN = 32;
const glib::SPAWN_FILE_AND_ARGV_ZERO = 64;
const glib::TEST_LOG_NONE = 0;
const glib::TEST_LOG_ERROR = 1;
const glib::TEST_LOG_START_BINARY = 2;
const glib::TEST_LOG_LIST_CASE = 3;
const glib::TEST_LOG_SKIP_CASE = 4;
const glib::TEST_LOG_START_CASE = 5;
const glib::TEST_LOG_STOP_CASE = 6;
const glib::TEST_LOG_MIN_RESULT = 7;
const glib::TEST_LOG_MAX_RESULT = 8;
const glib::TEST_LOG_MESSAGE = 9;
const glib::TEST_TRAP_SILENCE_STDOUT = 128;
const glib::TEST_TRAP_SILENCE_STDERR = 256;
const glib::TEST_TRAP_INHERIT_STDIN = 512;
const glib::THREAD_ERROR_AGAIN = 0;
const glib::TIME_TYPE_STANDARD = 0;
const glib::TIME_TYPE_DAYLIGHT = 1;
const glib::TIME_TYPE_UNIVERSAL = 2;
const glib::TOKEN_EOF = 0;
const glib::TOKEN_LEFT_PAREN = 40;
const glib::TOKEN_RIGHT_PAREN = 41;
const glib::TOKEN_LEFT_CURLY = 123;
const glib::TOKEN_RIGHT_CURLY = 125;
const glib::TOKEN_LEFT_BRACE = 91;
const glib::TOKEN_RIGHT_BRACE = 93;
const glib::TOKEN_EQUAL_SIGN = 61;
const glib::TOKEN_COMMA = 44;
const glib::TOKEN_NONE = 256;
const glib::TOKEN_ERROR = 257;
const glib::TOKEN_CHAR = 258;
const glib::TOKEN_BINARY = 259;
const glib::TOKEN_OCTAL = 260;
const glib::TOKEN_INT = 261;
const glib::TOKEN_HEX = 262;
const glib::TOKEN_FLOAT = 263;
const glib::TOKEN_STRING = 264;
const glib::TOKEN_SYMBOL = 265;
const glib::TOKEN_IDENTIFIER = 266;
const glib::TOKEN_IDENTIFIER_NULL = 267;
const glib::TOKEN_COMMENT_SINGLE = 268;
const glib::TOKEN_COMMENT_MULTI = 269;
const glib::TOKEN_LAST = 270;
const glib::TRAVERSE_LEAVES = 1;
const glib::TRAVERSE_NON_LEAVES = 2;
const glib::TRAVERSE_ALL = 3;
const glib::TRAVERSE_MASK = 3;
const glib::TRAVERSE_LEAFS = 1;
const glib::TRAVERSE_NON_LEAFS = 2;
const glib::IN_ORDER = 0;
const glib::PRE_ORDER = 1;
const glib::POST_ORDER = 2;
const glib::LEVEL_ORDER = 3;
const glib::UNICODE_BREAK_MANDATORY = 0;
const glib::UNICODE_BREAK_CARRIAGE_RETURN = 1;
const glib::UNICODE_BREAK_LINE_FEED = 2;
const glib::UNICODE_BREAK_COMBINING_MARK = 3;
const glib::UNICODE_BREAK_SURROGATE = 4;
const glib::UNICODE_BREAK_ZERO_WIDTH_SPACE = 5;
const glib::UNICODE_BREAK_INSEPARABLE = 6;
const glib::UNICODE_BREAK_NON_BREAKING_GLUE = 7;
const glib::UNICODE_BREAK_CONTINGENT = 8;
const glib::UNICODE_BREAK_SPACE = 9;
const glib::UNICODE_BREAK_AFTER = 10;
const glib::UNICODE_BREAK_BEFORE = 11;
const glib::UNICODE_BREAK_BEFORE_AND_AFTER = 12;
const glib::UNICODE_BREAK_HYPHEN = 13;
const glib::UNICODE_BREAK_NON_STARTER = 14;
const glib::UNICODE_BREAK_OPEN_PUNCTUATION = 15;
const glib::UNICODE_BREAK_CLOSE_PUNCTUATION = 16;
const glib::UNICODE_BREAK_QUOTATION = 17;
const glib::UNICODE_BREAK_EXCLAMATION = 18;
const glib::UNICODE_BREAK_IDEOGRAPHIC = 19;
const glib::UNICODE_BREAK_NUMERIC = 20;
const glib::UNICODE_BREAK_INFIX_SEPARATOR = 21;
const glib::UNICODE_BREAK_SYMBOL = 22;
const glib::UNICODE_BREAK_ALPHABETIC = 23;
const glib::UNICODE_BREAK_PREFIX = 24;
const glib::UNICODE_BREAK_POSTFIX = 25;
const glib::UNICODE_BREAK_COMPLEX_CONTEXT = 26;
const glib::UNICODE_BREAK_AMBIGUOUS = 27;
const glib::UNICODE_BREAK_UNKNOWN = 28;
const glib::UNICODE_BREAK_NEXT_LINE = 29;
const glib::UNICODE_BREAK_WORD_JOINER = 30;
const glib::UNICODE_BREAK_HANGUL_L_JAMO = 31;
const glib::UNICODE_BREAK_HANGUL_V_JAMO = 32;
const glib::UNICODE_BREAK_HANGUL_T_JAMO = 33;
const glib::UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34;
const glib::UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35;
const glib::UNICODE_BREAK_CLOSE_PARANTHESIS = 36;
const glib::UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37;
const glib::UNICODE_BREAK_HEBREW_LETTER = 38;
const glib::UNICODE_SCRIPT_INVALID_CODE = -1;
const glib::UNICODE_SCRIPT_COMMON = 0;
const glib::UNICODE_SCRIPT_INHERITED = 1;
const glib::UNICODE_SCRIPT_ARABIC = 2;
const glib::UNICODE_SCRIPT_ARMENIAN = 3;
const glib::UNICODE_SCRIPT_BENGALI = 4;
const glib::UNICODE_SCRIPT_BOPOMOFO = 5;
const glib::UNICODE_SCRIPT_CHEROKEE = 6;
const glib::UNICODE_SCRIPT_COPTIC = 7;
const glib::UNICODE_SCRIPT_CYRILLIC = 8;
const glib::UNICODE_SCRIPT_DESERET = 9;
const glib::UNICODE_SCRIPT_DEVANAGARI = 10;
const glib::UNICODE_SCRIPT_ETHIOPIC = 11;
const glib::UNICODE_SCRIPT_GEORGIAN = 12;
const glib::UNICODE_SCRIPT_GOTHIC = 13;
const glib::UNICODE_SCRIPT_GREEK = 14;
const glib::UNICODE_SCRIPT_GUJARATI = 15;
const glib::UNICODE_SCRIPT_GURMUKHI = 16;
const glib::UNICODE_SCRIPT_HAN = 17;
const glib::UNICODE_SCRIPT_HANGUL = 18;
const glib::UNICODE_SCRIPT_HEBREW = 19;
const glib::UNICODE_SCRIPT_HIRAGANA = 20;
const glib::UNICODE_SCRIPT_KANNADA = 21;
const glib::UNICODE_SCRIPT_KATAKANA = 22;
const glib::UNICODE_SCRIPT_KHMER = 23;
const glib::UNICODE_SCRIPT_LAO = 24;
const glib::UNICODE_SCRIPT_LATIN = 25;
const glib::UNICODE_SCRIPT_MALAYALAM = 26;
const glib::UNICODE_SCRIPT_MONGOLIAN = 27;
const glib::UNICODE_SCRIPT_MYANMAR = 28;
const glib::UNICODE_SCRIPT_OGHAM = 29;
const glib::UNICODE_SCRIPT_OLD_ITALIC = 30;
const glib::UNICODE_SCRIPT_ORIYA = 31;
const glib::UNICODE_SCRIPT_RUNIC = 32;
const glib::UNICODE_SCRIPT_SINHALA = 33;
const glib::UNICODE_SCRIPT_SYRIAC = 34;
const glib::UNICODE_SCRIPT_TAMIL = 35;
const glib::UNICODE_SCRIPT_TELUGU = 36;
const glib::UNICODE_SCRIPT_THAANA = 37;
const glib::UNICODE_SCRIPT_THAI = 38;
const glib::UNICODE_SCRIPT_TIBETAN = 39;
const glib::UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40;
const glib::UNICODE_SCRIPT_YI = 41;
const glib::UNICODE_SCRIPT_TAGALOG = 42;
const glib::UNICODE_SCRIPT_HANUNOO = 43;
const glib::UNICODE_SCRIPT_BUHID = 44;
const glib::UNICODE_SCRIPT_TAGBANWA = 45;
const glib::UNICODE_SCRIPT_BRAILLE = 46;
const glib::UNICODE_SCRIPT_CYPRIOT = 47;
const glib::UNICODE_SCRIPT_LIMBU = 48;
const glib::UNICODE_SCRIPT_OSMANYA = 49;
const glib::UNICODE_SCRIPT_SHAVIAN = 50;
const glib::UNICODE_SCRIPT_LINEAR_B = 51;
const glib::UNICODE_SCRIPT_TAI_LE = 52;
const glib::UNICODE_SCRIPT_UGARITIC = 53;
const glib::UNICODE_SCRIPT_NEW_TAI_LUE = 54;
const glib::UNICODE_SCRIPT_BUGINESE = 55;
const glib::UNICODE_SCRIPT_GLAGOLITIC = 56;
const glib::UNICODE_SCRIPT_TIFINAGH = 57;
const glib::UNICODE_SCRIPT_SYLOTI_NAGRI = 58;
const glib::UNICODE_SCRIPT_OLD_PERSIAN = 59;
const glib::UNICODE_SCRIPT_KHAROSHTHI = 60;
const glib::UNICODE_SCRIPT_UNKNOWN = 61;
const glib::UNICODE_SCRIPT_BALINESE = 62;
const glib::UNICODE_SCRIPT_CUNEIFORM = 63;
const glib::UNICODE_SCRIPT_PHOENICIAN = 64;
const glib::UNICODE_SCRIPT_PHAGS_PA = 65;
const glib::UNICODE_SCRIPT_NKO = 66;
const glib::UNICODE_SCRIPT_KAYAH_LI = 67;
const glib::UNICODE_SCRIPT_LEPCHA = 68;
const glib::UNICODE_SCRIPT_REJANG = 69;
const glib::UNICODE_SCRIPT_SUNDANESE = 70;
const glib::UNICODE_SCRIPT_SAURASHTRA = 71;
const glib::UNICODE_SCRIPT_CHAM = 72;
const glib::UNICODE_SCRIPT_OL_CHIKI = 73;
const glib::UNICODE_SCRIPT_VAI = 74;
const glib::UNICODE_SCRIPT_CARIAN = 75;
const glib::UNICODE_SCRIPT_LYCIAN = 76;
const glib::UNICODE_SCRIPT_LYDIAN = 77;
const glib::UNICODE_SCRIPT_AVESTAN = 78;
const glib::UNICODE_SCRIPT_BAMUM = 79;
const glib::UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80;
const glib::UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81;
const glib::UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82;
const glib::UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83;
const glib::UNICODE_SCRIPT_JAVANESE = 84;
const glib::UNICODE_SCRIPT_KAITHI = 85;
const glib::UNICODE_SCRIPT_LISU = 86;
const glib::UNICODE_SCRIPT_MEETEI_MAYEK = 87;
const glib::UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88;
const glib::UNICODE_SCRIPT_OLD_TURKIC = 89;
const glib::UNICODE_SCRIPT_SAMARITAN = 90;
const glib::UNICODE_SCRIPT_TAI_THAM = 91;
const glib::UNICODE_SCRIPT_TAI_VIET = 92;
const glib::UNICODE_SCRIPT_BATAK = 93;
const glib::UNICODE_SCRIPT_BRAHMI = 94;
const glib::UNICODE_SCRIPT_MANDAIC = 95;
const glib::UNICODE_SCRIPT_CHAKMA = 96;
const glib::UNICODE_SCRIPT_MEROITIC_CURSIVE = 97;
const glib::UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98;
const glib::UNICODE_SCRIPT_MIAO = 99;
const glib::UNICODE_SCRIPT_SHARADA = 100;
const glib::UNICODE_SCRIPT_SORA_SOMPENG = 101;
const glib::UNICODE_SCRIPT_TAKRI = 102;
const glib::UNICODE_CONTROL = 0;
const glib::UNICODE_FORMAT = 1;
const glib::UNICODE_UNASSIGNED = 2;
const glib::UNICODE_PRIVATE_USE = 3;
const glib::UNICODE_SURROGATE = 4;
const glib::UNICODE_LOWERCASE_LETTER = 5;
const glib::UNICODE_MODIFIER_LETTER = 6;
const glib::UNICODE_OTHER_LETTER = 7;
const glib::UNICODE_TITLECASE_LETTER = 8;
const glib::UNICODE_UPPERCASE_LETTER = 9;
const glib::UNICODE_SPACING_MARK = 10;
const glib::UNICODE_ENCLOSING_MARK = 11;
const glib::UNICODE_NON_SPACING_MARK = 12;
const glib::UNICODE_DECIMAL_NUMBER = 13;
const glib::UNICODE_LETTER_NUMBER = 14;
const glib::UNICODE_OTHER_NUMBER = 15;
const glib::UNICODE_CONNECT_PUNCTUATION = 16;
const glib::UNICODE_DASH_PUNCTUATION = 17;
const glib::UNICODE_CLOSE_PUNCTUATION = 18;
const glib::UNICODE_FINAL_PUNCTUATION = 19;
const glib::UNICODE_INITIAL_PUNCTUATION = 20;
const glib::UNICODE_OTHER_PUNCTUATION = 21;
const glib::UNICODE_OPEN_PUNCTUATION = 22;
const glib::UNICODE_CURRENCY_SYMBOL = 23;
const glib::UNICODE_MODIFIER_SYMBOL = 24;
const glib::UNICODE_MATH_SYMBOL = 25;
const glib::UNICODE_OTHER_SYMBOL = 26;
const glib::UNICODE_LINE_SEPARATOR = 27;
const glib::UNICODE_PARAGRAPH_SEPARATOR = 28;
const glib::UNICODE_SPACE_SEPARATOR = 29;
const glib::USER_DIRECTORY_DESKTOP = 0;
const glib::USER_DIRECTORY_DOCUMENTS = 1;
const glib::USER_DIRECTORY_DOWNLOAD = 2;
const glib::USER_DIRECTORY_MUSIC = 3;
const glib::USER_DIRECTORY_PICTURES = 4;
const glib::USER_DIRECTORY_PUBLIC_SHARE = 5;
const glib::USER_DIRECTORY_TEMPLATES = 6;
const glib::USER_DIRECTORY_VIDEOS = 7;
const glib::USER_N_DIRECTORIES = 8;
const glib::VARIANT_CLASS_BOOLEAN = 98;
const glib::VARIANT_CLASS_BYTE = 121;
const glib::VARIANT_CLASS_INT16 = 110;
const glib::VARIANT_CLASS_UINT16 = 113;
const glib::VARIANT_CLASS_INT32 = 105;
const glib::VARIANT_CLASS_UINT32 = 117;
const glib::VARIANT_CLASS_INT64 = 120;
const glib::VARIANT_CLASS_UINT64 = 116;
const glib::VARIANT_CLASS_HANDLE = 104;
const glib::VARIANT_CLASS_DOUBLE = 100;
const glib::VARIANT_CLASS_STRING = 115;
const glib::VARIANT_CLASS_OBJECT_PATH = 111;
const glib::VARIANT_CLASS_SIGNATURE = 103;
const glib::VARIANT_CLASS_VARIANT = 118;
const glib::VARIANT_CLASS_MAYBE = 109;
const glib::VARIANT_CLASS_ARRAY = 97;
const glib::VARIANT_CLASS_TUPLE = 40;
const glib::VARIANT_CLASS_DICT_ENTRY = 123;
const glib::VARIANT_PARSE_ERROR_FAILED = 0;
const glib::VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1;
const glib::VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2;
const glib::VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3;
const glib::VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4;
const glib::VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5;
const glib::VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6;
const glib::VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7;
const glib::VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8;
const glib::VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9;
const glib::VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10;
const glib::VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11;
const glib::VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12;
const glib::VARIANT_PARSE_ERROR_TYPE_ERROR = 13;
const glib::VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14;
const glib::VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15;
const glib::VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16;
const glib::VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17;
extern GArray* g_array_new(int, int, int) = array_new;
extern GArray* g_array_sized_new(int, int, int, int) = array_sized_new;
extern char* g_array_free(GArray*, int) = array_free;
extern GArray* g_array_ref(GArray*) = array_ref;
extern void g_array_unref(GArray*) = array_unref;
extern int g_array_get_element_size(GArray*) = array_get_element_size;
extern GArray* g_array_append_vals(GArray*, void*, int) = array_append_vals;
extern GArray* g_array_prepend_vals(GArray*, void*, int) = array_prepend_vals;
extern GArray* g_array_insert_vals(GArray*, int, void*, int) = array_insert_vals;
extern GArray* g_array_set_size(GArray*, int) = array_set_size;
extern GArray* g_array_remove_index(GArray*, int) = array_remove_index;
extern GArray* g_array_remove_index_fast(GArray*, int) = array_remove_index_fast;
extern GArray* g_array_remove_range(GArray*, int, int) = array_remove_range;
extern void g_array_sort(GArray*, void*) = array_sort;
extern void g_array_sort_with_data(GArray*, void*, void*) = array_sort_with_data;
extern void g_array_set_clear_func(GArray*, void*) = array_set_clear_func;
extern GPtrArray* g_ptr_array_new() = ptr_array_new;
extern GPtrArray* g_ptr_array_new_with_free_func(void*) = ptr_array_new_with_free_func;
extern GPtrArray* g_ptr_array_sized_new(int) = ptr_array_sized_new;
extern GPtrArray* g_ptr_array_new_full(int, void*) = ptr_array_new_full;
extern void** g_ptr_array_free(GPtrArray*, int) = ptr_array_free;
extern GPtrArray* g_ptr_array_ref(GPtrArray*) = ptr_array_ref;
extern void g_ptr_array_unref(GPtrArray*) = ptr_array_unref;
extern void g_ptr_array_set_free_func(GPtrArray*, void*) = ptr_array_set_free_func;
extern void g_ptr_array_set_size(GPtrArray*, int) = ptr_array_set_size;
extern void* g_ptr_array_remove_index(GPtrArray*, int) = ptr_array_remove_index;
extern void* g_ptr_array_remove_index_fast(GPtrArray*, int) = ptr_array_remove_index_fast;
extern int g_ptr_array_remove(GPtrArray*, void*) = ptr_array_remove;
extern int g_ptr_array_remove_fast(GPtrArray*, void*) = ptr_array_remove_fast;
extern void g_ptr_array_remove_range(GPtrArray*, int, int) = ptr_array_remove_range;
extern void g_ptr_array_add(GPtrArray*, void*) = ptr_array_add;
extern void g_ptr_array_sort(GPtrArray*, void*) = ptr_array_sort;
extern void g_ptr_array_sort_with_data(GPtrArray*, void*, void*) = ptr_array_sort_with_data;
extern void g_ptr_array_foreach(GPtrArray*, void*, void*) = ptr_array_foreach;
extern GByteArray* g_byte_array_new() = byte_array_new;
extern GByteArray* g_byte_array_new_take(char*, long) = byte_array_new_take;
extern GByteArray* g_byte_array_sized_new(int) = byte_array_sized_new;
extern char* g_byte_array_free(GByteArray*, int) = byte_array_free;
extern GBytes* g_byte_array_free_to_bytes(GByteArray*) = byte_array_free_to_bytes;
extern GByteArray* g_byte_array_ref(GByteArray*) = byte_array_ref;
extern void g_byte_array_unref(GByteArray*) = byte_array_unref;
extern GByteArray* g_byte_array_append(GByteArray*, char*, int) = byte_array_append;
extern GByteArray* g_byte_array_prepend(GByteArray*, char*, int) = byte_array_prepend;
extern GByteArray* g_byte_array_set_size(GByteArray*, int) = byte_array_set_size;
extern GByteArray* g_byte_array_remove_index(GByteArray*, int) = byte_array_remove_index;
extern GByteArray* g_byte_array_remove_index_fast(GByteArray*, int) = byte_array_remove_index_fast;
extern GByteArray* g_byte_array_remove_range(GByteArray*, int, int) = byte_array_remove_range;
extern void g_byte_array_sort(GByteArray*, void*) = byte_array_sort;
extern void g_byte_array_sort_with_data(GByteArray*, void*, void*) = byte_array_sort_with_data;
extern int g_atomic_int_get(int*) = atomic_int_get;
extern void g_atomic_int_set(int*, int) = atomic_int_set;
extern void g_atomic_int_inc(int*) = atomic_int_inc;
extern int g_atomic_int_dec_and_test(int*) = atomic_int_dec_and_test;
extern int g_atomic_int_compare_and_exchange(int*, int, int) = atomic_int_compare_and_exchange;
extern int g_atomic_int_add(int*, int) = atomic_int_add;
extern int g_atomic_int_and(int*, int) = atomic_int_and;
extern int g_atomic_int_or(int*, int) = atomic_int_or;
extern int g_atomic_int_xor(int*, int) = atomic_int_xor;
extern void* g_atomic_pointer_get(void*) = atomic_pointer_get;
extern void g_atomic_pointer_set(void*, void*) = atomic_pointer_set;
extern int g_atomic_pointer_compare_and_exchange(void*, void*, void*) = atomic_pointer_compare_and_exchange;
extern long g_atomic_pointer_add(void*, long) = atomic_pointer_add;
extern long g_atomic_pointer_and(void*, long) = atomic_pointer_and;
extern long g_atomic_pointer_or(void*, long) = atomic_pointer_or;
extern long g_atomic_pointer_xor(void*, long) = atomic_pointer_xor;
extern int g_atomic_int_exchange_and_add(int*, int) = atomic_int_exchange_and_add;
extern int g_quark_try_string(char*) = quark_try_string;
extern int g_quark_from_static_string(char*) = quark_from_static_string;
extern int g_quark_from_string(char*) = quark_from_string;
extern char* g_quark_to_string(int) = quark_to_string;
extern char* g_intern_string(char*) = intern_string;
extern char* g_intern_static_string(char*) = intern_static_string;
extern GError* g_error_new(int, int, char*, ...) = error_new;
extern GError* g_error_new_literal(int, int, char*) = error_new_literal;
extern GError* g_error_new_valist(int, int, char*, void*) = error_new_valist;
extern void g_error_free(GError*) = error_free;
extern GError* g_error_copy(GError*) = error_copy;
extern int g_error_matches(GError*, int, int) = error_matches;
extern void g_set_error(GError**, int, int, char*, ...) = set_error;
extern void g_set_error_literal(GError**, int, int, char*) = set_error_literal;
extern void g_propagate_error(GError**, GError*) = propagate_error;
extern void g_clear_error(GError**) = clear_error;
extern void g_prefix_error(GError**, char*, ...) = prefix_error;
extern void g_propagate_prefixed_error(GError**, GError*, char*, ...) = propagate_prefixed_error;
extern int g_thread_error_quark() = thread_error_quark;
extern GThread* g_thread_ref(GThread*) = thread_ref;
extern void g_thread_unref(GThread*) = thread_unref;
extern GThread* g_thread_new(char*, void*, void*) = thread_new;
extern GThread* g_thread_try_new(char*, void*, void*, GError**) = thread_try_new;
extern GThread* g_thread_self() = thread_self;
extern void g_thread_exit(void*) = thread_exit;
extern void* g_thread_join(GThread*) = thread_join;
extern void g_thread_yield() = thread_yield;
extern void g_mutex_init(GMutex*) = mutex_init;
extern void g_mutex_clear(GMutex*) = mutex_clear;
extern void g_mutex_lock(GMutex*) = mutex_lock;
extern int g_mutex_trylock(GMutex*) = mutex_trylock;
extern void g_mutex_unlock(GMutex*) = mutex_unlock;
extern void g_rw_lock_init(GRWLock*) = rw_lock_init;
extern void g_rw_lock_clear(GRWLock*) = rw_lock_clear;
extern void g_rw_lock_writer_lock(GRWLock*) = rw_lock_writer_lock;
extern int g_rw_lock_writer_trylock(GRWLock*) = rw_lock_writer_trylock;
extern void g_rw_lock_writer_unlock(GRWLock*) = rw_lock_writer_unlock;
extern void g_rw_lock_reader_lock(GRWLock*) = rw_lock_reader_lock;
extern int g_rw_lock_reader_trylock(GRWLock*) = rw_lock_reader_trylock;
extern void g_rw_lock_reader_unlock(GRWLock*) = rw_lock_reader_unlock;
extern void g_rec_mutex_init(GRecMutex*) = rec_mutex_init;
extern void g_rec_mutex_clear(GRecMutex*) = rec_mutex_clear;
extern void g_rec_mutex_lock(GRecMutex*) = rec_mutex_lock;
extern int g_rec_mutex_trylock(GRecMutex*) = rec_mutex_trylock;
extern void g_rec_mutex_unlock(GRecMutex*) = rec_mutex_unlock;
extern void g_cond_init(GCond*) = cond_init;
extern void g_cond_clear(GCond*) = cond_clear;
extern void g_cond_wait(GCond*, GMutex*) = cond_wait;
extern void g_cond_signal(GCond*) = cond_signal;
extern void g_cond_broadcast(GCond*) = cond_broadcast;
extern int g_cond_wait_until(GCond*, GMutex*, long) = cond_wait_until;
extern void* g_private_get(GPrivate*) = private_get;
extern void g_private_set(GPrivate*, void*) = private_set;
extern void g_private_replace(GPrivate*, void*) = private_replace;
extern void* g_once_impl(GOnce*, void*, void*) = once_impl;
extern int g_once_init_enter(void*) = once_init_enter;
extern void g_once_init_leave(void*, long) = once_init_leave;
extern GAsyncQueue* g_async_queue_new() = async_queue_new;
extern GAsyncQueue* g_async_queue_new_full(void*) = async_queue_new_full;
extern void g_async_queue_lock(GAsyncQueue*) = async_queue_lock;
extern void g_async_queue_unlock(GAsyncQueue*) = async_queue_unlock;
extern GAsyncQueue* g_async_queue_ref(GAsyncQueue*) = async_queue_ref;
extern void g_async_queue_unref(GAsyncQueue*) = async_queue_unref;
extern void g_async_queue_ref_unlocked(GAsyncQueue*) = async_queue_ref_unlocked;
extern void g_async_queue_unref_and_unlock(GAsyncQueue*) = async_queue_unref_and_unlock;
extern void g_async_queue_push(GAsyncQueue*, void*) = async_queue_push;
extern void g_async_queue_push_unlocked(GAsyncQueue*, void*) = async_queue_push_unlocked;
extern void g_async_queue_push_sorted(GAsyncQueue*, void*, void*, void*) = async_queue_push_sorted;
extern void g_async_queue_push_sorted_unlocked(GAsyncQueue*, void*, void*, void*) = async_queue_push_sorted_unlocked;
extern void* g_async_queue_pop(GAsyncQueue*) = async_queue_pop;
extern void* g_async_queue_pop_unlocked(GAsyncQueue*) = async_queue_pop_unlocked;
extern void* g_async_queue_try_pop(GAsyncQueue*) = async_queue_try_pop;
extern void* g_async_queue_try_pop_unlocked(GAsyncQueue*) = async_queue_try_pop_unlocked;
extern void* g_async_queue_timeout_pop(GAsyncQueue*, long) = async_queue_timeout_pop;
extern void* g_async_queue_timeout_pop_unlocked(GAsyncQueue*, long) = async_queue_timeout_pop_unlocked;
extern int g_async_queue_length(GAsyncQueue*) = async_queue_length;
extern int g_async_queue_length_unlocked(GAsyncQueue*) = async_queue_length_unlocked;
extern void g_async_queue_sort(GAsyncQueue*, void*, void*) = async_queue_sort;
extern void g_async_queue_sort_unlocked(GAsyncQueue*, void*, void*) = async_queue_sort_unlocked;
extern void* g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*) = async_queue_timed_pop;
extern void* g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*) = async_queue_timed_pop_unlocked;
extern void g_on_error_query(char*) = on_error_query;
extern void g_on_error_stack_trace(char*) = on_error_stack_trace;
extern long g_base64_encode_step(char*, long, int, char*, int*, int*) = base64_encode_step;
extern long g_base64_encode_close(int, char*, int*, int*) = base64_encode_close;
extern char* g_base64_encode(char*, long) = base64_encode;
extern long g_base64_decode_step(char*, long, char*, int*, int*) = base64_decode_step;
extern char* g_base64_decode(char*, long*) = base64_decode;
extern char* g_base64_decode_inplace(char*, long*) = base64_decode_inplace;
extern void g_bit_lock(int*, int) = bit_lock;
extern int g_bit_trylock(int*, int) = bit_trylock;
extern void g_bit_unlock(int*, int) = bit_unlock;
extern void g_pointer_bit_lock(void*, int) = pointer_bit_lock;
extern int g_pointer_bit_trylock(void*, int) = pointer_bit_trylock;
extern void g_pointer_bit_unlock(void*, int) = pointer_bit_unlock;
extern int g_bookmark_file_error_quark() = bookmark_file_error_quark;
extern GBookmarkFile* g_bookmark_file_new() = bookmark_file_new;
extern void g_bookmark_file_free(GBookmarkFile*) = bookmark_file_free;
extern int g_bookmark_file_load_from_file(GBookmarkFile*, char*, GError**) = bookmark_file_load_from_file;
extern int g_bookmark_file_load_from_data(GBookmarkFile*, char*, long, GError**) = bookmark_file_load_from_data;
extern int g_bookmark_file_load_from_data_dirs(GBookmarkFile*, char*, char**, GError**) = bookmark_file_load_from_data_dirs;
extern char* g_bookmark_file_to_data(GBookmarkFile*, long*, GError**) = bookmark_file_to_data;
extern int g_bookmark_file_to_file(GBookmarkFile*, char*, GError**) = bookmark_file_to_file;
extern void g_bookmark_file_set_title(GBookmarkFile*, char*, char*) = bookmark_file_set_title;
extern char* g_bookmark_file_get_title(GBookmarkFile*, char*, GError**) = bookmark_file_get_title;
extern void g_bookmark_file_set_description(GBookmarkFile*, char*, char*) = bookmark_file_set_description;
extern char* g_bookmark_file_get_description(GBookmarkFile*, char*, GError**) = bookmark_file_get_description;
extern void g_bookmark_file_set_mime_type(GBookmarkFile*, char*, char*) = bookmark_file_set_mime_type;
extern char* g_bookmark_file_get_mime_type(GBookmarkFile*, char*, GError**) = bookmark_file_get_mime_type;
extern void g_bookmark_file_set_groups(GBookmarkFile*, char*, char**, long) = bookmark_file_set_groups;
extern void g_bookmark_file_add_group(GBookmarkFile*, char*, char*) = bookmark_file_add_group;
extern int g_bookmark_file_has_group(GBookmarkFile*, char*, char*, GError**) = bookmark_file_has_group;
extern char** g_bookmark_file_get_groups(GBookmarkFile*, char*, long*, GError**) = bookmark_file_get_groups;
extern void g_bookmark_file_add_application(GBookmarkFile*, char*, char*, char*) = bookmark_file_add_application;
extern int g_bookmark_file_has_application(GBookmarkFile*, char*, char*, GError**) = bookmark_file_has_application;
extern char** g_bookmark_file_get_applications(GBookmarkFile*, char*, long*, GError**) = bookmark_file_get_applications;
extern int g_bookmark_file_set_app_info(GBookmarkFile*, char*, char*, char*, int, long, GError**) = bookmark_file_set_app_info;
extern int g_bookmark_file_get_app_info(GBookmarkFile*, char*, char*, char**, int*, long*, GError**) = bookmark_file_get_app_info;
extern void g_bookmark_file_set_is_private(GBookmarkFile*, char*, int) = bookmark_file_set_is_private;
extern int g_bookmark_file_get_is_private(GBookmarkFile*, char*, GError**) = bookmark_file_get_is_private;
extern void g_bookmark_file_set_icon(GBookmarkFile*, char*, char*, char*) = bookmark_file_set_icon;
extern int g_bookmark_file_get_icon(GBookmarkFile*, char*, char**, char**, GError**) = bookmark_file_get_icon;
extern void g_bookmark_file_set_added(GBookmarkFile*, char*, long) = bookmark_file_set_added;
extern long g_bookmark_file_get_added(GBookmarkFile*, char*, GError**) = bookmark_file_get_added;
extern void g_bookmark_file_set_modified(GBookmarkFile*, char*, long) = bookmark_file_set_modified;
extern long g_bookmark_file_get_modified(GBookmarkFile*, char*, GError**) = bookmark_file_get_modified;
extern void g_bookmark_file_set_visited(GBookmarkFile*, char*, long) = bookmark_file_set_visited;
extern long g_bookmark_file_get_visited(GBookmarkFile*, char*, GError**) = bookmark_file_get_visited;
extern int g_bookmark_file_has_item(GBookmarkFile*, char*) = bookmark_file_has_item;
extern int g_bookmark_file_get_size(GBookmarkFile*) = bookmark_file_get_size;
extern char** g_bookmark_file_get_uris(GBookmarkFile*, long*) = bookmark_file_get_uris;
extern int g_bookmark_file_remove_group(GBookmarkFile*, char*, char*, GError**) = bookmark_file_remove_group;
extern int g_bookmark_file_remove_application(GBookmarkFile*, char*, char*, GError**) = bookmark_file_remove_application;
extern int g_bookmark_file_remove_item(GBookmarkFile*, char*, GError**) = bookmark_file_remove_item;
extern int g_bookmark_file_move_item(GBookmarkFile*, char*, char*, GError**) = bookmark_file_move_item;
extern GBytes* g_bytes_new(void*, long) = bytes_new;
extern GBytes* g_bytes_new_take(void*, long) = bytes_new_take;
extern GBytes* g_bytes_new_static(void*, long) = bytes_new_static;
extern GBytes* g_bytes_new_with_free_func(void*, long, void*, void*) = bytes_new_with_free_func;
extern GBytes* g_bytes_new_from_bytes(GBytes*, long, long) = bytes_new_from_bytes;
extern void* g_bytes_get_data(GBytes*, long*) = bytes_get_data;
extern long g_bytes_get_size(GBytes*) = bytes_get_size;
extern GBytes* g_bytes_ref(GBytes*) = bytes_ref;
extern void g_bytes_unref(GBytes*) = bytes_unref;
extern void* g_bytes_unref_to_data(GBytes*, long*) = bytes_unref_to_data;
extern GByteArray* g_bytes_unref_to_array(GBytes*) = bytes_unref_to_array;
extern int g_bytes_hash(void*) = bytes_hash;
extern int g_bytes_equal(void*, void*) = bytes_equal;
extern int g_bytes_compare(void*, void*) = bytes_compare;
extern int g_get_charset(char**) = get_charset;
extern char* g_get_codeset() = get_codeset;
extern char** g_get_language_names() = get_language_names;
extern char** g_get_locale_variants(char*) = get_locale_variants;
extern long g_checksum_type_get_length(int) = checksum_type_get_length;
extern GChecksum* g_checksum_new(int) = checksum_new;
extern void g_checksum_reset(GChecksum*) = checksum_reset;
extern GChecksum* g_checksum_copy(GChecksum*) = checksum_copy;
extern void g_checksum_free(GChecksum*) = checksum_free;
extern void g_checksum_update(GChecksum*, char*, long) = checksum_update;
extern char* g_checksum_get_string(GChecksum*) = checksum_get_string;
extern void g_checksum_get_digest(GChecksum*, char*, long*) = checksum_get_digest;
extern char* g_compute_checksum_for_data(int, char*, long) = compute_checksum_for_data;
extern char* g_compute_checksum_for_string(int, char*, long) = compute_checksum_for_string;
extern int g_convert_error_quark() = convert_error_quark;
extern _GIConv* g_iconv_open(char*, char*) = iconv_open;
extern long g_iconv(_GIConv*, char**, long*, char**, long*) = iconv;
extern int g_iconv_close(_GIConv*) = iconv_close;
extern char* g_convert(char*, long, char*, char*, long*, long*, GError**) = convert;
extern char* g_convert_with_iconv(char*, long, _GIConv*, long*, long*, GError**) = convert_with_iconv;
extern char* g_convert_with_fallback(char*, long, char*, char*, char*, long*, long*, GError**) = convert_with_fallback;
extern char* g_locale_to_utf8(char*, long, long*, long*, GError**) = locale_to_utf8;
extern char* g_locale_from_utf8(char*, long, long*, long*, GError**) = locale_from_utf8;
extern char* g_filename_to_utf8(char*, long, long*, long*, GError**) = filename_to_utf8;
extern char* g_filename_from_utf8(char*, long, long*, long*, GError**) = filename_from_utf8;
extern char* g_filename_from_uri(char*, char**, GError**) = filename_from_uri;
extern char* g_filename_to_uri(char*, char*, GError**) = filename_to_uri;
extern char* g_filename_display_name(char*) = filename_display_name;
extern int g_get_filename_charsets(char***) = get_filename_charsets;
extern char* g_filename_display_basename(char*) = filename_display_basename;
extern char** g_uri_list_extract_uris(char*) = uri_list_extract_uris;
extern void g_datalist_init(GData**) = datalist_init;
extern void g_datalist_clear(GData**) = datalist_clear;
extern void* g_datalist_id_get_data(GData**, int) = datalist_id_get_data;
extern void g_datalist_id_set_data_full(GData**, int, void*, void*) = datalist_id_set_data_full;
extern void* g_datalist_id_remove_no_notify(GData**, int) = datalist_id_remove_no_notify;
extern void g_datalist_foreach(GData**, void*, void*) = datalist_foreach;
extern void g_datalist_set_flags(GData**, int) = datalist_set_flags;
extern void g_datalist_unset_flags(GData**, int) = datalist_unset_flags;
extern int g_datalist_get_flags(GData**) = datalist_get_flags;
extern void g_dataset_destroy(void*) = dataset_destroy;
extern void* g_dataset_id_get_data(void*, int) = dataset_id_get_data;
extern void* g_datalist_get_data(GData**, char*) = datalist_get_data;
extern void g_dataset_id_set_data_full(void*, int, void*, void*) = dataset_id_set_data_full;
extern void* g_dataset_id_remove_no_notify(void*, int) = dataset_id_remove_no_notify;
extern void g_dataset_foreach(void*, void*, void*) = dataset_foreach;
extern GDate* g_date_new() = date_new;
extern GDate* g_date_new_dmy(char, int, short) = date_new_dmy;
extern GDate* g_date_new_julian(int) = date_new_julian;
extern void g_date_free(GDate*) = date_free;
extern int g_date_valid(GDate*) = date_valid;
extern int g_date_valid_day(char) = date_valid_day;
extern int g_date_valid_month(int) = date_valid_month;
extern int g_date_valid_year(short) = date_valid_year;
extern int g_date_valid_weekday(int) = date_valid_weekday;
extern int g_date_valid_julian(int) = date_valid_julian;
extern int g_date_valid_dmy(char, int, short) = date_valid_dmy;
extern int g_date_get_weekday(GDate*) = date_get_weekday;
extern int g_date_get_month(GDate*) = date_get_month;
extern short g_date_get_year(GDate*) = date_get_year;
extern char g_date_get_day(GDate*) = date_get_day;
extern int g_date_get_julian(GDate*) = date_get_julian;
extern int g_date_get_day_of_year(GDate*) = date_get_day_of_year;
extern int g_date_get_monday_week_of_year(GDate*) = date_get_monday_week_of_year;
extern int g_date_get_sunday_week_of_year(GDate*) = date_get_sunday_week_of_year;
extern int g_date_get_iso8601_week_of_year(GDate*) = date_get_iso8601_week_of_year;
extern void g_date_clear(GDate*, int) = date_clear;
extern void g_date_set_parse(GDate*, char*) = date_set_parse;
extern void g_date_set_time_t(GDate*, long) = date_set_time_t;
extern void g_date_set_time_val(GDate*, GTimeVal*) = date_set_time_val;
extern void g_date_set_time(GDate*, int) = date_set_time;
extern void g_date_set_month(GDate*, int) = date_set_month;
extern void g_date_set_day(GDate*, char) = date_set_day;
extern void g_date_set_year(GDate*, short) = date_set_year;
extern void g_date_set_dmy(GDate*, char, int, short) = date_set_dmy;
extern void g_date_set_julian(GDate*, int) = date_set_julian;
extern int g_date_is_first_of_month(GDate*) = date_is_first_of_month;
extern int g_date_is_last_of_month(GDate*) = date_is_last_of_month;
extern void g_date_add_days(GDate*, int) = date_add_days;
extern void g_date_subtract_days(GDate*, int) = date_subtract_days;
extern void g_date_add_months(GDate*, int) = date_add_months;
extern void g_date_subtract_months(GDate*, int) = date_subtract_months;
extern void g_date_add_years(GDate*, int) = date_add_years;
extern void g_date_subtract_years(GDate*, int) = date_subtract_years;
extern int g_date_is_leap_year(short) = date_is_leap_year;
extern char g_date_get_days_in_month(int, short) = date_get_days_in_month;
extern char g_date_get_monday_weeks_in_year(short) = date_get_monday_weeks_in_year;
extern char g_date_get_sunday_weeks_in_year(short) = date_get_sunday_weeks_in_year;
extern int g_date_days_between(GDate*, GDate*) = date_days_between;
extern int g_date_compare(GDate*, GDate*) = date_compare;
extern void g_date_to_struct_tm(GDate*, tm*) = date_to_struct_tm;
extern void g_date_clamp(GDate*, GDate*, GDate*) = date_clamp;
extern void g_date_order(GDate*, GDate*) = date_order;
extern long g_date_strftime(char*, long, char*, GDate*) = date_strftime;
extern GTimeZone* g_time_zone_new(char*) = time_zone_new;
extern GTimeZone* g_time_zone_new_utc() = time_zone_new_utc;
extern GTimeZone* g_time_zone_new_local() = time_zone_new_local;
extern GTimeZone* g_time_zone_ref(GTimeZone*) = time_zone_ref;
extern void g_time_zone_unref(GTimeZone*) = time_zone_unref;
extern int g_time_zone_find_interval(GTimeZone*, int, long) = time_zone_find_interval;
extern int g_time_zone_adjust_time(GTimeZone*, int, long*) = time_zone_adjust_time;
extern char* g_time_zone_get_abbreviation(GTimeZone*, int) = time_zone_get_abbreviation;
extern int g_time_zone_get_offset(GTimeZone*, int) = time_zone_get_offset;
extern int g_time_zone_is_dst(GTimeZone*, int) = time_zone_is_dst;
extern void g_date_time_unref(GDateTime*) = date_time_unref;
extern GDateTime* g_date_time_ref(GDateTime*) = date_time_ref;
extern GDateTime* g_date_time_new_now(GTimeZone*) = date_time_new_now;
extern GDateTime* g_date_time_new_now_local() = date_time_new_now_local;
extern GDateTime* g_date_time_new_now_utc() = date_time_new_now_utc;
extern GDateTime* g_date_time_new_from_unix_local(long) = date_time_new_from_unix_local;
extern GDateTime* g_date_time_new_from_unix_utc(long) = date_time_new_from_unix_utc;
extern GDateTime* g_date_time_new_from_timeval_local(GTimeVal*) = date_time_new_from_timeval_local;
extern GDateTime* g_date_time_new_from_timeval_utc(GTimeVal*) = date_time_new_from_timeval_utc;
extern GDateTime* g_date_time_new(GTimeZone*, int, int, int, int, int, double) = date_time_new;
extern GDateTime* g_date_time_new_local(int, int, int, int, int, double) = date_time_new_local;
extern GDateTime* g_date_time_new_utc(int, int, int, int, int, double) = date_time_new_utc;
extern GDateTime* g_date_time_add(GDateTime*, long) = date_time_add;
extern GDateTime* g_date_time_add_years(GDateTime*, int) = date_time_add_years;
extern GDateTime* g_date_time_add_months(GDateTime*, int) = date_time_add_months;
extern GDateTime* g_date_time_add_weeks(GDateTime*, int) = date_time_add_weeks;
extern GDateTime* g_date_time_add_days(GDateTime*, int) = date_time_add_days;
extern GDateTime* g_date_time_add_hours(GDateTime*, int) = date_time_add_hours;
extern GDateTime* g_date_time_add_minutes(GDateTime*, int) = date_time_add_minutes;
extern GDateTime* g_date_time_add_seconds(GDateTime*, double) = date_time_add_seconds;
extern GDateTime* g_date_time_add_full(GDateTime*, int, int, int, int, int, double) = date_time_add_full;
extern int g_date_time_compare(void*, void*) = date_time_compare;
extern long g_date_time_difference(GDateTime*, GDateTime*) = date_time_difference;
extern int g_date_time_hash(void*) = date_time_hash;
extern int g_date_time_equal(void*, void*) = date_time_equal;
extern void g_date_time_get_ymd(GDateTime*, int*, int*, int*) = date_time_get_ymd;
extern int g_date_time_get_year(GDateTime*) = date_time_get_year;
extern int g_date_time_get_month(GDateTime*) = date_time_get_month;
extern int g_date_time_get_day_of_month(GDateTime*) = date_time_get_day_of_month;
extern int g_date_time_get_week_numbering_year(GDateTime*) = date_time_get_week_numbering_year;
extern int g_date_time_get_week_of_year(GDateTime*) = date_time_get_week_of_year;
extern int g_date_time_get_day_of_week(GDateTime*) = date_time_get_day_of_week;
extern int g_date_time_get_day_of_year(GDateTime*) = date_time_get_day_of_year;
extern int g_date_time_get_hour(GDateTime*) = date_time_get_hour;
extern int g_date_time_get_minute(GDateTime*) = date_time_get_minute;
extern int g_date_time_get_second(GDateTime*) = date_time_get_second;
extern int g_date_time_get_microsecond(GDateTime*) = date_time_get_microsecond;
extern double g_date_time_get_seconds(GDateTime*) = date_time_get_seconds;
extern long g_date_time_to_unix(GDateTime*) = date_time_to_unix;
extern int g_date_time_to_timeval(GDateTime*, GTimeVal*) = date_time_to_timeval;
extern long g_date_time_get_utc_offset(GDateTime*) = date_time_get_utc_offset;
extern char* g_date_time_get_timezone_abbreviation(GDateTime*) = date_time_get_timezone_abbreviation;
extern int g_date_time_is_daylight_savings(GDateTime*) = date_time_is_daylight_savings;
extern GDateTime* g_date_time_to_timezone(GDateTime*, GTimeZone*) = date_time_to_timezone;
extern GDateTime* g_date_time_to_local(GDateTime*) = date_time_to_local;
extern GDateTime* g_date_time_to_utc(GDateTime*) = date_time_to_utc;
extern char* g_date_time_format(GDateTime*, char*) = date_time_format;
extern GDir* g_dir_open(char*, int, GError**) = dir_open;
extern char* g_dir_read_name(GDir*) = dir_read_name;
extern void g_dir_rewind(GDir*) = dir_rewind;
extern void g_dir_close(GDir*) = dir_close;
extern char* g_getenv(char*) = getenv;
extern int g_setenv(char*, char*, int) = setenv;
extern void g_unsetenv(char*) = unsetenv;
extern char** g_listenv() = listenv;
extern char** g_get_environ() = get_environ;
extern char* g_environ_getenv(char**, char*) = environ_getenv;
extern char** g_environ_setenv(char**, char*, char*, int) = environ_setenv;
extern char** g_environ_unsetenv(char**, char*) = environ_unsetenv;
extern int g_file_error_quark() = file_error_quark;
extern int g_file_error_from_errno(int) = file_error_from_errno;
extern int g_file_test(char*, int) = file_test;
extern int g_file_get_contents(char*, char**, long*, GError**) = file_get_contents;
extern int g_file_set_contents(char*, char*, long, GError**) = file_set_contents;
extern char* g_file_read_link(char*, GError**) = file_read_link;
extern char* g_mkdtemp(char*) = mkdtemp;
extern char* g_mkdtemp_full(char*, int) = mkdtemp_full;
extern int g_mkstemp(char*) = mkstemp;
extern int g_mkstemp_full(char*, int, int) = mkstemp_full;
extern int g_file_open_tmp(char*, char**, GError**) = file_open_tmp;
extern char* g_dir_make_tmp(char*, GError**) = dir_make_tmp;
extern char* g_build_path(char*, char*, ...) = build_path;
extern char* g_build_pathv(char*, char**) = build_pathv;
extern char* g_build_filename(char*, ...) = build_filename;
extern char* g_build_filenamev(char**) = build_filenamev;
extern int g_mkdir_with_parents(char*, int) = mkdir_with_parents;
extern int g_path_is_absolute(char*) = path_is_absolute;
extern char* g_path_skip_root(char*) = path_skip_root;
extern char* g_basename(char*) = basename;
extern char* g_get_current_dir() = get_current_dir;
extern char* g_path_get_basename(char*) = path_get_basename;
extern char* g_path_get_dirname(char*) = path_get_dirname;
extern char* g_strip_context(char*, char*) = strip_context;
extern char* g_dgettext(char*, char*) = dgettext;
extern char* g_dcgettext(char*, char*, int) = dcgettext;
extern char* g_dngettext(char*, char*, char*, long) = dngettext;
extern char* g_dpgettext(char*, char*, long) = dpgettext;
extern char* g_dpgettext2(char*, char*, char*) = dpgettext2;
extern void g_free(void*) = free;
extern void* g_malloc(long) = malloc;
extern void* g_malloc0(long) = malloc0;
extern void* g_realloc(void*, long) = realloc;
extern void* g_try_malloc(long) = try_malloc;
extern void* g_try_malloc0(long) = try_malloc0;
extern void* g_try_realloc(void*, long) = try_realloc;
extern void* g_malloc_n(long, long) = malloc_n;
extern void* g_malloc0_n(long, long) = malloc0_n;
extern void* g_realloc_n(void*, long, long) = realloc_n;
extern void* g_try_malloc_n(long, long) = try_malloc_n;
extern void* g_try_malloc0_n(long, long) = try_malloc0_n;
extern void* g_try_realloc_n(void*, long, long) = try_realloc_n;
extern void g_mem_set_vtable(GMemVTable*) = mem_set_vtable;
extern int g_mem_is_system_malloc() = mem_is_system_malloc;
extern void g_mem_profile() = mem_profile;
extern GList* g_list_alloc() = list_alloc;
extern void g_list_free(GList*) = list_free;
extern void g_list_free_1(GList*) = list_free_1;
extern void g_list_free_full(GList*, void*) = list_free_full;
extern GList* g_list_append(GList*, void*) = list_append;
extern GList* g_list_prepend(GList*, void*) = list_prepend;
extern GList* g_list_insert(GList*, void*, int) = list_insert;
extern GList* g_list_insert_sorted(GList*, void*, void*) = list_insert_sorted;
extern GList* g_list_insert_sorted_with_data(GList*, void*, void*, void*) = list_insert_sorted_with_data;
extern GList* g_list_insert_before(GList*, GList*, void*) = list_insert_before;
extern GList* g_list_concat(GList*, GList*) = list_concat;
extern GList* g_list_remove(GList*, void*) = list_remove;
extern GList* g_list_remove_all(GList*, void*) = list_remove_all;
extern GList* g_list_remove_link(GList*, GList*) = list_remove_link;
extern GList* g_list_delete_link(GList*, GList*) = list_delete_link;
extern GList* g_list_reverse(GList*) = list_reverse;
extern GList* g_list_copy(GList*) = list_copy;
extern GList* g_list_nth(GList*, int) = list_nth;
extern GList* g_list_nth_prev(GList*, int) = list_nth_prev;
extern GList* g_list_find(GList*, void*) = list_find;
extern GList* g_list_find_custom(GList*, void*, void*) = list_find_custom;
extern int g_list_position(GList*, GList*) = list_position;
extern int g_list_index(GList*, void*) = list_index;
extern GList* g_list_last(GList*) = list_last;
extern GList* g_list_first(GList*) = list_first;
extern int g_list_length(GList*) = list_length;
extern void g_list_foreach(GList*, void*, void*) = list_foreach;
extern GList* g_list_sort(GList*, void*) = list_sort;
extern GList* g_list_sort_with_data(GList*, void*, void*) = list_sort_with_data;
extern void* g_list_nth_data(GList*, int) = list_nth_data;
extern GHashTable* g_hash_table_new(void*, void*) = hash_table_new;
extern GHashTable* g_hash_table_new_full(void*, void*, void*, void*) = hash_table_new_full;
extern void g_hash_table_destroy(GHashTable*) = hash_table_destroy;
extern void g_hash_table_insert(GHashTable*, void*, void*) = hash_table_insert;
extern void g_hash_table_replace(GHashTable*, void*, void*) = hash_table_replace;
extern void g_hash_table_add(GHashTable*, void*) = hash_table_add;
extern int g_hash_table_remove(GHashTable*, void*) = hash_table_remove;
extern void g_hash_table_remove_all(GHashTable*) = hash_table_remove_all;
extern int g_hash_table_steal(GHashTable*, void*) = hash_table_steal;
extern void g_hash_table_steal_all(GHashTable*) = hash_table_steal_all;
extern void* g_hash_table_lookup(GHashTable*, void*) = hash_table_lookup;
extern int g_hash_table_contains(GHashTable*, void*) = hash_table_contains;
extern int g_hash_table_lookup_extended(GHashTable*, void*, void**, void**) = hash_table_lookup_extended;
extern void g_hash_table_foreach(GHashTable*, void*, void*) = hash_table_foreach;
extern void* g_hash_table_find(GHashTable*, void*, void*) = hash_table_find;
extern int g_hash_table_foreach_remove(GHashTable*, void*, void*) = hash_table_foreach_remove;
extern int g_hash_table_foreach_steal(GHashTable*, void*, void*) = hash_table_foreach_steal;
extern int g_hash_table_size(GHashTable*) = hash_table_size;
extern GList* g_hash_table_get_keys(GHashTable*) = hash_table_get_keys;
extern GList* g_hash_table_get_values(GHashTable*) = hash_table_get_values;
extern void g_hash_table_iter_init(GHashTableIter*, GHashTable*) = hash_table_iter_init;
extern int g_hash_table_iter_next(GHashTableIter*, void**, void**) = hash_table_iter_next;
extern GHashTable* g_hash_table_iter_get_hash_table(GHashTableIter*) = hash_table_iter_get_hash_table;
extern void g_hash_table_iter_remove(GHashTableIter*) = hash_table_iter_remove;
extern void g_hash_table_iter_replace(GHashTableIter*, void*) = hash_table_iter_replace;
extern void g_hash_table_iter_steal(GHashTableIter*) = hash_table_iter_steal;
extern GHashTable* g_hash_table_ref(GHashTable*) = hash_table_ref;
extern void g_hash_table_unref(GHashTable*) = hash_table_unref;
extern int g_str_equal(void*, void*) = str_equal;
extern int g_str_hash(void*) = str_hash;
extern int g_int_equal(void*, void*) = int_equal;
extern int g_int_hash(void*) = int_hash;
extern int g_int64_equal(void*, void*) = int64_equal;
extern int g_int64_hash(void*) = int64_hash;
extern int g_double_equal(void*, void*) = double_equal;
extern int g_double_hash(void*) = double_hash;
extern int g_direct_hash(void*) = direct_hash;
extern int g_direct_equal(void*, void*) = direct_equal;
extern GHmac* g_hmac_new(int, char*, long) = hmac_new;
extern GHmac* g_hmac_copy(GHmac*) = hmac_copy;
extern GHmac* g_hmac_ref(GHmac*) = hmac_ref;
extern void g_hmac_unref(GHmac*) = hmac_unref;
extern void g_hmac_update(GHmac*, char*, long) = hmac_update;
extern char* g_hmac_get_string(GHmac*) = hmac_get_string;
extern void g_hmac_get_digest(GHmac*, char*, long*) = hmac_get_digest;
extern char* g_compute_hmac_for_data(int, char*, long, char*, long) = compute_hmac_for_data;
extern char* g_compute_hmac_for_string(int, char*, long, char*, long) = compute_hmac_for_string;
extern void g_hook_list_init(GHookList*, int) = hook_list_init;
extern void g_hook_list_clear(GHookList*) = hook_list_clear;
extern GHook* g_hook_alloc(GHookList*) = hook_alloc;
extern void g_hook_free(GHookList*, GHook*) = hook_free;
extern GHook* g_hook_ref(GHookList*, GHook*) = hook_ref;
extern void g_hook_unref(GHookList*, GHook*) = hook_unref;
extern int g_hook_destroy(GHookList*, long) = hook_destroy;
extern void g_hook_destroy_link(GHookList*, GHook*) = hook_destroy_link;
extern void g_hook_prepend(GHookList*, GHook*) = hook_prepend;
extern void g_hook_insert_before(GHookList*, GHook*, GHook*) = hook_insert_before;
extern void g_hook_insert_sorted(GHookList*, GHook*, void*) = hook_insert_sorted;
extern GHook* g_hook_get(GHookList*, long) = hook_get;
extern GHook* g_hook_find(GHookList*, int, void*, void*) = hook_find;
extern GHook* g_hook_find_data(GHookList*, int, void*) = hook_find_data;
extern GHook* g_hook_find_func(GHookList*, int, void*) = hook_find_func;
extern GHook* g_hook_find_func_data(GHookList*, int, void*, void*) = hook_find_func_data;
extern GHook* g_hook_first_valid(GHookList*, int) = hook_first_valid;
extern GHook* g_hook_next_valid(GHookList*, GHook*, int) = hook_next_valid;
extern int g_hook_compare_ids(GHook*, GHook*) = hook_compare_ids;
extern void g_hook_list_invoke(GHookList*, int) = hook_list_invoke;
extern void g_hook_list_invoke_check(GHookList*, int) = hook_list_invoke_check;
extern void g_hook_list_marshal(GHookList*, int, void*, void*) = hook_list_marshal;
extern void g_hook_list_marshal_check(GHookList*, int, void*, void*) = hook_list_marshal_check;
extern int g_hostname_is_non_ascii(char*) = hostname_is_non_ascii;
extern int g_hostname_is_ascii_encoded(char*) = hostname_is_ascii_encoded;
extern int g_hostname_is_ip_address(char*) = hostname_is_ip_address;
extern char* g_hostname_to_ascii(char*) = hostname_to_ascii;
extern char* g_hostname_to_unicode(char*) = hostname_to_unicode;
extern int g_poll(GPollFD*, int, int) = poll;
extern GSList* g_slist_alloc() = slist_alloc;
extern void g_slist_free(GSList*) = slist_free;
extern void g_slist_free_1(GSList*) = slist_free_1;
extern void g_slist_free_full(GSList*, void*) = slist_free_full;
extern GSList* g_slist_append(GSList*, void*) = slist_append;
extern GSList* g_slist_prepend(GSList*, void*) = slist_prepend;
extern GSList* g_slist_insert(GSList*, void*, int) = slist_insert;
extern GSList* g_slist_insert_sorted(GSList*, void*, void*) = slist_insert_sorted;
extern GSList* g_slist_insert_sorted_with_data(GSList*, void*, void*, void*) = slist_insert_sorted_with_data;
extern GSList* g_slist_insert_before(GSList*, GSList*, void*) = slist_insert_before;
extern GSList* g_slist_concat(GSList*, GSList*) = slist_concat;
extern GSList* g_slist_remove(GSList*, void*) = slist_remove;
extern GSList* g_slist_remove_all(GSList*, void*) = slist_remove_all;
extern GSList* g_slist_remove_link(GSList*, GSList*) = slist_remove_link;
extern GSList* g_slist_delete_link(GSList*, GSList*) = slist_delete_link;
extern GSList* g_slist_reverse(GSList*) = slist_reverse;
extern GSList* g_slist_copy(GSList*) = slist_copy;
extern GSList* g_slist_nth(GSList*, int) = slist_nth;
extern GSList* g_slist_find(GSList*, void*) = slist_find;
extern GSList* g_slist_find_custom(GSList*, void*, void*) = slist_find_custom;
extern int g_slist_position(GSList*, GSList*) = slist_position;
extern int g_slist_index(GSList*, void*) = slist_index;
extern GSList* g_slist_last(GSList*) = slist_last;
extern int g_slist_length(GSList*) = slist_length;
extern void g_slist_foreach(GSList*, void*, void*) = slist_foreach;
extern GSList* g_slist_sort(GSList*, void*) = slist_sort;
extern GSList* g_slist_sort_with_data(GSList*, void*, void*) = slist_sort_with_data;
extern void* g_slist_nth_data(GSList*, int) = slist_nth_data;
extern GMainContext* g_main_context_new() = main_context_new;
extern GMainContext* g_main_context_ref(GMainContext*) = main_context_ref;
extern void g_main_context_unref(GMainContext*) = main_context_unref;
extern GMainContext* g_main_context_default() = main_context_default;
extern int g_main_context_iteration(GMainContext*, int) = main_context_iteration;
extern int g_main_context_pending(GMainContext*) = main_context_pending;
extern GSource* g_main_context_find_source_by_id(GMainContext*, int) = main_context_find_source_by_id;
extern GSource* g_main_context_find_source_by_user_data(GMainContext*, void*) = main_context_find_source_by_user_data;
extern GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, void*) = main_context_find_source_by_funcs_user_data;
extern void g_main_context_wakeup(GMainContext*) = main_context_wakeup;
extern int g_main_context_acquire(GMainContext*) = main_context_acquire;
extern void g_main_context_release(GMainContext*) = main_context_release;
extern int g_main_context_is_owner(GMainContext*) = main_context_is_owner;
extern int g_main_context_wait(GMainContext*, GCond*, GMutex*) = main_context_wait;
extern int g_main_context_prepare(GMainContext*, int*) = main_context_prepare;
extern int g_main_context_query(GMainContext*, int, int*, GPollFD*, int) = main_context_query;
extern int g_main_context_check(GMainContext*, int, GPollFD*, int) = main_context_check;
extern void g_main_context_dispatch(GMainContext*) = main_context_dispatch;
extern void g_main_context_set_poll_func(GMainContext*, void*) = main_context_set_poll_func;
extern void* g_main_context_get_poll_func(GMainContext*) = main_context_get_poll_func;
extern void g_main_context_add_poll(GMainContext*, GPollFD*, int) = main_context_add_poll;
extern void g_main_context_remove_poll(GMainContext*, GPollFD*) = main_context_remove_poll;
extern int g_main_depth() = main_depth;
extern GSource* g_main_current_source() = main_current_source;
extern void g_main_context_push_thread_default(GMainContext*) = main_context_push_thread_default;
extern void g_main_context_pop_thread_default(GMainContext*) = main_context_pop_thread_default;
extern GMainContext* g_main_context_get_thread_default() = main_context_get_thread_default;
extern GMainContext* g_main_context_ref_thread_default() = main_context_ref_thread_default;
extern GMainLoop* g_main_loop_new(GMainContext*, int) = main_loop_new;
extern void g_main_loop_run(GMainLoop*) = main_loop_run;
extern void g_main_loop_quit(GMainLoop*) = main_loop_quit;
extern GMainLoop* g_main_loop_ref(GMainLoop*) = main_loop_ref;
extern void g_main_loop_unref(GMainLoop*) = main_loop_unref;
extern int g_main_loop_is_running(GMainLoop*) = main_loop_is_running;
extern GMainContext* g_main_loop_get_context(GMainLoop*) = main_loop_get_context;
extern GSource* g_source_new(GSourceFuncs*, int) = source_new;
extern GSource* g_source_ref(GSource*) = source_ref;
extern void g_source_unref(GSource*) = source_unref;
extern int g_source_attach(GSource*, GMainContext*) = source_attach;
extern void g_source_destroy(GSource*) = source_destroy;
extern void g_source_set_priority(GSource*, int) = source_set_priority;
extern int g_source_get_priority(GSource*) = source_get_priority;
extern void g_source_set_can_recurse(GSource*, int) = source_set_can_recurse;
extern int g_source_get_can_recurse(GSource*) = source_get_can_recurse;
extern int g_source_get_id(GSource*) = source_get_id;
extern GMainContext* g_source_get_context(GSource*) = source_get_context;
extern void g_source_set_callback(GSource*, void*, void*, void*) = source_set_callback;
extern void g_source_set_funcs(GSource*, GSourceFuncs*) = source_set_funcs;
extern int g_source_is_destroyed(GSource*) = source_is_destroyed;
extern void g_source_set_name(GSource*, char*) = source_set_name;
extern char* g_source_get_name(GSource*) = source_get_name;
extern void g_source_set_name_by_id(int, char*) = source_set_name_by_id;
extern void g_source_set_callback_indirect(GSource*, void*, GSourceCallbackFuncs*) = source_set_callback_indirect;
extern void g_source_add_poll(GSource*, GPollFD*) = source_add_poll;
extern void g_source_remove_poll(GSource*, GPollFD*) = source_remove_poll;
extern void g_source_add_child_source(GSource*, GSource*) = source_add_child_source;
extern void g_source_remove_child_source(GSource*, GSource*) = source_remove_child_source;
extern void g_source_get_current_time(GSource*, GTimeVal*) = source_get_current_time;
extern long g_source_get_time(GSource*) = source_get_time;
extern GSource* g_idle_source_new() = idle_source_new;
extern GSource* g_child_watch_source_new(int) = child_watch_source_new;
extern GSource* g_timeout_source_new(int) = timeout_source_new;
extern GSource* g_timeout_source_new_seconds(int) = timeout_source_new_seconds;
extern void g_get_current_time(GTimeVal*) = get_current_time;
extern long g_get_monotonic_time() = get_monotonic_time;
extern long g_get_real_time() = get_real_time;
extern int g_source_remove(int) = source_remove;
extern int g_source_remove_by_user_data(void*) = source_remove_by_user_data;
extern int g_source_remove_by_funcs_user_data(GSourceFuncs*, void*) = source_remove_by_funcs_user_data;
extern int g_timeout_add_full(int, int, void*, void*, void*) = timeout_add_full;
extern int g_timeout_add(int, void*, void*) = timeout_add;
extern int g_timeout_add_seconds_full(int, int, void*, void*, void*) = timeout_add_seconds_full;
extern int g_timeout_add_seconds(int, void*, void*) = timeout_add_seconds;
extern int g_child_watch_add_full(int, int, void*, void*, void*) = child_watch_add_full;
extern int g_child_watch_add(int, void*, void*) = child_watch_add;
extern int g_idle_add(void*, void*) = idle_add;
extern int g_idle_add_full(int, void*, void*, void*) = idle_add_full;
extern int g_idle_remove_by_data(void*) = idle_remove_by_data;
extern void g_main_context_invoke_full(GMainContext*, int, void*, void*, void*) = main_context_invoke_full;
extern void g_main_context_invoke(GMainContext*, void*, void*) = main_context_invoke;
extern int g_unicode_script_to_iso15924(int) = unicode_script_to_iso15924;
extern int g_unicode_script_from_iso15924(int) = unicode_script_from_iso15924;
extern int g_unichar_isalnum(int) = unichar_isalnum;
extern int g_unichar_isalpha(int) = unichar_isalpha;
extern int g_unichar_iscntrl(int) = unichar_iscntrl;
extern int g_unichar_isdigit(int) = unichar_isdigit;
extern int g_unichar_isgraph(int) = unichar_isgraph;
extern int g_unichar_islower(int) = unichar_islower;
extern int g_unichar_isprint(int) = unichar_isprint;
extern int g_unichar_ispunct(int) = unichar_ispunct;
extern int g_unichar_isspace(int) = unichar_isspace;
extern int g_unichar_isupper(int) = unichar_isupper;
extern int g_unichar_isxdigit(int) = unichar_isxdigit;
extern int g_unichar_istitle(int) = unichar_istitle;
extern int g_unichar_isdefined(int) = unichar_isdefined;
extern int g_unichar_iswide(int) = unichar_iswide;
extern int g_unichar_iswide_cjk(int) = unichar_iswide_cjk;
extern int g_unichar_iszerowidth(int) = unichar_iszerowidth;
extern int g_unichar_ismark(int) = unichar_ismark;
extern int g_unichar_toupper(int) = unichar_toupper;
extern int g_unichar_tolower(int) = unichar_tolower;
extern int g_unichar_totitle(int) = unichar_totitle;
extern int g_unichar_digit_value(int) = unichar_digit_value;
extern int g_unichar_xdigit_value(int) = unichar_xdigit_value;
extern int g_unichar_type(int) = unichar_type;
extern int g_unichar_break_type(int) = unichar_break_type;
extern int g_unichar_combining_class(int) = unichar_combining_class;
extern int g_unichar_get_mirror_char(int, int*) = unichar_get_mirror_char;
extern int g_unichar_get_script(int) = unichar_get_script;
extern int g_unichar_validate(int) = unichar_validate;
extern int g_unichar_compose(int, int, int*) = unichar_compose;
extern int g_unichar_decompose(int, int*, int*) = unichar_decompose;
extern long g_unichar_fully_decompose(int, int, int*, long) = unichar_fully_decompose;
extern void g_unicode_canonical_ordering(int*, long) = unicode_canonical_ordering;
extern int* g_unicode_canonical_decomposition(int, long*) = unicode_canonical_decomposition;
extern int g_utf8_get_char(char*) = utf8_get_char;
extern int g_utf8_get_char_validated(char*, long) = utf8_get_char_validated;
extern char* g_utf8_offset_to_pointer(char*, long) = utf8_offset_to_pointer;
extern long g_utf8_pointer_to_offset(char*, char*) = utf8_pointer_to_offset;
extern char* g_utf8_prev_char(char*) = utf8_prev_char;
extern char* g_utf8_find_next_char(char*, char*) = utf8_find_next_char;
extern char* g_utf8_find_prev_char(char*, char*) = utf8_find_prev_char;
extern long g_utf8_strlen(char*, long) = utf8_strlen;
extern char* g_utf8_substring(char*, long, long) = utf8_substring;
extern char* g_utf8_strncpy(char*, char*, long) = utf8_strncpy;
extern char* g_utf8_strchr(char*, long, int) = utf8_strchr;
extern char* g_utf8_strrchr(char*, long, int) = utf8_strrchr;
extern char* g_utf8_strreverse(char*, long) = utf8_strreverse;
extern short* g_utf8_to_utf16(char*, long, long*, long*, GError**) = utf8_to_utf16;
extern int* g_utf8_to_ucs4(char*, long, long*, long*, GError**) = utf8_to_ucs4;
extern int* g_utf8_to_ucs4_fast(char*, long, long*) = utf8_to_ucs4_fast;
extern int* g_utf16_to_ucs4(short*, long, long*, long*, GError**) = utf16_to_ucs4;
extern char* g_utf16_to_utf8(short*, long, long*, long*, GError**) = utf16_to_utf8;
extern short* g_ucs4_to_utf16(int*, long, long*, long*, GError**) = ucs4_to_utf16;
extern char* g_ucs4_to_utf8(int*, long, long*, long*, GError**) = ucs4_to_utf8;
extern int g_unichar_to_utf8(int, char*) = unichar_to_utf8;
extern int g_utf8_validate(char*, long, char**) = utf8_validate;
extern char* g_utf8_strup(char*, long) = utf8_strup;
extern char* g_utf8_strdown(char*, long) = utf8_strdown;
extern char* g_utf8_casefold(char*, long) = utf8_casefold;
extern char* g_utf8_normalize(char*, long, int) = utf8_normalize;
extern int g_utf8_collate(char*, char*) = utf8_collate;
extern char* g_utf8_collate_key(char*, long) = utf8_collate_key;
extern char* g_utf8_collate_key_for_filename(char*, long) = utf8_collate_key_for_filename;
extern char* g_get_user_name() = get_user_name;
extern char* g_get_real_name() = get_real_name;
extern char* g_get_home_dir() = get_home_dir;
extern char* g_get_tmp_dir() = get_tmp_dir;
extern char* g_get_host_name() = get_host_name;
extern char* g_get_prgname() = get_prgname;
extern void g_set_prgname(char*) = set_prgname;
extern char* g_get_application_name() = get_application_name;
extern void g_set_application_name(char*) = set_application_name;
extern void g_reload_user_special_dirs_cache() = reload_user_special_dirs_cache;
extern char* g_get_user_data_dir() = get_user_data_dir;
extern char* g_get_user_config_dir() = get_user_config_dir;
extern char* g_get_user_cache_dir() = get_user_cache_dir;
extern char** g_get_system_data_dirs() = get_system_data_dirs;
extern char** g_get_system_config_dirs() = get_system_config_dirs;
extern char* g_get_user_runtime_dir() = get_user_runtime_dir;
extern char* g_get_user_special_dir(int) = get_user_special_dir;
extern int g_parse_debug_string(char*, GDebugKey*, int) = parse_debug_string;
extern int g_snprintf(char*, long, char*, ...) = snprintf;
extern int g_vsnprintf(char*, long, char*, void*) = vsnprintf;
extern void g_nullify_pointer(void**) = nullify_pointer;
extern char* g_format_size_full(long, int) = format_size_full;
extern char* g_format_size(long) = format_size;
extern char* g_format_size_for_display(long) = format_size_for_display;
extern void g_atexit(void*) = atexit;
extern char* g_find_program_in_path(char*) = find_program_in_path;
extern int g_bit_nth_lsf(long, int) = bit_nth_lsf;
extern int g_bit_nth_msf(long, int) = bit_nth_msf;
extern int g_bit_storage(long) = bit_storage;
extern GString* g_string_new(char*) = string_new;
extern GString* g_string_new_len(char*, long) = string_new_len;
extern GString* g_string_sized_new(long) = string_sized_new;
extern char* g_string_free(GString*, int) = string_free;
extern int g_string_equal(GString*, GString*) = string_equal;
extern int g_string_hash(GString*) = string_hash;
extern GString* g_string_assign(GString*, char*) = string_assign;
extern GString* g_string_truncate(GString*, long) = string_truncate;
extern GString* g_string_set_size(GString*, long) = string_set_size;
extern GString* g_string_insert_len(GString*, long, char*, long) = string_insert_len;
extern GString* g_string_append(GString*, char*) = string_append;
extern GString* g_string_append_len(GString*, char*, long) = string_append_len;
extern GString* g_string_append_c(GString*, char) = string_append_c;
extern GString* g_string_append_unichar(GString*, int) = string_append_unichar;
extern GString* g_string_prepend(GString*, char*) = string_prepend;
extern GString* g_string_prepend_c(GString*, char) = string_prepend_c;
extern GString* g_string_prepend_unichar(GString*, int) = string_prepend_unichar;
extern GString* g_string_prepend_len(GString*, char*, long) = string_prepend_len;
extern GString* g_string_insert(GString*, long, char*) = string_insert;
extern GString* g_string_insert_c(GString*, long, char) = string_insert_c;
extern GString* g_string_insert_unichar(GString*, long, int) = string_insert_unichar;
extern GString* g_string_overwrite(GString*, long, char*) = string_overwrite;
extern GString* g_string_overwrite_len(GString*, long, char*, long) = string_overwrite_len;
extern GString* g_string_erase(GString*, long, long) = string_erase;
extern GString* g_string_ascii_down(GString*) = string_ascii_down;
extern GString* g_string_ascii_up(GString*) = string_ascii_up;
extern void g_string_vprintf(GString*, char*, void*) = string_vprintf;
extern void g_string_printf(GString*, char*, ...) = string_printf;
extern void g_string_append_vprintf(GString*, char*, void*) = string_append_vprintf;
extern void g_string_append_printf(GString*, char*, ...) = string_append_printf;
extern GString* g_string_append_uri_escaped(GString*, char*, char*, int) = string_append_uri_escaped;
extern GString* g_string_down(GString*) = string_down;
extern GString* g_string_up(GString*) = string_up;
extern void g_io_channel_init(GIOChannel*) = io_channel_init;
extern GIOChannel* g_io_channel_ref(GIOChannel*) = io_channel_ref;
extern void g_io_channel_unref(GIOChannel*) = io_channel_unref;
extern int g_io_channel_read(GIOChannel*, char*, long, long*) = io_channel_read;
extern int g_io_channel_write(GIOChannel*, char*, long, long*) = io_channel_write;
extern int g_io_channel_seek(GIOChannel*, long, int) = io_channel_seek;
extern void g_io_channel_close(GIOChannel*) = io_channel_close;
extern int g_io_channel_shutdown(GIOChannel*, int, GError**) = io_channel_shutdown;
extern int g_io_add_watch_full(GIOChannel*, int, int, void*, void*, void*) = io_add_watch_full;
extern GSource* g_io_create_watch(GIOChannel*, int) = io_create_watch;
extern int g_io_add_watch(GIOChannel*, int, void*, void*) = io_add_watch;
extern void g_io_channel_set_buffer_size(GIOChannel*, long) = io_channel_set_buffer_size;
extern long g_io_channel_get_buffer_size(GIOChannel*) = io_channel_get_buffer_size;
extern int g_io_channel_get_buffer_condition(GIOChannel*) = io_channel_get_buffer_condition;
extern int g_io_channel_set_flags(GIOChannel*, int, GError**) = io_channel_set_flags;
extern int g_io_channel_get_flags(GIOChannel*) = io_channel_get_flags;
extern void g_io_channel_set_line_term(GIOChannel*, char*, int) = io_channel_set_line_term;
extern char* g_io_channel_get_line_term(GIOChannel*, int*) = io_channel_get_line_term;
extern void g_io_channel_set_buffered(GIOChannel*, int) = io_channel_set_buffered;
extern int g_io_channel_get_buffered(GIOChannel*) = io_channel_get_buffered;
extern int g_io_channel_set_encoding(GIOChannel*, char*, GError**) = io_channel_set_encoding;
extern char* g_io_channel_get_encoding(GIOChannel*) = io_channel_get_encoding;
extern void g_io_channel_set_close_on_unref(GIOChannel*, int) = io_channel_set_close_on_unref;
extern int g_io_channel_get_close_on_unref(GIOChannel*) = io_channel_get_close_on_unref;
extern int g_io_channel_flush(GIOChannel*, GError**) = io_channel_flush;
extern int g_io_channel_read_line(GIOChannel*, char**, long*, long*, GError**) = io_channel_read_line;
extern int g_io_channel_read_line_string(GIOChannel*, GString*, long*, GError**) = io_channel_read_line_string;
extern int g_io_channel_read_to_end(GIOChannel*, char**, long*, GError**) = io_channel_read_to_end;
extern int g_io_channel_read_chars(GIOChannel*, char*, long, long*, GError**) = io_channel_read_chars;
extern int g_io_channel_read_unichar(GIOChannel*, int*, GError**) = io_channel_read_unichar;
extern int g_io_channel_write_chars(GIOChannel*, char*, long, long*, GError**) = io_channel_write_chars;
extern int g_io_channel_write_unichar(GIOChannel*, int, GError**) = io_channel_write_unichar;
extern int g_io_channel_seek_position(GIOChannel*, long, int, GError**) = io_channel_seek_position;
extern GIOChannel* g_io_channel_new_file(char*, char*, GError**) = io_channel_new_file;
extern int g_io_channel_error_quark() = io_channel_error_quark;
extern int g_io_channel_error_from_errno(int) = io_channel_error_from_errno;
extern GIOChannel* g_io_channel_unix_new(int) = io_channel_unix_new;
extern int g_io_channel_unix_get_fd(GIOChannel*) = io_channel_unix_get_fd;
extern int g_key_file_error_quark() = key_file_error_quark;
extern GKeyFile* g_key_file_new() = key_file_new;
extern GKeyFile* g_key_file_ref(GKeyFile*) = key_file_ref;
extern void g_key_file_unref(GKeyFile*) = key_file_unref;
extern void g_key_file_free(GKeyFile*) = key_file_free;
extern void g_key_file_set_list_separator(GKeyFile*, char) = key_file_set_list_separator;
extern int g_key_file_load_from_file(GKeyFile*, char*, int, GError**) = key_file_load_from_file;
extern int g_key_file_load_from_data(GKeyFile*, char*, long, int, GError**) = key_file_load_from_data;
extern int g_key_file_load_from_dirs(GKeyFile*, char*, char**, char**, int, GError**) = key_file_load_from_dirs;
extern int g_key_file_load_from_data_dirs(GKeyFile*, char*, char**, int, GError**) = key_file_load_from_data_dirs;
extern char* g_key_file_to_data(GKeyFile*, long*, GError**) = key_file_to_data;
extern char* g_key_file_get_start_group(GKeyFile*) = key_file_get_start_group;
extern char** g_key_file_get_groups(GKeyFile*, long*) = key_file_get_groups;
extern char** g_key_file_get_keys(GKeyFile*, char*, long*, GError**) = key_file_get_keys;
extern int g_key_file_has_group(GKeyFile*, char*) = key_file_has_group;
extern int g_key_file_has_key(GKeyFile*, char*, char*, GError**) = key_file_has_key;
extern char* g_key_file_get_value(GKeyFile*, char*, char*, GError**) = key_file_get_value;
extern void g_key_file_set_value(GKeyFile*, char*, char*, char*) = key_file_set_value;
extern char* g_key_file_get_string(GKeyFile*, char*, char*, GError**) = key_file_get_string;
extern void g_key_file_set_string(GKeyFile*, char*, char*, char*) = key_file_set_string;
extern char* g_key_file_get_locale_string(GKeyFile*, char*, char*, char*, GError**) = key_file_get_locale_string;
extern void g_key_file_set_locale_string(GKeyFile*, char*, char*, char*, char*) = key_file_set_locale_string;
extern int g_key_file_get_boolean(GKeyFile*, char*, char*, GError**) = key_file_get_boolean;
extern void g_key_file_set_boolean(GKeyFile*, char*, char*, int) = key_file_set_boolean;
extern int g_key_file_get_integer(GKeyFile*, char*, char*, GError**) = key_file_get_integer;
extern void g_key_file_set_integer(GKeyFile*, char*, char*, int) = key_file_set_integer;
extern long g_key_file_get_int64(GKeyFile*, char*, char*, GError**) = key_file_get_int64;
extern void g_key_file_set_int64(GKeyFile*, char*, char*, long) = key_file_set_int64;
extern long g_key_file_get_uint64(GKeyFile*, char*, char*, GError**) = key_file_get_uint64;
extern void g_key_file_set_uint64(GKeyFile*, char*, char*, long) = key_file_set_uint64;
extern double g_key_file_get_double(GKeyFile*, char*, char*, GError**) = key_file_get_double;
extern void g_key_file_set_double(GKeyFile*, char*, char*, double) = key_file_set_double;
extern char** g_key_file_get_string_list(GKeyFile*, char*, char*, long*, GError**) = key_file_get_string_list;
extern void g_key_file_set_string_list(GKeyFile*, char*, char*, char**, long) = key_file_set_string_list;
extern char** g_key_file_get_locale_string_list(GKeyFile*, char*, char*, char*, long*, GError**) = key_file_get_locale_string_list;
extern void g_key_file_set_locale_string_list(GKeyFile*, char*, char*, char*, char**, long) = key_file_set_locale_string_list;
extern int* g_key_file_get_boolean_list(GKeyFile*, char*, char*, long*, GError**) = key_file_get_boolean_list;
extern void g_key_file_set_boolean_list(GKeyFile*, char*, char*, int*, long) = key_file_set_boolean_list;
extern int* g_key_file_get_integer_list(GKeyFile*, char*, char*, long*, GError**) = key_file_get_integer_list;
extern void g_key_file_set_double_list(GKeyFile*, char*, char*, double*, long) = key_file_set_double_list;
extern double* g_key_file_get_double_list(GKeyFile*, char*, char*, long*, GError**) = key_file_get_double_list;
extern void g_key_file_set_integer_list(GKeyFile*, char*, char*, int*, long) = key_file_set_integer_list;
extern int g_key_file_set_comment(GKeyFile*, char*, char*, char*, GError**) = key_file_set_comment;
extern char* g_key_file_get_comment(GKeyFile*, char*, char*, GError**) = key_file_get_comment;
extern int g_key_file_remove_comment(GKeyFile*, char*, char*, GError**) = key_file_remove_comment;
extern int g_key_file_remove_key(GKeyFile*, char*, char*, GError**) = key_file_remove_key;
extern int g_key_file_remove_group(GKeyFile*, char*, GError**) = key_file_remove_group;
extern GMappedFile* g_mapped_file_new(char*, int, GError**) = mapped_file_new;
extern GMappedFile* g_mapped_file_new_from_fd(int, int, GError**) = mapped_file_new_from_fd;
extern long g_mapped_file_get_length(GMappedFile*) = mapped_file_get_length;
extern char* g_mapped_file_get_contents(GMappedFile*) = mapped_file_get_contents;
extern GMappedFile* g_mapped_file_ref(GMappedFile*) = mapped_file_ref;
extern void g_mapped_file_unref(GMappedFile*) = mapped_file_unref;
extern void g_mapped_file_free(GMappedFile*) = mapped_file_free;
extern int g_markup_error_quark() = markup_error_quark;
extern GMarkupParseContext* g_markup_parse_context_new(GMarkupParser*, int, void*, void*) = markup_parse_context_new;
extern void g_markup_parse_context_free(GMarkupParseContext*) = markup_parse_context_free;
extern int g_markup_parse_context_parse(GMarkupParseContext*, char*, long, GError**) = markup_parse_context_parse;
extern void g_markup_parse_context_push(GMarkupParseContext*, GMarkupParser*, void*) = markup_parse_context_push;
extern void* g_markup_parse_context_pop(GMarkupParseContext*) = markup_parse_context_pop;
extern int g_markup_parse_context_end_parse(GMarkupParseContext*, GError**) = markup_parse_context_end_parse;
extern char* g_markup_parse_context_get_element(GMarkupParseContext*) = markup_parse_context_get_element;
extern GSList* g_markup_parse_context_get_element_stack(GMarkupParseContext*) = markup_parse_context_get_element_stack;
extern void g_markup_parse_context_get_position(GMarkupParseContext*, int*, int*) = markup_parse_context_get_position;
extern void* g_markup_parse_context_get_user_data(GMarkupParseContext*) = markup_parse_context_get_user_data;
extern char* g_markup_escape_text(char*, long) = markup_escape_text;
extern char* g_markup_printf_escaped(char*, ...) = markup_printf_escaped;
extern char* g_markup_vprintf_escaped(char*, void*) = markup_vprintf_escaped;
extern int g_markup_collect_attributes(char*, char**, char**, GError**, int, char*, ...) = markup_collect_attributes;
extern long g_printf_string_upper_bound(char*, void*) = printf_string_upper_bound;
extern int g_log_set_handler(char*, int, void*, void*) = log_set_handler;
extern void g_log_remove_handler(char*, int) = log_remove_handler;
extern void g_log_default_handler(char*, int, char*, void*) = log_default_handler;
extern void* g_log_set_default_handler(void*, void*) = log_set_default_handler;
extern void g_log(char*, int, char*, ...) = log;
extern void g_logv(char*, int, char*, void*) = logv;
extern int g_log_set_fatal_mask(char*, int) = log_set_fatal_mask;
extern int g_log_set_always_fatal(int) = log_set_always_fatal;
extern void g_return_if_fail_warning(char*, char*, char*) = return_if_fail_warning;
extern void g_warn_message(char*, char*, int, char*, char*) = warn_message;
extern void g_assert_warning(char*, char*, int, char*, char*) = assert_warning;
extern void g_print(char*, ...) = print;
extern void* g_set_print_handler(void*) = set_print_handler;
extern void g_printerr(char*, ...) = printerr;
extern void* g_set_printerr_handler(void*) = set_printerr_handler;
extern GNode* g_node_new(void*) = node_new;
extern void g_node_destroy(GNode*) = node_destroy;
extern void g_node_unlink(GNode*) = node_unlink;
extern GNode* g_node_copy_deep(GNode*, void*, void*) = node_copy_deep;
extern GNode* g_node_copy(GNode*) = node_copy;
extern GNode* g_node_insert(GNode*, int, GNode*) = node_insert;
extern GNode* g_node_insert_before(GNode*, GNode*, GNode*) = node_insert_before;
extern GNode* g_node_insert_after(GNode*, GNode*, GNode*) = node_insert_after;
extern GNode* g_node_prepend(GNode*, GNode*) = node_prepend;
extern int g_node_n_nodes(GNode*, int) = node_n_nodes;
extern GNode* g_node_get_root(GNode*) = node_get_root;
extern int g_node_is_ancestor(GNode*, GNode*) = node_is_ancestor;
extern int g_node_depth(GNode*) = node_depth;
extern GNode* g_node_find(GNode*, int, int, void*) = node_find;
extern void g_node_traverse(GNode*, int, int, int, void*, void*) = node_traverse;
extern int g_node_max_height(GNode*) = node_max_height;
extern void g_node_children_foreach(GNode*, int, void*, void*) = node_children_foreach;
extern void g_node_reverse_children(GNode*) = node_reverse_children;
extern int g_node_n_children(GNode*) = node_n_children;
extern GNode* g_node_nth_child(GNode*, int) = node_nth_child;
extern GNode* g_node_last_child(GNode*) = node_last_child;
extern GNode* g_node_find_child(GNode*, int, void*) = node_find_child;
extern int g_node_child_position(GNode*, GNode*) = node_child_position;
extern int g_node_child_index(GNode*, void*) = node_child_index;
extern GNode* g_node_first_sibling(GNode*) = node_first_sibling;
extern GNode* g_node_last_sibling(GNode*) = node_last_sibling;
extern int g_option_error_quark() = option_error_quark;
extern GOptionContext* g_option_context_new(char*) = option_context_new;
extern void g_option_context_set_summary(GOptionContext*, char*) = option_context_set_summary;
extern char* g_option_context_get_summary(GOptionContext*) = option_context_get_summary;
extern void g_option_context_set_description(GOptionContext*, char*) = option_context_set_description;
extern char* g_option_context_get_description(GOptionContext*) = option_context_get_description;
extern void g_option_context_free(GOptionContext*) = option_context_free;
extern void g_option_context_set_help_enabled(GOptionContext*, int) = option_context_set_help_enabled;
extern int g_option_context_get_help_enabled(GOptionContext*) = option_context_get_help_enabled;
extern void g_option_context_set_ignore_unknown_options(GOptionContext*, int) = option_context_set_ignore_unknown_options;
extern int g_option_context_get_ignore_unknown_options(GOptionContext*) = option_context_get_ignore_unknown_options;
extern void g_option_context_add_main_entries(GOptionContext*, GOptionEntry*, char*) = option_context_add_main_entries;
extern int g_option_context_parse(GOptionContext*, int*, char***, GError**) = option_context_parse;
extern void g_option_context_set_translate_func(GOptionContext*, void*, void*, void*) = option_context_set_translate_func;
extern void g_option_context_set_translation_domain(GOptionContext*, char*) = option_context_set_translation_domain;
extern void g_option_context_add_group(GOptionContext*, GOptionGroup*) = option_context_add_group;
extern void g_option_context_set_main_group(GOptionContext*, GOptionGroup*) = option_context_set_main_group;
extern GOptionGroup* g_option_context_get_main_group(GOptionContext*) = option_context_get_main_group;
extern char* g_option_context_get_help(GOptionContext*, int, GOptionGroup*) = option_context_get_help;
extern GOptionGroup* g_option_group_new(char*, char*, char*, void*, void*) = option_group_new;
extern void g_option_group_set_parse_hooks(GOptionGroup*, void*, void*) = option_group_set_parse_hooks;
extern void g_option_group_set_error_hook(GOptionGroup*, void*) = option_group_set_error_hook;
extern void g_option_group_free(GOptionGroup*) = option_group_free;
extern void g_option_group_add_entries(GOptionGroup*, GOptionEntry*) = option_group_add_entries;
extern void g_option_group_set_translate_func(GOptionGroup*, void*, void*, void*) = option_group_set_translate_func;
extern void g_option_group_set_translation_domain(GOptionGroup*, char*) = option_group_set_translation_domain;
extern GPatternSpec* g_pattern_spec_new(char*) = pattern_spec_new;
extern void g_pattern_spec_free(GPatternSpec*) = pattern_spec_free;
extern int g_pattern_spec_equal(GPatternSpec*, GPatternSpec*) = pattern_spec_equal;
extern int g_pattern_match(GPatternSpec*, int, char*, char*) = pattern_match;
extern int g_pattern_match_string(GPatternSpec*, char*) = pattern_match_string;
extern int g_pattern_match_simple(char*, char*) = pattern_match_simple;
extern int g_spaced_primes_closest(int) = spaced_primes_closest;
extern void g_qsort_with_data(void*, int, long, void*, void*) = qsort_with_data;
extern GQueue* g_queue_new() = queue_new;
extern void g_queue_free(GQueue*) = queue_free;
extern void g_queue_free_full(GQueue*, void*) = queue_free_full;
extern void g_queue_init(GQueue*) = queue_init;
extern void g_queue_clear(GQueue*) = queue_clear;
extern int g_queue_is_empty(GQueue*) = queue_is_empty;
extern int g_queue_get_length(GQueue*) = queue_get_length;
extern void g_queue_reverse(GQueue*) = queue_reverse;
extern GQueue* g_queue_copy(GQueue*) = queue_copy;
extern void g_queue_foreach(GQueue*, void*, void*) = queue_foreach;
extern GList* g_queue_find(GQueue*, void*) = queue_find;
extern GList* g_queue_find_custom(GQueue*, void*, void*) = queue_find_custom;
extern void g_queue_sort(GQueue*, void*, void*) = queue_sort;
extern void g_queue_push_head(GQueue*, void*) = queue_push_head;
extern void g_queue_push_tail(GQueue*, void*) = queue_push_tail;
extern void g_queue_push_nth(GQueue*, void*, int) = queue_push_nth;
extern void* g_queue_pop_head(GQueue*) = queue_pop_head;
extern void* g_queue_pop_tail(GQueue*) = queue_pop_tail;
extern void* g_queue_pop_nth(GQueue*, int) = queue_pop_nth;
extern void* g_queue_peek_head(GQueue*) = queue_peek_head;
extern void* g_queue_peek_tail(GQueue*) = queue_peek_tail;
extern void* g_queue_peek_nth(GQueue*, int) = queue_peek_nth;
extern int g_queue_index(GQueue*, void*) = queue_index;
extern int g_queue_remove(GQueue*, void*) = queue_remove;
extern int g_queue_remove_all(GQueue*, void*) = queue_remove_all;
extern void g_queue_insert_before(GQueue*, GList*, void*) = queue_insert_before;
extern void g_queue_insert_after(GQueue*, GList*, void*) = queue_insert_after;
extern void g_queue_insert_sorted(GQueue*, void*, void*, void*) = queue_insert_sorted;
extern void g_queue_push_head_link(GQueue*, GList*) = queue_push_head_link;
extern void g_queue_push_tail_link(GQueue*, GList*) = queue_push_tail_link;
extern void g_queue_push_nth_link(GQueue*, int, GList*) = queue_push_nth_link;
extern GList* g_queue_pop_head_link(GQueue*) = queue_pop_head_link;
extern GList* g_queue_pop_tail_link(GQueue*) = queue_pop_tail_link;
extern GList* g_queue_pop_nth_link(GQueue*, int) = queue_pop_nth_link;
extern GList* g_queue_peek_head_link(GQueue*) = queue_peek_head_link;
extern GList* g_queue_peek_tail_link(GQueue*) = queue_peek_tail_link;
extern GList* g_queue_peek_nth_link(GQueue*, int) = queue_peek_nth_link;
extern int g_queue_link_index(GQueue*, GList*) = queue_link_index;
extern void g_queue_unlink(GQueue*, GList*) = queue_unlink;
extern void g_queue_delete_link(GQueue*, GList*) = queue_delete_link;
extern GRand* g_rand_new_with_seed(int) = rand_new_with_seed;
extern GRand* g_rand_new_with_seed_array(int*, int) = rand_new_with_seed_array;
extern GRand* g_rand_new() = rand_new;
extern void g_rand_free(GRand*) = rand_free;
extern GRand* g_rand_copy(GRand*) = rand_copy;
extern void g_rand_set_seed(GRand*, int) = rand_set_seed;
extern void g_rand_set_seed_array(GRand*, int*, int) = rand_set_seed_array;
extern int g_rand_int(GRand*) = rand_int;
extern int g_rand_int_range(GRand*, int, int) = rand_int_range;
extern double g_rand_double(GRand*) = rand_double;
extern double g_rand_double_range(GRand*, double, double) = rand_double_range;
extern void g_random_set_seed(int) = random_set_seed;
extern int g_random_int() = random_int;
extern int g_random_int_range(int, int) = random_int_range;
extern double g_random_double() = random_double;
extern double g_random_double_range(double, double) = random_double_range;
extern int g_regex_error_quark() = regex_error_quark;
extern GRegex* g_regex_new(char*, int, int, GError**) = regex_new;
extern GRegex* g_regex_ref(GRegex*) = regex_ref;
extern void g_regex_unref(GRegex*) = regex_unref;
extern char* g_regex_get_pattern(GRegex*) = regex_get_pattern;
extern int g_regex_get_max_backref(GRegex*) = regex_get_max_backref;
extern int g_regex_get_capture_count(GRegex*) = regex_get_capture_count;
extern int g_regex_get_string_number(GRegex*, char*) = regex_get_string_number;
extern char* g_regex_escape_string(char*, int) = regex_escape_string;
extern char* g_regex_escape_nul(char*, int) = regex_escape_nul;
extern int g_regex_get_compile_flags(GRegex*) = regex_get_compile_flags;
extern int g_regex_get_match_flags(GRegex*) = regex_get_match_flags;
extern int g_regex_match_simple(char*, char*, int, int) = regex_match_simple;
extern int g_regex_match(GRegex*, char*, int, GMatchInfo**) = regex_match;
extern int g_regex_match_full(GRegex*, char*, long, int, int, GMatchInfo**, GError**) = regex_match_full;
extern int g_regex_match_all(GRegex*, char*, int, GMatchInfo**) = regex_match_all;
extern int g_regex_match_all_full(GRegex*, char*, long, int, int, GMatchInfo**, GError**) = regex_match_all_full;
extern char** g_regex_split_simple(char*, char*, int, int) = regex_split_simple;
extern char** g_regex_split(GRegex*, char*, int) = regex_split;
extern char** g_regex_split_full(GRegex*, char*, long, int, int, int, GError**) = regex_split_full;
extern char* g_regex_replace(GRegex*, char*, long, int, char*, int, GError**) = regex_replace;
extern char* g_regex_replace_literal(GRegex*, char*, long, int, char*, int, GError**) = regex_replace_literal;
extern char* g_regex_replace_eval(GRegex*, char*, long, int, int, void*, void*, GError**) = regex_replace_eval;
extern int g_regex_check_replacement(char*, int*, GError**) = regex_check_replacement;
extern GRegex* g_match_info_get_regex(GMatchInfo*) = match_info_get_regex;
extern char* g_match_info_get_string(GMatchInfo*) = match_info_get_string;
extern GMatchInfo* g_match_info_ref(GMatchInfo*) = match_info_ref;
extern void g_match_info_unref(GMatchInfo*) = match_info_unref;
extern void g_match_info_free(GMatchInfo*) = match_info_free;
extern int g_match_info_next(GMatchInfo*, GError**) = match_info_next;
extern int g_match_info_matches(GMatchInfo*) = match_info_matches;
extern int g_match_info_get_match_count(GMatchInfo*) = match_info_get_match_count;
extern int g_match_info_is_partial_match(GMatchInfo*) = match_info_is_partial_match;
extern char* g_match_info_expand_references(GMatchInfo*, char*, GError**) = match_info_expand_references;
extern char* g_match_info_fetch(GMatchInfo*, int) = match_info_fetch;
extern int g_match_info_fetch_pos(GMatchInfo*, int, int*, int*) = match_info_fetch_pos;
extern char* g_match_info_fetch_named(GMatchInfo*, char*) = match_info_fetch_named;
extern int g_match_info_fetch_named_pos(GMatchInfo*, char*, int*, int*) = match_info_fetch_named_pos;
extern char** g_match_info_fetch_all(GMatchInfo*) = match_info_fetch_all;
extern GScanner* g_scanner_new(GScannerConfig*) = scanner_new;
extern void g_scanner_destroy(GScanner*) = scanner_destroy;
extern void g_scanner_input_file(GScanner*, int) = scanner_input_file;
extern void g_scanner_sync_file_offset(GScanner*) = scanner_sync_file_offset;
extern void g_scanner_input_text(GScanner*, char*, int) = scanner_input_text;
extern int g_scanner_get_next_token(GScanner*) = scanner_get_next_token;
extern int g_scanner_peek_next_token(GScanner*) = scanner_peek_next_token;
extern int g_scanner_cur_token(GScanner*) = scanner_cur_token;
extern GTokenValue* Pure_g_scanner_cur_value(GScanner*) = scanner_cur_value;
extern int g_scanner_cur_line(GScanner*) = scanner_cur_line;
extern int g_scanner_cur_position(GScanner*) = scanner_cur_position;
extern int g_scanner_eof(GScanner*) = scanner_eof;
extern int g_scanner_set_scope(GScanner*, int) = scanner_set_scope;
extern void g_scanner_scope_add_symbol(GScanner*, int, char*, void*) = scanner_scope_add_symbol;
extern void g_scanner_scope_remove_symbol(GScanner*, int, char*) = scanner_scope_remove_symbol;
extern void* g_scanner_scope_lookup_symbol(GScanner*, int, char*) = scanner_scope_lookup_symbol;
extern void g_scanner_scope_foreach_symbol(GScanner*, int, void*, void*) = scanner_scope_foreach_symbol;
extern void* g_scanner_lookup_symbol(GScanner*, char*) = scanner_lookup_symbol;
extern void g_scanner_unexp_token(GScanner*, int, char*, char*, char*, char*, int) = scanner_unexp_token;
extern void g_scanner_error(GScanner*, char*, ...) = scanner_error;
extern void g_scanner_warn(GScanner*, char*, ...) = scanner_warn;
extern GSequence* g_sequence_new(void*) = sequence_new;
extern void g_sequence_free(GSequence*) = sequence_free;
extern int g_sequence_get_length(GSequence*) = sequence_get_length;
extern void g_sequence_foreach(GSequence*, void*, void*) = sequence_foreach;
extern void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, void*, void*) = sequence_foreach_range;
extern void g_sequence_sort(GSequence*, void*, void*) = sequence_sort;
extern void g_sequence_sort_iter(GSequence*, void*, void*) = sequence_sort_iter;
extern GSequenceIter* g_sequence_get_begin_iter(GSequence*) = sequence_get_begin_iter;
extern GSequenceIter* g_sequence_get_end_iter(GSequence*) = sequence_get_end_iter;
extern GSequenceIter* g_sequence_get_iter_at_pos(GSequence*, int) = sequence_get_iter_at_pos;
extern GSequenceIter* g_sequence_append(GSequence*, void*) = sequence_append;
extern GSequenceIter* g_sequence_prepend(GSequence*, void*) = sequence_prepend;
extern GSequenceIter* g_sequence_insert_before(GSequenceIter*, void*) = sequence_insert_before;
extern void g_sequence_move(GSequenceIter*, GSequenceIter*) = sequence_move;
extern void g_sequence_swap(GSequenceIter*, GSequenceIter*) = sequence_swap;
extern GSequenceIter* g_sequence_insert_sorted(GSequence*, void*, void*, void*) = sequence_insert_sorted;
extern GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, void*, void*, void*) = sequence_insert_sorted_iter;
extern void g_sequence_sort_changed(GSequenceIter*, void*, void*) = sequence_sort_changed;
extern void g_sequence_sort_changed_iter(GSequenceIter*, void*, void*) = sequence_sort_changed_iter;
extern void g_sequence_remove(GSequenceIter*) = sequence_remove;
extern void g_sequence_remove_range(GSequenceIter*, GSequenceIter*) = sequence_remove_range;
extern void g_sequence_move_range(GSequenceIter*, GSequenceIter*, GSequenceIter*) = sequence_move_range;
extern GSequenceIter* g_sequence_search(GSequence*, void*, void*, void*) = sequence_search;
extern GSequenceIter* g_sequence_search_iter(GSequence*, void*, void*, void*) = sequence_search_iter;
extern GSequenceIter* g_sequence_lookup(GSequence*, void*, void*, void*) = sequence_lookup;
extern GSequenceIter* g_sequence_lookup_iter(GSequence*, void*, void*, void*) = sequence_lookup_iter;
extern void* g_sequence_get(GSequenceIter*) = sequence_get;
extern void g_sequence_set(GSequenceIter*, void*) = sequence_set;
extern int g_sequence_iter_is_begin(GSequenceIter*) = sequence_iter_is_begin;
extern int g_sequence_iter_is_end(GSequenceIter*) = sequence_iter_is_end;
extern GSequenceIter* g_sequence_iter_next(GSequenceIter*) = sequence_iter_next;
extern GSequenceIter* g_sequence_iter_prev(GSequenceIter*) = sequence_iter_prev;
extern int g_sequence_iter_get_position(GSequenceIter*) = sequence_iter_get_position;
extern GSequenceIter* g_sequence_iter_move(GSequenceIter*, int) = sequence_iter_move;
extern GSequence* g_sequence_iter_get_sequence(GSequenceIter*) = sequence_iter_get_sequence;
extern int g_sequence_iter_compare(GSequenceIter*, GSequenceIter*) = sequence_iter_compare;
extern GSequenceIter* g_sequence_range_get_midpoint(GSequenceIter*, GSequenceIter*) = sequence_range_get_midpoint;
extern int g_shell_error_quark() = shell_error_quark;
extern char* g_shell_quote(char*) = shell_quote;
extern char* g_shell_unquote(char*, GError**) = shell_unquote;
extern int g_shell_parse_argv(char*, int*, char***, GError**) = shell_parse_argv;
extern void* g_slice_alloc(long) = slice_alloc;
extern void* g_slice_alloc0(long) = slice_alloc0;
extern void* g_slice_copy(long, void*) = slice_copy;
extern void g_slice_free1(long, void*) = slice_free1;
extern void g_slice_free_chain_with_offset(long, void*, long) = slice_free_chain_with_offset;
extern void g_slice_set_config(int, long) = slice_set_config;
extern long g_slice_get_config(int) = slice_get_config;
extern long* g_slice_get_config_state(int, long, int*) = slice_get_config_state;
extern int g_spawn_error_quark() = spawn_error_quark;
extern int g_spawn_async(char*, char**, char**, int, void*, void*, int*, GError**) = spawn_async;
extern int g_spawn_async_with_pipes(char*, char**, char**, int, void*, void*, int*, int*, int*, int*, GError**) = spawn_async_with_pipes;
extern int g_spawn_sync(char*, char**, char**, int, void*, void*, char**, char**, int*, GError**) = spawn_sync;
extern int g_spawn_command_line_sync(char*, char**, char**, int*, GError**) = spawn_command_line_sync;
extern int g_spawn_command_line_async(char*, GError**) = spawn_command_line_async;
extern void g_spawn_close_pid(int) = spawn_close_pid;
extern char g_ascii_tolower(char) = ascii_tolower;
extern char g_ascii_toupper(char) = ascii_toupper;
extern int g_ascii_digit_value(char) = ascii_digit_value;
extern int g_ascii_xdigit_value(char) = ascii_xdigit_value;
extern char* g_strdelimit(char*, char*, char) = strdelimit;
extern char* g_strcanon(char*, char*, char) = strcanon;
extern char* g_strerror(int) = strerror;
extern char* g_strsignal(int) = strsignal;
extern char* g_strreverse(char*) = strreverse;
extern long g_strlcpy(char*, char*, long) = strlcpy;
extern long g_strlcat(char*, char*, long) = strlcat;
extern char* g_strstr_len(char*, long, char*) = strstr_len;
extern char* g_strrstr(char*, char*) = strrstr;
extern char* g_strrstr_len(char*, long, char*) = strrstr_len;
extern int g_str_has_suffix(char*, char*) = str_has_suffix;
extern int g_str_has_prefix(char*, char*) = str_has_prefix;
extern double g_strtod(char*, char**) = strtod;
extern double g_ascii_strtod(char*, char**) = ascii_strtod;
extern long g_ascii_strtoull(char*, char**, int) = ascii_strtoull;
extern long g_ascii_strtoll(char*, char**, int) = ascii_strtoll;
extern char* g_ascii_dtostr(char*, int, double) = ascii_dtostr;
extern char* g_ascii_formatd(char*, int, char*, double) = ascii_formatd;
extern char* g_strchug(char*) = strchug;
extern char* g_strchomp(char*) = strchomp;
extern int g_ascii_strcasecmp(char*, char*) = ascii_strcasecmp;
extern int g_ascii_strncasecmp(char*, char*, long) = ascii_strncasecmp;
extern char* g_ascii_strdown(char*, long) = ascii_strdown;
extern char* g_ascii_strup(char*, long) = ascii_strup;
extern int g_strcasecmp(char*, char*) = strcasecmp;
extern int g_strncasecmp(char*, char*, int) = strncasecmp;
extern char* g_strdown(char*) = strdown;
extern char* g_strup(char*) = strup;
extern char* g_strdup(char*) = strdup;
extern char* g_strdup_printf(char*, ...) = strdup_printf;
extern char* g_strdup_vprintf(char*, void*) = strdup_vprintf;
extern char* g_strndup(char*, long) = strndup;
extern char* g_strnfill(long, char) = strnfill;
extern char* g_strconcat(char*, ...) = strconcat;
extern char* g_strjoin(char*, ...) = strjoin;
extern char* g_strcompress(char*) = strcompress;
extern char* g_strescape(char*, char*) = strescape;
extern void* g_memdup(void*, int) = memdup;
extern char** g_strsplit(char*, char*, int) = strsplit;
extern char** g_strsplit_set(char*, char*, int) = strsplit_set;
extern char* g_strjoinv(char*, char**) = strjoinv;
extern void g_strfreev(char**) = strfreev;
extern char** g_strdupv(char**) = strdupv;
extern int g_strv_length(char**) = strv_length;
extern char* g_stpcpy(char*, char*) = stpcpy;
extern GStringChunk* g_string_chunk_new(long) = string_chunk_new;
extern void g_string_chunk_free(GStringChunk*) = string_chunk_free;
extern void g_string_chunk_clear(GStringChunk*) = string_chunk_clear;
extern char* g_string_chunk_insert(GStringChunk*, char*) = string_chunk_insert;
extern char* g_string_chunk_insert_len(GStringChunk*, char*, long) = string_chunk_insert_len;
extern char* g_string_chunk_insert_const(GStringChunk*, char*) = string_chunk_insert_const;
extern int g_strcmp0(char*, char*) = strcmp0;
extern void g_test_minimized_result(double, char*, ...) = test_minimized_result;
extern void g_test_maximized_result(double, char*, ...) = test_maximized_result;
extern void g_test_init(int*, char***, ...) = test_init;
extern int g_test_run() = test_run;
extern void g_test_add_func(char*, void*) = test_add_func;
extern void g_test_add_data_func(char*, void*, void*) = test_add_data_func;
extern void g_test_fail() = test_fail;
extern void g_test_message(char*, ...) = test_message;
extern void g_test_bug_base(char*) = test_bug_base;
extern void g_test_bug(char*) = test_bug;
extern void g_test_timer_start() = test_timer_start;
extern double g_test_timer_elapsed() = test_timer_elapsed;
extern double g_test_timer_last() = test_timer_last;
extern void g_test_queue_free(void*) = test_queue_free;
extern void g_test_queue_destroy(void*, void*) = test_queue_destroy;
extern int g_test_trap_fork(long, int) = test_trap_fork;
extern int g_test_trap_has_passed() = test_trap_has_passed;
extern int g_test_trap_reached_timeout() = test_trap_reached_timeout;
extern int g_test_rand_int() = test_rand_int;
extern int g_test_rand_int_range(int, int) = test_rand_int_range;
extern double g_test_rand_double() = test_rand_double;
extern double g_test_rand_double_range(double, double) = test_rand_double_range;
extern GTestCase* g_test_create_case(char*, long, void*, void*, void*, void*) = test_create_case;
extern GTestSuite* g_test_create_suite(char*) = test_create_suite;
extern GTestSuite* g_test_get_root() = test_get_root;
extern void g_test_suite_add(GTestSuite*, GTestCase*) = test_suite_add;
extern void g_test_suite_add_suite(GTestSuite*, GTestSuite*) = test_suite_add_suite;
extern int g_test_run_suite(GTestSuite*) = test_run_suite;
extern void g_test_trap_assertions(char*, char*, int, char*, long, char*) = test_trap_assertions;
extern void g_assertion_message(char*, char*, int, char*, char*) = assertion_message;
extern void g_assertion_message_expr(char*, char*, int, char*, char*) = assertion_message_expr;
extern void g_assertion_message_cmpstr(char*, char*, int, char*, char*, char*, char*, char*) = assertion_message_cmpstr;
extern void Pure_g_assertion_message_cmpnum(char*, char*, int, char*, char*, double, char*, double, char) = assertion_message_cmpnum;
extern void g_assertion_message_error(char*, char*, int, char*, char*, GError*, int, int) = assertion_message_error;
extern void g_test_add_vtable(char*, long, void*, void*, void*, void*) = test_add_vtable;
extern char* g_test_log_type_name(int) = test_log_type_name;
extern GTestLogBuffer* g_test_log_buffer_new() = test_log_buffer_new;
extern void g_test_log_buffer_free(GTestLogBuffer*) = test_log_buffer_free;
extern void g_test_log_buffer_push(GTestLogBuffer*, int, char*) = test_log_buffer_push;
extern GTestLogMsg* g_test_log_buffer_pop(GTestLogBuffer*) = test_log_buffer_pop;
extern void g_test_log_msg_free(GTestLogMsg*) = test_log_msg_free;
extern void g_test_log_set_fatal_handler(void*, void*) = test_log_set_fatal_handler;
extern GThreadPool* g_thread_pool_new(void*, void*, int, int, GError**) = thread_pool_new;
extern void g_thread_pool_free(GThreadPool*, int, int) = thread_pool_free;
extern int g_thread_pool_push(GThreadPool*, void*, GError**) = thread_pool_push;
extern int g_thread_pool_unprocessed(GThreadPool*) = thread_pool_unprocessed;
extern void g_thread_pool_set_sort_function(GThreadPool*, void*, void*) = thread_pool_set_sort_function;
extern int g_thread_pool_set_max_threads(GThreadPool*, int, GError**) = thread_pool_set_max_threads;
extern int g_thread_pool_get_max_threads(GThreadPool*) = thread_pool_get_max_threads;
extern int g_thread_pool_get_num_threads(GThreadPool*) = thread_pool_get_num_threads;
extern void g_thread_pool_set_max_unused_threads(int) = thread_pool_set_max_unused_threads;
extern int g_thread_pool_get_max_unused_threads() = thread_pool_get_max_unused_threads;
extern int g_thread_pool_get_num_unused_threads() = thread_pool_get_num_unused_threads;
extern void g_thread_pool_stop_unused_threads() = thread_pool_stop_unused_threads;
extern void g_thread_pool_set_max_idle_time(int) = thread_pool_set_max_idle_time;
extern int g_thread_pool_get_max_idle_time() = thread_pool_get_max_idle_time;
extern GTimer* g_timer_new() = timer_new;
extern void g_timer_destroy(GTimer*) = timer_destroy;
extern void g_timer_start(GTimer*) = timer_start;
extern void g_timer_stop(GTimer*) = timer_stop;
extern void g_timer_reset(GTimer*) = timer_reset;
extern void g_timer_continue(GTimer*) = timer_continue;
extern double g_timer_elapsed(GTimer*, long*) = timer_elapsed;
extern void g_usleep(long) = usleep;
extern void g_time_val_add(GTimeVal*, long) = time_val_add;
extern int g_time_val_from_iso8601(char*, GTimeVal*) = time_val_from_iso8601;
extern char* g_time_val_to_iso8601(GTimeVal*) = time_val_to_iso8601;
extern void g_trash_stack_push(GTrashStack**, void*) = trash_stack_push;
extern void* g_trash_stack_pop(GTrashStack**) = trash_stack_pop;
extern void* g_trash_stack_peek(GTrashStack**) = trash_stack_peek;
extern int g_trash_stack_height(GTrashStack**) = trash_stack_height;
extern GTree* g_tree_new(void*) = tree_new;
extern GTree* g_tree_new_with_data(void*, void*) = tree_new_with_data;
extern GTree* g_tree_new_full(void*, void*, void*, void*) = tree_new_full;
extern GTree* g_tree_ref(GTree*) = tree_ref;
extern void g_tree_unref(GTree*) = tree_unref;
extern void g_tree_destroy(GTree*) = tree_destroy;
extern void g_tree_insert(GTree*, void*, void*) = tree_insert;
extern void g_tree_replace(GTree*, void*, void*) = tree_replace;
extern int g_tree_remove(GTree*, void*) = tree_remove;
extern int g_tree_steal(GTree*, void*) = tree_steal;
extern void* g_tree_lookup(GTree*, void*) = tree_lookup;
extern int g_tree_lookup_extended(GTree*, void*, void**, void**) = tree_lookup_extended;
extern void g_tree_foreach(GTree*, void*, void*) = tree_foreach;
extern void g_tree_traverse(GTree*, void*, int, void*) = tree_traverse;
extern void* g_tree_search(GTree*, void*, void*) = tree_search;
extern int g_tree_height(GTree*) = tree_height;
extern int g_tree_nnodes(GTree*) = tree_nnodes;
extern char* g_uri_unescape_string(char*, char*) = uri_unescape_string;
extern char* g_uri_unescape_segment(char*, char*, char*) = uri_unescape_segment;
extern char* g_uri_parse_scheme(char*) = uri_parse_scheme;
extern char* g_uri_escape_string(char*, char*, int) = uri_escape_string;
extern int g_variant_type_string_is_valid(char*) = variant_type_string_is_valid;
extern int g_variant_type_string_scan(char*, char*, char**) = variant_type_string_scan;
extern void g_variant_type_free(GVariantType*) = variant_type_free;
extern GVariantType* g_variant_type_copy(GVariantType*) = variant_type_copy;
extern GVariantType* g_variant_type_new(char*) = variant_type_new;
extern long g_variant_type_get_string_length(GVariantType*) = variant_type_get_string_length;
extern char* g_variant_type_peek_string(GVariantType*) = variant_type_peek_string;
extern char* g_variant_type_dup_string(GVariantType*) = variant_type_dup_string;
extern int g_variant_type_is_definite(GVariantType*) = variant_type_is_definite;
extern int g_variant_type_is_container(GVariantType*) = variant_type_is_container;
extern int g_variant_type_is_basic(GVariantType*) = variant_type_is_basic;
extern int g_variant_type_is_maybe(GVariantType*) = variant_type_is_maybe;
extern int g_variant_type_is_array(GVariantType*) = variant_type_is_array;
extern int g_variant_type_is_tuple(GVariantType*) = variant_type_is_tuple;
extern int g_variant_type_is_dict_entry(GVariantType*) = variant_type_is_dict_entry;
extern int g_variant_type_is_variant(GVariantType*) = variant_type_is_variant;
extern int g_variant_type_hash(void*) = variant_type_hash;
extern int g_variant_type_equal(void*, void*) = variant_type_equal;
extern int g_variant_type_is_subtype_of(GVariantType*, GVariantType*) = variant_type_is_subtype_of;
extern GVariantType* g_variant_type_element(GVariantType*) = variant_type_element;
extern GVariantType* g_variant_type_first(GVariantType*) = variant_type_first;
extern GVariantType* g_variant_type_next(GVariantType*) = variant_type_next;
extern long g_variant_type_n_items(GVariantType*) = variant_type_n_items;
extern GVariantType* g_variant_type_key(GVariantType*) = variant_type_key;
extern GVariantType* g_variant_type_value(GVariantType*) = variant_type_value;
extern GVariantType* g_variant_type_new_array(GVariantType*) = variant_type_new_array;
extern GVariantType* g_variant_type_new_maybe(GVariantType*) = variant_type_new_maybe;
extern GVariantType* g_variant_type_new_tuple(GVariantType**, int) = variant_type_new_tuple;
extern GVariantType* g_variant_type_new_dict_entry(GVariantType*, GVariantType*) = variant_type_new_dict_entry;
extern GVariantType* g_variant_type_checked_(char*) = variant_type_checked_;
extern void g_variant_unref(GVariant*) = variant_unref;
extern GVariant* g_variant_ref(GVariant*) = variant_ref;
extern GVariant* g_variant_ref_sink(GVariant*) = variant_ref_sink;
extern int g_variant_is_floating(GVariant*) = variant_is_floating;
extern GVariant* g_variant_take_ref(GVariant*) = variant_take_ref;
extern GVariantType* g_variant_get_type(GVariant*) = variant_get_type;
extern char* g_variant_get_type_string(GVariant*) = variant_get_type_string;
extern int g_variant_is_of_type(GVariant*, GVariantType*) = variant_is_of_type;
extern int g_variant_is_container(GVariant*) = variant_is_container;
extern int g_variant_classify(GVariant*) = variant_classify;
extern GVariant* g_variant_new_boolean(int) = variant_new_boolean;
extern GVariant* g_variant_new_byte(char) = variant_new_byte;
extern GVariant* g_variant_new_int16(short) = variant_new_int16;
extern GVariant* g_variant_new_uint16(short) = variant_new_uint16;
extern GVariant* g_variant_new_int32(int) = variant_new_int32;
extern GVariant* g_variant_new_uint32(int) = variant_new_uint32;
extern GVariant* g_variant_new_int64(long) = variant_new_int64;
extern GVariant* g_variant_new_uint64(long) = variant_new_uint64;
extern GVariant* g_variant_new_handle(int) = variant_new_handle;
extern GVariant* g_variant_new_double(double) = variant_new_double;
extern GVariant* g_variant_new_string(char*) = variant_new_string;
extern GVariant* g_variant_new_object_path(char*) = variant_new_object_path;
extern int g_variant_is_object_path(char*) = variant_is_object_path;
extern GVariant* g_variant_new_signature(char*) = variant_new_signature;
extern int g_variant_is_signature(char*) = variant_is_signature;
extern GVariant* g_variant_new_variant(GVariant*) = variant_new_variant;
extern GVariant* g_variant_new_strv(char**, long) = variant_new_strv;
extern GVariant* g_variant_new_objv(char**, long) = variant_new_objv;
extern GVariant* g_variant_new_bytestring(char*) = variant_new_bytestring;
extern GVariant* g_variant_new_bytestring_array(char**, long) = variant_new_bytestring_array;
extern GVariant* g_variant_new_fixed_array(GVariantType*, void*, long, long) = variant_new_fixed_array;
extern int g_variant_get_boolean(GVariant*) = variant_get_boolean;
extern char g_variant_get_byte(GVariant*) = variant_get_byte;
extern short g_variant_get_int16(GVariant*) = variant_get_int16;
extern short g_variant_get_uint16(GVariant*) = variant_get_uint16;
extern int g_variant_get_int32(GVariant*) = variant_get_int32;
extern int g_variant_get_uint32(GVariant*) = variant_get_uint32;
extern long g_variant_get_int64(GVariant*) = variant_get_int64;
extern long g_variant_get_uint64(GVariant*) = variant_get_uint64;
extern int g_variant_get_handle(GVariant*) = variant_get_handle;
extern double g_variant_get_double(GVariant*) = variant_get_double;
extern GVariant* g_variant_get_variant(GVariant*) = variant_get_variant;
extern char* g_variant_get_string(GVariant*, long*) = variant_get_string;
extern char* g_variant_dup_string(GVariant*, long*) = variant_dup_string;
extern char** g_variant_get_strv(GVariant*, long*) = variant_get_strv;
extern char** g_variant_dup_strv(GVariant*, long*) = variant_dup_strv;
extern char** g_variant_get_objv(GVariant*, long*) = variant_get_objv;
extern char** g_variant_dup_objv(GVariant*, long*) = variant_dup_objv;
extern char* g_variant_get_bytestring(GVariant*) = variant_get_bytestring;
extern char* g_variant_dup_bytestring(GVariant*, long*) = variant_dup_bytestring;
extern char** g_variant_get_bytestring_array(GVariant*, long*) = variant_get_bytestring_array;
extern char** g_variant_dup_bytestring_array(GVariant*, long*) = variant_dup_bytestring_array;
extern GVariant* g_variant_new_maybe(GVariantType*, GVariant*) = variant_new_maybe;
extern GVariant* g_variant_new_array(GVariantType*, GVariant**, long) = variant_new_array;
extern GVariant* g_variant_new_tuple(GVariant**, long) = variant_new_tuple;
extern GVariant* g_variant_new_dict_entry(GVariant*, GVariant*) = variant_new_dict_entry;
extern GVariant* g_variant_get_maybe(GVariant*) = variant_get_maybe;
extern long g_variant_n_children(GVariant*) = variant_n_children;
extern void g_variant_get_child(GVariant*, long, char*, ...) = variant_get_child;
extern GVariant* g_variant_get_child_value(GVariant*, long) = variant_get_child_value;
extern int g_variant_lookup(GVariant*, char*, char*, ...) = variant_lookup;
extern GVariant* g_variant_lookup_value(GVariant*, char*, GVariantType*) = variant_lookup_value;
extern void* g_variant_get_fixed_array(GVariant*, long*, long) = variant_get_fixed_array;
extern long g_variant_get_size(GVariant*) = variant_get_size;
extern void* g_variant_get_data(GVariant*) = variant_get_data;
extern void g_variant_store(GVariant*, void*) = variant_store;
extern char* g_variant_print(GVariant*, int) = variant_print;
extern GString* g_variant_print_string(GVariant*, GString*, int) = variant_print_string;
extern int g_variant_hash(void*) = variant_hash;
extern int g_variant_equal(void*, void*) = variant_equal;
extern GVariant* g_variant_get_normal_form(GVariant*) = variant_get_normal_form;
extern int g_variant_is_normal_form(GVariant*) = variant_is_normal_form;
extern GVariant* g_variant_byteswap(GVariant*) = variant_byteswap;
extern GVariant* g_variant_new_from_data(GVariantType*, void*, long, int, void*, void*) = variant_new_from_data;
extern GVariantIter* g_variant_iter_new(GVariant*) = variant_iter_new;
extern long g_variant_iter_init(GVariantIter*, GVariant*) = variant_iter_init;
extern GVariantIter* g_variant_iter_copy(GVariantIter*) = variant_iter_copy;
extern long g_variant_iter_n_children(GVariantIter*) = variant_iter_n_children;
extern void g_variant_iter_free(GVariantIter*) = variant_iter_free;
extern GVariant* g_variant_iter_next_value(GVariantIter*) = variant_iter_next_value;
extern int g_variant_iter_next(GVariantIter*, char*, ...) = variant_iter_next;
extern int g_variant_iter_loop(GVariantIter*, char*, ...) = variant_iter_loop;
extern int g_variant_parser_get_error_quark() = variant_parser_get_error_quark;
extern GVariantBuilder* g_variant_builder_new(GVariantType*) = variant_builder_new;
extern void g_variant_builder_unref(GVariantBuilder*) = variant_builder_unref;
extern GVariantBuilder* g_variant_builder_ref(GVariantBuilder*) = variant_builder_ref;
extern void g_variant_builder_init(GVariantBuilder*, GVariantType*) = variant_builder_init;
extern GVariant* g_variant_builder_end(GVariantBuilder*) = variant_builder_end;
extern void g_variant_builder_clear(GVariantBuilder*) = variant_builder_clear;
extern void g_variant_builder_open(GVariantBuilder*, GVariantType*) = variant_builder_open;
extern void g_variant_builder_close(GVariantBuilder*) = variant_builder_close;
extern void g_variant_builder_add_value(GVariantBuilder*, GVariant*) = variant_builder_add_value;
extern void g_variant_builder_add(GVariantBuilder*, char*, ...) = variant_builder_add;
extern void g_variant_builder_add_parsed(GVariantBuilder*, char*, ...) = variant_builder_add_parsed;
extern GVariant* g_variant_new(char*, ...) = variant_new;
extern void g_variant_get(GVariant*, char*, ...) = variant_get;
extern GVariant* g_variant_new_va(char*, char**, void**) = variant_new_va;
extern void g_variant_get_va(GVariant*, char*, char**, void**) = variant_get_va;
extern GVariant* g_variant_parse(GVariantType*, char*, char*, char**, GError**) = variant_parse;
extern GVariant* g_variant_new_parsed(char*, ...) = variant_new_parsed;
extern GVariant* g_variant_new_parsed_va(char*, void**) = variant_new_parsed_va;
extern int g_variant_compare(void*, void*) = variant_compare;
extern char* glib_check_version(int, int, int) = lib_check_version;
/* /usr/include/glib-2.0/glib-object.h: */
using "lib:glib";

namespace glib;
const glib::TYPE_FUNDAMENTAL_MAX = 255;
const glib::TYPE_FUNDAMENTAL_SHIFT = 2;
const glib::TYPE_RESERVED_GLIB_FIRST = 22;
const glib::TYPE_RESERVED_GLIB_LAST = 31;
const glib::TYPE_RESERVED_BSE_FIRST = 32;
const glib::TYPE_RESERVED_BSE_LAST = 48;
const glib::TYPE_RESERVED_USER_FIRST = 49;
const glib::VALUE_NOCOPY_CONTENTS = 1;
const glib::PARAM_MASK = 255;
const glib::PARAM_USER_SHIFT = 8;
const glib::SIGNAL_FLAGS_MASK = 511;
const glib::SIGNAL_MATCH_MASK = 63;
const glib::BINDING_DEFAULT = 0;
const glib::BINDING_BIDIRECTIONAL = 1;
const glib::BINDING_SYNC_CREATE = 2;
const glib::BINDING_INVERT_BOOLEAN = 4;
const glib::CONNECT_AFTER = 1;
const glib::CONNECT_SWAPPED = 2;
const glib::PARAM_READABLE = 1;
const glib::PARAM_WRITABLE = 2;
const glib::PARAM_CONSTRUCT = 4;
const glib::PARAM_CONSTRUCT_ONLY = 8;
const glib::PARAM_LAX_VALIDATION = 16;
const glib::PARAM_STATIC_NAME = 32;
const glib::PARAM_PRIVATE = 32;
const glib::PARAM_STATIC_NICK = 64;
const glib::PARAM_STATIC_BLURB = 128;
const glib::PARAM_DEPRECATED = -2147483648;
const glib::SIGNAL_RUN_FIRST = 1;
const glib::SIGNAL_RUN_LAST = 2;
const glib::SIGNAL_RUN_CLEANUP = 4;
const glib::SIGNAL_NO_RECURSE = 8;
const glib::SIGNAL_DETAILED = 16;
const glib::SIGNAL_ACTION = 32;
const glib::SIGNAL_NO_HOOKS = 64;
const glib::SIGNAL_MUST_COLLECT = 128;
const glib::SIGNAL_DEPRECATED = 256;
const glib::SIGNAL_MATCH_ID = 1;
const glib::SIGNAL_MATCH_DETAIL = 2;
const glib::SIGNAL_MATCH_CLOSURE = 4;
const glib::SIGNAL_MATCH_FUNC = 8;
const glib::SIGNAL_MATCH_DATA = 16;
const glib::SIGNAL_MATCH_UNBLOCKED = 32;
const glib::TYPE_DEBUG_NONE = 0;
const glib::TYPE_DEBUG_OBJECTS = 1;
const glib::TYPE_DEBUG_SIGNALS = 2;
const glib::TYPE_DEBUG_MASK = 3;
const glib::TYPE_FLAG_ABSTRACT = 16;
const glib::TYPE_FLAG_VALUE_ABSTRACT = 32;
const glib::TYPE_FLAG_CLASSED = 1;
const glib::TYPE_FLAG_INSTANTIATABLE = 2;
const glib::TYPE_FLAG_DERIVABLE = 4;
const glib::TYPE_FLAG_DEEP_DERIVABLE = 8;
extern void g_type_init() = type_init;
extern void g_type_init_with_debug_flags(int) = type_init_with_debug_flags;
extern char* g_type_name(long) = type_name;
extern int g_type_qname(long) = type_qname;
extern long g_type_from_name(char*) = type_from_name;
extern long g_type_parent(long) = type_parent;
extern int g_type_depth(long) = type_depth;
extern long g_type_next_base(long, long) = type_next_base;
extern int g_type_is_a(long, long) = type_is_a;
extern void* g_type_class_ref(long) = type_class_ref;
extern void* g_type_class_peek(long) = type_class_peek;
extern void* g_type_class_peek_static(long) = type_class_peek_static;
extern void g_type_class_unref(void*) = type_class_unref;
extern void* g_type_class_peek_parent(void*) = type_class_peek_parent;
extern void* g_type_interface_peek(void*, long) = type_interface_peek;
extern void* g_type_interface_peek_parent(void*) = type_interface_peek_parent;
extern void* g_type_default_interface_ref(long) = type_default_interface_ref;
extern void* g_type_default_interface_peek(long) = type_default_interface_peek;
extern void g_type_default_interface_unref(void*) = type_default_interface_unref;
extern long* g_type_children(long, int*) = type_children;
extern long* g_type_interfaces(long, int*) = type_interfaces;
extern void g_type_set_qdata(long, int, void*) = type_set_qdata;
extern void* g_type_get_qdata(long, int) = type_get_qdata;
extern void g_type_query(long, GTypeQuery*) = type_query;
extern long g_type_register_static(long, char*, GTypeInfo*, int) = type_register_static;
extern long g_type_register_static_simple(long, char*, int, void*, int, void*, int) = type_register_static_simple;
extern long g_type_register_dynamic(long, char*, GTypePlugin*, int) = type_register_dynamic;
extern long g_type_register_fundamental(long, char*, GTypeInfo*, GTypeFundamentalInfo*, int) = type_register_fundamental;
extern void g_type_add_interface_static(long, long, GInterfaceInfo*) = type_add_interface_static;
extern void g_type_add_interface_dynamic(long, long, GTypePlugin*) = type_add_interface_dynamic;
extern void g_type_interface_add_prerequisite(long, long) = type_interface_add_prerequisite;
extern long* g_type_interface_prerequisites(long, int*) = type_interface_prerequisites;
extern void g_type_class_add_private(void*, long) = type_class_add_private;
extern void* g_type_instance_get_private(GTypeInstance*, long) = type_instance_get_private;
extern void g_type_add_class_private(long, long) = type_add_class_private;
extern void* g_type_class_get_private(GTypeClass*, long) = type_class_get_private;
extern GTypePlugin* g_type_get_plugin(long) = type_get_plugin;
extern GTypePlugin* g_type_interface_get_plugin(long, long) = type_interface_get_plugin;
extern long g_type_fundamental_next() = type_fundamental_next;
extern long g_type_fundamental(long) = type_fundamental;
extern GTypeInstance* g_type_create_instance(long) = type_create_instance;
extern void g_type_free_instance(GTypeInstance*) = type_free_instance;
extern void g_type_add_class_cache_func(void*, void*) = type_add_class_cache_func;
extern void g_type_remove_class_cache_func(void*, void*) = type_remove_class_cache_func;
extern void g_type_class_unref_uncached(void*) = type_class_unref_uncached;
extern void g_type_add_interface_check(void*, void*) = type_add_interface_check;
extern void g_type_remove_interface_check(void*, void*) = type_remove_interface_check;
extern GTypeValueTable* g_type_value_table_peek(long) = type_value_table_peek;
extern int g_type_check_instance(GTypeInstance*) = type_check_instance;
extern GTypeInstance* g_type_check_instance_cast(GTypeInstance*, long) = type_check_instance_cast;
extern int g_type_check_instance_is_a(GTypeInstance*, long) = type_check_instance_is_a;
extern GTypeClass* g_type_check_class_cast(GTypeClass*, long) = type_check_class_cast;
extern int g_type_check_class_is_a(GTypeClass*, long) = type_check_class_is_a;
extern int g_type_check_is_value_type(long) = type_check_is_value_type;
extern int g_type_check_value(GValue*) = type_check_value;
extern int g_type_check_value_holds(GValue*, long) = type_check_value_holds;
extern int g_type_test_flags(long, int) = type_test_flags;
extern char* g_type_name_from_instance(GTypeInstance*) = type_name_from_instance;
extern char* g_type_name_from_class(GTypeClass*) = type_name_from_class;
extern GValue* g_value_init(GValue*, long) = value_init;
extern void g_value_copy(GValue*, GValue*) = value_copy;
extern GValue* g_value_reset(GValue*) = value_reset;
extern void g_value_unset(GValue*) = value_unset;
extern void g_value_set_instance(GValue*, void*) = value_set_instance;
extern int g_value_fits_pointer(GValue*) = value_fits_pointer;
extern void* g_value_peek_pointer(GValue*) = value_peek_pointer;
extern int g_value_type_compatible(long, long) = value_type_compatible;
extern int g_value_type_transformable(long, long) = value_type_transformable;
extern int g_value_transform(GValue*, GValue*) = value_transform;
extern void g_value_register_transform_func(long, long, void*) = value_register_transform_func;
extern GParamSpec* g_param_spec_ref(GParamSpec*) = param_spec_ref;
extern void g_param_spec_unref(GParamSpec*) = param_spec_unref;
extern void g_param_spec_sink(GParamSpec*) = param_spec_sink;
extern GParamSpec* g_param_spec_ref_sink(GParamSpec*) = param_spec_ref_sink;
extern void* g_param_spec_get_qdata(GParamSpec*, int) = param_spec_get_qdata;
extern void g_param_spec_set_qdata(GParamSpec*, int, void*) = param_spec_set_qdata;
extern void g_param_spec_set_qdata_full(GParamSpec*, int, void*, void*) = param_spec_set_qdata_full;
extern void* g_param_spec_steal_qdata(GParamSpec*, int) = param_spec_steal_qdata;
extern GParamSpec* g_param_spec_get_redirect_target(GParamSpec*) = param_spec_get_redirect_target;
extern void g_param_value_set_default(GParamSpec*, GValue*) = param_value_set_default;
extern int g_param_value_defaults(GParamSpec*, GValue*) = param_value_defaults;
extern int g_param_value_validate(GParamSpec*, GValue*) = param_value_validate;
extern int g_param_value_convert(GParamSpec*, GValue*, GValue*, int) = param_value_convert;
extern int g_param_values_cmp(GParamSpec*, GValue*, GValue*) = param_values_cmp;
extern char* g_param_spec_get_name(GParamSpec*) = param_spec_get_name;
extern char* g_param_spec_get_nick(GParamSpec*) = param_spec_get_nick;
extern char* g_param_spec_get_blurb(GParamSpec*) = param_spec_get_blurb;
extern void g_value_set_param(GValue*, GParamSpec*) = value_set_param;
extern GParamSpec* g_value_get_param(GValue*) = value_get_param;
extern GParamSpec* g_value_dup_param(GValue*) = value_dup_param;
extern void g_value_take_param(GValue*, GParamSpec*) = value_take_param;
extern void g_value_set_param_take_ownership(GValue*, GParamSpec*) = value_set_param_take_ownership;
extern long g_param_type_register_static(char*, GParamSpecTypeInfo*) = param_type_register_static;
extern void* g_param_spec_internal(long, char*, char*, char*, int) = param_spec_internal;
extern GParamSpecPool* g_param_spec_pool_new(int) = param_spec_pool_new;
extern void g_param_spec_pool_insert(GParamSpecPool*, GParamSpec*, long) = param_spec_pool_insert;
extern void g_param_spec_pool_remove(GParamSpecPool*, GParamSpec*) = param_spec_pool_remove;
extern GParamSpec* g_param_spec_pool_lookup(GParamSpecPool*, char*, long, int) = param_spec_pool_lookup;
extern GList* g_param_spec_pool_list_owned(GParamSpecPool*, long) = param_spec_pool_list_owned;
extern GParamSpec** g_param_spec_pool_list(GParamSpecPool*, long, int*) = param_spec_pool_list;
extern GClosure* g_cclosure_new(void*, void*, void*) = cclosure_new;
extern GClosure* g_cclosure_new_swap(void*, void*, void*) = cclosure_new_swap;
extern GClosure* g_signal_type_cclosure_new(long, int) = signal_type_cclosure_new;
extern GClosure* g_closure_ref(GClosure*) = closure_ref;
extern void g_closure_sink(GClosure*) = closure_sink;
extern void g_closure_unref(GClosure*) = closure_unref;
extern GClosure* g_closure_new_simple(int, void*) = closure_new_simple;
extern void g_closure_add_finalize_notifier(GClosure*, void*, void*) = closure_add_finalize_notifier;
extern void g_closure_remove_finalize_notifier(GClosure*, void*, void*) = closure_remove_finalize_notifier;
extern void g_closure_add_invalidate_notifier(GClosure*, void*, void*) = closure_add_invalidate_notifier;
extern void g_closure_remove_invalidate_notifier(GClosure*, void*, void*) = closure_remove_invalidate_notifier;
extern void g_closure_add_marshal_guards(GClosure*, void*, void*, void*, void*) = closure_add_marshal_guards;
extern void g_closure_set_marshal(GClosure*, void*) = closure_set_marshal;
extern void g_closure_set_meta_marshal(GClosure*, void*, void*) = closure_set_meta_marshal;
extern void g_closure_invalidate(GClosure*) = closure_invalidate;
extern void g_closure_invoke(GClosure*, GValue*, int, GValue*, void*) = closure_invoke;
extern void g_cclosure_marshal_generic(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_generic;
extern void g_cclosure_marshal_generic_va(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_generic_va;
extern void g_cclosure_marshal_VOID__VOID(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__VOID;
extern void g_cclosure_marshal_VOID__VOIDv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__VOIDv;
extern void g_cclosure_marshal_VOID__BOOLEAN(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__BOOLEAN;
extern void g_cclosure_marshal_VOID__BOOLEANv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__BOOLEANv;
extern void g_cclosure_marshal_VOID__CHAR(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__CHAR;
extern void g_cclosure_marshal_VOID__CHARv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__CHARv;
extern void g_cclosure_marshal_VOID__UCHAR(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UCHAR;
extern void g_cclosure_marshal_VOID__UCHARv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__UCHARv;
extern void g_cclosure_marshal_VOID__INT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__INT;
extern void g_cclosure_marshal_VOID__INTv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__INTv;
extern void g_cclosure_marshal_VOID__UINT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UINT;
extern void g_cclosure_marshal_VOID__UINTv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__UINTv;
extern void g_cclosure_marshal_VOID__LONG(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__LONG;
extern void g_cclosure_marshal_VOID__LONGv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__LONGv;
extern void g_cclosure_marshal_VOID__ULONG(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__ULONG;
extern void g_cclosure_marshal_VOID__ULONGv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__ULONGv;
extern void g_cclosure_marshal_VOID__ENUM(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__ENUM;
extern void g_cclosure_marshal_VOID__ENUMv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__ENUMv;
extern void g_cclosure_marshal_VOID__FLAGS(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__FLAGS;
extern void g_cclosure_marshal_VOID__FLAGSv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__FLAGSv;
extern void g_cclosure_marshal_VOID__FLOAT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__FLOAT;
extern void g_cclosure_marshal_VOID__FLOATv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__FLOATv;
extern void g_cclosure_marshal_VOID__DOUBLE(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__DOUBLE;
extern void g_cclosure_marshal_VOID__DOUBLEv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__DOUBLEv;
extern void g_cclosure_marshal_VOID__STRING(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__STRING;
extern void g_cclosure_marshal_VOID__STRINGv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__STRINGv;
extern void g_cclosure_marshal_VOID__PARAM(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__PARAM;
extern void g_cclosure_marshal_VOID__PARAMv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__PARAMv;
extern void g_cclosure_marshal_VOID__BOXED(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__BOXED;
extern void g_cclosure_marshal_VOID__BOXEDv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__BOXEDv;
extern void g_cclosure_marshal_VOID__POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__POINTER;
extern void g_cclosure_marshal_VOID__POINTERv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__POINTERv;
extern void g_cclosure_marshal_VOID__OBJECT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__OBJECT;
extern void g_cclosure_marshal_VOID__OBJECTv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__OBJECTv;
extern void g_cclosure_marshal_VOID__VARIANT(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__VARIANT;
extern void g_cclosure_marshal_VOID__VARIANTv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__VARIANTv;
extern void g_cclosure_marshal_VOID__UINT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_VOID__UINT_POINTER;
extern void g_cclosure_marshal_VOID__UINT_POINTERv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_VOID__UINT_POINTERv;
extern void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_BOOLEAN__FLAGS;
extern void g_cclosure_marshal_BOOLEAN__FLAGSv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_BOOLEAN__FLAGSv;
extern void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_STRING__OBJECT_POINTER;
extern void g_cclosure_marshal_STRING__OBJECT_POINTERv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_STRING__OBJECT_POINTERv;
extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure*, GValue*, int, GValue*, void*, void*) = cclosure_marshal_BOOLEAN__BOXED_BOXED;
extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(GClosure*, GValue*, void*, void*, void*, int, long*) = cclosure_marshal_BOOLEAN__BOXED_BOXEDv;
extern int g_signal_newv(char*, long, int, GClosure*, void*, void*, void*, long, int, long*) = signal_newv;
extern int g_signal_new_valist(char*, long, int, GClosure*, void*, void*, void*, long, int, void*) = signal_new_valist;
extern int g_signal_new(char*, long, int, int, void*, void*, void*, long, int, ...) = signal_new;
extern int g_signal_new_class_handler(char*, long, int, void*, void*, void*, void*, long, int, ...) = signal_new_class_handler;
extern void g_signal_set_va_marshaller(int, long, void*) = signal_set_va_marshaller;
extern void g_signal_emitv(GValue*, int, int, GValue*) = signal_emitv;
extern void g_signal_emit_valist(void*, int, int, void*) = signal_emit_valist;
extern void g_signal_emit(void*, int, int, ...) = signal_emit;
extern void g_signal_emit_by_name(void*, char*, ...) = signal_emit_by_name;
extern int g_signal_lookup(char*, long) = signal_lookup;
extern char* g_signal_name(int) = signal_name;
extern void g_signal_query(int, GSignalQuery*) = signal_query;
extern int* g_signal_list_ids(long, int*) = signal_list_ids;
extern int g_signal_parse_name(char*, long, int*, int*, int) = signal_parse_name;
extern GSignalInvocationHint* g_signal_get_invocation_hint(void*) = signal_get_invocation_hint;
extern void g_signal_stop_emission(void*, int, int) = signal_stop_emission;
extern void g_signal_stop_emission_by_name(void*, char*) = signal_stop_emission_by_name;
extern long g_signal_add_emission_hook(int, int, void*, void*, void*) = signal_add_emission_hook;
extern void g_signal_remove_emission_hook(int, long) = signal_remove_emission_hook;
extern int g_signal_has_handler_pending(void*, int, int, int) = signal_has_handler_pending;
extern long g_signal_connect_closure_by_id(void*, int, int, GClosure*, int) = signal_connect_closure_by_id;
extern long g_signal_connect_closure(void*, char*, GClosure*, int) = signal_connect_closure;
extern long g_signal_connect_data(void*, char*, void*, void*, void*, int) = signal_connect_data;
extern void g_signal_handler_block(void*, long) = signal_handler_block;
extern void g_signal_handler_unblock(void*, long) = signal_handler_unblock;
extern void g_signal_handler_disconnect(void*, long) = signal_handler_disconnect;
extern int g_signal_handler_is_connected(void*, long) = signal_handler_is_connected;
extern long g_signal_handler_find(void*, int, int, int, GClosure*, void*, void*) = signal_handler_find;
extern int g_signal_handlers_block_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_block_matched;
extern int g_signal_handlers_unblock_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_unblock_matched;
extern int g_signal_handlers_disconnect_matched(void*, int, int, int, GClosure*, void*, void*) = signal_handlers_disconnect_matched;
extern void g_signal_override_class_closure(int, long, GClosure*) = signal_override_class_closure;
extern void g_signal_override_class_handler(char*, long, void*) = signal_override_class_handler;
extern void g_signal_chain_from_overridden(GValue*, GValue*) = signal_chain_from_overridden;
extern void g_signal_chain_from_overridden_handler(void*, ...) = signal_chain_from_overridden_handler;
extern int g_signal_accumulator_true_handled(GSignalInvocationHint*, GValue*, GValue*, void*) = signal_accumulator_true_handled;
extern int g_signal_accumulator_first_wins(GSignalInvocationHint*, GValue*, GValue*, void*) = signal_accumulator_first_wins;
extern void g_signal_handlers_destroy(void*) = signal_handlers_destroy;
extern long g_initially_unowned_get_type() = initially_unowned_get_type;
extern void g_object_class_install_property(GObjectClass*, int, GParamSpec*) = object_class_install_property;
extern GParamSpec* g_object_class_find_property(GObjectClass*, char*) = object_class_find_property;
extern GParamSpec** g_object_class_list_properties(GObjectClass*, int*) = object_class_list_properties;
extern void g_object_class_override_property(GObjectClass*, int, char*) = object_class_override_property;
extern void g_object_class_install_properties(GObjectClass*, int, GParamSpec**) = object_class_install_properties;
extern void g_object_interface_install_property(void*, GParamSpec*) = object_interface_install_property;
extern GParamSpec* g_object_interface_find_property(void*, char*) = object_interface_find_property;
extern GParamSpec** g_object_interface_list_properties(void*, int*) = object_interface_list_properties;
extern long g_object_get_type() = object_get_type;
extern void* g_object_new(long, char*, ...) = object_new;
extern void* g_object_newv(long, int, GParameter*) = object_newv;
extern GObject* g_object_new_valist(long, char*, void*) = object_new_valist;
extern void g_object_set(void*, char*, ...) = object_set;
extern void g_object_get(void*, char*, ...) = object_get;
extern void* g_object_connect(void*, char*, ...) = object_connect;
extern void g_object_disconnect(void*, char*, ...) = object_disconnect;
extern void g_object_set_valist(GObject*, char*, void*) = object_set_valist;
extern void g_object_get_valist(GObject*, char*, void*) = object_get_valist;
extern void g_object_set_property(GObject*, char*, GValue*) = object_set_property;
extern void g_object_get_property(GObject*, char*, GValue*) = object_get_property;
extern void g_object_freeze_notify(GObject*) = object_freeze_notify;
extern void g_object_notify(GObject*, char*) = object_notify;
extern void g_object_notify_by_pspec(GObject*, GParamSpec*) = object_notify_by_pspec;
extern void g_object_thaw_notify(GObject*) = object_thaw_notify;
extern int g_object_is_floating(void*) = object_is_floating;
extern void* g_object_ref_sink(void*) = object_ref_sink;
extern void* g_object_ref(void*) = object_ref;
extern void g_object_unref(void*) = object_unref;
extern void g_object_weak_ref(GObject*, void*, void*) = object_weak_ref;
extern void g_object_weak_unref(GObject*, void*, void*) = object_weak_unref;
extern void g_object_add_weak_pointer(GObject*, void**) = object_add_weak_pointer;
extern void g_object_remove_weak_pointer(GObject*, void**) = object_remove_weak_pointer;
extern void g_object_add_toggle_ref(GObject*, void*, void*) = object_add_toggle_ref;
extern void g_object_remove_toggle_ref(GObject*, void*, void*) = object_remove_toggle_ref;
extern void* g_object_get_qdata(GObject*, int) = object_get_qdata;
extern void g_object_set_qdata(GObject*, int, void*) = object_set_qdata;
extern void g_object_set_qdata_full(GObject*, int, void*, void*) = object_set_qdata_full;
extern void* g_object_steal_qdata(GObject*, int) = object_steal_qdata;
extern void* g_object_get_data(GObject*, char*) = object_get_data;
extern void g_object_set_data(GObject*, char*, void*) = object_set_data;
extern void g_object_set_data_full(GObject*, char*, void*, void*) = object_set_data_full;
extern void* g_object_steal_data(GObject*, char*) = object_steal_data;
extern void g_object_watch_closure(GObject*, GClosure*) = object_watch_closure;
extern GClosure* g_cclosure_new_object(void*, GObject*) = cclosure_new_object;
extern GClosure* g_cclosure_new_object_swap(void*, GObject*) = cclosure_new_object_swap;
extern GClosure* g_closure_new_object(int, GObject*) = closure_new_object;
extern void g_value_set_object(GValue*, void*) = value_set_object;
extern void* g_value_get_object(GValue*) = value_get_object;
extern void* g_value_dup_object(GValue*) = value_dup_object;
extern long g_signal_connect_object(void*, char*, void*, void*, int) = signal_connect_object;
extern void g_object_force_floating(GObject*) = object_force_floating;
extern void g_object_run_dispose(GObject*) = object_run_dispose;
extern void g_value_take_object(GValue*, void*) = value_take_object;
extern void g_value_set_object_take_ownership(GValue*, void*) = value_set_object_take_ownership;
extern long g_object_compat_control(long, void*) = object_compat_control;
extern void g_clear_object(GObject**) = clear_object;
extern void g_weak_ref_init(GWeakRef*, void*) = weak_ref_init;
extern void g_weak_ref_clear(GWeakRef*) = weak_ref_clear;
extern void* g_weak_ref_get(GWeakRef*) = weak_ref_get;
extern void g_weak_ref_set(GWeakRef*, void*) = weak_ref_set;
extern long g_binding_flags_get_type() = binding_flags_get_type;
extern long g_binding_get_type() = binding_get_type;
extern int g_binding_get_flags(GBinding*) = binding_get_flags;
extern GObject* g_binding_get_source(GBinding*) = binding_get_source;
extern GObject* g_binding_get_target(GBinding*) = binding_get_target;
extern char* g_binding_get_source_property(GBinding*) = binding_get_source_property;
extern char* g_binding_get_target_property(GBinding*) = binding_get_target_property;
extern GBinding* g_object_bind_property(void*, char*, void*, char*, int) = object_bind_property;
extern GBinding* g_object_bind_property_full(void*, char*, void*, char*, int, void*, void*, void*, void*) = object_bind_property_full;
extern GBinding* g_object_bind_property_with_closures(void*, char*, void*, char*, int, GClosure*, GClosure*) = object_bind_property_with_closures;
extern long g_date_get_type() = date_get_type;
extern long g_strv_get_type() = strv_get_type;
extern long g_gstring_get_type() = gstring_get_type;
extern long g_hash_table_get_type() = hash_table_get_type;
extern long g_array_get_type() = array_get_type;
extern long g_byte_array_get_type() = byte_array_get_type;
extern long g_ptr_array_get_type() = ptr_array_get_type;
extern long g_bytes_get_type() = bytes_get_type;
extern long g_variant_type_get_gtype() = variant_type_get_gtype;
extern long g_regex_get_type() = regex_get_type;
extern long g_match_info_get_type() = match_info_get_type;
extern long g_error_get_type() = error_get_type;
extern long g_date_time_get_type() = date_time_get_type;
extern long g_io_channel_get_type() = io_channel_get_type;
extern long g_io_condition_get_type() = io_condition_get_type;
extern long g_variant_builder_get_type() = variant_builder_get_type;
extern long g_key_file_get_type() = key_file_get_type;
extern long g_main_loop_get_type() = main_loop_get_type;
extern long g_main_context_get_type() = main_context_get_type;
extern long g_source_get_type() = source_get_type;
extern long g_variant_get_gtype() = variant_get_gtype;
extern void* g_boxed_copy(long, void*) = boxed_copy;
extern void g_boxed_free(long, void*) = boxed_free;
extern void g_value_set_boxed(GValue*, void*) = value_set_boxed;
extern void g_value_set_static_boxed(GValue*, void*) = value_set_static_boxed;
extern void g_value_take_boxed(GValue*, void*) = value_take_boxed;
extern void g_value_set_boxed_take_ownership(GValue*, void*) = value_set_boxed_take_ownership;
extern void* g_value_get_boxed(GValue*) = value_get_boxed;
extern void* g_value_dup_boxed(GValue*) = value_dup_boxed;
extern long g_boxed_type_register_static(char*, void*, void*) = boxed_type_register_static;
extern long g_closure_get_type() = closure_get_type;
extern long g_value_get_type() = value_get_type;
extern GEnumValue* g_enum_get_value(GEnumClass*, int) = enum_get_value;
extern GEnumValue* g_enum_get_value_by_name(GEnumClass*, char*) = enum_get_value_by_name;
extern GEnumValue* g_enum_get_value_by_nick(GEnumClass*, char*) = enum_get_value_by_nick;
extern GFlagsValue* g_flags_get_first_value(GFlagsClass*, int) = flags_get_first_value;
extern GFlagsValue* g_flags_get_value_by_name(GFlagsClass*, char*) = flags_get_value_by_name;
extern GFlagsValue* g_flags_get_value_by_nick(GFlagsClass*, char*) = flags_get_value_by_nick;
extern void g_value_set_enum(GValue*, int) = value_set_enum;
extern int g_value_get_enum(GValue*) = value_get_enum;
extern void g_value_set_flags(GValue*, int) = value_set_flags;
extern int g_value_get_flags(GValue*) = value_get_flags;
extern long g_enum_register_static(char*, GEnumValue*) = enum_register_static;
extern long g_flags_register_static(char*, GFlagsValue*) = flags_register_static;
extern void g_enum_complete_type_info(long, GTypeInfo*, GEnumValue*) = enum_complete_type_info;
extern void g_flags_complete_type_info(long, GTypeInfo*, GFlagsValue*) = flags_complete_type_info;
extern GParamSpec* g_param_spec_char(char*, char*, char*, char, char, char, int) = param_spec_char;
extern GParamSpec* g_param_spec_uchar(char*, char*, char*, char, char, char, int) = param_spec_uchar;
extern GParamSpec* g_param_spec_boolean(char*, char*, char*, int, int) = param_spec_boolean;
extern GParamSpec* g_param_spec_int(char*, char*, char*, int, int, int, int) = param_spec_int;
extern GParamSpec* g_param_spec_uint(char*, char*, char*, int, int, int, int) = param_spec_uint;
extern GParamSpec* g_param_spec_long(char*, char*, char*, long, long, long, int) = param_spec_long;
extern GParamSpec* g_param_spec_ulong(char*, char*, char*, long, long, long, int) = param_spec_ulong;
extern GParamSpec* g_param_spec_int64(char*, char*, char*, long, long, long, int) = param_spec_int64;
extern GParamSpec* g_param_spec_uint64(char*, char*, char*, long, long, long, int) = param_spec_uint64;
extern GParamSpec* g_param_spec_unichar(char*, char*, char*, int, int) = param_spec_unichar;
extern GParamSpec* g_param_spec_enum(char*, char*, char*, long, int, int) = param_spec_enum;
extern GParamSpec* g_param_spec_flags(char*, char*, char*, long, int, int) = param_spec_flags;
extern GParamSpec* g_param_spec_float(char*, char*, char*, float, float, float, int) = param_spec_float;
extern GParamSpec* g_param_spec_double(char*, char*, char*, double, double, double, int) = param_spec_double;
extern GParamSpec* g_param_spec_string(char*, char*, char*, char*, int) = param_spec_string;
extern GParamSpec* g_param_spec_param(char*, char*, char*, long, int) = param_spec_param;
extern GParamSpec* g_param_spec_boxed(char*, char*, char*, long, int) = param_spec_boxed;
extern GParamSpec* g_param_spec_pointer(char*, char*, char*, int) = param_spec_pointer;
extern GParamSpec* g_param_spec_value_array(char*, char*, char*, GParamSpec*, int) = param_spec_value_array;
extern GParamSpec* g_param_spec_object(char*, char*, char*, long, int) = param_spec_object;
extern GParamSpec* g_param_spec_override(char*, GParamSpec*) = param_spec_override;
extern GParamSpec* g_param_spec_gtype(char*, char*, char*, long, int) = param_spec_gtype;
extern GParamSpec* g_param_spec_variant(char*, char*, char*, GVariantType*, GVariant*, int) = param_spec_variant;
extern void g_source_set_closure(GSource*, GClosure*) = source_set_closure;
extern void g_source_set_dummy_callback(GSource*) = source_set_dummy_callback;
extern long g_type_module_get_type() = type_module_get_type;
extern int g_type_module_use(GTypeModule*) = type_module_use;
extern void g_type_module_unuse(GTypeModule*) = type_module_unuse;
extern void g_type_module_set_name(GTypeModule*, char*) = type_module_set_name;
extern long g_type_module_register_type(GTypeModule*, long, char*, GTypeInfo*, int) = type_module_register_type;
extern void g_type_module_add_interface(GTypeModule*, long, long, GInterfaceInfo*) = type_module_add_interface;
extern long g_type_module_register_enum(GTypeModule*, char*, GEnumValue*) = type_module_register_enum;
extern long g_type_module_register_flags(GTypeModule*, char*, GFlagsValue*) = type_module_register_flags;
extern long g_type_plugin_get_type() = type_plugin_get_type;
extern void g_type_plugin_use(GTypePlugin*) = type_plugin_use;
extern void g_type_plugin_unuse(GTypePlugin*) = type_plugin_unuse;
extern void g_type_plugin_complete_type_info(GTypePlugin*, long, GTypeInfo*, GTypeValueTable*) = type_plugin_complete_type_info;
extern void g_type_plugin_complete_interface_info(GTypePlugin*, long, long, GInterfaceInfo*) = type_plugin_complete_interface_info;
extern long g_value_array_get_type() = value_array_get_type;
extern GValue* g_value_array_get_nth(GValueArray*, int) = value_array_get_nth;
extern GValueArray* g_value_array_new(int) = value_array_new;
extern void g_value_array_free(GValueArray*) = value_array_free;
extern GValueArray* g_value_array_copy(GValueArray*) = value_array_copy;
extern GValueArray* g_value_array_prepend(GValueArray*, GValue*) = value_array_prepend;
extern GValueArray* g_value_array_append(GValueArray*, GValue*) = value_array_append;
extern GValueArray* g_value_array_insert(GValueArray*, int, GValue*) = value_array_insert;
extern GValueArray* g_value_array_remove(GValueArray*, int) = value_array_remove;
extern GValueArray* g_value_array_sort(GValueArray*, void*) = value_array_sort;
extern GValueArray* g_value_array_sort_with_data(GValueArray*, void*, void*) = value_array_sort_with_data;
extern void g_value_set_char(GValue*, char) = value_set_char;
extern char g_value_get_char(GValue*) = value_get_char;
extern void g_value_set_schar(GValue*, char) = value_set_schar;
extern char g_value_get_schar(GValue*) = value_get_schar;
extern void g_value_set_uchar(GValue*, char) = value_set_uchar;
extern char g_value_get_uchar(GValue*) = value_get_uchar;
extern void g_value_set_boolean(GValue*, int) = value_set_boolean;
extern int g_value_get_boolean(GValue*) = value_get_boolean;
extern void g_value_set_int(GValue*, int) = value_set_int;
extern int g_value_get_int(GValue*) = value_get_int;
extern void g_value_set_uint(GValue*, int) = value_set_uint;
extern int g_value_get_uint(GValue*) = value_get_uint;
extern void g_value_set_long(GValue*, long) = value_set_long;
extern long g_value_get_long(GValue*) = value_get_long;
extern void g_value_set_ulong(GValue*, long) = value_set_ulong;
extern long g_value_get_ulong(GValue*) = value_get_ulong;
extern void g_value_set_int64(GValue*, long) = value_set_int64;
extern long g_value_get_int64(GValue*) = value_get_int64;
extern void g_value_set_uint64(GValue*, long) = value_set_uint64;
extern long g_value_get_uint64(GValue*) = value_get_uint64;
extern void g_value_set_float(GValue*, float) = value_set_float;
extern float g_value_get_float(GValue*) = value_get_float;
extern void g_value_set_double(GValue*, double) = value_set_double;
extern double g_value_get_double(GValue*) = value_get_double;
extern void g_value_set_string(GValue*, char*) = value_set_string;
extern void g_value_set_static_string(GValue*, char*) = value_set_static_string;
extern char* g_value_get_string(GValue*) = value_get_string;
extern char* g_value_dup_string(GValue*) = value_dup_string;
extern void g_value_set_pointer(GValue*, void*) = value_set_pointer;
extern void* g_value_get_pointer(GValue*) = value_get_pointer;
extern long g_gtype_get_type() = gtype_get_type;
extern void g_value_set_gtype(GValue*, long) = value_set_gtype;
extern long g_value_get_gtype(GValue*) = value_get_gtype;
extern void g_value_set_variant(GValue*, GVariant*) = value_set_variant;
extern void g_value_take_variant(GValue*, GVariant*) = value_take_variant;
extern GVariant* g_value_get_variant(GValue*) = value_get_variant;
extern GVariant* g_value_dup_variant(GValue*) = value_dup_variant;
extern long g_pointer_type_register_static(char*) = pointer_type_register_static;
extern char* g_strdup_value_contents(GValue*) = strdup_value_contents;
extern void g_value_take_string(GValue*, char*) = value_take_string;
extern void g_value_set_string_take_ownership(GValue*, char*) = value_set_string_take_ownership;
/* /usr/include/glib-2.0/gio/gio.h: */
using "lib:glib";

namespace glib;
const glib::FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";
const glib::FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";
const glib::FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";
const glib::FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";
const glib::FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";
const glib::FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";
const glib::FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";
const glib::FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";
const glib::FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";
const glib::FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";
const glib::FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";
const glib::FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";
const glib::FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";
const glib::FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";
const glib::FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size";
const glib::FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";
const glib::FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";
const glib::FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";
const glib::FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";
const glib::FILE_ATTRIBUTE_ID_FILE = "id::file";
const glib::FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";
const glib::FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";
const glib::FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";
const glib::FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file";
const glib::FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop";
const glib::FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type";
const glib::FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll";
const glib::FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic";
const glib::FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";
const glib::FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";
const glib::FILE_ATTRIBUTE_TIME_ACCESS = "time::access";
const glib::FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";
const glib::FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";
const glib::FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";
const glib::FILE_ATTRIBUTE_TIME_CREATED = "time::created";
const glib::FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";
const glib::FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";
const glib::FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";
const glib::FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";
const glib::FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";
const glib::FILE_ATTRIBUTE_UNIX_UID = "unix::uid";
const glib::FILE_ATTRIBUTE_UNIX_GID = "unix::gid";
const glib::FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";
const glib::FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";
const glib::FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";
const glib::FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";
const glib::FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";
const glib::FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";
const glib::FILE_ATTRIBUTE_OWNER_USER = "owner::user";
const glib::FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";
const glib::FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";
const glib::FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";
const glib::FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";
const glib::FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon";
const glib::FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";
const glib::FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";
const glib::FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used";
const glib::FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";
const glib::FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";
const glib::FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";
const glib::FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";
const glib::FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";
const glib::FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";
const glib::FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path";
const glib::FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date";
const glib::VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";
const glib::NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";
const glib::NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor";
const glib::PROXY_EXTENSION_POINT_NAME = "gio-proxy";
const glib::PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver";
const glib::TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend";
const glib::TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1";
const glib::TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2";
const glib::VFS_EXTENSION_POINT_NAME = "gio-vfs";
const glib::VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi";
const glib::VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
const glib::VOLUME_IDENTIFIER_KIND_LABEL = "label";
const glib::VOLUME_IDENTIFIER_KIND_UUID = "uuid";
const glib::VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";
const glib::VOLUME_IDENTIFIER_KIND_CLASS = "class";
const glib::MENU_ATTRIBUTE_ACTION = "action";
const glib::MENU_ATTRIBUTE_TARGET = "target";
const glib::MENU_ATTRIBUTE_LABEL = "label";
const glib::MENU_LINK_SUBMENU = "submenu";
const glib::MENU_LINK_SECTION = "section";
const glib::APP_INFO_CREATE_NONE = 0;
const glib::APP_INFO_CREATE_NEEDS_TERMINAL = 1;
const glib::APP_INFO_CREATE_SUPPORTS_URIS = 2;
const glib::APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4;
const glib::APPLICATION_FLAGS_NONE = 0;
const glib::APPLICATION_IS_SERVICE = 1;
const glib::APPLICATION_IS_LAUNCHER = 2;
const glib::APPLICATION_HANDLES_OPEN = 4;
const glib::APPLICATION_HANDLES_COMMAND_LINE = 8;
const glib::APPLICATION_SEND_ENVIRONMENT = 16;
const glib::APPLICATION_NON_UNIQUE = 32;
const glib::ASK_PASSWORD_NEED_PASSWORD = 1;
const glib::ASK_PASSWORD_NEED_USERNAME = 2;
const glib::ASK_PASSWORD_NEED_DOMAIN = 4;
const glib::ASK_PASSWORD_SAVING_SUPPORTED = 8;
const glib::ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16;
const glib::BUS_NAME_OWNER_FLAGS_NONE = 0;
const glib::BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1;
const glib::BUS_NAME_OWNER_FLAGS_REPLACE = 2;
const glib::BUS_NAME_WATCHER_FLAGS_NONE = 0;
const glib::BUS_NAME_WATCHER_FLAGS_AUTO_START = 1;
const glib::BUS_TYPE_STARTER = -1;
const glib::BUS_TYPE_NONE = 0;
const glib::BUS_TYPE_SYSTEM = 1;
const glib::BUS_TYPE_SESSION = 2;
const glib::CONVERTER_NO_FLAGS = 0;
const glib::CONVERTER_INPUT_AT_END = 1;
const glib::CONVERTER_FLUSH = 2;
const glib::CONVERTER_ERROR = 0;
const glib::CONVERTER_CONVERTED = 1;
const glib::CONVERTER_FINISHED = 2;
const glib::CONVERTER_FLUSHED = 3;
const glib::CREDENTIALS_TYPE_INVALID = 0;
const glib::CREDENTIALS_TYPE_LINUX_UCRED = 1;
const glib::CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2;
const glib::CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3;
const glib::DBUS_CALL_FLAGS_NONE = 0;
const glib::DBUS_CALL_FLAGS_NO_AUTO_START = 1;
const glib::DBUS_CAPABILITY_FLAGS_NONE = 0;
const glib::DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1;
const glib::DBUS_CONNECTION_FLAGS_NONE = 0;
const glib::DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1;
const glib::DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2;
const glib::DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4;
const glib::DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8;
const glib::DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16;
const glib::DBUS_ERROR_FAILED = 0;
const glib::DBUS_ERROR_NO_MEMORY = 1;
const glib::DBUS_ERROR_SERVICE_UNKNOWN = 2;
const glib::DBUS_ERROR_NAME_HAS_NO_OWNER = 3;
const glib::DBUS_ERROR_NO_REPLY = 4;
const glib::DBUS_ERROR_IO_ERROR = 5;
const glib::DBUS_ERROR_BAD_ADDRESS = 6;
const glib::DBUS_ERROR_NOT_SUPPORTED = 7;
const glib::DBUS_ERROR_LIMITS_EXCEEDED = 8;
const glib::DBUS_ERROR_ACCESS_DENIED = 9;
const glib::DBUS_ERROR_AUTH_FAILED = 10;
const glib::DBUS_ERROR_NO_SERVER = 11;
const glib::DBUS_ERROR_TIMEOUT = 12;
const glib::DBUS_ERROR_NO_NETWORK = 13;
const glib::DBUS_ERROR_ADDRESS_IN_USE = 14;
const glib::DBUS_ERROR_DISCONNECTED = 15;
const glib::DBUS_ERROR_INVALID_ARGS = 16;
const glib::DBUS_ERROR_FILE_NOT_FOUND = 17;
const glib::DBUS_ERROR_FILE_EXISTS = 18;
const glib::DBUS_ERROR_UNKNOWN_METHOD = 19;
const glib::DBUS_ERROR_TIMED_OUT = 20;
const glib::DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21;
const glib::DBUS_ERROR_MATCH_RULE_INVALID = 22;
const glib::DBUS_ERROR_SPAWN_EXEC_FAILED = 23;
const glib::DBUS_ERROR_SPAWN_FORK_FAILED = 24;
const glib::DBUS_ERROR_SPAWN_CHILD_EXITED = 25;
const glib::DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26;
const glib::DBUS_ERROR_SPAWN_FAILED = 27;
const glib::DBUS_ERROR_SPAWN_SETUP_FAILED = 28;
const glib::DBUS_ERROR_SPAWN_CONFIG_INVALID = 29;
const glib::DBUS_ERROR_SPAWN_SERVICE_INVALID = 30;
const glib::DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31;
const glib::DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32;
const glib::DBUS_ERROR_SPAWN_FILE_INVALID = 33;
const glib::DBUS_ERROR_SPAWN_NO_MEMORY = 34;
const glib::DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35;
const glib::DBUS_ERROR_INVALID_SIGNATURE = 36;
const glib::DBUS_ERROR_INVALID_FILE_CONTENT = 37;
const glib::DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38;
const glib::DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39;
const glib::DBUS_ERROR_OBJECT_PATH_IN_USE = 40;
const glib::DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0;
const glib::DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1;
const glib::DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66;
const glib::DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108;
const glib::DBUS_MESSAGE_FLAGS_NONE = 0;
const glib::DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1;
const glib::DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2;
const glib::DBUS_MESSAGE_HEADER_FIELD_INVALID = 0;
const glib::DBUS_MESSAGE_HEADER_FIELD_PATH = 1;
const glib::DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2;
const glib::DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3;
const glib::DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4;
const glib::DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5;
const glib::DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6;
const glib::DBUS_MESSAGE_HEADER_FIELD_SENDER = 7;
const glib::DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8;
const glib::DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9;
const glib::DBUS_MESSAGE_TYPE_INVALID = 0;
const glib::DBUS_MESSAGE_TYPE_METHOD_CALL = 1;
const glib::DBUS_MESSAGE_TYPE_METHOD_RETURN = 2;
const glib::DBUS_MESSAGE_TYPE_ERROR = 3;
const glib::DBUS_MESSAGE_TYPE_SIGNAL = 4;
const glib::DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0;
const glib::DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1;
const glib::DBUS_PROPERTY_INFO_FLAGS_NONE = 0;
const glib::DBUS_PROPERTY_INFO_FLAGS_READABLE = 1;
const glib::DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2;
const glib::DBUS_PROXY_FLAGS_NONE = 0;
const glib::DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1;
const glib::DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2;
const glib::DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4;
const glib::DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8;
const glib::DBUS_SEND_MESSAGE_FLAGS_NONE = 0;
const glib::DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1;
const glib::DBUS_SERVER_FLAGS_NONE = 0;
const glib::DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1;
const glib::DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2;
const glib::DBUS_SIGNAL_FLAGS_NONE = 0;
const glib::DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1;
const glib::DBUS_SUBTREE_FLAGS_NONE = 0;
const glib::DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1;
const glib::DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0;
const glib::DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1;
const glib::DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2;
const glib::DATA_STREAM_NEWLINE_TYPE_LF = 0;
const glib::DATA_STREAM_NEWLINE_TYPE_CR = 1;
const glib::DATA_STREAM_NEWLINE_TYPE_CR_LF = 2;
const glib::DATA_STREAM_NEWLINE_TYPE_ANY = 3;
const glib::DRIVE_START_NONE = 0;
const glib::DRIVE_START_STOP_TYPE_UNKNOWN = 0;
const glib::DRIVE_START_STOP_TYPE_SHUTDOWN = 1;
const glib::DRIVE_START_STOP_TYPE_NETWORK = 2;
const glib::DRIVE_START_STOP_TYPE_MULTIDISK = 3;
const glib::DRIVE_START_STOP_TYPE_PASSWORD = 4;
const glib::EMBLEM_ORIGIN_UNKNOWN = 0;
const glib::EMBLEM_ORIGIN_DEVICE = 1;
const glib::EMBLEM_ORIGIN_LIVEMETADATA = 2;
const glib::EMBLEM_ORIGIN_TAG = 3;
const glib::FILE_ATTRIBUTE_INFO_NONE = 0;
const glib::FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1;
const glib::FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2;
const glib::FILE_ATTRIBUTE_STATUS_UNSET = 0;
const glib::FILE_ATTRIBUTE_STATUS_SET = 1;
const glib::FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2;
const glib::FILE_ATTRIBUTE_TYPE_INVALID = 0;
const glib::FILE_ATTRIBUTE_TYPE_STRING = 1;
const glib::FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2;
const glib::FILE_ATTRIBUTE_TYPE_BOOLEAN = 3;
const glib::FILE_ATTRIBUTE_TYPE_UINT32 = 4;
const glib::FILE_ATTRIBUTE_TYPE_INT32 = 5;
const glib::FILE_ATTRIBUTE_TYPE_UINT64 = 6;
const glib::FILE_ATTRIBUTE_TYPE_INT64 = 7;
const glib::FILE_ATTRIBUTE_TYPE_OBJECT = 8;
const glib::FILE_ATTRIBUTE_TYPE_STRINGV = 9;
const glib::FILE_COPY_NONE = 0;
const glib::FILE_COPY_OVERWRITE = 1;
const glib::FILE_COPY_BACKUP = 2;
const glib::FILE_COPY_NOFOLLOW_SYMLINKS = 4;
const glib::FILE_COPY_ALL_METADATA = 8;
const glib::FILE_COPY_NO_FALLBACK_FOR_MOVE = 16;
const glib::FILE_COPY_TARGET_DEFAULT_PERMS = 32;
const glib::FILE_CREATE_NONE = 0;
const glib::FILE_CREATE_PRIVATE = 1;
const glib::FILE_CREATE_REPLACE_DESTINATION = 2;
const glib::FILE_MONITOR_EVENT_CHANGED = 0;
const glib::FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1;
const glib::FILE_MONITOR_EVENT_DELETED = 2;
const glib::FILE_MONITOR_EVENT_CREATED = 3;
const glib::FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4;
const glib::FILE_MONITOR_EVENT_PRE_UNMOUNT = 5;
const glib::FILE_MONITOR_EVENT_UNMOUNTED = 6;
const glib::FILE_MONITOR_EVENT_MOVED = 7;
const glib::FILE_MONITOR_NONE = 0;
const glib::FILE_MONITOR_WATCH_MOUNTS = 1;
const glib::FILE_MONITOR_SEND_MOVED = 2;
const glib::FILE_QUERY_INFO_NONE = 0;
const glib::FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1;
const glib::FILE_TYPE_UNKNOWN = 0;
const glib::FILE_TYPE_REGULAR = 1;
const glib::FILE_TYPE_DIRECTORY = 2;
const glib::FILE_TYPE_SYMBOLIC_LINK = 3;
const glib::FILE_TYPE_SPECIAL = 4;
const glib::FILE_TYPE_SHORTCUT = 5;
const glib::FILE_TYPE_MOUNTABLE = 6;
const glib::FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0;
const glib::FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1;
const glib::FILESYSTEM_PREVIEW_TYPE_NEVER = 2;
const glib::IO_ERROR_FAILED = 0;
const glib::IO_ERROR_NOT_FOUND = 1;
const glib::IO_ERROR_EXISTS = 2;
const glib::IO_ERROR_IS_DIRECTORY = 3;
const glib::IO_ERROR_NOT_DIRECTORY = 4;
const glib::IO_ERROR_NOT_EMPTY = 5;
const glib::IO_ERROR_NOT_REGULAR_FILE = 6;
const glib::IO_ERROR_NOT_SYMBOLIC_LINK = 7;
const glib::IO_ERROR_NOT_MOUNTABLE_FILE = 8;
const glib::IO_ERROR_FILENAME_TOO_LONG = 9;
const glib::IO_ERROR_INVALID_FILENAME = 10;
const glib::IO_ERROR_TOO_MANY_LINKS = 11;
const glib::IO_ERROR_NO_SPACE = 12;
const glib::IO_ERROR_INVALID_ARGUMENT = 13;
const glib::IO_ERROR_PERMISSION_DENIED = 14;
const glib::IO_ERROR_NOT_SUPPORTED = 15;
const glib::IO_ERROR_NOT_MOUNTED = 16;
const glib::IO_ERROR_ALREADY_MOUNTED = 17;
const glib::IO_ERROR_CLOSED = 18;
const glib::IO_ERROR_CANCELLED = 19;
const glib::IO_ERROR_PENDING = 20;
const glib::IO_ERROR_READ_ONLY = 21;
const glib::IO_ERROR_CANT_CREATE_BACKUP = 22;
const glib::IO_ERROR_WRONG_ETAG = 23;
const glib::IO_ERROR_TIMED_OUT = 24;
const glib::IO_ERROR_WOULD_RECURSE = 25;
const glib::IO_ERROR_BUSY = 26;
const glib::IO_ERROR_WOULD_BLOCK = 27;
const glib::IO_ERROR_HOST_NOT_FOUND = 28;
const glib::IO_ERROR_WOULD_MERGE = 29;
const glib::IO_ERROR_FAILED_HANDLED = 30;
const glib::IO_ERROR_TOO_MANY_OPEN_FILES = 31;
const glib::IO_ERROR_NOT_INITIALIZED = 32;
const glib::IO_ERROR_ADDRESS_IN_USE = 33;
const glib::IO_ERROR_PARTIAL_INPUT = 34;
const glib::IO_ERROR_INVALID_DATA = 35;
const glib::IO_ERROR_DBUS_ERROR = 36;
const glib::IO_ERROR_HOST_UNREACHABLE = 37;
const glib::IO_ERROR_NETWORK_UNREACHABLE = 38;
const glib::IO_ERROR_CONNECTION_REFUSED = 39;
const glib::IO_ERROR_PROXY_FAILED = 40;
const glib::IO_ERROR_PROXY_AUTH_FAILED = 41;
const glib::IO_ERROR_PROXY_NEED_AUTH = 42;
const glib::IO_ERROR_PROXY_NOT_ALLOWED = 43;
const glib::IO_MODULE_SCOPE_NONE = 0;
const glib::IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1;
const glib::IO_STREAM_SPLICE_NONE = 0;
const glib::IO_STREAM_SPLICE_CLOSE_STREAM1 = 1;
const glib::IO_STREAM_SPLICE_CLOSE_STREAM2 = 2;
const glib::IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4;
const glib::MOUNT_MOUNT_NONE = 0;
const glib::MOUNT_OPERATION_HANDLED = 0;
const glib::MOUNT_OPERATION_ABORTED = 1;
const glib::MOUNT_OPERATION_UNHANDLED = 2;
const glib::MOUNT_UNMOUNT_NONE = 0;
const glib::MOUNT_UNMOUNT_FORCE = 1;
const glib::OUTPUT_STREAM_SPLICE_NONE = 0;
const glib::OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1;
const glib::OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2;
const glib::PASSWORD_SAVE_NEVER = 0;
const glib::PASSWORD_SAVE_FOR_SESSION = 1;
const glib::PASSWORD_SAVE_PERMANENTLY = 2;
const glib::RESOLVER_ERROR_NOT_FOUND = 0;
const glib::RESOLVER_ERROR_TEMPORARY_FAILURE = 1;
const glib::RESOLVER_ERROR_INTERNAL = 2;
const glib::RESOURCE_ERROR_NOT_FOUND = 0;
const glib::RESOURCE_ERROR_INTERNAL = 1;
const glib::RESOURCE_FLAGS_NONE = 0;
const glib::RESOURCE_FLAGS_COMPRESSED = 1;
const glib::RESOURCE_LOOKUP_FLAGS_NONE = 0;
const glib::SETTINGS_BIND_DEFAULT = 0;
const glib::SETTINGS_BIND_GET = 1;
const glib::SETTINGS_BIND_SET = 2;
const glib::SETTINGS_BIND_NO_SENSITIVITY = 4;
const glib::SETTINGS_BIND_GET_NO_CHANGES = 8;
const glib::SETTINGS_BIND_INVERT_BOOLEAN = 16;
const glib::SOCKET_CLIENT_RESOLVING = 0;
const glib::SOCKET_CLIENT_RESOLVED = 1;
const glib::SOCKET_CLIENT_CONNECTING = 2;
const glib::SOCKET_CLIENT_CONNECTED = 3;
const glib::SOCKET_CLIENT_PROXY_NEGOTIATING = 4;
const glib::SOCKET_CLIENT_PROXY_NEGOTIATED = 5;
const glib::SOCKET_CLIENT_TLS_HANDSHAKING = 6;
const glib::SOCKET_CLIENT_TLS_HANDSHAKED = 7;
const glib::SOCKET_CLIENT_COMPLETE = 8;
const glib::SOCKET_FAMILY_INVALID = 0;
const glib::SOCKET_FAMILY_UNIX = 1;
const glib::SOCKET_FAMILY_IPV4 = 2;
const glib::SOCKET_FAMILY_IPV6 = 10;
const glib::SOCKET_MSG_NONE = 0;
const glib::SOCKET_MSG_OOB = 1;
const glib::SOCKET_MSG_PEEK = 2;
const glib::SOCKET_MSG_DONTROUTE = 4;
const glib::SOCKET_PROTOCOL_UNKNOWN = -1;
const glib::SOCKET_PROTOCOL_DEFAULT = 0;
const glib::SOCKET_PROTOCOL_TCP = 6;
const glib::SOCKET_PROTOCOL_UDP = 17;
const glib::SOCKET_PROTOCOL_SCTP = 132;
const glib::SOCKET_TYPE_INVALID = 0;
const glib::SOCKET_TYPE_STREAM = 1;
const glib::SOCKET_TYPE_DATAGRAM = 2;
const glib::SOCKET_TYPE_SEQPACKET = 3;
const glib::TLS_AUTHENTICATION_NONE = 0;
const glib::TLS_AUTHENTICATION_REQUESTED = 1;
const glib::TLS_AUTHENTICATION_REQUIRED = 2;
const glib::TLS_CERTIFICATE_UNKNOWN_CA = 1;
const glib::TLS_CERTIFICATE_BAD_IDENTITY = 2;
const glib::TLS_CERTIFICATE_NOT_ACTIVATED = 4;
const glib::TLS_CERTIFICATE_EXPIRED = 8;
const glib::TLS_CERTIFICATE_REVOKED = 16;
const glib::TLS_CERTIFICATE_INSECURE = 32;
const glib::TLS_CERTIFICATE_GENERIC_ERROR = 64;
const glib::TLS_CERTIFICATE_VALIDATE_ALL = 127;
const glib::TLS_DATABASE_LOOKUP_NONE = 0;
const glib::TLS_DATABASE_LOOKUP_KEYPAIR = 1;
const glib::TLS_DATABASE_VERIFY_NONE = 0;
const glib::TLS_ERROR_UNAVAILABLE = 0;
const glib::TLS_ERROR_MISC = 1;
const glib::TLS_ERROR_BAD_CERTIFICATE = 2;
const glib::TLS_ERROR_NOT_TLS = 3;
const glib::TLS_ERROR_HANDSHAKE = 4;
const glib::TLS_ERROR_CERTIFICATE_REQUIRED = 5;
const glib::TLS_ERROR_EOF = 6;
const glib::TLS_INTERACTION_UNHANDLED = 0;
const glib::TLS_INTERACTION_HANDLED = 1;
const glib::TLS_INTERACTION_FAILED = 2;
const glib::TLS_PASSWORD_NONE = 0;
const glib::TLS_PASSWORD_RETRY = 2;
const glib::TLS_PASSWORD_MANY_TRIES = 4;
const glib::TLS_PASSWORD_FINAL_TRY = 8;
const glib::TLS_REHANDSHAKE_NEVER = 0;
const glib::TLS_REHANDSHAKE_SAFELY = 1;
const glib::TLS_REHANDSHAKE_UNSAFELY = 2;
const glib::UNIX_SOCKET_ADDRESS_INVALID = 0;
const glib::UNIX_SOCKET_ADDRESS_ANONYMOUS = 1;
const glib::UNIX_SOCKET_ADDRESS_PATH = 2;
const glib::UNIX_SOCKET_ADDRESS_ABSTRACT = 3;
const glib::UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4;
const glib::ZLIB_COMPRESSOR_FORMAT_ZLIB = 0;
const glib::ZLIB_COMPRESSOR_FORMAT_GZIP = 1;
const glib::ZLIB_COMPRESSOR_FORMAT_RAW = 2;
extern long g_action_get_type() = action_get_type;
extern char* g_action_get_name(GAction*) = action_get_name;
extern GVariantType* g_action_get_parameter_type(GAction*) = action_get_parameter_type;
extern GVariantType* g_action_get_state_type(GAction*) = action_get_state_type;
extern GVariant* g_action_get_state_hint(GAction*) = action_get_state_hint;
extern int g_action_get_enabled(GAction*) = action_get_enabled;
extern GVariant* g_action_get_state(GAction*) = action_get_state;
extern void g_action_change_state(GAction*, GVariant*) = action_change_state;
extern void g_action_activate(GAction*, GVariant*) = action_activate;
extern long g_action_group_get_type() = action_group_get_type;
extern int g_action_group_has_action(GActionGroup*, char*) = action_group_has_action;
extern char** g_action_group_list_actions(GActionGroup*) = action_group_list_actions;
extern GVariantType* g_action_group_get_action_parameter_type(GActionGroup*, char*) = action_group_get_action_parameter_type;
extern GVariantType* g_action_group_get_action_state_type(GActionGroup*, char*) = action_group_get_action_state_type;
extern GVariant* g_action_group_get_action_state_hint(GActionGroup*, char*) = action_group_get_action_state_hint;
extern int g_action_group_get_action_enabled(GActionGroup*, char*) = action_group_get_action_enabled;
extern GVariant* g_action_group_get_action_state(GActionGroup*, char*) = action_group_get_action_state;
extern void g_action_group_change_action_state(GActionGroup*, char*, GVariant*) = action_group_change_action_state;
extern void g_action_group_activate_action(GActionGroup*, char*, GVariant*) = action_group_activate_action;
extern void g_action_group_action_added(GActionGroup*, char*) = action_group_action_added;
extern void g_action_group_action_removed(GActionGroup*, char*) = action_group_action_removed;
extern void g_action_group_action_enabled_changed(GActionGroup*, char*, int) = action_group_action_enabled_changed;
extern void g_action_group_action_state_changed(GActionGroup*, char*, GVariant*) = action_group_action_state_changed;
extern int g_action_group_query_action(GActionGroup*, char*, int*, GVariantType**, GVariantType**, GVariant**, GVariant**) = action_group_query_action;
extern int g_dbus_connection_export_action_group(GDBusConnection*, char*, GActionGroup*, GError**) = dbus_connection_export_action_group;
extern void g_dbus_connection_unexport_action_group(GDBusConnection*, int) = dbus_connection_unexport_action_group;
extern long g_action_map_get_type() = action_map_get_type;
extern GAction* g_action_map_lookup_action(GActionMap*, char*) = action_map_lookup_action;
extern void g_action_map_add_action(GActionMap*, GAction*) = action_map_add_action;
extern void g_action_map_remove_action(GActionMap*, char*) = action_map_remove_action;
extern void g_action_map_add_action_entries(GActionMap*, GActionEntry*, int, void*) = action_map_add_action_entries;
extern long g_app_info_get_type() = app_info_get_type;
extern GAppInfo* g_app_info_create_from_commandline(char*, char*, int, GError**) = app_info_create_from_commandline;
extern GAppInfo* g_app_info_dup(GAppInfo*) = app_info_dup;
extern int g_app_info_equal(GAppInfo*, GAppInfo*) = app_info_equal;
extern char* g_app_info_get_id(GAppInfo*) = app_info_get_id;
extern char* g_app_info_get_name(GAppInfo*) = app_info_get_name;
extern char* g_app_info_get_display_name(GAppInfo*) = app_info_get_display_name;
extern char* g_app_info_get_description(GAppInfo*) = app_info_get_description;
extern char* g_app_info_get_executable(GAppInfo*) = app_info_get_executable;
extern char* g_app_info_get_commandline(GAppInfo*) = app_info_get_commandline;
extern GIcon* g_app_info_get_icon(GAppInfo*) = app_info_get_icon;
extern int g_app_info_launch(GAppInfo*, GList*, GAppLaunchContext*, GError**) = app_info_launch;
extern int g_app_info_supports_uris(GAppInfo*) = app_info_supports_uris;
extern int g_app_info_supports_files(GAppInfo*) = app_info_supports_files;
extern int g_app_info_launch_uris(GAppInfo*, GList*, GAppLaunchContext*, GError**) = app_info_launch_uris;
extern int g_app_info_should_show(GAppInfo*) = app_info_should_show;
extern int g_app_info_set_as_default_for_type(GAppInfo*, char*, GError**) = app_info_set_as_default_for_type;
extern int g_app_info_set_as_default_for_extension(GAppInfo*, char*, GError**) = app_info_set_as_default_for_extension;
extern int g_app_info_add_supports_type(GAppInfo*, char*, GError**) = app_info_add_supports_type;
extern int g_app_info_can_remove_supports_type(GAppInfo*) = app_info_can_remove_supports_type;
extern int g_app_info_remove_supports_type(GAppInfo*, char*, GError**) = app_info_remove_supports_type;
extern int g_app_info_can_delete(GAppInfo*) = app_info_can_delete;
extern int g_app_info_delete(GAppInfo*) = app_info_delete;
extern int g_app_info_set_as_last_used_for_type(GAppInfo*, char*, GError**) = app_info_set_as_last_used_for_type;
extern GList* g_app_info_get_all() = app_info_get_all;
extern GList* g_app_info_get_all_for_type(char*) = app_info_get_all_for_type;
extern GList* g_app_info_get_recommended_for_type(char*) = app_info_get_recommended_for_type;
extern GList* g_app_info_get_fallback_for_type(char*) = app_info_get_fallback_for_type;
extern void g_app_info_reset_type_associations(char*) = app_info_reset_type_associations;
extern GAppInfo* g_app_info_get_default_for_type(char*, int) = app_info_get_default_for_type;
extern GAppInfo* g_app_info_get_default_for_uri_scheme(char*) = app_info_get_default_for_uri_scheme;
extern int g_app_info_launch_default_for_uri(char*, GAppLaunchContext*, GError**) = app_info_launch_default_for_uri;
extern long g_app_launch_context_get_type() = app_launch_context_get_type;
extern GAppLaunchContext* g_app_launch_context_new() = app_launch_context_new;
extern void g_app_launch_context_setenv(GAppLaunchContext*, char*, char*) = app_launch_context_setenv;
extern void g_app_launch_context_unsetenv(GAppLaunchContext*, char*) = app_launch_context_unsetenv;
extern char** g_app_launch_context_get_environment(GAppLaunchContext*) = app_launch_context_get_environment;
extern char* g_app_launch_context_get_display(GAppLaunchContext*, GAppInfo*, GList*) = app_launch_context_get_display;
extern char* g_app_launch_context_get_startup_notify_id(GAppLaunchContext*, GAppInfo*, GList*) = app_launch_context_get_startup_notify_id;
extern void g_app_launch_context_launch_failed(GAppLaunchContext*, char*) = app_launch_context_launch_failed;
extern long g_application_get_type() = application_get_type;
extern int g_application_id_is_valid(char*) = application_id_is_valid;
extern GApplication* g_application_new(char*, int) = application_new;
extern char* g_application_get_application_id(GApplication*) = application_get_application_id;
extern void g_application_set_application_id(GApplication*, char*) = application_set_application_id;
extern int g_application_get_inactivity_timeout(GApplication*) = application_get_inactivity_timeout;
extern void g_application_set_inactivity_timeout(GApplication*, int) = application_set_inactivity_timeout;
extern int g_application_get_flags(GApplication*) = application_get_flags;
extern void g_application_set_flags(GApplication*, int) = application_set_flags;
extern void g_application_set_action_group(GApplication*, GActionGroup*) = application_set_action_group;
extern int g_application_get_is_registered(GApplication*) = application_get_is_registered;
extern int g_application_get_is_remote(GApplication*) = application_get_is_remote;
extern int g_application_register(GApplication*, GCancellable*, GError**) = application_register;
extern void g_application_hold(GApplication*) = application_hold;
extern void g_application_release(GApplication*) = application_release;
extern void g_application_activate(GApplication*) = application_activate;
extern void g_application_open(GApplication*, GFile**, int, char*) = application_open;
extern int g_application_run(GApplication*, int, char**) = application_run;
extern void g_application_quit(GApplication*) = application_quit;
extern GApplication* g_application_get_default() = application_get_default;
extern void g_application_set_default(GApplication*) = application_set_default;
extern long g_application_command_line_get_type() = application_command_line_get_type;
extern char** g_application_command_line_get_arguments(GApplicationCommandLine*, int*) = application_command_line_get_arguments;
extern char** g_application_command_line_get_environ(GApplicationCommandLine*) = application_command_line_get_environ;
extern char* g_application_command_line_getenv(GApplicationCommandLine*, char*) = application_command_line_getenv;
extern char* g_application_command_line_get_cwd(GApplicationCommandLine*) = application_command_line_get_cwd;
extern int g_application_command_line_get_is_remote(GApplicationCommandLine*) = application_command_line_get_is_remote;
extern void g_application_command_line_print(GApplicationCommandLine*, char*, ...) = application_command_line_print;
extern void g_application_command_line_printerr(GApplicationCommandLine*, char*, ...) = application_command_line_printerr;
extern int g_application_command_line_get_exit_status(GApplicationCommandLine*) = application_command_line_get_exit_status;
extern void g_application_command_line_set_exit_status(GApplicationCommandLine*, int) = application_command_line_set_exit_status;
extern GVariant* g_application_command_line_get_platform_data(GApplicationCommandLine*) = application_command_line_get_platform_data;
extern long g_initable_get_type() = initable_get_type;
extern int g_initable_init(GInitable*, GCancellable*, GError**) = initable_init;
extern void* g_initable_new(long, GCancellable*, GError**, char*, ...) = initable_new;
extern void* g_initable_newv(long, int, GParameter*, GCancellable*, GError**) = initable_newv;
extern GObject* g_initable_new_valist(long, char*, void*, GCancellable*, GError**) = initable_new_valist;
extern long g_async_initable_get_type() = async_initable_get_type;
extern void g_async_initable_init_async(GAsyncInitable*, int, GCancellable*, void*, void*) = async_initable_init_async;
extern int g_async_initable_init_finish(GAsyncInitable*, GAsyncResult*, GError**) = async_initable_init_finish;
extern void g_async_initable_new_async(long, int, GCancellable*, void*, void*, char*, ...) = async_initable_new_async;
extern void g_async_initable_newv_async(long, int, GParameter*, int, GCancellable*, void*, void*) = async_initable_newv_async;
extern void g_async_initable_new_valist_async(long, char*, void*, int, GCancellable*, void*, void*) = async_initable_new_valist_async;
extern GObject* g_async_initable_new_finish(GAsyncInitable*, GAsyncResult*, GError**) = async_initable_new_finish;
extern long g_async_result_get_type() = async_result_get_type;
extern void* g_async_result_get_user_data(GAsyncResult*) = async_result_get_user_data;
extern GObject* g_async_result_get_source_object(GAsyncResult*) = async_result_get_source_object;
extern long g_input_stream_get_type() = input_stream_get_type;
extern long g_input_stream_read(GInputStream*, void*, long, GCancellable*, GError**) = input_stream_read;
extern int g_input_stream_read_all(GInputStream*, void*, long, long*, GCancellable*, GError**) = input_stream_read_all;
extern long g_input_stream_skip(GInputStream*, long, GCancellable*, GError**) = input_stream_skip;
extern int g_input_stream_close(GInputStream*, GCancellable*, GError**) = input_stream_close;
extern void g_input_stream_read_async(GInputStream*, void*, long, int, GCancellable*, void*, void*) = input_stream_read_async;
extern long g_input_stream_read_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_read_finish;
extern void g_input_stream_skip_async(GInputStream*, long, int, GCancellable*, void*, void*) = input_stream_skip_async;
extern long g_input_stream_skip_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_skip_finish;
extern void g_input_stream_close_async(GInputStream*, int, GCancellable*, void*, void*) = input_stream_close_async;
extern int g_input_stream_close_finish(GInputStream*, GAsyncResult*, GError**) = input_stream_close_finish;
extern int g_input_stream_is_closed(GInputStream*) = input_stream_is_closed;
extern int g_input_stream_has_pending(GInputStream*) = input_stream_has_pending;
extern int g_input_stream_set_pending(GInputStream*, GError**) = input_stream_set_pending;
extern void g_input_stream_clear_pending(GInputStream*) = input_stream_clear_pending;
extern long g_filter_input_stream_get_type() = filter_input_stream_get_type;
extern GInputStream* g_filter_input_stream_get_base_stream(GFilterInputStream*) = filter_input_stream_get_base_stream;
extern int g_filter_input_stream_get_close_base_stream(GFilterInputStream*) = filter_input_stream_get_close_base_stream;
extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream*, int) = filter_input_stream_set_close_base_stream;
extern long g_buffered_input_stream_get_type() = buffered_input_stream_get_type;
extern GInputStream* g_buffered_input_stream_new(GInputStream*) = buffered_input_stream_new;
extern GInputStream* g_buffered_input_stream_new_sized(GInputStream*, long) = buffered_input_stream_new_sized;
extern long g_buffered_input_stream_get_buffer_size(GBufferedInputStream*) = buffered_input_stream_get_buffer_size;
extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream*, long) = buffered_input_stream_set_buffer_size;
extern long g_buffered_input_stream_get_available(GBufferedInputStream*) = buffered_input_stream_get_available;
extern long g_buffered_input_stream_peek(GBufferedInputStream*, void*, long, long) = buffered_input_stream_peek;
extern void* g_buffered_input_stream_peek_buffer(GBufferedInputStream*, long*) = buffered_input_stream_peek_buffer;
extern long g_buffered_input_stream_fill(GBufferedInputStream*, long, GCancellable*, GError**) = buffered_input_stream_fill;
extern void g_buffered_input_stream_fill_async(GBufferedInputStream*, long, int, GCancellable*, void*, void*) = buffered_input_stream_fill_async;
extern long g_buffered_input_stream_fill_finish(GBufferedInputStream*, GAsyncResult*, GError**) = buffered_input_stream_fill_finish;
extern int g_buffered_input_stream_read_byte(GBufferedInputStream*, GCancellable*, GError**) = buffered_input_stream_read_byte;
extern long g_output_stream_get_type() = output_stream_get_type;
extern long g_output_stream_write(GOutputStream*, void*, long, GCancellable*, GError**) = output_stream_write;
extern int g_output_stream_write_all(GOutputStream*, void*, long, long*, GCancellable*, GError**) = output_stream_write_all;
extern long g_output_stream_splice(GOutputStream*, GInputStream*, int, GCancellable*, GError**) = output_stream_splice;
extern int g_output_stream_flush(GOutputStream*, GCancellable*, GError**) = output_stream_flush;
extern int g_output_stream_close(GOutputStream*, GCancellable*, GError**) = output_stream_close;
extern void g_output_stream_write_async(GOutputStream*, void*, long, int, GCancellable*, void*, void*) = output_stream_write_async;
extern long g_output_stream_write_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_write_finish;
extern void g_output_stream_splice_async(GOutputStream*, GInputStream*, int, int, GCancellable*, void*, void*) = output_stream_splice_async;
extern long g_output_stream_splice_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_splice_finish;
extern void g_output_stream_flush_async(GOutputStream*, int, GCancellable*, void*, void*) = output_stream_flush_async;
extern int g_output_stream_flush_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_flush_finish;
extern void g_output_stream_close_async(GOutputStream*, int, GCancellable*, void*, void*) = output_stream_close_async;
extern int g_output_stream_close_finish(GOutputStream*, GAsyncResult*, GError**) = output_stream_close_finish;
extern int g_output_stream_is_closed(GOutputStream*) = output_stream_is_closed;
extern int g_output_stream_is_closing(GOutputStream*) = output_stream_is_closing;
extern int g_output_stream_has_pending(GOutputStream*) = output_stream_has_pending;
extern int g_output_stream_set_pending(GOutputStream*, GError**) = output_stream_set_pending;
extern void g_output_stream_clear_pending(GOutputStream*) = output_stream_clear_pending;
extern long g_filter_output_stream_get_type() = filter_output_stream_get_type;
extern GOutputStream* g_filter_output_stream_get_base_stream(GFilterOutputStream*) = filter_output_stream_get_base_stream;
extern int g_filter_output_stream_get_close_base_stream(GFilterOutputStream*) = filter_output_stream_get_close_base_stream;
extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream*, int) = filter_output_stream_set_close_base_stream;
extern long g_buffered_output_stream_get_type() = buffered_output_stream_get_type;
extern GOutputStream* g_buffered_output_stream_new(GOutputStream*) = buffered_output_stream_new;
extern GOutputStream* g_buffered_output_stream_new_sized(GOutputStream*, long) = buffered_output_stream_new_sized;
extern long g_buffered_output_stream_get_buffer_size(GBufferedOutputStream*) = buffered_output_stream_get_buffer_size;
extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream*, long) = buffered_output_stream_set_buffer_size;
extern int g_buffered_output_stream_get_auto_grow(GBufferedOutputStream*) = buffered_output_stream_get_auto_grow;
extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream*, int) = buffered_output_stream_set_auto_grow;
extern long g_cancellable_get_type() = cancellable_get_type;
extern GCancellable* g_cancellable_new() = cancellable_new;
extern int g_cancellable_is_cancelled(GCancellable*) = cancellable_is_cancelled;
extern int g_cancellable_set_error_if_cancelled(GCancellable*, GError**) = cancellable_set_error_if_cancelled;
extern int g_cancellable_get_fd(GCancellable*) = cancellable_get_fd;
extern int g_cancellable_make_pollfd(GCancellable*, GPollFD*) = cancellable_make_pollfd;
extern void g_cancellable_release_fd(GCancellable*) = cancellable_release_fd;
extern GSource* g_cancellable_source_new(GCancellable*) = cancellable_source_new;
extern GCancellable* g_cancellable_get_current() = cancellable_get_current;
extern void g_cancellable_push_current(GCancellable*) = cancellable_push_current;
extern void g_cancellable_pop_current(GCancellable*) = cancellable_pop_current;
extern void g_cancellable_reset(GCancellable*) = cancellable_reset;
extern long g_cancellable_connect(GCancellable*, void*, void*, void*) = cancellable_connect;
extern void g_cancellable_disconnect(GCancellable*, long) = cancellable_disconnect;
extern void g_cancellable_cancel(GCancellable*) = cancellable_cancel;
extern long g_converter_get_type() = converter_get_type;
extern int g_converter_convert(GConverter*, void*, long, void*, long, int, long*, long*, GError**) = converter_convert;
extern void g_converter_reset(GConverter*) = converter_reset;
extern long g_charset_converter_get_type() = charset_converter_get_type;
extern GCharsetConverter* g_charset_converter_new(char*, char*, GError**) = charset_converter_new;
extern void g_charset_converter_set_use_fallback(GCharsetConverter*, int) = charset_converter_set_use_fallback;
extern int g_charset_converter_get_use_fallback(GCharsetConverter*) = charset_converter_get_use_fallback;
extern int g_charset_converter_get_num_fallbacks(GCharsetConverter*) = charset_converter_get_num_fallbacks;
extern int g_content_type_equals(char*, char*) = content_type_equals;
extern int g_content_type_is_a(char*, char*) = content_type_is_a;
extern int g_content_type_is_unknown(char*) = content_type_is_unknown;
extern char* g_content_type_get_description(char*) = content_type_get_description;
extern char* g_content_type_get_mime_type(char*) = content_type_get_mime_type;
extern GIcon* g_content_type_get_icon(char*) = content_type_get_icon;
extern int g_content_type_can_be_executable(char*) = content_type_can_be_executable;
extern char* g_content_type_from_mime_type(char*) = content_type_from_mime_type;
extern char* g_content_type_guess(char*, char*, long, int*) = content_type_guess;
extern char** g_content_type_guess_for_tree(GFile*) = content_type_guess_for_tree;
extern GList* g_content_types_get_registered() = content_types_get_registered;
extern long g_converter_input_stream_get_type() = converter_input_stream_get_type;
extern GInputStream* g_converter_input_stream_new(GInputStream*, GConverter*) = converter_input_stream_new;
extern GConverter* g_converter_input_stream_get_converter(GConverterInputStream*) = converter_input_stream_get_converter;
extern long g_converter_output_stream_get_type() = converter_output_stream_get_type;
extern GOutputStream* g_converter_output_stream_new(GOutputStream*, GConverter*) = converter_output_stream_new;
extern GConverter* g_converter_output_stream_get_converter(GConverterOutputStream*) = converter_output_stream_get_converter;
extern long g_credentials_get_type() = credentials_get_type;
extern GCredentials* g_credentials_new() = credentials_new;
extern char* g_credentials_to_string(GCredentials*) = credentials_to_string;
extern void* g_credentials_get_native(GCredentials*, int) = credentials_get_native;
extern void g_credentials_set_native(GCredentials*, int, void*) = credentials_set_native;
extern int g_credentials_is_same_user(GCredentials*, GCredentials*, GError**) = credentials_is_same_user;
extern int g_credentials_get_unix_user(GCredentials*, GError**) = credentials_get_unix_user;
extern int g_credentials_set_unix_user(GCredentials*, int, GError**) = credentials_set_unix_user;
extern long g_data_input_stream_get_type() = data_input_stream_get_type;
extern GDataInputStream* g_data_input_stream_new(GInputStream*) = data_input_stream_new;
extern void g_data_input_stream_set_byte_order(GDataInputStream*, int) = data_input_stream_set_byte_order;
extern int g_data_input_stream_get_byte_order(GDataInputStream*) = data_input_stream_get_byte_order;
extern void g_data_input_stream_set_newline_type(GDataInputStream*, int) = data_input_stream_set_newline_type;
extern int g_data_input_stream_get_newline_type(GDataInputStream*) = data_input_stream_get_newline_type;
extern char g_data_input_stream_read_byte(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_byte;
extern short g_data_input_stream_read_int16(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int16;
extern short g_data_input_stream_read_uint16(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint16;
extern int g_data_input_stream_read_int32(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int32;
extern int g_data_input_stream_read_uint32(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint32;
extern long g_data_input_stream_read_int64(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_int64;
extern long g_data_input_stream_read_uint64(GDataInputStream*, GCancellable*, GError**) = data_input_stream_read_uint64;
extern char* g_data_input_stream_read_line(GDataInputStream*, long*, GCancellable*, GError**) = data_input_stream_read_line;
extern char* g_data_input_stream_read_line_utf8(GDataInputStream*, long*, GCancellable*, GError**) = data_input_stream_read_line_utf8;
extern void g_data_input_stream_read_line_async(GDataInputStream*, int, GCancellable*, void*, void*) = data_input_stream_read_line_async;
extern char* g_data_input_stream_read_line_finish(GDataInputStream*, GAsyncResult*, long*, GError**) = data_input_stream_read_line_finish;
extern char* g_data_input_stream_read_line_finish_utf8(GDataInputStream*, GAsyncResult*, long*, GError**) = data_input_stream_read_line_finish_utf8;
extern char* g_data_input_stream_read_until(GDataInputStream*, char*, long*, GCancellable*, GError**) = data_input_stream_read_until;
extern void g_data_input_stream_read_until_async(GDataInputStream*, char*, int, GCancellable*, void*, void*) = data_input_stream_read_until_async;
extern char* g_data_input_stream_read_until_finish(GDataInputStream*, GAsyncResult*, long*, GError**) = data_input_stream_read_until_finish;
extern char* g_data_input_stream_read_upto(GDataInputStream*, char*, long, long*, GCancellable*, GError**) = data_input_stream_read_upto;
extern void g_data_input_stream_read_upto_async(GDataInputStream*, char*, long, int, GCancellable*, void*, void*) = data_input_stream_read_upto_async;
extern char* g_data_input_stream_read_upto_finish(GDataInputStream*, GAsyncResult*, long*, GError**) = data_input_stream_read_upto_finish;
extern long g_data_output_stream_get_type() = data_output_stream_get_type;
extern GDataOutputStream* g_data_output_stream_new(GOutputStream*) = data_output_stream_new;
extern void g_data_output_stream_set_byte_order(GDataOutputStream*, int) = data_output_stream_set_byte_order;
extern int g_data_output_stream_get_byte_order(GDataOutputStream*) = data_output_stream_get_byte_order;
extern int g_data_output_stream_put_byte(GDataOutputStream*, char, GCancellable*, GError**) = data_output_stream_put_byte;
extern int g_data_output_stream_put_int16(GDataOutputStream*, short, GCancellable*, GError**) = data_output_stream_put_int16;
extern int g_data_output_stream_put_uint16(GDataOutputStream*, short, GCancellable*, GError**) = data_output_stream_put_uint16;
extern int g_data_output_stream_put_int32(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_int32;
extern int g_data_output_stream_put_uint32(GDataOutputStream*, int, GCancellable*, GError**) = data_output_stream_put_uint32;
extern int g_data_output_stream_put_int64(GDataOutputStream*, long, GCancellable*, GError**) = data_output_stream_put_int64;
extern int g_data_output_stream_put_uint64(GDataOutputStream*, long, GCancellable*, GError**) = data_output_stream_put_uint64;
extern int g_data_output_stream_put_string(GDataOutputStream*, char*, GCancellable*, GError**) = data_output_stream_put_string;
extern int g_dbus_is_address(char*) = dbus_is_address;
extern int g_dbus_is_supported_address(char*, GError**) = dbus_is_supported_address;
extern void g_dbus_address_get_stream(char*, GCancellable*, void*, void*) = dbus_address_get_stream;
extern GIOStream* g_dbus_address_get_stream_finish(GAsyncResult*, char**, GError**) = dbus_address_get_stream_finish;
extern GIOStream* g_dbus_address_get_stream_sync(char*, char**, GCancellable*, GError**) = dbus_address_get_stream_sync;
extern char* g_dbus_address_get_for_bus_sync(int, GCancellable*, GError**) = dbus_address_get_for_bus_sync;
extern long g_dbus_auth_observer_get_type() = dbus_auth_observer_get_type;
extern GDBusAuthObserver* g_dbus_auth_observer_new() = dbus_auth_observer_new;
extern int g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver*, GIOStream*, GCredentials*) = dbus_auth_observer_authorize_authenticated_peer;
extern long g_dbus_connection_get_type() = dbus_connection_get_type;
extern void g_bus_get(int, GCancellable*, void*, void*) = bus_get;
extern GDBusConnection* g_bus_get_finish(GAsyncResult*, GError**) = bus_get_finish;
extern GDBusConnection* g_bus_get_sync(int, GCancellable*, GError**) = bus_get_sync;
extern void g_dbus_connection_new(GIOStream*, char*, int, GDBusAuthObserver*, GCancellable*, void*, void*) = dbus_connection_new;
extern GDBusConnection* g_dbus_connection_new_finish(GAsyncResult*, GError**) = dbus_connection_new_finish;
extern GDBusConnection* g_dbus_connection_new_sync(GIOStream*, char*, int, GDBusAuthObserver*, GCancellable*, GError**) = dbus_connection_new_sync;
extern void g_dbus_connection_new_for_address(char*, int, GDBusAuthObserver*, GCancellable*, void*, void*) = dbus_connection_new_for_address;
extern GDBusConnection* g_dbus_connection_new_for_address_finish(GAsyncResult*, GError**) = dbus_connection_new_for_address_finish;
extern GDBusConnection* g_dbus_connection_new_for_address_sync(char*, int, GDBusAuthObserver*, GCancellable*, GError**) = dbus_connection_new_for_address_sync;
extern void g_dbus_connection_start_message_processing(GDBusConnection*) = dbus_connection_start_message_processing;
extern int g_dbus_connection_is_closed(GDBusConnection*) = dbus_connection_is_closed;
extern GIOStream* g_dbus_connection_get_stream(GDBusConnection*) = dbus_connection_get_stream;
extern char* g_dbus_connection_get_guid(GDBusConnection*) = dbus_connection_get_guid;
extern char* g_dbus_connection_get_unique_name(GDBusConnection*) = dbus_connection_get_unique_name;
extern GCredentials* g_dbus_connection_get_peer_credentials(GDBusConnection*) = dbus_connection_get_peer_credentials;
extern int g_dbus_connection_get_exit_on_close(GDBusConnection*) = dbus_connection_get_exit_on_close;
extern void g_dbus_connection_set_exit_on_close(GDBusConnection*, int) = dbus_connection_set_exit_on_close;
extern int g_dbus_connection_get_capabilities(GDBusConnection*) = dbus_connection_get_capabilities;
extern void g_dbus_connection_close(GDBusConnection*, GCancellable*, void*, void*) = dbus_connection_close;
extern int g_dbus_connection_close_finish(GDBusConnection*, GAsyncResult*, GError**) = dbus_connection_close_finish;
extern int g_dbus_connection_close_sync(GDBusConnection*, GCancellable*, GError**) = dbus_connection_close_sync;
extern void g_dbus_connection_flush(GDBusConnection*, GCancellable*, void*, void*) = dbus_connection_flush;
extern int g_dbus_connection_flush_finish(GDBusConnection*, GAsyncResult*, GError**) = dbus_connection_flush_finish;
extern int g_dbus_connection_flush_sync(GDBusConnection*, GCancellable*, GError**) = dbus_connection_flush_sync;
extern int g_dbus_connection_send_message(GDBusConnection*, GDBusMessage*, int, int*, GError**) = dbus_connection_send_message;
extern void g_dbus_connection_send_message_with_reply(GDBusConnection*, GDBusMessage*, int, int, int*, GCancellable*, void*, void*) = dbus_connection_send_message_with_reply;
extern GDBusMessage* g_dbus_connection_send_message_with_reply_finish(GDBusConnection*, GAsyncResult*, GError**) = dbus_connection_send_message_with_reply_finish;
extern GDBusMessage* g_dbus_connection_send_message_with_reply_sync(GDBusConnection*, GDBusMessage*, int, int, int*, GCancellable*, GError**) = dbus_connection_send_message_with_reply_sync;
extern int g_dbus_connection_emit_signal(GDBusConnection*, char*, char*, char*, char*, GVariant*, GError**) = dbus_connection_emit_signal;
extern void g_dbus_connection_call(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, int, int, GCancellable*, void*, void*) = dbus_connection_call;
extern GVariant* g_dbus_connection_call_finish(GDBusConnection*, GAsyncResult*, GError**) = dbus_connection_call_finish;
extern GVariant* g_dbus_connection_call_sync(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, int, int, GCancellable*, GError**) = dbus_connection_call_sync;
extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, int, int, GUnixFDList*, GCancellable*, void*, void*) = dbus_connection_call_with_unix_fd_list;
extern GVariant* g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection*, GUnixFDList**, GAsyncResult*, GError**) = dbus_connection_call_with_unix_fd_list_finish;
extern GVariant* g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, int, int, GUnixFDList*, GUnixFDList**, GCancellable*, GError**) = dbus_connection_call_with_unix_fd_list_sync;
extern int g_dbus_connection_register_object(GDBusConnection*, char*, GDBusInterfaceInfo*, GDBusInterfaceVTable*, void*, void*, GError**) = dbus_connection_register_object;
extern int g_dbus_connection_unregister_object(GDBusConnection*, int) = dbus_connection_unregister_object;
extern int g_dbus_connection_register_subtree(GDBusConnection*, char*, GDBusSubtreeVTable*, int, void*, void*, GError**) = dbus_connection_register_subtree;
extern int g_dbus_connection_unregister_subtree(GDBusConnection*, int) = dbus_connection_unregister_subtree;
extern int g_dbus_connection_signal_subscribe(GDBusConnection*, char*, char*, char*, char*, char*, int, void*, void*, void*) = dbus_connection_signal_subscribe;
extern void g_dbus_connection_signal_unsubscribe(GDBusConnection*, int) = dbus_connection_signal_unsubscribe;
extern int g_dbus_connection_add_filter(GDBusConnection*, void*, void*, void*) = dbus_connection_add_filter;
extern void g_dbus_connection_remove_filter(GDBusConnection*, int) = dbus_connection_remove_filter;
extern int g_dbus_error_quark() = dbus_error_quark;
extern int g_dbus_error_is_remote_error(GError*) = dbus_error_is_remote_error;
extern char* g_dbus_error_get_remote_error(GError*) = dbus_error_get_remote_error;
extern int g_dbus_error_strip_remote_error(GError*) = dbus_error_strip_remote_error;
extern int g_dbus_error_register_error(int, int, char*) = dbus_error_register_error;
extern int g_dbus_error_unregister_error(int, int, char*) = dbus_error_unregister_error;
extern void g_dbus_error_register_error_domain(char*, long*, GDBusErrorEntry*, int) = dbus_error_register_error_domain;
extern GError* g_dbus_error_new_for_dbus_error(char*, char*) = dbus_error_new_for_dbus_error;
extern void g_dbus_error_set_dbus_error(GError**, char*, char*, char*, ...) = dbus_error_set_dbus_error;
extern void g_dbus_error_set_dbus_error_valist(GError**, char*, char*, char*, void*) = dbus_error_set_dbus_error_valist;
extern char* g_dbus_error_encode_gerror(GError*) = dbus_error_encode_gerror;
extern char* g_dbus_annotation_info_lookup(GDBusAnnotationInfo**, char*) = dbus_annotation_info_lookup;
extern GDBusMethodInfo* g_dbus_interface_info_lookup_method(GDBusInterfaceInfo*, char*) = dbus_interface_info_lookup_method;
extern GDBusSignalInfo* g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo*, char*) = dbus_interface_info_lookup_signal;
extern GDBusPropertyInfo* g_dbus_interface_info_lookup_property(GDBusInterfaceInfo*, char*) = dbus_interface_info_lookup_property;
extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo*) = dbus_interface_info_cache_build;
extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo*) = dbus_interface_info_cache_release;
extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo*, int, GString*) = dbus_interface_info_generate_xml;
extern GDBusNodeInfo* g_dbus_node_info_new_for_xml(char*, GError**) = dbus_node_info_new_for_xml;
extern GDBusInterfaceInfo* g_dbus_node_info_lookup_interface(GDBusNodeInfo*, char*) = dbus_node_info_lookup_interface;
extern void g_dbus_node_info_generate_xml(GDBusNodeInfo*, int, GString*) = dbus_node_info_generate_xml;
extern GDBusNodeInfo* g_dbus_node_info_ref(GDBusNodeInfo*) = dbus_node_info_ref;
extern GDBusInterfaceInfo* g_dbus_interface_info_ref(GDBusInterfaceInfo*) = dbus_interface_info_ref;
extern GDBusMethodInfo* g_dbus_method_info_ref(GDBusMethodInfo*) = dbus_method_info_ref;
extern GDBusSignalInfo* g_dbus_signal_info_ref(GDBusSignalInfo*) = dbus_signal_info_ref;
extern GDBusPropertyInfo* g_dbus_property_info_ref(GDBusPropertyInfo*) = dbus_property_info_ref;
extern GDBusArgInfo* g_dbus_arg_info_ref(GDBusArgInfo*) = dbus_arg_info_ref;
extern GDBusAnnotationInfo* g_dbus_annotation_info_ref(GDBusAnnotationInfo*) = dbus_annotation_info_ref;
extern void g_dbus_node_info_unref(GDBusNodeInfo*) = dbus_node_info_unref;
extern void g_dbus_interface_info_unref(GDBusInterfaceInfo*) = dbus_interface_info_unref;
extern void g_dbus_method_info_unref(GDBusMethodInfo*) = dbus_method_info_unref;
extern void g_dbus_signal_info_unref(GDBusSignalInfo*) = dbus_signal_info_unref;
extern void g_dbus_property_info_unref(GDBusPropertyInfo*) = dbus_property_info_unref;
extern void g_dbus_arg_info_unref(GDBusArgInfo*) = dbus_arg_info_unref;
extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo*) = dbus_annotation_info_unref;
extern long g_dbus_node_info_get_type() = dbus_node_info_get_type;
extern long g_dbus_interface_info_get_type() = dbus_interface_info_get_type;
extern long g_dbus_method_info_get_type() = dbus_method_info_get_type;
extern long g_dbus_signal_info_get_type() = dbus_signal_info_get_type;
extern long g_dbus_property_info_get_type() = dbus_property_info_get_type;
extern long g_dbus_arg_info_get_type() = dbus_arg_info_get_type;
extern long g_dbus_annotation_info_get_type() = dbus_annotation_info_get_type;
extern long g_dbus_message_get_type() = dbus_message_get_type;
extern GDBusMessage* g_dbus_message_new() = dbus_message_new;
extern GDBusMessage* g_dbus_message_new_signal(char*, char*, char*) = dbus_message_new_signal;
extern GDBusMessage* g_dbus_message_new_method_call(char*, char*, char*, char*) = dbus_message_new_method_call;
extern GDBusMessage* g_dbus_message_new_method_reply(GDBusMessage*) = dbus_message_new_method_reply;
extern GDBusMessage* g_dbus_message_new_method_error(GDBusMessage*, char*, char*, ...) = dbus_message_new_method_error;
extern GDBusMessage* g_dbus_message_new_method_error_valist(GDBusMessage*, char*, char*, void*) = dbus_message_new_method_error_valist;
extern GDBusMessage* g_dbus_message_new_method_error_literal(GDBusMessage*, char*, char*) = dbus_message_new_method_error_literal;
extern char* g_dbus_message_print(GDBusMessage*, int) = dbus_message_print;
extern int g_dbus_message_get_locked(GDBusMessage*) = dbus_message_get_locked;
extern void g_dbus_message_lock(GDBusMessage*) = dbus_message_lock;
extern GDBusMessage* g_dbus_message_copy(GDBusMessage*, GError**) = dbus_message_copy;
extern int g_dbus_message_get_byte_order(GDBusMessage*) = dbus_message_get_byte_order;
extern void g_dbus_message_set_byte_order(GDBusMessage*, int) = dbus_message_set_byte_order;
extern int g_dbus_message_get_message_type(GDBusMessage*) = dbus_message_get_message_type;
extern void g_dbus_message_set_message_type(GDBusMessage*, int) = dbus_message_set_message_type;
extern int g_dbus_message_get_flags(GDBusMessage*) = dbus_message_get_flags;
extern void g_dbus_message_set_flags(GDBusMessage*, int) = dbus_message_set_flags;
extern int g_dbus_message_get_serial(GDBusMessage*) = dbus_message_get_serial;
extern void g_dbus_message_set_serial(GDBusMessage*, int) = dbus_message_set_serial;
extern GVariant* g_dbus_message_get_header(GDBusMessage*, int) = dbus_message_get_header;
extern void g_dbus_message_set_header(GDBusMessage*, int, GVariant*) = dbus_message_set_header;
extern char* g_dbus_message_get_header_fields(GDBusMessage*) = dbus_message_get_header_fields;
extern GVariant* g_dbus_message_get_body(GDBusMessage*) = dbus_message_get_body;
extern void g_dbus_message_set_body(GDBusMessage*, GVariant*) = dbus_message_set_body;
extern GUnixFDList* g_dbus_message_get_unix_fd_list(GDBusMessage*) = dbus_message_get_unix_fd_list;
extern void g_dbus_message_set_unix_fd_list(GDBusMessage*, GUnixFDList*) = dbus_message_set_unix_fd_list;
extern int g_dbus_message_get_reply_serial(GDBusMessage*) = dbus_message_get_reply_serial;
extern void g_dbus_message_set_reply_serial(GDBusMessage*, int) = dbus_message_set_reply_serial;
extern char* g_dbus_message_get_interface(GDBusMessage*) = dbus_message_get_interface;
extern void g_dbus_message_set_interface(GDBusMessage*, char*) = dbus_message_set_interface;
extern char* g_dbus_message_get_member(GDBusMessage*) = dbus_message_get_member;
extern void g_dbus_message_set_member(GDBusMessage*, char*) = dbus_message_set_member;
extern char* g_dbus_message_get_path(GDBusMessage*) = dbus_message_get_path;
extern void g_dbus_message_set_path(GDBusMessage*, char*) = dbus_message_set_path;
extern char* g_dbus_message_get_sender(GDBusMessage*) = dbus_message_get_sender;
extern void g_dbus_message_set_sender(GDBusMessage*, char*) = dbus_message_set_sender;
extern char* g_dbus_message_get_destination(GDBusMessage*) = dbus_message_get_destination;
extern void g_dbus_message_set_destination(GDBusMessage*, char*) = dbus_message_set_destination;
extern char* g_dbus_message_get_error_name(GDBusMessage*) = dbus_message_get_error_name;
extern void g_dbus_message_set_error_name(GDBusMessage*, char*) = dbus_message_set_error_name;
extern char* g_dbus_message_get_signature(GDBusMessage*) = dbus_message_get_signature;
extern void g_dbus_message_set_signature(GDBusMessage*, char*) = dbus_message_set_signature;
extern int g_dbus_message_get_num_unix_fds(GDBusMessage*) = dbus_message_get_num_unix_fds;
extern void g_dbus_message_set_num_unix_fds(GDBusMessage*, int) = dbus_message_set_num_unix_fds;
extern char* g_dbus_message_get_arg0(GDBusMessage*) = dbus_message_get_arg0;
extern GDBusMessage* g_dbus_message_new_from_blob(char*, long, int, GError**) = dbus_message_new_from_blob;
extern long g_dbus_message_bytes_needed(char*, long, GError**) = dbus_message_bytes_needed;
extern char* g_dbus_message_to_blob(GDBusMessage*, long*, int, GError**) = dbus_message_to_blob;
extern int g_dbus_message_to_gerror(GDBusMessage*, GError**) = dbus_message_to_gerror;
extern long g_dbus_method_invocation_get_type() = dbus_method_invocation_get_type;
extern char* g_dbus_method_invocation_get_sender(GDBusMethodInvocation*) = dbus_method_invocation_get_sender;
extern char* g_dbus_method_invocation_get_object_path(GDBusMethodInvocation*) = dbus_method_invocation_get_object_path;
extern char* g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation*) = dbus_method_invocation_get_interface_name;
extern char* g_dbus_method_invocation_get_method_name(GDBusMethodInvocation*) = dbus_method_invocation_get_method_name;
extern GDBusMethodInfo* g_dbus_method_invocation_get_method_info(GDBusMethodInvocation*) = dbus_method_invocation_get_method_info;
extern GDBusConnection* g_dbus_method_invocation_get_connection(GDBusMethodInvocation*) = dbus_method_invocation_get_connection;
extern GDBusMessage* g_dbus_method_invocation_get_message(GDBusMethodInvocation*) = dbus_method_invocation_get_message;
extern GVariant* g_dbus_method_invocation_get_parameters(GDBusMethodInvocation*) = dbus_method_invocation_get_parameters;
extern void* g_dbus_method_invocation_get_user_data(GDBusMethodInvocation*) = dbus_method_invocation_get_user_data;
extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation*, GVariant*) = dbus_method_invocation_return_value;
extern void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation*, GVariant*, GUnixFDList*) = dbus_method_invocation_return_value_with_unix_fd_list;
extern void g_dbus_method_invocation_return_error(GDBusMethodInvocation*, int, int, char*, ...) = dbus_method_invocation_return_error;
extern void g_dbus_method_invocation_return_error_valist(GDBusMethodInvocation*, int, int, char*, void*) = dbus_method_invocation_return_error_valist;
extern void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation*, int, int, char*) = dbus_method_invocation_return_error_literal;
extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation*, GError*) = dbus_method_invocation_return_gerror;
extern void g_dbus_method_invocation_take_error(GDBusMethodInvocation*, GError*) = dbus_method_invocation_take_error;
extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation*, char*, char*) = dbus_method_invocation_return_dbus_error;
extern int g_bus_own_name(int, char*, int, void*, void*, void*, void*, void*) = bus_own_name;
extern int g_bus_own_name_on_connection(GDBusConnection*, char*, int, void*, void*, void*, void*) = bus_own_name_on_connection;
extern int g_bus_own_name_with_closures(int, char*, int, GClosure*, GClosure*, GClosure*) = bus_own_name_with_closures;
extern int g_bus_own_name_on_connection_with_closures(GDBusConnection*, char*, int, GClosure*, GClosure*) = bus_own_name_on_connection_with_closures;
extern void g_bus_unown_name(int) = bus_unown_name;
extern int g_bus_watch_name(int, char*, int, void*, void*, void*, void*) = bus_watch_name;
extern int g_bus_watch_name_on_connection(GDBusConnection*, char*, int, void*, void*, void*, void*) = bus_watch_name_on_connection;
extern int g_bus_watch_name_with_closures(int, char*, int, GClosure*, GClosure*) = bus_watch_name_with_closures;
extern int g_bus_watch_name_on_connection_with_closures(GDBusConnection*, char*, int, GClosure*, GClosure*) = bus_watch_name_on_connection_with_closures;
extern void g_bus_unwatch_name(int) = bus_unwatch_name;
extern long g_dbus_proxy_get_type() = dbus_proxy_get_type;
extern void g_dbus_proxy_new(GDBusConnection*, int, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, void*, void*) = dbus_proxy_new;
extern GDBusProxy* g_dbus_proxy_new_finish(GAsyncResult*, GError**) = dbus_proxy_new_finish;
extern GDBusProxy* g_dbus_proxy_new_sync(GDBusConnection*, int, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GError**) = dbus_proxy_new_sync;
extern void g_dbus_proxy_new_for_bus(int, int, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, void*, void*) = dbus_proxy_new_for_bus;
extern GDBusProxy* g_dbus_proxy_new_for_bus_finish(GAsyncResult*, GError**) = dbus_proxy_new_for_bus_finish;
extern GDBusProxy* g_dbus_proxy_new_for_bus_sync(int, int, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GError**) = dbus_proxy_new_for_bus_sync;
extern GDBusConnection* g_dbus_proxy_get_connection(GDBusProxy*) = dbus_proxy_get_connection;
extern int g_dbus_proxy_get_flags(GDBusProxy*) = dbus_proxy_get_flags;
extern char* g_dbus_proxy_get_name(GDBusProxy*) = dbus_proxy_get_name;
extern char* g_dbus_proxy_get_name_owner(GDBusProxy*) = dbus_proxy_get_name_owner;
extern char* g_dbus_proxy_get_object_path(GDBusProxy*) = dbus_proxy_get_object_path;
extern char* g_dbus_proxy_get_interface_name(GDBusProxy*) = dbus_proxy_get_interface_name;
extern int g_dbus_proxy_get_default_timeout(GDBusProxy*) = dbus_proxy_get_default_timeout;
extern void g_dbus_proxy_set_default_timeout(GDBusProxy*, int) = dbus_proxy_set_default_timeout;
extern GDBusInterfaceInfo* g_dbus_proxy_get_interface_info(GDBusProxy*) = dbus_proxy_get_interface_info;
extern void g_dbus_proxy_set_interface_info(GDBusProxy*, GDBusInterfaceInfo*) = dbus_proxy_set_interface_info;
extern GVariant* g_dbus_proxy_get_cached_property(GDBusProxy*, char*) = dbus_proxy_get_cached_property;
extern void g_dbus_proxy_set_cached_property(GDBusProxy*, char*, GVariant*) = dbus_proxy_set_cached_property;
extern char** g_dbus_proxy_get_cached_property_names(GDBusProxy*) = dbus_proxy_get_cached_property_names;
extern void g_dbus_proxy_call(GDBusProxy*, char*, GVariant*, int, int, GCancellable*, void*, void*) = dbus_proxy_call;
extern GVariant* g_dbus_proxy_call_finish(GDBusProxy*, GAsyncResult*, GError**) = dbus_proxy_call_finish;
extern GVariant* g_dbus_proxy_call_sync(GDBusProxy*, char*, GVariant*, int, int, GCancellable*, GError**) = dbus_proxy_call_sync;
extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy*, char*, GVariant*, int, int, GUnixFDList*, GCancellable*, void*, void*) = dbus_proxy_call_with_unix_fd_list;
extern GVariant* g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy*, GUnixFDList**, GAsyncResult*, GError**) = dbus_proxy_call_with_unix_fd_list_finish;
extern GVariant* g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy*, char*, GVariant*, int, int, GUnixFDList*, GUnixFDList**, GCancellable*, GError**) = dbus_proxy_call_with_unix_fd_list_sync;
extern long g_dbus_server_get_type() = dbus_server_get_type;
extern GDBusServer* g_dbus_server_new_sync(char*, int, char*, GDBusAuthObserver*, GCancellable*, GError**) = dbus_server_new_sync;
extern char* g_dbus_server_get_client_address(GDBusServer*) = dbus_server_get_client_address;
extern char* g_dbus_server_get_guid(GDBusServer*) = dbus_server_get_guid;
extern int g_dbus_server_get_flags(GDBusServer*) = dbus_server_get_flags;
extern void g_dbus_server_start(GDBusServer*) = dbus_server_start;
extern void g_dbus_server_stop(GDBusServer*) = dbus_server_stop;
extern int g_dbus_server_is_active(GDBusServer*) = dbus_server_is_active;
extern int g_dbus_is_guid(char*) = dbus_is_guid;
extern char* g_dbus_generate_guid() = dbus_generate_guid;
extern int g_dbus_is_name(char*) = dbus_is_name;
extern int g_dbus_is_unique_name(char*) = dbus_is_unique_name;
extern int g_dbus_is_member_name(char*) = dbus_is_member_name;
extern int g_dbus_is_interface_name(char*) = dbus_is_interface_name;
extern void g_dbus_gvariant_to_gvalue(GVariant*, GValue*) = dbus_gvariant_to_gvalue;
extern GVariant* g_dbus_gvalue_to_gvariant(GValue*, GVariantType*) = dbus_gvalue_to_gvariant;
extern long g_drive_get_type() = drive_get_type;
extern char* g_drive_get_name(GDrive*) = drive_get_name;
extern GIcon* g_drive_get_icon(GDrive*) = drive_get_icon;
extern int g_drive_has_volumes(GDrive*) = drive_has_volumes;
extern GList* g_drive_get_volumes(GDrive*) = drive_get_volumes;
extern int g_drive_is_media_removable(GDrive*) = drive_is_media_removable;
extern int g_drive_has_media(GDrive*) = drive_has_media;
extern int g_drive_is_media_check_automatic(GDrive*) = drive_is_media_check_automatic;
extern int g_drive_can_poll_for_media(GDrive*) = drive_can_poll_for_media;
extern int g_drive_can_eject(GDrive*) = drive_can_eject;
extern void g_drive_eject(GDrive*, int, GCancellable*, void*, void*) = drive_eject;
extern int g_drive_eject_finish(GDrive*, GAsyncResult*, GError**) = drive_eject_finish;
extern void g_drive_poll_for_media(GDrive*, GCancellable*, void*, void*) = drive_poll_for_media;
extern int g_drive_poll_for_media_finish(GDrive*, GAsyncResult*, GError**) = drive_poll_for_media_finish;
extern char* g_drive_get_identifier(GDrive*, char*) = drive_get_identifier;
extern char** g_drive_enumerate_identifiers(GDrive*) = drive_enumerate_identifiers;
extern int g_drive_get_start_stop_type(GDrive*) = drive_get_start_stop_type;
extern int g_drive_can_start(GDrive*) = drive_can_start;
extern int g_drive_can_start_degraded(GDrive*) = drive_can_start_degraded;
extern void g_drive_start(GDrive*, int, GMountOperation*, GCancellable*, void*, void*) = drive_start;
extern int g_drive_start_finish(GDrive*, GAsyncResult*, GError**) = drive_start_finish;
extern int g_drive_can_stop(GDrive*) = drive_can_stop;
extern void g_drive_stop(GDrive*, int, GMountOperation*, GCancellable*, void*, void*) = drive_stop;
extern int g_drive_stop_finish(GDrive*, GAsyncResult*, GError**) = drive_stop_finish;
extern void g_drive_eject_with_operation(GDrive*, int, GMountOperation*, GCancellable*, void*, void*) = drive_eject_with_operation;
extern int g_drive_eject_with_operation_finish(GDrive*, GAsyncResult*, GError**) = drive_eject_with_operation_finish;
extern char* g_drive_get_sort_key(GDrive*) = drive_get_sort_key;
extern long g_icon_get_type() = icon_get_type;
extern int g_icon_hash(void*) = icon_hash;
extern int g_icon_equal(GIcon*, GIcon*) = icon_equal;
extern char* g_icon_to_string(GIcon*) = icon_to_string;
extern GIcon* g_icon_new_for_string(char*, GError**) = icon_new_for_string;
extern long g_emblem_get_type() = emblem_get_type;
extern GEmblem* g_emblem_new(GIcon*) = emblem_new;
extern GEmblem* g_emblem_new_with_origin(GIcon*, int) = emblem_new_with_origin;
extern GIcon* g_emblem_get_icon(GEmblem*) = emblem_get_icon;
extern int g_emblem_get_origin(GEmblem*) = emblem_get_origin;
extern long g_emblemed_icon_get_type() = emblemed_icon_get_type;
extern GIcon* g_emblemed_icon_new(GIcon*, GEmblem*) = emblemed_icon_new;
extern GIcon* g_emblemed_icon_get_icon(GEmblemedIcon*) = emblemed_icon_get_icon;
extern GList* g_emblemed_icon_get_emblems(GEmblemedIcon*) = emblemed_icon_get_emblems;
extern void g_emblemed_icon_add_emblem(GEmblemedIcon*, GEmblem*) = emblemed_icon_add_emblem;
extern void g_emblemed_icon_clear_emblems(GEmblemedIcon*) = emblemed_icon_clear_emblems;
extern long g_file_attribute_info_list_get_type() = file_attribute_info_list_get_type;
extern GFileAttributeInfoList* g_file_attribute_info_list_new() = file_attribute_info_list_new;
extern GFileAttributeInfoList* g_file_attribute_info_list_ref(GFileAttributeInfoList*) = file_attribute_info_list_ref;
extern void g_file_attribute_info_list_unref(GFileAttributeInfoList*) = file_attribute_info_list_unref;
extern GFileAttributeInfoList* g_file_attribute_info_list_dup(GFileAttributeInfoList*) = file_attribute_info_list_dup;
extern GFileAttributeInfo* g_file_attribute_info_list_lookup(GFileAttributeInfoList*, char*) = file_attribute_info_list_lookup;
extern void g_file_attribute_info_list_add(GFileAttributeInfoList*, char*, int, int) = file_attribute_info_list_add;
extern long g_file_enumerator_get_type() = file_enumerator_get_type;
extern GFileInfo* g_file_enumerator_next_file(GFileEnumerator*, GCancellable*, GError**) = file_enumerator_next_file;
extern int g_file_enumerator_close(GFileEnumerator*, GCancellable*, GError**) = file_enumerator_close;
extern void g_file_enumerator_next_files_async(GFileEnumerator*, int, int, GCancellable*, void*, void*) = file_enumerator_next_files_async;
extern GList* g_file_enumerator_next_files_finish(GFileEnumerator*, GAsyncResult*, GError**) = file_enumerator_next_files_finish;
extern void g_file_enumerator_close_async(GFileEnumerator*, int, GCancellable*, void*, void*) = file_enumerator_close_async;
extern int g_file_enumerator_close_finish(GFileEnumerator*, GAsyncResult*, GError**) = file_enumerator_close_finish;
extern int g_file_enumerator_is_closed(GFileEnumerator*) = file_enumerator_is_closed;
extern int g_file_enumerator_has_pending(GFileEnumerator*) = file_enumerator_has_pending;
extern void g_file_enumerator_set_pending(GFileEnumerator*, int) = file_enumerator_set_pending;
extern GFile* g_file_enumerator_get_container(GFileEnumerator*) = file_enumerator_get_container;
extern long g_file_get_type() = file_get_type;
extern GFile* g_file_new_for_path(char*) = file_new_for_path;
extern GFile* g_file_new_for_uri(char*) = file_new_for_uri;
extern GFile* g_file_new_for_commandline_arg(char*) = file_new_for_commandline_arg;
extern GFile* g_file_new_tmp(char*, GFileIOStream**, GError**) = file_new_tmp;
extern GFile* g_file_parse_name(char*) = file_parse_name;
extern GFile* g_file_dup(GFile*) = file_dup;
extern int g_file_hash(void*) = file_hash;
extern int g_file_equal(GFile*, GFile*) = file_equal;
extern char* g_file_get_basename(GFile*) = file_get_basename;
extern char* g_file_get_path(GFile*) = file_get_path;
extern char* g_file_get_uri(GFile*) = file_get_uri;
extern char* g_file_get_parse_name(GFile*) = file_get_parse_name;
extern GFile* g_file_get_parent(GFile*) = file_get_parent;
extern int g_file_has_parent(GFile*, GFile*) = file_has_parent;
extern GFile* g_file_get_child(GFile*, char*) = file_get_child;
extern GFile* g_file_get_child_for_display_name(GFile*, char*, GError**) = file_get_child_for_display_name;
extern int g_file_has_prefix(GFile*, GFile*) = file_has_prefix;
extern char* g_file_get_relative_path(GFile*, GFile*) = file_get_relative_path;
extern GFile* g_file_resolve_relative_path(GFile*, char*) = file_resolve_relative_path;
extern int g_file_is_native(GFile*) = file_is_native;
extern int g_file_has_uri_scheme(GFile*, char*) = file_has_uri_scheme;
extern char* g_file_get_uri_scheme(GFile*) = file_get_uri_scheme;
extern GFileInputStream* g_file_read(GFile*, GCancellable*, GError**) = file_read;
extern void g_file_read_async(GFile*, int, GCancellable*, void*, void*) = file_read_async;
extern GFileInputStream* g_file_read_finish(GFile*, GAsyncResult*, GError**) = file_read_finish;
extern GFileOutputStream* g_file_append_to(GFile*, int, GCancellable*, GError**) = file_append_to;
extern GFileOutputStream* g_file_create(GFile*, int, GCancellable*, GError**) = file_create;
extern GFileOutputStream* g_file_replace(GFile*, char*, int, int, GCancellable*, GError**) = file_replace;
extern void g_file_append_to_async(GFile*, int, int, GCancellable*, void*, void*) = file_append_to_async;
extern GFileOutputStream* g_file_append_to_finish(GFile*, GAsyncResult*, GError**) = file_append_to_finish;
extern void g_file_create_async(GFile*, int, int, GCancellable*, void*, void*) = file_create_async;
extern GFileOutputStream* g_file_create_finish(GFile*, GAsyncResult*, GError**) = file_create_finish;
extern void g_file_replace_async(GFile*, char*, int, int, int, GCancellable*, void*, void*) = file_replace_async;
extern GFileOutputStream* g_file_replace_finish(GFile*, GAsyncResult*, GError**) = file_replace_finish;
extern GFileIOStream* g_file_open_readwrite(GFile*, GCancellable*, GError**) = file_open_readwrite;
extern void g_file_open_readwrite_async(GFile*, int, GCancellable*, void*, void*) = file_open_readwrite_async;
extern GFileIOStream* g_file_open_readwrite_finish(GFile*, GAsyncResult*, GError**) = file_open_readwrite_finish;
extern GFileIOStream* g_file_create_readwrite(GFile*, int, GCancellable*, GError**) = file_create_readwrite;
extern void g_file_create_readwrite_async(GFile*, int, int, GCancellable*, void*, void*) = file_create_readwrite_async;
extern GFileIOStream* g_file_create_readwrite_finish(GFile*, GAsyncResult*, GError**) = file_create_readwrite_finish;
extern GFileIOStream* g_file_replace_readwrite(GFile*, char*, int, int, GCancellable*, GError**) = file_replace_readwrite;
extern void g_file_replace_readwrite_async(GFile*, char*, int, int, int, GCancellable*, void*, void*) = file_replace_readwrite_async;
extern GFileIOStream* g_file_replace_readwrite_finish(GFile*, GAsyncResult*, GError**) = file_replace_readwrite_finish;
extern int g_file_query_exists(GFile*, GCancellable*) = file_query_exists;
extern int g_file_query_file_type(GFile*, int, GCancellable*) = file_query_file_type;
extern GFileInfo* g_file_query_info(GFile*, char*, int, GCancellable*, GError**) = file_query_info;
extern void g_file_query_info_async(GFile*, char*, int, int, GCancellable*, void*, void*) = file_query_info_async;
extern GFileInfo* g_file_query_info_finish(GFile*, GAsyncResult*, GError**) = file_query_info_finish;
extern GFileInfo* g_file_query_filesystem_info(GFile*, char*, GCancellable*, GError**) = file_query_filesystem_info;
extern void g_file_query_filesystem_info_async(GFile*, char*, int, GCancellable*, void*, void*) = file_query_filesystem_info_async;
extern GFileInfo* g_file_query_filesystem_info_finish(GFile*, GAsyncResult*, GError**) = file_query_filesystem_info_finish;
extern GMount* g_file_find_enclosing_mount(GFile*, GCancellable*, GError**) = file_find_enclosing_mount;
extern void g_file_find_enclosing_mount_async(GFile*, int, GCancellable*, void*, void*) = file_find_enclosing_mount_async;
extern GMount* g_file_find_enclosing_mount_finish(GFile*, GAsyncResult*, GError**) = file_find_enclosing_mount_finish;
extern GFileEnumerator* g_file_enumerate_children(GFile*, char*, int, GCancellable*, GError**) = file_enumerate_children;
extern void g_file_enumerate_children_async(GFile*, char*, int, int, GCancellable*, void*, void*) = file_enumerate_children_async;
extern GFileEnumerator* g_file_enumerate_children_finish(GFile*, GAsyncResult*, GError**) = file_enumerate_children_finish;
extern GFile* g_file_set_display_name(GFile*, char*, GCancellable*, GError**) = file_set_display_name;
extern void g_file_set_display_name_async(GFile*, char*, int, GCancellable*, void*, void*) = file_set_display_name_async;
extern GFile* g_file_set_display_name_finish(GFile*, GAsyncResult*, GError**) = file_set_display_name_finish;
extern int g_file_delete(GFile*, GCancellable*, GError**) = file_delete;
extern int g_file_trash(GFile*, GCancellable*, GError**) = file_trash;
extern int g_file_copy(GFile*, GFile*, int, GCancellable*, void*, void*, GError**) = file_copy;
extern void g_file_copy_async(GFile*, GFile*, int, int, GCancellable*, void*, void*, void*, void*) = file_copy_async;
extern int g_file_copy_finish(GFile*, GAsyncResult*, GError**) = file_copy_finish;
extern int g_file_move(GFile*, GFile*, int, GCancellable*, void*, void*, GError**) = file_move;
extern int g_file_make_directory(GFile*, GCancellable*, GError**) = file_make_directory;
extern int g_file_make_directory_with_parents(GFile*, GCancellable*, GError**) = file_make_directory_with_parents;
extern int g_file_make_symbolic_link(GFile*, char*, GCancellable*, GError**) = file_make_symbolic_link;
extern GFileAttributeInfoList* g_file_query_settable_attributes(GFile*, GCancellable*, GError**) = file_query_settable_attributes;
extern GFileAttributeInfoList* g_file_query_writable_namespaces(GFile*, GCancellable*, GError**) = file_query_writable_namespaces;
extern int g_file_set_attribute(GFile*, char*, int, void*, int, GCancellable*, GError**) = file_set_attribute;
extern int g_file_set_attributes_from_info(GFile*, GFileInfo*, int, GCancellable*, GError**) = file_set_attributes_from_info;
extern void g_file_set_attributes_async(GFile*, GFileInfo*, int, int, GCancellable*, void*, void*) = file_set_attributes_async;
extern int g_file_set_attributes_finish(GFile*, GAsyncResult*, GFileInfo**, GError**) = file_set_attributes_finish;
extern int g_file_set_attribute_string(GFile*, char*, char*, int, GCancellable*, GError**) = file_set_attribute_string;
extern int g_file_set_attribute_byte_string(GFile*, char*, char*, int, GCancellable*, GError**) = file_set_attribute_byte_string;
extern int g_file_set_attribute_uint32(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_uint32;
extern int g_file_set_attribute_int32(GFile*, char*, int, int, GCancellable*, GError**) = file_set_attribute_int32;
extern int g_file_set_attribute_uint64(GFile*, char*, long, int, GCancellable*, GError**) = file_set_attribute_uint64;
extern int g_file_set_attribute_int64(GFile*, char*, long, int, GCancellable*, GError**) = file_set_attribute_int64;
extern void g_file_mount_enclosing_volume(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_mount_enclosing_volume;
extern int g_file_mount_enclosing_volume_finish(GFile*, GAsyncResult*, GError**) = file_mount_enclosing_volume_finish;
extern void g_file_mount_mountable(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_mount_mountable;
extern GFile* g_file_mount_mountable_finish(GFile*, GAsyncResult*, GError**) = file_mount_mountable_finish;
extern void g_file_unmount_mountable(GFile*, int, GCancellable*, void*, void*) = file_unmount_mountable;
extern int g_file_unmount_mountable_finish(GFile*, GAsyncResult*, GError**) = file_unmount_mountable_finish;
extern void g_file_unmount_mountable_with_operation(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_unmount_mountable_with_operation;
extern int g_file_unmount_mountable_with_operation_finish(GFile*, GAsyncResult*, GError**) = file_unmount_mountable_with_operation_finish;
extern void g_file_eject_mountable(GFile*, int, GCancellable*, void*, void*) = file_eject_mountable;
extern int g_file_eject_mountable_finish(GFile*, GAsyncResult*, GError**) = file_eject_mountable_finish;
extern void g_file_eject_mountable_with_operation(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_eject_mountable_with_operation;
extern int g_file_eject_mountable_with_operation_finish(GFile*, GAsyncResult*, GError**) = file_eject_mountable_with_operation_finish;
extern int g_file_copy_attributes(GFile*, GFile*, int, GCancellable*, GError**) = file_copy_attributes;
extern GFileMonitor* g_file_monitor_directory(GFile*, int, GCancellable*, GError**) = file_monitor_directory;
extern GFileMonitor* g_file_monitor_file(GFile*, int, GCancellable*, GError**) = file_monitor_file;
extern GFileMonitor* g_file_monitor(GFile*, int, GCancellable*, GError**) = file_monitor;
extern void g_file_start_mountable(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_start_mountable;
extern int g_file_start_mountable_finish(GFile*, GAsyncResult*, GError**) = file_start_mountable_finish;
extern void g_file_stop_mountable(GFile*, int, GMountOperation*, GCancellable*, void*, void*) = file_stop_mountable;
extern int g_file_stop_mountable_finish(GFile*, GAsyncResult*, GError**) = file_stop_mountable_finish;
extern void g_file_poll_mountable(GFile*, GCancellable*, void*, void*) = file_poll_mountable;
extern int g_file_poll_mountable_finish(GFile*, GAsyncResult*, GError**) = file_poll_mountable_finish;
extern GAppInfo* g_file_query_default_handler(GFile*, GCancellable*, GError**) = file_query_default_handler;
extern int g_file_load_contents(GFile*, GCancellable*, char**, long*, char**, GError**) = file_load_contents;
extern void g_file_load_contents_async(GFile*, GCancellable*, void*, void*) = file_load_contents_async;
extern int g_file_load_contents_finish(GFile*, GAsyncResult*, char**, long*, char**, GError**) = file_load_contents_finish;
extern void g_file_load_partial_contents_async(GFile*, GCancellable*, void*, void*, void*) = file_load_partial_contents_async;
extern int g_file_load_partial_contents_finish(GFile*, GAsyncResult*, char**, long*, char**, GError**) = file_load_partial_contents_finish;
extern int g_file_replace_contents(GFile*, char*, long, char*, int, int, char**, GCancellable*, GError**) = file_replace_contents;
extern void g_file_replace_contents_async(GFile*, char*, long, char*, int, int, GCancellable*, void*, void*) = file_replace_contents_async;
extern int g_file_replace_contents_finish(GFile*, GAsyncResult*, char**, GError**) = file_replace_contents_finish;
extern int g_file_supports_thread_contexts(GFile*) = file_supports_thread_contexts;
extern long g_file_icon_get_type() = file_icon_get_type;
extern GIcon* g_file_icon_new(GFile*) = file_icon_new;
extern GFile* g_file_icon_get_file(GFileIcon*) = file_icon_get_file;
extern long g_file_info_get_type() = file_info_get_type;
extern GFileInfo* g_file_info_new() = file_info_new;
extern GFileInfo* g_file_info_dup(GFileInfo*) = file_info_dup;
extern void g_file_info_copy_into(GFileInfo*, GFileInfo*) = file_info_copy_into;
extern int g_file_info_has_attribute(GFileInfo*, char*) = file_info_has_attribute;
extern int g_file_info_has_namespace(GFileInfo*, char*) = file_info_has_namespace;
extern char** g_file_info_list_attributes(GFileInfo*, char*) = file_info_list_attributes;
extern int g_file_info_get_attribute_data(GFileInfo*, char*, int*, void**, int*) = file_info_get_attribute_data;
extern int g_file_info_get_attribute_type(GFileInfo*, char*) = file_info_get_attribute_type;
extern void g_file_info_remove_attribute(GFileInfo*, char*) = file_info_remove_attribute;
extern int g_file_info_get_attribute_status(GFileInfo*, char*) = file_info_get_attribute_status;
extern int g_file_info_set_attribute_status(GFileInfo*, char*, int) = file_info_set_attribute_status;
extern char* g_file_info_get_attribute_as_string(GFileInfo*, char*) = file_info_get_attribute_as_string;
extern char* g_file_info_get_attribute_string(GFileInfo*, char*) = file_info_get_attribute_string;
extern char* g_file_info_get_attribute_byte_string(GFileInfo*, char*) = file_info_get_attribute_byte_string;
extern int g_file_info_get_attribute_boolean(GFileInfo*, char*) = file_info_get_attribute_boolean;
extern int g_file_info_get_attribute_uint32(GFileInfo*, char*) = file_info_get_attribute_uint32;
extern int g_file_info_get_attribute_int32(GFileInfo*, char*) = file_info_get_attribute_int32;
extern long g_file_info_get_attribute_uint64(GFileInfo*, char*) = file_info_get_attribute_uint64;
extern long g_file_info_get_attribute_int64(GFileInfo*, char*) = file_info_get_attribute_int64;
extern GObject* g_file_info_get_attribute_object(GFileInfo*, char*) = file_info_get_attribute_object;
extern char** g_file_info_get_attribute_stringv(GFileInfo*, char*) = file_info_get_attribute_stringv;
extern void g_file_info_set_attribute(GFileInfo*, char*, int, void*) = file_info_set_attribute;
extern void g_file_info_set_attribute_string(GFileInfo*, char*, char*) = file_info_set_attribute_string;
extern void g_file_info_set_attribute_byte_string(GFileInfo*, char*, char*) = file_info_set_attribute_byte_string;
extern void g_file_info_set_attribute_boolean(GFileInfo*, char*, int) = file_info_set_attribute_boolean;
extern void g_file_info_set_attribute_uint32(GFileInfo*, char*, int) = file_info_set_attribute_uint32;
extern void g_file_info_set_attribute_int32(GFileInfo*, char*, int) = file_info_set_attribute_int32;
extern void g_file_info_set_attribute_uint64(GFileInfo*, char*, long) = file_info_set_attribute_uint64;
extern void g_file_info_set_attribute_int64(GFileInfo*, char*, long) = file_info_set_attribute_int64;
extern void g_file_info_set_attribute_object(GFileInfo*, char*, GObject*) = file_info_set_attribute_object;
extern void g_file_info_set_attribute_stringv(GFileInfo*, char*, char**) = file_info_set_attribute_stringv;
extern void g_file_info_clear_status(GFileInfo*) = file_info_clear_status;
extern int g_file_info_get_file_type(GFileInfo*) = file_info_get_file_type;
extern int g_file_info_get_is_hidden(GFileInfo*) = file_info_get_is_hidden;
extern int g_file_info_get_is_backup(GFileInfo*) = file_info_get_is_backup;
extern int g_file_info_get_is_symlink(GFileInfo*) = file_info_get_is_symlink;
extern char* g_file_info_get_name(GFileInfo*) = file_info_get_name;
extern char* g_file_info_get_display_name(GFileInfo*) = file_info_get_display_name;
extern char* g_file_info_get_edit_name(GFileInfo*) = file_info_get_edit_name;
extern GIcon* g_file_info_get_icon(GFileInfo*) = file_info_get_icon;
extern char* g_file_info_get_content_type(GFileInfo*) = file_info_get_content_type;
extern long g_file_info_get_size(GFileInfo*) = file_info_get_size;
extern void g_file_info_get_modification_time(GFileInfo*, GTimeVal*) = file_info_get_modification_time;
extern char* g_file_info_get_symlink_target(GFileInfo*) = file_info_get_symlink_target;
extern char* g_file_info_get_etag(GFileInfo*) = file_info_get_etag;
extern int g_file_info_get_sort_order(GFileInfo*) = file_info_get_sort_order;
extern void g_file_info_set_attribute_mask(GFileInfo*, GFileAttributeMatcher*) = file_info_set_attribute_mask;
extern void g_file_info_unset_attribute_mask(GFileInfo*) = file_info_unset_attribute_mask;
extern void g_file_info_set_file_type(GFileInfo*, int) = file_info_set_file_type;
extern void g_file_info_set_is_hidden(GFileInfo*, int) = file_info_set_is_hidden;
extern void g_file_info_set_is_symlink(GFileInfo*, int) = file_info_set_is_symlink;
extern void g_file_info_set_name(GFileInfo*, char*) = file_info_set_name;
extern void g_file_info_set_display_name(GFileInfo*, char*) = file_info_set_display_name;
extern void g_file_info_set_edit_name(GFileInfo*, char*) = file_info_set_edit_name;
extern void g_file_info_set_icon(GFileInfo*, GIcon*) = file_info_set_icon;
extern void g_file_info_set_content_type(GFileInfo*, char*) = file_info_set_content_type;
extern void g_file_info_set_size(GFileInfo*, long) = file_info_set_size;
extern void g_file_info_set_modification_time(GFileInfo*, GTimeVal*) = file_info_set_modification_time;
extern void g_file_info_set_symlink_target(GFileInfo*, char*) = file_info_set_symlink_target;
extern void g_file_info_set_sort_order(GFileInfo*, int) = file_info_set_sort_order;
extern long g_file_attribute_matcher_get_type() = file_attribute_matcher_get_type;
extern GFileAttributeMatcher* g_file_attribute_matcher_new(char*) = file_attribute_matcher_new;
extern GFileAttributeMatcher* g_file_attribute_matcher_ref(GFileAttributeMatcher*) = file_attribute_matcher_ref;
extern void g_file_attribute_matcher_unref(GFileAttributeMatcher*) = file_attribute_matcher_unref;
extern GFileAttributeMatcher* g_file_attribute_matcher_subtract(GFileAttributeMatcher*, GFileAttributeMatcher*) = file_attribute_matcher_subtract;
extern int g_file_attribute_matcher_matches(GFileAttributeMatcher*, char*) = file_attribute_matcher_matches;
extern int g_file_attribute_matcher_matches_only(GFileAttributeMatcher*, char*) = file_attribute_matcher_matches_only;
extern int g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher*, char*) = file_attribute_matcher_enumerate_namespace;
extern char* g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher*) = file_attribute_matcher_enumerate_next;
extern char* g_file_attribute_matcher_to_string(GFileAttributeMatcher*) = file_attribute_matcher_to_string;
extern long g_file_input_stream_get_type() = file_input_stream_get_type;
extern GFileInfo* g_file_input_stream_query_info(GFileInputStream*, char*, GCancellable*, GError**) = file_input_stream_query_info;
extern void g_file_input_stream_query_info_async(GFileInputStream*, char*, int, GCancellable*, void*, void*) = file_input_stream_query_info_async;
extern GFileInfo* g_file_input_stream_query_info_finish(GFileInputStream*, GAsyncResult*, GError**) = file_input_stream_query_info_finish;
extern int g_io_error_quark() = io_error_quark;
extern int g_io_error_from_errno(int) = io_error_from_errno;
extern long g_io_stream_get_type() = io_stream_get_type;
extern GInputStream* g_io_stream_get_input_stream(GIOStream*) = io_stream_get_input_stream;
extern GOutputStream* g_io_stream_get_output_stream(GIOStream*) = io_stream_get_output_stream;
extern void g_io_stream_splice_async(GIOStream*, GIOStream*, int, int, GCancellable*, void*, void*) = io_stream_splice_async;
extern int g_io_stream_splice_finish(GAsyncResult*, GError**) = io_stream_splice_finish;
extern int g_io_stream_close(GIOStream*, GCancellable*, GError**) = io_stream_close;
extern void g_io_stream_close_async(GIOStream*, int, GCancellable*, void*, void*) = io_stream_close_async;
extern int g_io_stream_close_finish(GIOStream*, GAsyncResult*, GError**) = io_stream_close_finish;
extern int g_io_stream_is_closed(GIOStream*) = io_stream_is_closed;
extern int g_io_stream_has_pending(GIOStream*) = io_stream_has_pending;
extern int g_io_stream_set_pending(GIOStream*, GError**) = io_stream_set_pending;
extern void g_io_stream_clear_pending(GIOStream*) = io_stream_clear_pending;
extern long g_file_io_stream_get_type() = file_io_stream_get_type;
extern GFileInfo* g_file_io_stream_query_info(GFileIOStream*, char*, GCancellable*, GError**) = file_io_stream_query_info;
extern void g_file_io_stream_query_info_async(GFileIOStream*, char*, int, GCancellable*, void*, void*) = file_io_stream_query_info_async;
extern GFileInfo* g_file_io_stream_query_info_finish(GFileIOStream*, GAsyncResult*, GError**) = file_io_stream_query_info_finish;
extern char* g_file_io_stream_get_etag(GFileIOStream*) = file_io_stream_get_etag;
extern long g_file_monitor_get_type() = file_monitor_get_type;
extern int g_file_monitor_cancel(GFileMonitor*) = file_monitor_cancel;
extern int g_file_monitor_is_cancelled(GFileMonitor*) = file_monitor_is_cancelled;
extern void g_file_monitor_set_rate_limit(GFileMonitor*, int) = file_monitor_set_rate_limit;
extern void g_file_monitor_emit_event(GFileMonitor*, GFile*, GFile*, int) = file_monitor_emit_event;
extern long g_filename_completer_get_type() = filename_completer_get_type;
extern GFilenameCompleter* g_filename_completer_new() = filename_completer_new;
extern char* g_filename_completer_get_completion_suffix(GFilenameCompleter*, char*) = filename_completer_get_completion_suffix;
extern char** g_filename_completer_get_completions(GFilenameCompleter*, char*) = filename_completer_get_completions;
extern void g_filename_completer_set_dirs_only(GFilenameCompleter*, int) = filename_completer_set_dirs_only;
extern long g_file_output_stream_get_type() = file_output_stream_get_type;
extern GFileInfo* g_file_output_stream_query_info(GFileOutputStream*, char*, GCancellable*, GError**) = file_output_stream_query_info;
extern void g_file_output_stream_query_info_async(GFileOutputStream*, char*, int, GCancellable*, void*, void*) = file_output_stream_query_info_async;
extern GFileInfo* g_file_output_stream_query_info_finish(GFileOutputStream*, GAsyncResult*, GError**) = file_output_stream_query_info_finish;
extern char* g_file_output_stream_get_etag(GFileOutputStream*) = file_output_stream_get_etag;
extern long g_inet_address_get_type() = inet_address_get_type;
extern GInetAddress* g_inet_address_new_from_string(char*) = inet_address_new_from_string;
extern GInetAddress* g_inet_address_new_from_bytes(char*, int) = inet_address_new_from_bytes;
extern GInetAddress* g_inet_address_new_loopback(int) = inet_address_new_loopback;
extern GInetAddress* g_inet_address_new_any(int) = inet_address_new_any;
extern int g_inet_address_equal(GInetAddress*, GInetAddress*) = inet_address_equal;
extern char* g_inet_address_to_string(GInetAddress*) = inet_address_to_string;
extern char* g_inet_address_to_bytes(GInetAddress*) = inet_address_to_bytes;
extern long g_inet_address_get_native_size(GInetAddress*) = inet_address_get_native_size;
extern int g_inet_address_get_family(GInetAddress*) = inet_address_get_family;
extern int g_inet_address_get_is_any(GInetAddress*) = inet_address_get_is_any;
extern int g_inet_address_get_is_loopback(GInetAddress*) = inet_address_get_is_loopback;
extern int g_inet_address_get_is_link_local(GInetAddress*) = inet_address_get_is_link_local;
extern int g_inet_address_get_is_site_local(GInetAddress*) = inet_address_get_is_site_local;
extern int g_inet_address_get_is_multicast(GInetAddress*) = inet_address_get_is_multicast;
extern int g_inet_address_get_is_mc_global(GInetAddress*) = inet_address_get_is_mc_global;
extern int g_inet_address_get_is_mc_link_local(GInetAddress*) = inet_address_get_is_mc_link_local;
extern int g_inet_address_get_is_mc_node_local(GInetAddress*) = inet_address_get_is_mc_node_local;
extern int g_inet_address_get_is_mc_org_local(GInetAddress*) = inet_address_get_is_mc_org_local;
extern int g_inet_address_get_is_mc_site_local(GInetAddress*) = inet_address_get_is_mc_site_local;
extern long g_inet_address_mask_get_type() = inet_address_mask_get_type;
extern GInetAddressMask* g_inet_address_mask_new(GInetAddress*, int, GError**) = inet_address_mask_new;
extern GInetAddressMask* g_inet_address_mask_new_from_string(char*, GError**) = inet_address_mask_new_from_string;
extern char* g_inet_address_mask_to_string(GInetAddressMask*) = inet_address_mask_to_string;
extern int g_inet_address_mask_get_family(GInetAddressMask*) = inet_address_mask_get_family;
extern GInetAddress* g_inet_address_mask_get_address(GInetAddressMask*) = inet_address_mask_get_address;
extern int g_inet_address_mask_get_length(GInetAddressMask*) = inet_address_mask_get_length;
extern int g_inet_address_mask_matches(GInetAddressMask*, GInetAddress*) = inet_address_mask_matches;
extern int g_inet_address_mask_equal(GInetAddressMask*, GInetAddressMask*) = inet_address_mask_equal;
extern long g_socket_address_get_type() = socket_address_get_type;
extern int g_socket_address_get_family(GSocketAddress*) = socket_address_get_family;
extern GSocketAddress* g_socket_address_new_from_native(void*, long) = socket_address_new_from_native;
extern int g_socket_address_to_native(GSocketAddress*, void*, long, GError**) = socket_address_to_native;
extern long g_socket_address_get_native_size(GSocketAddress*) = socket_address_get_native_size;
extern long g_inet_socket_address_get_type() = inet_socket_address_get_type;
extern GSocketAddress* g_inet_socket_address_new(GInetAddress*, short) = inet_socket_address_new;
extern GInetAddress* g_inet_socket_address_get_address(GInetSocketAddress*) = inet_socket_address_get_address;
extern short g_inet_socket_address_get_port(GInetSocketAddress*) = inet_socket_address_get_port;
extern int g_inet_socket_address_get_flowinfo(GInetSocketAddress*) = inet_socket_address_get_flowinfo;
extern int g_inet_socket_address_get_scope_id(GInetSocketAddress*) = inet_socket_address_get_scope_id;
extern long g_app_info_create_flags_get_type() = app_info_create_flags_get_type;
extern long g_converter_flags_get_type() = converter_flags_get_type;
extern long g_converter_result_get_type() = converter_result_get_type;
extern long g_data_stream_byte_order_get_type() = data_stream_byte_order_get_type;
extern long g_data_stream_newline_type_get_type() = data_stream_newline_type_get_type;
extern long g_file_attribute_type_get_type() = file_attribute_type_get_type;
extern long g_file_attribute_info_flags_get_type() = file_attribute_info_flags_get_type;
extern long g_file_attribute_status_get_type() = file_attribute_status_get_type;
extern long g_file_query_info_flags_get_type() = file_query_info_flags_get_type;
extern long g_file_create_flags_get_type() = file_create_flags_get_type;
extern long g_mount_mount_flags_get_type() = mount_mount_flags_get_type;
extern long g_mount_unmount_flags_get_type() = mount_unmount_flags_get_type;
extern long g_drive_start_flags_get_type() = drive_start_flags_get_type;
extern long g_drive_start_stop_type_get_type() = drive_start_stop_type_get_type;
extern long g_file_copy_flags_get_type() = file_copy_flags_get_type;
extern long g_file_monitor_flags_get_type() = file_monitor_flags_get_type;
extern long g_file_type_get_type() = file_type_get_type;
extern long g_filesystem_preview_type_get_type() = filesystem_preview_type_get_type;
extern long g_file_monitor_event_get_type() = file_monitor_event_get_type;
extern long g_io_error_enum_get_type() = io_error_enum_get_type;
extern long g_ask_password_flags_get_type() = ask_password_flags_get_type;
extern long g_password_save_get_type() = password_save_get_type;
extern long g_mount_operation_result_get_type() = mount_operation_result_get_type;
extern long g_output_stream_splice_flags_get_type() = output_stream_splice_flags_get_type;
extern long g_io_stream_splice_flags_get_type() = io_stream_splice_flags_get_type;
extern long g_emblem_origin_get_type() = emblem_origin_get_type;
extern long g_resolver_error_get_type() = resolver_error_get_type;
extern long g_resource_error_get_type() = resource_error_get_type;
extern long g_resource_flags_get_type() = resource_flags_get_type;
extern long g_resource_lookup_flags_get_type() = resource_lookup_flags_get_type;
extern long g_socket_family_get_type() = socket_family_get_type;
extern long g_socket_type_get_type() = socket_type_get_type;
extern long g_socket_msg_flags_get_type() = socket_msg_flags_get_type;
extern long g_socket_protocol_get_type() = socket_protocol_get_type;
extern long g_zlib_compressor_format_get_type() = zlib_compressor_format_get_type;
extern long g_unix_socket_address_type_get_type() = unix_socket_address_type_get_type;
extern long g_bus_type_get_type() = bus_type_get_type;
extern long g_bus_name_owner_flags_get_type() = bus_name_owner_flags_get_type;
extern long g_bus_name_watcher_flags_get_type() = bus_name_watcher_flags_get_type;
extern long g_dbus_proxy_flags_get_type() = dbus_proxy_flags_get_type;
extern long g_dbus_error_get_type() = dbus_error_get_type;
extern long g_dbus_connection_flags_get_type() = dbus_connection_flags_get_type;
extern long g_dbus_capability_flags_get_type() = dbus_capability_flags_get_type;
extern long g_dbus_call_flags_get_type() = dbus_call_flags_get_type;
extern long g_dbus_message_type_get_type() = dbus_message_type_get_type;
extern long g_dbus_message_flags_get_type() = dbus_message_flags_get_type;
extern long g_dbus_message_header_field_get_type() = dbus_message_header_field_get_type;
extern long g_dbus_property_info_flags_get_type() = dbus_property_info_flags_get_type;
extern long g_dbus_subtree_flags_get_type() = dbus_subtree_flags_get_type;
extern long g_dbus_server_flags_get_type() = dbus_server_flags_get_type;
extern long g_dbus_signal_flags_get_type() = dbus_signal_flags_get_type;
extern long g_dbus_send_message_flags_get_type() = dbus_send_message_flags_get_type;
extern long g_credentials_type_get_type() = credentials_type_get_type;
extern long g_dbus_message_byte_order_get_type() = dbus_message_byte_order_get_type;
extern long g_application_flags_get_type() = application_flags_get_type;
extern long g_tls_error_get_type() = tls_error_get_type;
extern long g_tls_certificate_flags_get_type() = tls_certificate_flags_get_type;
extern long g_tls_authentication_mode_get_type() = tls_authentication_mode_get_type;
extern long g_tls_rehandshake_mode_get_type() = tls_rehandshake_mode_get_type;
extern long g_tls_password_flags_get_type() = tls_password_flags_get_type;
extern long g_tls_interaction_result_get_type() = tls_interaction_result_get_type;
extern long g_dbus_interface_skeleton_flags_get_type() = dbus_interface_skeleton_flags_get_type;
extern long g_dbus_object_manager_client_flags_get_type() = dbus_object_manager_client_flags_get_type;
extern long g_tls_database_verify_flags_get_type() = tls_database_verify_flags_get_type;
extern long g_tls_database_lookup_flags_get_type() = tls_database_lookup_flags_get_type;
extern long g_io_module_scope_flags_get_type() = io_module_scope_flags_get_type;
extern long g_socket_client_event_get_type() = socket_client_event_get_type;
extern long g_settings_bind_flags_get_type() = settings_bind_flags_get_type;
extern GIOModuleScope* g_io_module_scope_new(int) = io_module_scope_new;
extern void g_io_module_scope_free(GIOModuleScope*) = io_module_scope_free;
extern void g_io_module_scope_block(GIOModuleScope*, char*) = io_module_scope_block;
extern long g_io_module_get_type() = io_module_get_type;
extern GIOModule* g_io_module_new(char*) = io_module_new;
extern void g_io_modules_scan_all_in_directory(char*) = io_modules_scan_all_in_directory;
extern GList* g_io_modules_load_all_in_directory(char*) = io_modules_load_all_in_directory;
extern void g_io_modules_scan_all_in_directory_with_scope(char*, GIOModuleScope*) = io_modules_scan_all_in_directory_with_scope;
extern GList* g_io_modules_load_all_in_directory_with_scope(char*, GIOModuleScope*) = io_modules_load_all_in_directory_with_scope;
extern GIOExtensionPoint* g_io_extension_point_register(char*) = io_extension_point_register;
extern GIOExtensionPoint* g_io_extension_point_lookup(char*) = io_extension_point_lookup;
extern void g_io_extension_point_set_required_type(GIOExtensionPoint*, long) = io_extension_point_set_required_type;
extern long g_io_extension_point_get_required_type(GIOExtensionPoint*) = io_extension_point_get_required_type;
extern GList* g_io_extension_point_get_extensions(GIOExtensionPoint*) = io_extension_point_get_extensions;
extern GIOExtension* g_io_extension_point_get_extension_by_name(GIOExtensionPoint*, char*) = io_extension_point_get_extension_by_name;
extern GIOExtension* g_io_extension_point_implement(char*, long, char*, int) = io_extension_point_implement;
extern long g_io_extension_get_type(GIOExtension*) = io_extension_get_type;
extern char* g_io_extension_get_name(GIOExtension*) = io_extension_get_name;
extern int g_io_extension_get_priority(GIOExtension*) = io_extension_get_priority;
extern GTypeClass* g_io_extension_ref_class(GIOExtension*) = io_extension_ref_class;
extern void g_io_scheduler_push_job(void*, void*, void*, int, GCancellable*) = io_scheduler_push_job;
extern void g_io_scheduler_cancel_all_jobs() = io_scheduler_cancel_all_jobs;
extern int g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob*, void*, void*, void*) = io_scheduler_job_send_to_mainloop;
extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob*, void*, void*, void*) = io_scheduler_job_send_to_mainloop_async;
extern long g_loadable_icon_get_type() = loadable_icon_get_type;
extern GInputStream* g_loadable_icon_load(GLoadableIcon*, int, char**, GCancellable*, GError**) = loadable_icon_load;
extern void g_loadable_icon_load_async(GLoadableIcon*, int, GCancellable*, void*, void*) = loadable_icon_load_async;
extern GInputStream* g_loadable_icon_load_finish(GLoadableIcon*, GAsyncResult*, char**, GError**) = loadable_icon_load_finish;
extern long g_memory_input_stream_get_type() = memory_input_stream_get_type;
extern GInputStream* g_memory_input_stream_new() = memory_input_stream_new;
extern GInputStream* g_memory_input_stream_new_from_data(void*, long, void*) = memory_input_stream_new_from_data;
extern void g_memory_input_stream_add_data(GMemoryInputStream*, void*, long, void*) = memory_input_stream_add_data;
extern long g_memory_output_stream_get_type() = memory_output_stream_get_type;
extern GOutputStream* g_memory_output_stream_new(void*, long, void*, void*) = memory_output_stream_new;
extern void* g_memory_output_stream_get_data(GMemoryOutputStream*) = memory_output_stream_get_data;
extern long g_memory_output_stream_get_size(GMemoryOutputStream*) = memory_output_stream_get_size;
extern long g_memory_output_stream_get_data_size(GMemoryOutputStream*) = memory_output_stream_get_data_size;
extern void* g_memory_output_stream_steal_data(GMemoryOutputStream*) = memory_output_stream_steal_data;
extern long g_mount_get_type() = mount_get_type;
extern GFile* g_mount_get_root(GMount*) = mount_get_root;
extern GFile* g_mount_get_default_location(GMount*) = mount_get_default_location;
extern char* g_mount_get_name(GMount*) = mount_get_name;
extern GIcon* g_mount_get_icon(GMount*) = mount_get_icon;
extern char* g_mount_get_uuid(GMount*) = mount_get_uuid;
extern GVolume* g_mount_get_volume(GMount*) = mount_get_volume;
extern GDrive* g_mount_get_drive(GMount*) = mount_get_drive;
extern int g_mount_can_unmount(GMount*) = mount_can_unmount;
extern int g_mount_can_eject(GMount*) = mount_can_eject;
extern void g_mount_unmount(GMount*, int, GCancellable*, void*, void*) = mount_unmount;
extern int g_mount_unmount_finish(GMount*, GAsyncResult*, GError**) = mount_unmount_finish;
extern void g_mount_eject(GMount*, int, GCancellable*, void*, void*) = mount_eject;
extern int g_mount_eject_finish(GMount*, GAsyncResult*, GError**) = mount_eject_finish;
extern void g_mount_remount(GMount*, int, GMountOperation*, GCancellable*, void*, void*) = mount_remount;
extern int g_mount_remount_finish(GMount*, GAsyncResult*, GError**) = mount_remount_finish;
extern void g_mount_guess_content_type(GMount*, int, GCancellable*, void*, void*) = mount_guess_content_type;
extern char** g_mount_guess_content_type_finish(GMount*, GAsyncResult*, GError**) = mount_guess_content_type_finish;
extern char** g_mount_guess_content_type_sync(GMount*, int, GCancellable*, GError**) = mount_guess_content_type_sync;
extern int g_mount_is_shadowed(GMount*) = mount_is_shadowed;
extern void g_mount_shadow(GMount*) = mount_shadow;
extern void g_mount_unshadow(GMount*) = mount_unshadow;
extern void g_mount_unmount_with_operation(GMount*, int, GMountOperation*, GCancellable*, void*, void*) = mount_unmount_with_operation;
extern int g_mount_unmount_with_operation_finish(GMount*, GAsyncResult*, GError**) = mount_unmount_with_operation_finish;
extern void g_mount_eject_with_operation(GMount*, int, GMountOperation*, GCancellable*, void*, void*) = mount_eject_with_operation;
extern int g_mount_eject_with_operation_finish(GMount*, GAsyncResult*, GError**) = mount_eject_with_operation_finish;
extern char* g_mount_get_sort_key(GMount*) = mount_get_sort_key;
extern long g_mount_operation_get_type() = mount_operation_get_type;
extern GMountOperation* g_mount_operation_new() = mount_operation_new;
extern char* g_mount_operation_get_username(GMountOperation*) = mount_operation_get_username;
extern void g_mount_operation_set_username(GMountOperation*, char*) = mount_operation_set_username;
extern char* g_mount_operation_get_password(GMountOperation*) = mount_operation_get_password;
extern void g_mount_operation_set_password(GMountOperation*, char*) = mount_operation_set_password;
extern int g_mount_operation_get_anonymous(GMountOperation*) = mount_operation_get_anonymous;
extern void g_mount_operation_set_anonymous(GMountOperation*, int) = mount_operation_set_anonymous;
extern char* g_mount_operation_get_domain(GMountOperation*) = mount_operation_get_domain;
extern void g_mount_operation_set_domain(GMountOperation*, char*) = mount_operation_set_domain;
extern int g_mount_operation_get_password_save(GMountOperation*) = mount_operation_get_password_save;
extern void g_mount_operation_set_password_save(GMountOperation*, int) = mount_operation_set_password_save;
extern int g_mount_operation_get_choice(GMountOperation*) = mount_operation_get_choice;
extern void g_mount_operation_set_choice(GMountOperation*, int) = mount_operation_set_choice;
extern void g_mount_operation_reply(GMountOperation*, int) = mount_operation_reply;
extern long g_volume_monitor_get_type() = volume_monitor_get_type;
extern GVolumeMonitor* g_volume_monitor_get() = volume_monitor_get;
extern GList* g_volume_monitor_get_connected_drives(GVolumeMonitor*) = volume_monitor_get_connected_drives;
extern GList* g_volume_monitor_get_volumes(GVolumeMonitor*) = volume_monitor_get_volumes;
extern GList* g_volume_monitor_get_mounts(GVolumeMonitor*) = volume_monitor_get_mounts;
extern GVolume* g_volume_monitor_get_volume_for_uuid(GVolumeMonitor*, char*) = volume_monitor_get_volume_for_uuid;
extern GMount* g_volume_monitor_get_mount_for_uuid(GVolumeMonitor*, char*) = volume_monitor_get_mount_for_uuid;
extern GVolume* g_volume_monitor_adopt_orphan_mount(GMount*) = volume_monitor_adopt_orphan_mount;
extern long g_native_volume_monitor_get_type() = native_volume_monitor_get_type;
extern long g_network_address_get_type() = network_address_get_type;
extern GSocketConnectable* g_network_address_new(char*, short) = network_address_new;
extern GSocketConnectable* g_network_address_parse(char*, short, GError**) = network_address_parse;
extern GSocketConnectable* g_network_address_parse_uri(char*, short, GError**) = network_address_parse_uri;
extern char* g_network_address_get_hostname(GNetworkAddress*) = network_address_get_hostname;
extern short g_network_address_get_port(GNetworkAddress*) = network_address_get_port;
extern char* g_network_address_get_scheme(GNetworkAddress*) = network_address_get_scheme;
extern long g_network_monitor_get_type() = network_monitor_get_type;
extern GNetworkMonitor* g_network_monitor_get_default() = network_monitor_get_default;
extern int g_network_monitor_get_network_available(GNetworkMonitor*) = network_monitor_get_network_available;
extern int g_network_monitor_can_reach(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**) = network_monitor_can_reach;
extern void g_network_monitor_can_reach_async(GNetworkMonitor*, GSocketConnectable*, GCancellable*, void*, void*) = network_monitor_can_reach_async;
extern int g_network_monitor_can_reach_finish(GNetworkMonitor*, GAsyncResult*, GError**) = network_monitor_can_reach_finish;
extern long g_network_service_get_type() = network_service_get_type;
extern GSocketConnectable* g_network_service_new(char*, char*, char*) = network_service_new;
extern char* g_network_service_get_service(GNetworkService*) = network_service_get_service;
extern char* g_network_service_get_protocol(GNetworkService*) = network_service_get_protocol;
extern char* g_network_service_get_domain(GNetworkService*) = network_service_get_domain;
extern char* g_network_service_get_scheme(GNetworkService*) = network_service_get_scheme;
extern void g_network_service_set_scheme(GNetworkService*, char*) = network_service_set_scheme;
extern long g_permission_get_type() = permission_get_type;
extern int g_permission_acquire(GPermission*, GCancellable*, GError**) = permission_acquire;
extern void g_permission_acquire_async(GPermission*, GCancellable*, void*, void*) = permission_acquire_async;
extern int g_permission_acquire_finish(GPermission*, GAsyncResult*, GError**) = permission_acquire_finish;
extern int g_permission_release(GPermission*, GCancellable*, GError**) = permission_release;
extern void g_permission_release_async(GPermission*, GCancellable*, void*, void*) = permission_release_async;
extern int g_permission_release_finish(GPermission*, GAsyncResult*, GError**) = permission_release_finish;
extern int g_permission_get_allowed(GPermission*) = permission_get_allowed;
extern int g_permission_get_can_acquire(GPermission*) = permission_get_can_acquire;
extern int g_permission_get_can_release(GPermission*) = permission_get_can_release;
extern void g_permission_impl_update(GPermission*, int, int, int) = permission_impl_update;
extern long g_pollable_input_stream_get_type() = pollable_input_stream_get_type;
extern int g_pollable_input_stream_can_poll(GPollableInputStream*) = pollable_input_stream_can_poll;
extern int g_pollable_input_stream_is_readable(GPollableInputStream*) = pollable_input_stream_is_readable;
extern GSource* g_pollable_input_stream_create_source(GPollableInputStream*, GCancellable*) = pollable_input_stream_create_source;
extern long g_pollable_input_stream_read_nonblocking(GPollableInputStream*, void*, long, GCancellable*, GError**) = pollable_input_stream_read_nonblocking;
extern GSource* g_pollable_source_new(GObject*) = pollable_source_new;
extern long g_pollable_output_stream_get_type() = pollable_output_stream_get_type;
extern int g_pollable_output_stream_can_poll(GPollableOutputStream*) = pollable_output_stream_can_poll;
extern int g_pollable_output_stream_is_writable(GPollableOutputStream*) = pollable_output_stream_is_writable;
extern GSource* g_pollable_output_stream_create_source(GPollableOutputStream*, GCancellable*) = pollable_output_stream_create_source;
extern long g_pollable_output_stream_write_nonblocking(GPollableOutputStream*, void*, long, GCancellable*, GError**) = pollable_output_stream_write_nonblocking;
extern long g_proxy_get_type() = proxy_get_type;
extern GProxy* g_proxy_get_default_for_protocol(char*) = proxy_get_default_for_protocol;
extern GIOStream* g_proxy_connect(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**) = proxy_connect;
extern void g_proxy_connect_async(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, void*, void*) = proxy_connect_async;
extern GIOStream* g_proxy_connect_finish(GProxy*, GAsyncResult*, GError**) = proxy_connect_finish;
extern int g_proxy_supports_hostname(GProxy*) = proxy_supports_hostname;
extern long g_proxy_address_get_type() = proxy_address_get_type;
extern GSocketAddress* g_proxy_address_new(GInetAddress*, short, char*, char*, short, char*, char*) = proxy_address_new;
extern char* g_proxy_address_get_protocol(GProxyAddress*) = proxy_address_get_protocol;
extern char* g_proxy_address_get_destination_hostname(GProxyAddress*) = proxy_address_get_destination_hostname;
extern short g_proxy_address_get_destination_port(GProxyAddress*) = proxy_address_get_destination_port;
extern char* g_proxy_address_get_username(GProxyAddress*) = proxy_address_get_username;
extern char* g_proxy_address_get_password(GProxyAddress*) = proxy_address_get_password;
extern long g_socket_address_enumerator_get_type() = socket_address_enumerator_get_type;
extern GSocketAddress* g_socket_address_enumerator_next(GSocketAddressEnumerator*, GCancellable*, GError**) = socket_address_enumerator_next;
extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator*, GCancellable*, void*, void*) = socket_address_enumerator_next_async;
extern GSocketAddress* g_socket_address_enumerator_next_finish(GSocketAddressEnumerator*, GAsyncResult*, GError**) = socket_address_enumerator_next_finish;
extern long g_proxy_address_enumerator_get_type() = proxy_address_enumerator_get_type;
extern long g_proxy_resolver_get_type() = proxy_resolver_get_type;
extern GProxyResolver* g_proxy_resolver_get_default() = proxy_resolver_get_default;
extern int g_proxy_resolver_is_supported(GProxyResolver*) = proxy_resolver_is_supported;
extern char** g_proxy_resolver_lookup(GProxyResolver*, char*, GCancellable*, GError**) = proxy_resolver_lookup;
extern void g_proxy_resolver_lookup_async(GProxyResolver*, char*, GCancellable*, void*, void*) = proxy_resolver_lookup_async;
extern char** g_proxy_resolver_lookup_finish(GProxyResolver*, GAsyncResult*, GError**) = proxy_resolver_lookup_finish;
extern long g_resolver_get_type() = resolver_get_type;
extern GResolver* g_resolver_get_default() = resolver_get_default;
extern void g_resolver_set_default(GResolver*) = resolver_set_default;
extern GList* g_resolver_lookup_by_name(GResolver*, char*, GCancellable*, GError**) = resolver_lookup_by_name;
extern void g_resolver_lookup_by_name_async(GResolver*, char*, GCancellable*, void*, void*) = resolver_lookup_by_name_async;
extern GList* g_resolver_lookup_by_name_finish(GResolver*, GAsyncResult*, GError**) = resolver_lookup_by_name_finish;
extern void g_resolver_free_addresses(GList*) = resolver_free_addresses;
extern char* g_resolver_lookup_by_address(GResolver*, GInetAddress*, GCancellable*, GError**) = resolver_lookup_by_address;
extern void g_resolver_lookup_by_address_async(GResolver*, GInetAddress*, GCancellable*, void*, void*) = resolver_lookup_by_address_async;
extern char* g_resolver_lookup_by_address_finish(GResolver*, GAsyncResult*, GError**) = resolver_lookup_by_address_finish;
extern GList* g_resolver_lookup_service(GResolver*, char*, char*, char*, GCancellable*, GError**) = resolver_lookup_service;
extern void g_resolver_lookup_service_async(GResolver*, char*, char*, char*, GCancellable*, void*, void*) = resolver_lookup_service_async;
extern GList* g_resolver_lookup_service_finish(GResolver*, GAsyncResult*, GError**) = resolver_lookup_service_finish;
extern void g_resolver_free_targets(GList*) = resolver_free_targets;
extern int g_resolver_error_quark() = resolver_error_quark;
extern int g_resource_error_quark() = resource_error_quark;
extern long g_resource_get_type() = resource_get_type;
extern GResource* g_resource_new_from_data(GBytes*, GError**) = resource_new_from_data;
extern GResource* g_resource_ref(GResource*) = resource_ref;
extern void g_resource_unref(GResource*) = resource_unref;
extern GResource* g_resource_load(char*, GError**) = resource_load;
extern GInputStream* g_resource_open_stream(GResource*, char*, int, GError**) = resource_open_stream;
extern GBytes* g_resource_lookup_data(GResource*, char*, int, GError**) = resource_lookup_data;
extern char** g_resource_enumerate_children(GResource*, char*, int, GError**) = resource_enumerate_children;
extern int g_resource_get_info(GResource*, char*, int, long*, int*, GError**) = resource_get_info;
extern void g_resources_register(GResource*) = resources_register;
extern void g_resources_unregister(GResource*) = resources_unregister;
extern GInputStream* g_resources_open_stream(char*, int, GError**) = resources_open_stream;
extern GBytes* g_resources_lookup_data(char*, int, GError**) = resources_lookup_data;
extern char** g_resources_enumerate_children(char*, int, GError**) = resources_enumerate_children;
extern int g_resources_get_info(char*, int, long*, int*, GError**) = resources_get_info;
extern void g_static_resource_init(GStaticResource*) = static_resource_init;
extern void g_static_resource_fini(GStaticResource*) = static_resource_fini;
extern GResource* g_static_resource_get_resource(GStaticResource*) = static_resource_get_resource;
extern long g_seekable_get_type() = seekable_get_type;
extern long g_seekable_tell(GSeekable*) = seekable_tell;
extern int g_seekable_can_seek(GSeekable*) = seekable_can_seek;
extern int g_seekable_seek(GSeekable*, long, int, GCancellable*, GError**) = seekable_seek;
extern int g_seekable_can_truncate(GSeekable*) = seekable_can_truncate;
extern int g_seekable_truncate(GSeekable*, long, GCancellable*, GError**) = seekable_truncate;
extern long g_settings_schema_source_get_type() = settings_schema_source_get_type;
extern GSettingsSchemaSource* g_settings_schema_source_get_default() = settings_schema_source_get_default;
extern GSettingsSchemaSource* g_settings_schema_source_ref(GSettingsSchemaSource*) = settings_schema_source_ref;
extern void g_settings_schema_source_unref(GSettingsSchemaSource*) = settings_schema_source_unref;
extern GSettingsSchemaSource* g_settings_schema_source_new_from_directory(char*, GSettingsSchemaSource*, int, GError**) = settings_schema_source_new_from_directory;
extern GSettingsSchema* g_settings_schema_source_lookup(GSettingsSchemaSource*, char*, int) = settings_schema_source_lookup;
extern long g_settings_schema_get_type() = settings_schema_get_type;
extern GSettingsSchema* g_settings_schema_ref(GSettingsSchema*) = settings_schema_ref;
extern void g_settings_schema_unref(GSettingsSchema*) = settings_schema_unref;
extern char* g_settings_schema_get_id(GSettingsSchema*) = settings_schema_get_id;
extern char* g_settings_schema_get_path(GSettingsSchema*) = settings_schema_get_path;
extern long g_settings_get_type() = settings_get_type;
extern char** g_settings_list_schemas() = settings_list_schemas;
extern char** g_settings_list_relocatable_schemas() = settings_list_relocatable_schemas;
extern GSettings* g_settings_new(char*) = settings_new;
extern GSettings* g_settings_new_with_path(char*, char*) = settings_new_with_path;
extern GSettings* g_settings_new_with_backend(char*, GSettingsBackend*) = settings_new_with_backend;
extern GSettings* g_settings_new_with_backend_and_path(char*, GSettingsBackend*, char*) = settings_new_with_backend_and_path;
extern GSettings* g_settings_new_full(GSettingsSchema*, GSettingsBackend*, char*) = settings_new_full;
extern char** g_settings_list_children(GSettings*) = settings_list_children;
extern char** g_settings_list_keys(GSettings*) = settings_list_keys;
extern GVariant* g_settings_get_range(GSettings*, char*) = settings_get_range;
extern int g_settings_range_check(GSettings*, char*, GVariant*) = settings_range_check;
extern int g_settings_set_value(GSettings*, char*, GVariant*) = settings_set_value;
extern GVariant* g_settings_get_value(GSettings*, char*) = settings_get_value;
extern int g_settings_set(GSettings*, char*, char*, ...) = settings_set;
extern void g_settings_get(GSettings*, char*, char*, ...) = settings_get;
extern void g_settings_reset(GSettings*, char*) = settings_reset;
extern int g_settings_get_int(GSettings*, char*) = settings_get_int;
extern int g_settings_set_int(GSettings*, char*, int) = settings_set_int;
extern int g_settings_get_uint(GSettings*, char*) = settings_get_uint;
extern int g_settings_set_uint(GSettings*, char*, int) = settings_set_uint;
extern char* g_settings_get_string(GSettings*, char*) = settings_get_string;
extern int g_settings_set_string(GSettings*, char*, char*) = settings_set_string;
extern int g_settings_get_boolean(GSettings*, char*) = settings_get_boolean;
extern int g_settings_set_boolean(GSettings*, char*, int) = settings_set_boolean;
extern double g_settings_get_double(GSettings*, char*) = settings_get_double;
extern int g_settings_set_double(GSettings*, char*, double) = settings_set_double;
extern char** g_settings_get_strv(GSettings*, char*) = settings_get_strv;
extern int g_settings_set_strv(GSettings*, char*, char**) = settings_set_strv;
extern int g_settings_get_enum(GSettings*, char*) = settings_get_enum;
extern int g_settings_set_enum(GSettings*, char*, int) = settings_set_enum;
extern int g_settings_get_flags(GSettings*, char*) = settings_get_flags;
extern int g_settings_set_flags(GSettings*, char*, int) = settings_set_flags;
extern GSettings* g_settings_get_child(GSettings*, char*) = settings_get_child;
extern int g_settings_is_writable(GSettings*, char*) = settings_is_writable;
extern void g_settings_delay(GSettings*) = settings_delay;
extern void g_settings_apply(GSettings*) = settings_apply;
extern void g_settings_revert(GSettings*) = settings_revert;
extern int g_settings_get_has_unapplied(GSettings*) = settings_get_has_unapplied;
extern void g_settings_sync() = settings_sync;
extern void g_settings_bind(GSettings*, char*, void*, char*, int) = settings_bind;
extern void g_settings_bind_with_mapping(GSettings*, char*, void*, char*, int, void*, void*, void*, void*) = settings_bind_with_mapping;
extern void g_settings_bind_writable(GSettings*, char*, void*, char*, int) = settings_bind_writable;
extern void g_settings_unbind(void*, char*) = settings_unbind;
extern GAction* g_settings_create_action(GSettings*, char*) = settings_create_action;
extern void* g_settings_get_mapped(GSettings*, char*, void*, void*) = settings_get_mapped;
extern long g_simple_action_get_type() = simple_action_get_type;
extern GSimpleAction* g_simple_action_new(char*, GVariantType*) = simple_action_new;
extern GSimpleAction* g_simple_action_new_stateful(char*, GVariantType*, GVariant*) = simple_action_new_stateful;
extern void g_simple_action_set_enabled(GSimpleAction*, int) = simple_action_set_enabled;
extern void g_simple_action_set_state(GSimpleAction*, GVariant*) = simple_action_set_state;
extern long g_simple_action_group_get_type() = simple_action_group_get_type;
extern GSimpleActionGroup* g_simple_action_group_new() = simple_action_group_new;
extern GAction* g_simple_action_group_lookup(GSimpleActionGroup*, char*) = simple_action_group_lookup;
extern void g_simple_action_group_insert(GSimpleActionGroup*, GAction*) = simple_action_group_insert;
extern void g_simple_action_group_remove(GSimpleActionGroup*, char*) = simple_action_group_remove;
extern void g_simple_action_group_add_entries(GSimpleActionGroup*, GActionEntry*, int, void*) = simple_action_group_add_entries;
extern long g_simple_async_result_get_type() = simple_async_result_get_type;
extern GSimpleAsyncResult* g_simple_async_result_new(GObject*, void*, void*, void*) = simple_async_result_new;
extern GSimpleAsyncResult* g_simple_async_result_new_error(GObject*, void*, void*, int, int, char*, ...) = simple_async_result_new_error;
extern GSimpleAsyncResult* g_simple_async_result_new_from_error(GObject*, void*, void*, GError*) = simple_async_result_new_from_error;
extern GSimpleAsyncResult* g_simple_async_result_new_take_error(GObject*, void*, void*, GError*) = simple_async_result_new_take_error;
extern void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult*, void*, void*) = simple_async_result_set_op_res_gpointer;
extern void* g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult*) = simple_async_result_get_op_res_gpointer;
extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult*, long) = simple_async_result_set_op_res_gssize;
extern long g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult*) = simple_async_result_get_op_res_gssize;
extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult*, int) = simple_async_result_set_op_res_gboolean;
extern int g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult*) = simple_async_result_get_op_res_gboolean;
extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult*, GCancellable*) = simple_async_result_set_check_cancellable;
extern void* g_simple_async_result_get_source_tag(GSimpleAsyncResult*) = simple_async_result_get_source_tag;
extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult*, int) = simple_async_result_set_handle_cancellation;
extern void g_simple_async_result_complete(GSimpleAsyncResult*) = simple_async_result_complete;
extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult*) = simple_async_result_complete_in_idle;
extern void g_simple_async_result_run_in_thread(GSimpleAsyncResult*, void*, int, GCancellable*) = simple_async_result_run_in_thread;
extern void g_simple_async_result_set_from_error(GSimpleAsyncResult*, GError*) = simple_async_result_set_from_error;
extern void g_simple_async_result_take_error(GSimpleAsyncResult*, GError*) = simple_async_result_take_error;
extern int g_simple_async_result_propagate_error(GSimpleAsyncResult*, GError**) = simple_async_result_propagate_error;
extern void g_simple_async_result_set_error(GSimpleAsyncResult*, int, int, char*, ...) = simple_async_result_set_error;
extern void g_simple_async_result_set_error_va(GSimpleAsyncResult*, int, int, char*, void*) = simple_async_result_set_error_va;
extern int g_simple_async_result_is_valid(GAsyncResult*, GObject*, void*) = simple_async_result_is_valid;
extern void g_simple_async_report_error_in_idle(GObject*, void*, void*, int, int, char*, ...) = simple_async_report_error_in_idle;
extern void g_simple_async_report_gerror_in_idle(GObject*, void*, void*, GError*) = simple_async_report_gerror_in_idle;
extern void g_simple_async_report_take_gerror_in_idle(GObject*, void*, void*, GError*) = simple_async_report_take_gerror_in_idle;
extern long g_simple_permission_get_type() = simple_permission_get_type;
extern GPermission* g_simple_permission_new(int) = simple_permission_new;
extern long g_socket_client_get_type() = socket_client_get_type;
extern GSocketClient* g_socket_client_new() = socket_client_new;
extern int g_socket_client_get_family(GSocketClient*) = socket_client_get_family;
extern void g_socket_client_set_family(GSocketClient*, int) = socket_client_set_family;
extern int g_socket_client_get_socket_type(GSocketClient*) = socket_client_get_socket_type;
extern void g_socket_client_set_socket_type(GSocketClient*, int) = socket_client_set_socket_type;
extern int g_socket_client_get_protocol(GSocketClient*) = socket_client_get_protocol;
extern void g_socket_client_set_protocol(GSocketClient*, int) = socket_client_set_protocol;
extern GSocketAddress* g_socket_client_get_local_address(GSocketClient*) = socket_client_get_local_address;
extern void g_socket_client_set_local_address(GSocketClient*, GSocketAddress*) = socket_client_set_local_address;
extern int g_socket_client_get_timeout(GSocketClient*) = socket_client_get_timeout;
extern void g_socket_client_set_timeout(GSocketClient*, int) = socket_client_set_timeout;
extern int g_socket_client_get_enable_proxy(GSocketClient*) = socket_client_get_enable_proxy;
extern void g_socket_client_set_enable_proxy(GSocketClient*, int) = socket_client_set_enable_proxy;
extern int g_socket_client_get_tls(GSocketClient*) = socket_client_get_tls;
extern void g_socket_client_set_tls(GSocketClient*, int) = socket_client_set_tls;
extern int g_socket_client_get_tls_validation_flags(GSocketClient*) = socket_client_get_tls_validation_flags;
extern void g_socket_client_set_tls_validation_flags(GSocketClient*, int) = socket_client_set_tls_validation_flags;
extern GSocketConnection* g_socket_client_connect(GSocketClient*, GSocketConnectable*, GCancellable*, GError**) = socket_client_connect;
extern GSocketConnection* g_socket_client_connect_to_host(GSocketClient*, char*, short, GCancellable*, GError**) = socket_client_connect_to_host;
extern GSocketConnection* g_socket_client_connect_to_service(GSocketClient*, char*, char*, GCancellable*, GError**) = socket_client_connect_to_service;
extern GSocketConnection* g_socket_client_connect_to_uri(GSocketClient*, char*, short, GCancellable*, GError**) = socket_client_connect_to_uri;
extern void g_socket_client_connect_async(GSocketClient*, GSocketConnectable*, GCancellable*, void*, void*) = socket_client_connect_async;
extern GSocketConnection* g_socket_client_connect_finish(GSocketClient*, GAsyncResult*, GError**) = socket_client_connect_finish;
extern void g_socket_client_connect_to_host_async(GSocketClient*, char*, short, GCancellable*, void*, void*) = socket_client_connect_to_host_async;
extern GSocketConnection* g_socket_client_connect_to_host_finish(GSocketClient*, GAsyncResult*, GError**) = socket_client_connect_to_host_finish;
extern void g_socket_client_connect_to_service_async(GSocketClient*, char*, char*, GCancellable*, void*, void*) = socket_client_connect_to_service_async;
extern GSocketConnection* g_socket_client_connect_to_service_finish(GSocketClient*, GAsyncResult*, GError**) = socket_client_connect_to_service_finish;
extern void g_socket_client_connect_to_uri_async(GSocketClient*, char*, short, GCancellable*, void*, void*) = socket_client_connect_to_uri_async;
extern GSocketConnection* g_socket_client_connect_to_uri_finish(GSocketClient*, GAsyncResult*, GError**) = socket_client_connect_to_uri_finish;
extern void g_socket_client_add_application_proxy(GSocketClient*, char*) = socket_client_add_application_proxy;
extern long g_socket_connectable_get_type() = socket_connectable_get_type;
extern GSocketAddressEnumerator* g_socket_connectable_enumerate(GSocketConnectable*) = socket_connectable_enumerate;
extern GSocketAddressEnumerator* g_socket_connectable_proxy_enumerate(GSocketConnectable*) = socket_connectable_proxy_enumerate;
extern long g_socket_get_type() = socket_get_type;
extern GSocket* g_socket_new(int, int, int, GError**) = socket_new;
extern GSocket* g_socket_new_from_fd(int, GError**) = socket_new_from_fd;
extern int g_socket_get_fd(GSocket*) = socket_get_fd;
extern int g_socket_get_family(GSocket*) = socket_get_family;
extern int g_socket_get_socket_type(GSocket*) = socket_get_socket_type;
extern int g_socket_get_protocol(GSocket*) = socket_get_protocol;
extern GSocketAddress* g_socket_get_local_address(GSocket*, GError**) = socket_get_local_address;
extern GSocketAddress* g_socket_get_remote_address(GSocket*, GError**) = socket_get_remote_address;
extern void g_socket_set_blocking(GSocket*, int) = socket_set_blocking;
extern int g_socket_get_blocking(GSocket*) = socket_get_blocking;
extern void g_socket_set_keepalive(GSocket*, int) = socket_set_keepalive;
extern int g_socket_get_keepalive(GSocket*) = socket_get_keepalive;
extern int g_socket_get_listen_backlog(GSocket*) = socket_get_listen_backlog;
extern void g_socket_set_listen_backlog(GSocket*, int) = socket_set_listen_backlog;
extern int g_socket_get_timeout(GSocket*) = socket_get_timeout;
extern void g_socket_set_timeout(GSocket*, int) = socket_set_timeout;
extern int g_socket_get_ttl(GSocket*) = socket_get_ttl;
extern void g_socket_set_ttl(GSocket*, int) = socket_set_ttl;
extern int g_socket_get_broadcast(GSocket*) = socket_get_broadcast;
extern void g_socket_set_broadcast(GSocket*, int) = socket_set_broadcast;
extern int g_socket_get_multicast_loopback(GSocket*) = socket_get_multicast_loopback;
extern void g_socket_set_multicast_loopback(GSocket*, int) = socket_set_multicast_loopback;
extern int g_socket_get_multicast_ttl(GSocket*) = socket_get_multicast_ttl;
extern void g_socket_set_multicast_ttl(GSocket*, int) = socket_set_multicast_ttl;
extern int g_socket_is_connected(GSocket*) = socket_is_connected;
extern int g_socket_bind(GSocket*, GSocketAddress*, int, GError**) = socket_bind;
extern int g_socket_join_multicast_group(GSocket*, GInetAddress*, int, char*, GError**) = socket_join_multicast_group;
extern int g_socket_leave_multicast_group(GSocket*, GInetAddress*, int, char*, GError**) = socket_leave_multicast_group;
extern int g_socket_connect(GSocket*, GSocketAddress*, GCancellable*, GError**) = socket_connect;
extern int g_socket_check_connect_result(GSocket*, GError**) = socket_check_connect_result;
extern long g_socket_get_available_bytes(GSocket*) = socket_get_available_bytes;
extern int g_socket_condition_check(GSocket*, int) = socket_condition_check;
extern int g_socket_condition_wait(GSocket*, int, GCancellable*, GError**) = socket_condition_wait;
extern int g_socket_condition_timed_wait(GSocket*, int, long, GCancellable*, GError**) = socket_condition_timed_wait;
extern GSocket* g_socket_accept(GSocket*, GCancellable*, GError**) = socket_accept;
extern int g_socket_listen(GSocket*, GError**) = socket_listen;
extern long g_socket_receive(GSocket*, char*, long, GCancellable*, GError**) = socket_receive;
extern long g_socket_receive_from(GSocket*, GSocketAddress**, char*, long, GCancellable*, GError**) = socket_receive_from;
extern long g_socket_send(GSocket*, char*, long, GCancellable*, GError**) = socket_send;
extern long g_socket_send_to(GSocket*, GSocketAddress*, char*, long, GCancellable*, GError**) = socket_send_to;
extern long g_socket_receive_message(GSocket*, GSocketAddress**, GInputVector*, int, GSocketControlMessage***, int*, int*, GCancellable*, GError**) = socket_receive_message;
extern long g_socket_send_message(GSocket*, GSocketAddress*, GOutputVector*, int, GSocketControlMessage**, int, int, GCancellable*, GError**) = socket_send_message;
extern int g_socket_close(GSocket*, GError**) = socket_close;
extern int g_socket_shutdown(GSocket*, int, int, GError**) = socket_shutdown;
extern int g_socket_is_closed(GSocket*) = socket_is_closed;
extern GSource* g_socket_create_source(GSocket*, int, GCancellable*) = socket_create_source;
extern int g_socket_speaks_ipv4(GSocket*) = socket_speaks_ipv4;
extern GCredentials* g_socket_get_credentials(GSocket*, GError**) = socket_get_credentials;
extern long g_socket_receive_with_blocking(GSocket*, char*, long, int, GCancellable*, GError**) = socket_receive_with_blocking;
extern long g_socket_send_with_blocking(GSocket*, char*, long, int, GCancellable*, GError**) = socket_send_with_blocking;
extern long g_socket_connection_get_type() = socket_connection_get_type;
extern int g_socket_connection_is_connected(GSocketConnection*) = socket_connection_is_connected;
extern int g_socket_connection_connect(GSocketConnection*, GSocketAddress*, GCancellable*, GError**) = socket_connection_connect;
extern void g_socket_connection_connect_async(GSocketConnection*, GSocketAddress*, GCancellable*, void*, void*) = socket_connection_connect_async;
extern int g_socket_connection_connect_finish(GSocketConnection*, GAsyncResult*, GError**) = socket_connection_connect_finish;
extern GSocket* g_socket_connection_get_socket(GSocketConnection*) = socket_connection_get_socket;
extern GSocketAddress* g_socket_connection_get_local_address(GSocketConnection*, GError**) = socket_connection_get_local_address;
extern GSocketAddress* g_socket_connection_get_remote_address(GSocketConnection*, GError**) = socket_connection_get_remote_address;
extern void g_socket_connection_factory_register_type(long, int, int, int) = socket_connection_factory_register_type;
extern long g_socket_connection_factory_lookup_type(int, int, int) = socket_connection_factory_lookup_type;
extern GSocketConnection* g_socket_connection_factory_create_connection(GSocket*) = socket_connection_factory_create_connection;
extern long g_socket_control_message_get_type() = socket_control_message_get_type;
extern long g_socket_control_message_get_size(GSocketControlMessage*) = socket_control_message_get_size;
extern int g_socket_control_message_get_level(GSocketControlMessage*) = socket_control_message_get_level;
extern int g_socket_control_message_get_msg_type(GSocketControlMessage*) = socket_control_message_get_msg_type;
extern void g_socket_control_message_serialize(GSocketControlMessage*, void*) = socket_control_message_serialize;
extern GSocketControlMessage* g_socket_control_message_deserialize(int, int, long, void*) = socket_control_message_deserialize;
extern long g_socket_listener_get_type() = socket_listener_get_type;
extern GSocketListener* g_socket_listener_new() = socket_listener_new;
extern void g_socket_listener_set_backlog(GSocketListener*, int) = socket_listener_set_backlog;
extern int g_socket_listener_add_socket(GSocketListener*, GSocket*, GObject*, GError**) = socket_listener_add_socket;
extern int g_socket_listener_add_address(GSocketListener*, GSocketAddress*, int, int, GObject*, GSocketAddress**, GError**) = socket_listener_add_address;
extern int g_socket_listener_add_inet_port(GSocketListener*, short, GObject*, GError**) = socket_listener_add_inet_port;
extern short g_socket_listener_add_any_inet_port(GSocketListener*, GObject*, GError**) = socket_listener_add_any_inet_port;
extern GSocket* g_socket_listener_accept_socket(GSocketListener*, GObject**, GCancellable*, GError**) = socket_listener_accept_socket;
extern void g_socket_listener_accept_socket_async(GSocketListener*, GCancellable*, void*, void*) = socket_listener_accept_socket_async;
extern GSocket* g_socket_listener_accept_socket_finish(GSocketListener*, GAsyncResult*, GObject**, GError**) = socket_listener_accept_socket_finish;
extern GSocketConnection* g_socket_listener_accept(GSocketListener*, GObject**, GCancellable*, GError**) = socket_listener_accept;
extern void g_socket_listener_accept_async(GSocketListener*, GCancellable*, void*, void*) = socket_listener_accept_async;
extern GSocketConnection* g_socket_listener_accept_finish(GSocketListener*, GAsyncResult*, GObject**, GError**) = socket_listener_accept_finish;
extern void g_socket_listener_close(GSocketListener*) = socket_listener_close;
extern long g_socket_service_get_type() = socket_service_get_type;
extern GSocketService* g_socket_service_new() = socket_service_new;
extern void g_socket_service_start(GSocketService*) = socket_service_start;
extern void g_socket_service_stop(GSocketService*) = socket_service_stop;
extern int g_socket_service_is_active(GSocketService*) = socket_service_is_active;
extern long g_srv_target_get_type() = srv_target_get_type;
extern GSrvTarget* g_srv_target_new(char*, short, short, short) = srv_target_new;
extern GSrvTarget* g_srv_target_copy(GSrvTarget*) = srv_target_copy;
extern void g_srv_target_free(GSrvTarget*) = srv_target_free;
extern char* g_srv_target_get_hostname(GSrvTarget*) = srv_target_get_hostname;
extern short g_srv_target_get_port(GSrvTarget*) = srv_target_get_port;
extern short g_srv_target_get_priority(GSrvTarget*) = srv_target_get_priority;
extern short g_srv_target_get_weight(GSrvTarget*) = srv_target_get_weight;
extern GList* g_srv_target_list_sort(GList*) = srv_target_list_sort;
extern long g_tcp_connection_get_type() = tcp_connection_get_type;
extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection*, int) = tcp_connection_set_graceful_disconnect;
extern int g_tcp_connection_get_graceful_disconnect(GTcpConnection*) = tcp_connection_get_graceful_disconnect;
extern long g_tcp_wrapper_connection_get_type() = tcp_wrapper_connection_get_type;
extern GSocketConnection* g_tcp_wrapper_connection_new(GIOStream*, GSocket*) = tcp_wrapper_connection_new;
extern GIOStream* g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection*) = tcp_wrapper_connection_get_base_io_stream;
extern long g_themed_icon_get_type() = themed_icon_get_type;
extern GIcon* g_themed_icon_new(char*) = themed_icon_new;
extern GIcon* g_themed_icon_new_with_default_fallbacks(char*) = themed_icon_new_with_default_fallbacks;
extern GIcon* g_themed_icon_new_from_names(char**, int) = themed_icon_new_from_names;
extern void g_themed_icon_prepend_name(GThemedIcon*, char*) = themed_icon_prepend_name;
extern void g_themed_icon_append_name(GThemedIcon*, char*) = themed_icon_append_name;
extern char** g_themed_icon_get_names(GThemedIcon*) = themed_icon_get_names;
extern long g_threaded_socket_service_get_type() = threaded_socket_service_get_type;
extern GSocketService* g_threaded_socket_service_new(int) = threaded_socket_service_new;
extern long g_tls_backend_get_type() = tls_backend_get_type;
extern GTlsBackend* g_tls_backend_get_default() = tls_backend_get_default;
extern GTlsDatabase* g_tls_backend_get_default_database(GTlsBackend*) = tls_backend_get_default_database;
extern int g_tls_backend_supports_tls(GTlsBackend*) = tls_backend_supports_tls;
extern long g_tls_backend_get_certificate_type(GTlsBackend*) = tls_backend_get_certificate_type;
extern long g_tls_backend_get_client_connection_type(GTlsBackend*) = tls_backend_get_client_connection_type;
extern long g_tls_backend_get_server_connection_type(GTlsBackend*) = tls_backend_get_server_connection_type;
extern long g_tls_backend_get_file_database_type(GTlsBackend*) = tls_backend_get_file_database_type;
extern long g_tls_certificate_get_type() = tls_certificate_get_type;
extern GTlsCertificate* g_tls_certificate_new_from_pem(char*, long, GError**) = tls_certificate_new_from_pem;
extern GTlsCertificate* g_tls_certificate_new_from_file(char*, GError**) = tls_certificate_new_from_file;
extern GTlsCertificate* g_tls_certificate_new_from_files(char*, char*, GError**) = tls_certificate_new_from_files;
extern GList* g_tls_certificate_list_new_from_file(char*, GError**) = tls_certificate_list_new_from_file;
extern GTlsCertificate* g_tls_certificate_get_issuer(GTlsCertificate*) = tls_certificate_get_issuer;
extern int g_tls_certificate_verify(GTlsCertificate*, GSocketConnectable*, GTlsCertificate*) = tls_certificate_verify;
extern long g_tls_connection_get_type() = tls_connection_get_type;
extern void g_tls_connection_set_use_system_certdb(GTlsConnection*, int) = tls_connection_set_use_system_certdb;
extern int g_tls_connection_get_use_system_certdb(GTlsConnection*) = tls_connection_get_use_system_certdb;
extern void g_tls_connection_set_database(GTlsConnection*, GTlsDatabase*) = tls_connection_set_database;
extern GTlsDatabase* g_tls_connection_get_database(GTlsConnection*) = tls_connection_get_database;
extern void g_tls_connection_set_certificate(GTlsConnection*, GTlsCertificate*) = tls_connection_set_certificate;
extern GTlsCertificate* g_tls_connection_get_certificate(GTlsConnection*) = tls_connection_get_certificate;
extern void g_tls_connection_set_interaction(GTlsConnection*, GTlsInteraction*) = tls_connection_set_interaction;
extern GTlsInteraction* g_tls_connection_get_interaction(GTlsConnection*) = tls_connection_get_interaction;
extern GTlsCertificate* g_tls_connection_get_peer_certificate(GTlsConnection*) = tls_connection_get_peer_certificate;
extern int g_tls_connection_get_peer_certificate_errors(GTlsConnection*) = tls_connection_get_peer_certificate_errors;
extern void g_tls_connection_set_require_close_notify(GTlsConnection*, int) = tls_connection_set_require_close_notify;
extern int g_tls_connection_get_require_close_notify(GTlsConnection*) = tls_connection_get_require_close_notify;
extern void g_tls_connection_set_rehandshake_mode(GTlsConnection*, int) = tls_connection_set_rehandshake_mode;
extern int g_tls_connection_get_rehandshake_mode(GTlsConnection*) = tls_connection_get_rehandshake_mode;
extern int g_tls_connection_handshake(GTlsConnection*, GCancellable*, GError**) = tls_connection_handshake;
extern void g_tls_connection_handshake_async(GTlsConnection*, int, GCancellable*, void*, void*) = tls_connection_handshake_async;
extern int g_tls_connection_handshake_finish(GTlsConnection*, GAsyncResult*, GError**) = tls_connection_handshake_finish;
extern int g_tls_error_quark() = tls_error_quark;
extern int g_tls_connection_emit_accept_certificate(GTlsConnection*, GTlsCertificate*, int) = tls_connection_emit_accept_certificate;
extern long g_tls_client_connection_get_type() = tls_client_connection_get_type;
extern GIOStream* g_tls_client_connection_new(GIOStream*, GSocketConnectable*, GError**) = tls_client_connection_new;
extern int g_tls_client_connection_get_validation_flags(GTlsClientConnection*) = tls_client_connection_get_validation_flags;
extern void g_tls_client_connection_set_validation_flags(GTlsClientConnection*, int) = tls_client_connection_set_validation_flags;
extern GSocketConnectable* g_tls_client_connection_get_server_identity(GTlsClientConnection*) = tls_client_connection_get_server_identity;
extern void g_tls_client_connection_set_server_identity(GTlsClientConnection*, GSocketConnectable*) = tls_client_connection_set_server_identity;
extern int g_tls_client_connection_get_use_ssl3(GTlsClientConnection*) = tls_client_connection_get_use_ssl3;
extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection*, int) = tls_client_connection_set_use_ssl3;
extern GList* g_tls_client_connection_get_accepted_cas(GTlsClientConnection*) = tls_client_connection_get_accepted_cas;
extern long g_tls_database_get_type() = tls_database_get_type;
extern int g_tls_database_verify_chain(GTlsDatabase*, GTlsCertificate*, char*, GSocketConnectable*, GTlsInteraction*, int, GCancellable*, GError**) = tls_database_verify_chain;
extern void g_tls_database_verify_chain_async(GTlsDatabase*, GTlsCertificate*, char*, GSocketConnectable*, GTlsInteraction*, int, GCancellable*, void*, void*) = tls_database_verify_chain_async;
extern int g_tls_database_verify_chain_finish(GTlsDatabase*, GAsyncResult*, GError**) = tls_database_verify_chain_finish;
extern char* g_tls_database_create_certificate_handle(GTlsDatabase*, GTlsCertificate*) = tls_database_create_certificate_handle;
extern GTlsCertificate* g_tls_database_lookup_certificate_for_handle(GTlsDatabase*, char*, GTlsInteraction*, int, GCancellable*, GError**) = tls_database_lookup_certificate_for_handle;
extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase*, char*, GTlsInteraction*, int, GCancellable*, void*, void*) = tls_database_lookup_certificate_for_handle_async;
extern GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase*, GAsyncResult*, GError**) = tls_database_lookup_certificate_for_handle_finish;
extern GTlsCertificate* g_tls_database_lookup_certificate_issuer(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, int, GCancellable*, GError**) = tls_database_lookup_certificate_issuer;
extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, int, GCancellable*, void*, void*) = tls_database_lookup_certificate_issuer_async;
extern GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase*, GAsyncResult*, GError**) = tls_database_lookup_certificate_issuer_finish;
extern GList* g_tls_database_lookup_certificates_issued_by(GTlsDatabase*, GByteArray*, GTlsInteraction*, int, GCancellable*, GError**) = tls_database_lookup_certificates_issued_by;
extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase*, GByteArray*, GTlsInteraction*, int, GCancellable*, void*, void*) = tls_database_lookup_certificates_issued_by_async;
extern GList* g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase*, GAsyncResult*, GError**) = tls_database_lookup_certificates_issued_by_finish;
extern long g_tls_file_database_get_type() = tls_file_database_get_type;
extern GTlsDatabase* g_tls_file_database_new(char*, GError**) = tls_file_database_new;
extern long g_tls_interaction_get_type() = tls_interaction_get_type;
extern int g_tls_interaction_invoke_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**) = tls_interaction_invoke_ask_password;
extern int g_tls_interaction_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**) = tls_interaction_ask_password;
extern void g_tls_interaction_ask_password_async(GTlsInteraction*, GTlsPassword*, GCancellable*, void*, void*) = tls_interaction_ask_password_async;
extern int g_tls_interaction_ask_password_finish(GTlsInteraction*, GAsyncResult*, GError**) = tls_interaction_ask_password_finish;
extern long g_tls_server_connection_get_type() = tls_server_connection_get_type;
extern GIOStream* g_tls_server_connection_new(GIOStream*, GTlsCertificate*, GError**) = tls_server_connection_new;
extern long g_tls_password_get_type() = tls_password_get_type;
extern GTlsPassword* g_tls_password_new(int, char*) = tls_password_new;
extern char* g_tls_password_get_value(GTlsPassword*, long*) = tls_password_get_value;
extern void g_tls_password_set_value(GTlsPassword*, char*, long) = tls_password_set_value;
extern void g_tls_password_set_value_full(GTlsPassword*, char*, long, void*) = tls_password_set_value_full;
extern int g_tls_password_get_flags(GTlsPassword*) = tls_password_get_flags;
extern void g_tls_password_set_flags(GTlsPassword*, int) = tls_password_set_flags;
extern char* g_tls_password_get_description(GTlsPassword*) = tls_password_get_description;
extern void g_tls_password_set_description(GTlsPassword*, char*) = tls_password_set_description;
extern char* g_tls_password_get_warning(GTlsPassword*) = tls_password_get_warning;
extern void g_tls_password_set_warning(GTlsPassword*, char*) = tls_password_set_warning;
extern long g_vfs_get_type() = vfs_get_type;
extern int g_vfs_is_active(GVfs*) = vfs_is_active;
extern GFile* g_vfs_get_file_for_path(GVfs*, char*) = vfs_get_file_for_path;
extern GFile* g_vfs_get_file_for_uri(GVfs*, char*) = vfs_get_file_for_uri;
extern char** g_vfs_get_supported_uri_schemes(GVfs*) = vfs_get_supported_uri_schemes;
extern GFile* g_vfs_parse_name(GVfs*, char*) = vfs_parse_name;
extern GVfs* g_vfs_get_default() = vfs_get_default;
extern GVfs* g_vfs_get_local() = vfs_get_local;
extern long g_volume_get_type() = volume_get_type;
extern char* g_volume_get_name(GVolume*) = volume_get_name;
extern GIcon* g_volume_get_icon(GVolume*) = volume_get_icon;
extern char* g_volume_get_uuid(GVolume*) = volume_get_uuid;
extern GDrive* g_volume_get_drive(GVolume*) = volume_get_drive;
extern GMount* g_volume_get_mount(GVolume*) = volume_get_mount;
extern int g_volume_can_mount(GVolume*) = volume_can_mount;
extern int g_volume_can_eject(GVolume*) = volume_can_eject;
extern int g_volume_should_automount(GVolume*) = volume_should_automount;
extern void g_volume_mount(GVolume*, int, GMountOperation*, GCancellable*, void*, void*) = volume_mount;
extern int g_volume_mount_finish(GVolume*, GAsyncResult*, GError**) = volume_mount_finish;
extern void g_volume_eject(GVolume*, int, GCancellable*, void*, void*) = volume_eject;
extern int g_volume_eject_finish(GVolume*, GAsyncResult*, GError**) = volume_eject_finish;
extern char* g_volume_get_identifier(GVolume*, char*) = volume_get_identifier;
extern char** g_volume_enumerate_identifiers(GVolume*) = volume_enumerate_identifiers;
extern GFile* g_volume_get_activation_root(GVolume*) = volume_get_activation_root;
extern void g_volume_eject_with_operation(GVolume*, int, GMountOperation*, GCancellable*, void*, void*) = volume_eject_with_operation;
extern int g_volume_eject_with_operation_finish(GVolume*, GAsyncResult*, GError**) = volume_eject_with_operation_finish;
extern char* g_volume_get_sort_key(GVolume*) = volume_get_sort_key;
extern long g_zlib_compressor_get_type() = zlib_compressor_get_type;
extern GZlibCompressor* g_zlib_compressor_new(int, int) = zlib_compressor_new;
extern GFileInfo* g_zlib_compressor_get_file_info(GZlibCompressor*) = zlib_compressor_get_file_info;
extern void g_zlib_compressor_set_file_info(GZlibCompressor*, GFileInfo*) = zlib_compressor_set_file_info;
extern long g_zlib_decompressor_get_type() = zlib_decompressor_get_type;
extern GZlibDecompressor* g_zlib_decompressor_new(int) = zlib_decompressor_new;
extern GFileInfo* g_zlib_decompressor_get_file_info(GZlibDecompressor*) = zlib_decompressor_get_file_info;
extern long g_dbus_interface_get_type() = dbus_interface_get_type;
extern GDBusInterfaceInfo* g_dbus_interface_get_info(GDBusInterface*) = dbus_interface_get_info;
extern GDBusObject* g_dbus_interface_get_object(GDBusInterface*) = dbus_interface_get_object;
extern void g_dbus_interface_set_object(GDBusInterface*, GDBusObject*) = dbus_interface_set_object;
extern GDBusObject* g_dbus_interface_dup_object(GDBusInterface*) = dbus_interface_dup_object;
extern long g_dbus_interface_skeleton_get_type() = dbus_interface_skeleton_get_type;
extern int g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_flags;
extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton*, int) = dbus_interface_skeleton_set_flags;
extern GDBusInterfaceInfo* g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_info;
extern GDBusInterfaceVTable* g_dbus_interface_skeleton_get_vtable(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_vtable;
extern GVariant* g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_properties;
extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_flush;
extern int g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton*, GDBusConnection*, char*, GError**) = dbus_interface_skeleton_export;
extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_unexport;
extern void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton*, GDBusConnection*) = dbus_interface_skeleton_unexport_from_connection;
extern GDBusConnection* g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_connection;
extern GList* g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_connections;
extern int g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton*, GDBusConnection*) = dbus_interface_skeleton_has_connection;
extern char* g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton*) = dbus_interface_skeleton_get_object_path;
extern long g_dbus_object_get_type() = dbus_object_get_type;
extern char* g_dbus_object_get_object_path(GDBusObject*) = dbus_object_get_object_path;
extern GList* g_dbus_object_get_interfaces(GDBusObject*) = dbus_object_get_interfaces;
extern GDBusInterface* g_dbus_object_get_interface(GDBusObject*, char*) = dbus_object_get_interface;
extern long g_dbus_object_skeleton_get_type() = dbus_object_skeleton_get_type;
extern GDBusObjectSkeleton* g_dbus_object_skeleton_new(char*) = dbus_object_skeleton_new;
extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton*) = dbus_object_skeleton_flush;
extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*) = dbus_object_skeleton_add_interface;
extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*) = dbus_object_skeleton_remove_interface;
extern void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton*, char*) = dbus_object_skeleton_remove_interface_by_name;
extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton*, char*) = dbus_object_skeleton_set_object_path;
extern long g_dbus_object_proxy_get_type() = dbus_object_proxy_get_type;
extern GDBusObjectProxy* g_dbus_object_proxy_new(GDBusConnection*, char*) = dbus_object_proxy_new;
extern GDBusConnection* g_dbus_object_proxy_get_connection(GDBusObjectProxy*) = dbus_object_proxy_get_connection;
extern long g_dbus_object_manager_get_type() = dbus_object_manager_get_type;
extern char* g_dbus_object_manager_get_object_path(GDBusObjectManager*) = dbus_object_manager_get_object_path;
extern GList* g_dbus_object_manager_get_objects(GDBusObjectManager*) = dbus_object_manager_get_objects;
extern GDBusObject* g_dbus_object_manager_get_object(GDBusObjectManager*, char*) = dbus_object_manager_get_object;
extern GDBusInterface* g_dbus_object_manager_get_interface(GDBusObjectManager*, char*, char*) = dbus_object_manager_get_interface;
extern long g_dbus_object_manager_client_get_type() = dbus_object_manager_client_get_type;
extern void g_dbus_object_manager_client_new(GDBusConnection*, int, char*, char*, void*, void*, void*, GCancellable*, void*, void*) = dbus_object_manager_client_new;
extern GDBusObjectManager* g_dbus_object_manager_client_new_finish(GAsyncResult*, GError**) = dbus_object_manager_client_new_finish;
extern GDBusObjectManager* g_dbus_object_manager_client_new_sync(GDBusConnection*, int, char*, char*, void*, void*, void*, GCancellable*, GError**) = dbus_object_manager_client_new_sync;
extern void g_dbus_object_manager_client_new_for_bus(int, int, char*, char*, void*, void*, void*, GCancellable*, void*, void*) = dbus_object_manager_client_new_for_bus;
extern GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult*, GError**) = dbus_object_manager_client_new_for_bus_finish;
extern GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_sync(int, int, char*, char*, void*, void*, void*, GCancellable*, GError**) = dbus_object_manager_client_new_for_bus_sync;
extern GDBusConnection* g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient*) = dbus_object_manager_client_get_connection;
extern int g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient*) = dbus_object_manager_client_get_flags;
extern char* g_dbus_object_manager_client_get_name(GDBusObjectManagerClient*) = dbus_object_manager_client_get_name;
extern char* g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient*) = dbus_object_manager_client_get_name_owner;
extern long g_dbus_object_manager_server_get_type() = dbus_object_manager_server_get_type;
extern GDBusObjectManagerServer* g_dbus_object_manager_server_new(char*) = dbus_object_manager_server_new;
extern GDBusConnection* g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer*) = dbus_object_manager_server_get_connection;
extern void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer*, GDBusConnection*) = dbus_object_manager_server_set_connection;
extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer*, GDBusObjectSkeleton*) = dbus_object_manager_server_export;
extern void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer*, GDBusObjectSkeleton*) = dbus_object_manager_server_export_uniquely;
extern int g_dbus_object_manager_server_unexport(GDBusObjectManagerServer*, char*) = dbus_object_manager_server_unexport;
extern long g_dbus_action_group_get_type() = dbus_action_group_get_type;
extern GDBusActionGroup* g_dbus_action_group_get(GDBusConnection*, char*, char*) = dbus_action_group_get;
extern long g_remote_action_group_get_type() = remote_action_group_get_type;
extern void g_remote_action_group_activate_action_full(GRemoteActionGroup*, char*, GVariant*, GVariant*) = remote_action_group_activate_action_full;
extern void g_remote_action_group_change_action_state_full(GRemoteActionGroup*, char*, GVariant*, GVariant*) = remote_action_group_change_action_state_full;
extern long g_menu_model_get_type() = menu_model_get_type;
extern int g_menu_model_is_mutable(GMenuModel*) = menu_model_is_mutable;
extern int g_menu_model_get_n_items(GMenuModel*) = menu_model_get_n_items;
extern GMenuAttributeIter* g_menu_model_iterate_item_attributes(GMenuModel*, int) = menu_model_iterate_item_attributes;
extern GVariant* g_menu_model_get_item_attribute_value(GMenuModel*, int, char*, GVariantType*) = menu_model_get_item_attribute_value;
extern int g_menu_model_get_item_attribute(GMenuModel*, int, char*, char*, ...) = menu_model_get_item_attribute;
extern GMenuLinkIter* g_menu_model_iterate_item_links(GMenuModel*, int) = menu_model_iterate_item_links;
extern GMenuModel* g_menu_model_get_item_link(GMenuModel*, int, char*) = menu_model_get_item_link;
extern void g_menu_model_items_changed(GMenuModel*, int, int, int) = menu_model_items_changed;
extern long g_menu_attribute_iter_get_type() = menu_attribute_iter_get_type;
extern int g_menu_attribute_iter_get_next(GMenuAttributeIter*, char**, GVariant**) = menu_attribute_iter_get_next;
extern int g_menu_attribute_iter_next(GMenuAttributeIter*) = menu_attribute_iter_next;
extern char* g_menu_attribute_iter_get_name(GMenuAttributeIter*) = menu_attribute_iter_get_name;
extern GVariant* g_menu_attribute_iter_get_value(GMenuAttributeIter*) = menu_attribute_iter_get_value;
extern long g_menu_link_iter_get_type() = menu_link_iter_get_type;
extern int g_menu_link_iter_get_next(GMenuLinkIter*, char**, GMenuModel**) = menu_link_iter_get_next;
extern int g_menu_link_iter_next(GMenuLinkIter*) = menu_link_iter_next;
extern char* g_menu_link_iter_get_name(GMenuLinkIter*) = menu_link_iter_get_name;
extern GMenuModel* g_menu_link_iter_get_value(GMenuLinkIter*) = menu_link_iter_get_value;
extern long g_menu_get_type() = menu_get_type;
extern GMenu* g_menu_new() = menu_new;
extern void g_menu_freeze(GMenu*) = menu_freeze;
extern void g_menu_insert_item(GMenu*, int, GMenuItem*) = menu_insert_item;
extern void g_menu_prepend_item(GMenu*, GMenuItem*) = menu_prepend_item;
extern void g_menu_append_item(GMenu*, GMenuItem*) = menu_append_item;
extern void g_menu_remove(GMenu*, int) = menu_remove;
extern void g_menu_insert(GMenu*, int, char*, char*) = menu_insert;
extern void g_menu_prepend(GMenu*, char*, char*) = menu_prepend;
extern void g_menu_append(GMenu*, char*, char*) = menu_append;
extern void g_menu_insert_section(GMenu*, int, char*, GMenuModel*) = menu_insert_section;
extern void g_menu_prepend_section(GMenu*, char*, GMenuModel*) = menu_prepend_section;
extern void g_menu_append_section(GMenu*, char*, GMenuModel*) = menu_append_section;
extern void g_menu_insert_submenu(GMenu*, int, char*, GMenuModel*) = menu_insert_submenu;
extern void g_menu_prepend_submenu(GMenu*, char*, GMenuModel*) = menu_prepend_submenu;
extern void g_menu_append_submenu(GMenu*, char*, GMenuModel*) = menu_append_submenu;
extern long g_menu_item_get_type() = menu_item_get_type;
extern GMenuItem* g_menu_item_new(char*, char*) = menu_item_new;
extern GMenuItem* g_menu_item_new_submenu(char*, GMenuModel*) = menu_item_new_submenu;
extern GMenuItem* g_menu_item_new_section(char*, GMenuModel*) = menu_item_new_section;
extern void g_menu_item_set_attribute_value(GMenuItem*, char*, GVariant*) = menu_item_set_attribute_value;
extern void g_menu_item_set_attribute(GMenuItem*, char*, char*, ...) = menu_item_set_attribute;
extern void g_menu_item_set_link(GMenuItem*, char*, GMenuModel*) = menu_item_set_link;
extern void g_menu_item_set_label(GMenuItem*, char*) = menu_item_set_label;
extern void g_menu_item_set_submenu(GMenuItem*, GMenuModel*) = menu_item_set_submenu;
extern void g_menu_item_set_section(GMenuItem*, GMenuModel*) = menu_item_set_section;
extern void g_menu_item_set_action_and_target_value(GMenuItem*, char*, GVariant*) = menu_item_set_action_and_target_value;
extern void g_menu_item_set_action_and_target(GMenuItem*, char*, char*, ...) = menu_item_set_action_and_target;
extern void g_menu_item_set_detailed_action(GMenuItem*, char*) = menu_item_set_detailed_action;
extern int g_dbus_connection_export_menu_model(GDBusConnection*, char*, GMenuModel*, GError**) = dbus_connection_export_menu_model;
extern void g_dbus_connection_unexport_menu_model(GDBusConnection*, int) = dbus_connection_unexport_menu_model;
extern long g_dbus_menu_model_get_type() = dbus_menu_model_get_type;
extern GDBusMenuModel* g_dbus_menu_model_get(GDBusConnection*, char*, char*) = dbus_menu_model_get;
/* /usr/include/glib-2.0/gmodule.h: */
using "lib:glib";

namespace glib;
const glib::MODULE_BIND_LAZY = 1;
const glib::MODULE_BIND_LOCAL = 2;
const glib::MODULE_BIND_MASK = 3;
extern int g_module_supported() = module_supported;
extern GModule* g_module_open(char*, int) = module_open;
extern int g_module_close(GModule*) = module_close;
extern void g_module_make_resident(GModule*) = module_make_resident;
extern char* g_module_error() = module_error;
extern int g_module_symbol(GModule*, char*, void**) = module_symbol;
extern char* g_module_name(GModule*) = module_name;
extern char* g_module_build_path(char*, char*) = module_build_path;
