/* /usr/include/gtk-2.0/gdk/gdk.h: */
using "lib:gtk";

namespace gdk;
const gdk::MAX_TIMECOORD_AXES = 128;
const gdk::PIXBUF_FEATURES_H = 1;
const gdk::PIXBUF_MAJOR = 2;
const gdk::PIXBUF_MINOR = 14;
const gdk::PIXBUF_MICRO = 4;
const gdk::PIXBUF_VERSION = "2.14.4";
const gdk::AXIS_IGNORE = 0;
const gdk::AXIS_X = 1;
const gdk::AXIS_Y = 2;
const gdk::AXIS_PRESSURE = 3;
const gdk::AXIS_XTILT = 4;
const gdk::AXIS_YTILT = 5;
const gdk::AXIS_WHEEL = 6;
const gdk::AXIS_LAST = 7;
const gdk::LSB_FIRST = 0;
const gdk::MSB_FIRST = 1;
const gdk::CAP_NOT_LAST = 0;
const gdk::CAP_BUTT = 1;
const gdk::CAP_ROUND = 2;
const gdk::CAP_PROJECTING = 3;
const gdk::COLORSPACE_RGB = 0;
const gdk::CROSSING_NORMAL = 0;
const gdk::CROSSING_GRAB = 1;
const gdk::CROSSING_UNGRAB = 2;
const gdk::CROSSING_GTK_GRAB = 3;
const gdk::CROSSING_GTK_UNGRAB = 4;
const gdk::CROSSING_STATE_CHANGED = 5;
const gdk::X_CURSOR = 0;
const gdk::ARROW = 2;
const gdk::BASED_ARROW_DOWN = 4;
const gdk::BASED_ARROW_UP = 6;
const gdk::BOAT = 8;
const gdk::BOGOSITY = 10;
const gdk::BOTTOM_LEFT_CORNER = 12;
const gdk::BOTTOM_RIGHT_CORNER = 14;
const gdk::BOTTOM_SIDE = 16;
const gdk::BOTTOM_TEE = 18;
const gdk::BOX_SPIRAL = 20;
const gdk::CENTER_PTR = 22;
const gdk::CIRCLE = 24;
const gdk::CLOCK = 26;
const gdk::COFFEE_MUG = 28;
const gdk::CROSS = 30;
const gdk::CROSS_REVERSE = 32;
const gdk::CROSSHAIR = 34;
const gdk::DIAMOND_CROSS = 36;
const gdk::DOT = 38;
const gdk::DOTBOX = 40;
const gdk::DOUBLE_ARROW = 42;
const gdk::DRAFT_LARGE = 44;
const gdk::DRAFT_SMALL = 46;
const gdk::DRAPED_BOX = 48;
const gdk::EXCHANGE = 50;
const gdk::FLEUR = 52;
const gdk::GOBBLER = 54;
const gdk::GUMBY = 56;
const gdk::HAND1 = 58;
const gdk::HAND2 = 60;
const gdk::HEART = 62;
const gdk::ICON = 64;
const gdk::IRON_CROSS = 66;
const gdk::LEFT_PTR = 68;
const gdk::LEFT_SIDE = 70;
const gdk::LEFT_TEE = 72;
const gdk::LEFTBUTTON = 74;
const gdk::LL_ANGLE = 76;
const gdk::LR_ANGLE = 78;
const gdk::MAN = 80;
const gdk::MIDDLEBUTTON = 82;
const gdk::MOUSE = 84;
const gdk::PENCIL = 86;
const gdk::PIRATE = 88;
const gdk::PLUS = 90;
const gdk::QUESTION_ARROW = 92;
const gdk::RIGHT_PTR = 94;
const gdk::RIGHT_SIDE = 96;
const gdk::RIGHT_TEE = 98;
const gdk::RIGHTBUTTON = 100;
const gdk::RTL_LOGO = 102;
const gdk::SAILBOAT = 104;
const gdk::SB_DOWN_ARROW = 106;
const gdk::SB_H_DOUBLE_ARROW = 108;
const gdk::SB_LEFT_ARROW = 110;
const gdk::SB_RIGHT_ARROW = 112;
const gdk::SB_UP_ARROW = 114;
const gdk::SB_V_DOUBLE_ARROW = 116;
const gdk::SHUTTLE = 118;
const gdk::SIZING = 120;
const gdk::SPIDER = 122;
const gdk::SPRAYCAN = 124;
const gdk::STAR = 126;
const gdk::TARGET = 128;
const gdk::TCROSS = 130;
const gdk::TOP_LEFT_ARROW = 132;
const gdk::TOP_LEFT_CORNER = 134;
const gdk::TOP_RIGHT_CORNER = 136;
const gdk::TOP_SIDE = 138;
const gdk::TOP_TEE = 140;
const gdk::TREK = 142;
const gdk::UL_ANGLE = 144;
const gdk::UMBRELLA = 146;
const gdk::UR_ANGLE = 148;
const gdk::WATCH = 150;
const gdk::XTERM = 152;
const gdk::LAST_CURSOR = 153;
const gdk::CURSOR_IS_PIXMAP = -1;
const gdk::ACTION_DEFAULT = 1;
const gdk::ACTION_COPY = 2;
const gdk::ACTION_MOVE = 4;
const gdk::ACTION_LINK = 8;
const gdk::ACTION_PRIVATE = 16;
const gdk::ACTION_ASK = 32;
const gdk::DRAG_PROTO_MOTIF = 0;
const gdk::DRAG_PROTO_XDND = 1;
const gdk::DRAG_PROTO_ROOTWIN = 2;
const gdk::DRAG_PROTO_NONE = 3;
const gdk::DRAG_PROTO_WIN32_DROPFILES = 4;
const gdk::DRAG_PROTO_OLE2 = 5;
const gdk::DRAG_PROTO_LOCAL = 6;
const gdk::EXPOSURE_MASK = 2;
const gdk::POINTER_MOTION_MASK = 4;
const gdk::POINTER_MOTION_HINT_MASK = 8;
const gdk::BUTTON_MOTION_MASK = 16;
const gdk::BUTTON1_MOTION_MASK = 32;
const gdk::BUTTON2_MOTION_MASK = 64;
const gdk::BUTTON3_MOTION_MASK = 128;
const gdk::BUTTON_PRESS_MASK = 256;
const gdk::BUTTON_RELEASE_MASK = 512;
const gdk::KEY_PRESS_MASK = 1024;
const gdk::KEY_RELEASE_MASK = 2048;
const gdk::ENTER_NOTIFY_MASK = 4096;
const gdk::LEAVE_NOTIFY_MASK = 8192;
const gdk::FOCUS_CHANGE_MASK = 16384;
const gdk::STRUCTURE_MASK = 32768;
const gdk::PROPERTY_CHANGE_MASK = 65536;
const gdk::VISIBILITY_NOTIFY_MASK = 131072;
const gdk::PROXIMITY_IN_MASK = 262144;
const gdk::PROXIMITY_OUT_MASK = 524288;
const gdk::SUBSTRUCTURE_MASK = 1048576;
const gdk::SCROLL_MASK = 2097152;
const gdk::ALL_EVENTS_MASK = 4194302;
const gdk::NOTHING = -1;
const gdk::DELETE = 0;
const gdk::DESTROY = 1;
const gdk::EXPOSE = 2;
const gdk::MOTION_NOTIFY = 3;
const gdk::BUTTON_PRESS = 4;
const gdk::_2BUTTON_PRESS = 5;
const gdk::_3BUTTON_PRESS = 6;
const gdk::BUTTON_RELEASE = 7;
const gdk::KEY_PRESS = 8;
const gdk::KEY_RELEASE = 9;
const gdk::ENTER_NOTIFY = 10;
const gdk::LEAVE_NOTIFY = 11;
const gdk::FOCUS_CHANGE = 12;
const gdk::CONFIGURE = 13;
const gdk::MAP = 14;
const gdk::UNMAP = 15;
const gdk::PROPERTY_NOTIFY = 16;
const gdk::SELECTION_CLEAR = 17;
const gdk::SELECTION_REQUEST = 18;
const gdk::SELECTION_NOTIFY = 19;
const gdk::PROXIMITY_IN = 20;
const gdk::PROXIMITY_OUT = 21;
const gdk::DRAG_ENTER = 22;
const gdk::DRAG_LEAVE = 23;
const gdk::DRAG_MOTION = 24;
const gdk::DRAG_STATUS = 25;
const gdk::DROP_START = 26;
const gdk::DROP_FINISHED = 27;
const gdk::CLIENT_EVENT = 28;
const gdk::VISIBILITY_NOTIFY = 29;
const gdk::NO_EXPOSE = 30;
const gdk::SCROLL = 31;
const gdk::WINDOW_STATE = 32;
const gdk::SETTING = 33;
const gdk::OWNER_CHANGE = 34;
const gdk::GRAB_BROKEN = 35;
const gdk::DAMAGE = 36;
const gdk::EXTENSION_EVENTS_NONE = 0;
const gdk::EXTENSION_EVENTS_ALL = 1;
const gdk::EXTENSION_EVENTS_CURSOR = 2;
const gdk::SOLID = 0;
const gdk::TILED = 1;
const gdk::STIPPLED = 2;
const gdk::OPAQUE_STIPPLED = 3;
const gdk::EVEN_ODD_RULE = 0;
const gdk::WINDING_RULE = 1;
const gdk::FILTER_CONTINUE = 0;
const gdk::FILTER_TRANSLATE = 1;
const gdk::FILTER_REMOVE = 2;
const gdk::FONT_FONT = 0;
const gdk::FONT_FONTSET = 1;
const gdk::COPY = 0;
const gdk::INVERT = 1;
const gdk::XOR = 2;
const gdk::CLEAR = 3;
const gdk::AND = 4;
const gdk::AND_REVERSE = 5;
const gdk::AND_INVERT = 6;
const gdk::NOOP = 7;
const gdk::OR = 8;
const gdk::EQUIV = 9;
const gdk::OR_REVERSE = 10;
const gdk::COPY_INVERT = 11;
const gdk::OR_INVERT = 12;
const gdk::NAND = 13;
const gdk::NOR = 14;
const gdk::SET = 15;
const gdk::GC_FOREGROUND = 1;
const gdk::GC_BACKGROUND = 2;
const gdk::GC_FONT = 4;
const gdk::GC_FUNCTION = 8;
const gdk::GC_FILL = 16;
const gdk::GC_TILE = 32;
const gdk::GC_STIPPLE = 64;
const gdk::GC_CLIP_MASK = 128;
const gdk::GC_SUBWINDOW = 256;
const gdk::GC_TS_X_ORIGIN = 512;
const gdk::GC_TS_Y_ORIGIN = 1024;
const gdk::GC_CLIP_X_ORIGIN = 2048;
const gdk::GC_CLIP_Y_ORIGIN = 4096;
const gdk::GC_EXPOSURES = 8192;
const gdk::GC_LINE_WIDTH = 16384;
const gdk::GC_LINE_STYLE = 32768;
const gdk::GC_CAP_STYLE = 65536;
const gdk::GC_JOIN_STYLE = 131072;
const gdk::GRAB_SUCCESS = 0;
const gdk::GRAB_ALREADY_GRABBED = 1;
const gdk::GRAB_INVALID_TIME = 2;
const gdk::GRAB_NOT_VIEWABLE = 3;
const gdk::GRAB_FROZEN = 4;
const gdk::GRAVITY_NORTH_WEST = 1;
const gdk::GRAVITY_NORTH = 2;
const gdk::GRAVITY_NORTH_EAST = 3;
const gdk::GRAVITY_WEST = 4;
const gdk::GRAVITY_CENTER = 5;
const gdk::GRAVITY_EAST = 6;
const gdk::GRAVITY_SOUTH_WEST = 7;
const gdk::GRAVITY_SOUTH = 8;
const gdk::GRAVITY_SOUTH_EAST = 9;
const gdk::GRAVITY_STATIC = 10;
const gdk::IMAGE_NORMAL = 0;
const gdk::IMAGE_SHARED = 1;
const gdk::IMAGE_FASTEST = 2;
const gdk::INPUT_READ = 1;
const gdk::INPUT_WRITE = 2;
const gdk::INPUT_EXCEPTION = 4;
const gdk::MODE_DISABLED = 0;
const gdk::MODE_SCREEN = 1;
const gdk::MODE_WINDOW = 2;
const gdk::SOURCE_MOUSE = 0;
const gdk::SOURCE_PEN = 1;
const gdk::SOURCE_ERASER = 2;
const gdk::SOURCE_CURSOR = 3;
const gdk::INTERP_NEAREST = 0;
const gdk::INTERP_TILES = 1;
const gdk::INTERP_BILINEAR = 2;
const gdk::INTERP_HYPER = 3;
const gdk::JOIN_MITER = 0;
const gdk::JOIN_ROUND = 1;
const gdk::JOIN_BEVEL = 2;
const gdk::LINE_SOLID = 0;
const gdk::LINE_ON_OFF_DASH = 1;
const gdk::LINE_DOUBLE_DASH = 2;
const gdk::SHIFT_MASK = 1;
const gdk::LOCK_MASK = 2;
const gdk::CONTROL_MASK = 4;
const gdk::MOD1_MASK = 8;
const gdk::MOD2_MASK = 16;
const gdk::MOD3_MASK = 32;
const gdk::MOD4_MASK = 64;
const gdk::MOD5_MASK = 128;
const gdk::BUTTON1_MASK = 256;
const gdk::BUTTON2_MASK = 512;
const gdk::BUTTON3_MASK = 1024;
const gdk::BUTTON4_MASK = 2048;
const gdk::BUTTON5_MASK = 4096;
const gdk::SUPER_MASK = 67108864;
const gdk::HYPER_MASK = 134217728;
const gdk::META_MASK = 268435456;
const gdk::RELEASE_MASK = 1073741824;
const gdk::MODIFIER_MASK = 1543512063;
const gdk::NOTIFY_ANCESTOR = 0;
const gdk::NOTIFY_VIRTUAL = 1;
const gdk::NOTIFY_INFERIOR = 2;
const gdk::NOTIFY_NONLINEAR = 3;
const gdk::NOTIFY_NONLINEAR_VIRTUAL = 4;
const gdk::NOTIFY_UNKNOWN = 5;
const gdk::OVERLAP_RECTANGLE_IN = 0;
const gdk::OVERLAP_RECTANGLE_OUT = 1;
const gdk::OVERLAP_RECTANGLE_PART = 2;
const gdk::OWNER_CHANGE_NEW_OWNER = 0;
const gdk::OWNER_CHANGE_DESTROY = 1;
const gdk::OWNER_CHANGE_CLOSE = 2;
const gdk::PIXBUF_ALPHA_BILEVEL = 0;
const gdk::PIXBUF_ALPHA_FULL = 1;
const gdk::PIXBUF_ERROR_CORRUPT_IMAGE = 0;
const gdk::PIXBUF_ERROR_INSUFFICIENT_MEMORY = 1;
const gdk::PIXBUF_ERROR_BAD_OPTION = 2;
const gdk::PIXBUF_ERROR_UNKNOWN_TYPE = 3;
const gdk::PIXBUF_ERROR_UNSUPPORTED_OPERATION = 4;
const gdk::PIXBUF_ERROR_FAILED = 5;
const gdk::PIXBUF_ROTATE_NONE = 0;
const gdk::PIXBUF_ROTATE_COUNTERCLOCKWISE = 90;
const gdk::PIXBUF_ROTATE_UPSIDEDOWN = 180;
const gdk::PIXBUF_ROTATE_CLOCKWISE = 270;
const gdk::PROP_MODE_REPLACE = 0;
const gdk::PROP_MODE_PREPEND = 1;
const gdk::PROP_MODE_APPEND = 2;
const gdk::PROPERTY_NEW_VALUE = 0;
const gdk::PROPERTY_DELETE = 1;
const gdk::RGB_DITHER_NONE = 0;
const gdk::RGB_DITHER_NORMAL = 1;
const gdk::RGB_DITHER_MAX = 2;
const gdk::SCROLL_UP = 0;
const gdk::SCROLL_DOWN = 1;
const gdk::SCROLL_LEFT = 2;
const gdk::SCROLL_RIGHT = 3;
const gdk::SETTING_ACTION_NEW = 0;
const gdk::SETTING_ACTION_CHANGED = 1;
const gdk::SETTING_ACTION_DELETED = 2;
const gdk::OK = 0;
const gdk::ERROR = -1;
const gdk::ERROR_PARAM = -2;
const gdk::ERROR_FILE = -3;
const gdk::ERROR_MEM = -4;
const gdk::CLIP_BY_CHILDREN = 0;
const gdk::INCLUDE_INFERIORS = 1;
const gdk::VISIBILITY_UNOBSCURED = 0;
const gdk::VISIBILITY_PARTIAL = 1;
const gdk::VISIBILITY_FULLY_OBSCURED = 2;
const gdk::VISUAL_STATIC_GRAY = 0;
const gdk::VISUAL_GRAYSCALE = 1;
const gdk::VISUAL_STATIC_COLOR = 2;
const gdk::VISUAL_PSEUDO_COLOR = 3;
const gdk::VISUAL_TRUE_COLOR = 4;
const gdk::VISUAL_DIRECT_COLOR = 5;
const gdk::DECOR_ALL = 1;
const gdk::DECOR_BORDER = 2;
const gdk::DECOR_RESIZEH = 4;
const gdk::DECOR_TITLE = 8;
const gdk::DECOR_MENU = 16;
const gdk::DECOR_MINIMIZE = 32;
const gdk::DECOR_MAXIMIZE = 64;
const gdk::FUNC_ALL = 1;
const gdk::FUNC_RESIZE = 2;
const gdk::FUNC_MOVE = 4;
const gdk::FUNC_MINIMIZE = 8;
const gdk::FUNC_MAXIMIZE = 16;
const gdk::FUNC_CLOSE = 32;
const gdk::WA_TITLE = 2;
const gdk::WA_X = 4;
const gdk::WA_Y = 8;
const gdk::WA_CURSOR = 16;
const gdk::WA_COLORMAP = 32;
const gdk::WA_VISUAL = 64;
const gdk::WA_WMCLASS = 128;
const gdk::WA_NOREDIR = 256;
const gdk::WA_TYPE_HINT = 512;
const gdk::INPUT_OUTPUT = 0;
const gdk::INPUT_ONLY = 1;
const gdk::WINDOW_EDGE_NORTH_WEST = 0;
const gdk::WINDOW_EDGE_NORTH = 1;
const gdk::WINDOW_EDGE_NORTH_EAST = 2;
const gdk::WINDOW_EDGE_WEST = 3;
const gdk::WINDOW_EDGE_EAST = 4;
const gdk::WINDOW_EDGE_SOUTH_WEST = 5;
const gdk::WINDOW_EDGE_SOUTH = 6;
const gdk::WINDOW_EDGE_SOUTH_EAST = 7;
const gdk::HINT_POS = 1;
const gdk::HINT_MIN_SIZE = 2;
const gdk::HINT_MAX_SIZE = 4;
const gdk::HINT_BASE_SIZE = 8;
const gdk::HINT_ASPECT = 16;
const gdk::HINT_RESIZE_INC = 32;
const gdk::HINT_WIN_GRAVITY = 64;
const gdk::HINT_USER_POS = 128;
const gdk::HINT_USER_SIZE = 256;
const gdk::WINDOW_STATE_WITHDRAWN = 1;
const gdk::WINDOW_STATE_ICONIFIED = 2;
const gdk::WINDOW_STATE_MAXIMIZED = 4;
const gdk::WINDOW_STATE_STICKY = 8;
const gdk::WINDOW_STATE_FULLSCREEN = 16;
const gdk::WINDOW_STATE_ABOVE = 32;
const gdk::WINDOW_STATE_BELOW = 64;
const gdk::WINDOW_ROOT = 0;
const gdk::WINDOW_TOPLEVEL = 1;
const gdk::WINDOW_CHILD = 2;
const gdk::WINDOW_DIALOG = 3;
const gdk::WINDOW_TEMP = 4;
const gdk::WINDOW_FOREIGN = 5;
const gdk::WINDOW_TYPE_HINT_NORMAL = 0;
const gdk::WINDOW_TYPE_HINT_DIALOG = 1;
const gdk::WINDOW_TYPE_HINT_MENU = 2;
const gdk::WINDOW_TYPE_HINT_TOOLBAR = 3;
const gdk::WINDOW_TYPE_HINT_SPLASHSCREEN = 4;
const gdk::WINDOW_TYPE_HINT_UTILITY = 5;
const gdk::WINDOW_TYPE_HINT_DOCK = 6;
const gdk::WINDOW_TYPE_HINT_DESKTOP = 7;
const gdk::WINDOW_TYPE_HINT_DROPDOWN_MENU = 8;
const gdk::WINDOW_TYPE_HINT_POPUP_MENU = 9;
const gdk::WINDOW_TYPE_HINT_TOOLTIP = 10;
const gdk::WINDOW_TYPE_HINT_NOTIFICATION = 11;
const gdk::WINDOW_TYPE_HINT_COMBO = 12;
const gdk::WINDOW_TYPE_HINT_DND = 13;
extern long gdk_colormap_get_type() = colormap_get_type;
extern GdkColormap* gdk_colormap_new(GdkVisual*, int) = colormap_new;
extern GdkColormap* gdk_colormap_ref(GdkColormap*) = colormap_ref;
extern void gdk_colormap_unref(GdkColormap*) = colormap_unref;
extern GdkColormap* gdk_colormap_get_system() = colormap_get_system;
extern GdkScreen* gdk_colormap_get_screen(GdkColormap*) = colormap_get_screen;
extern int gdk_colormap_get_system_size() = colormap_get_system_size;
extern void gdk_colormap_change(GdkColormap*, int) = colormap_change;
extern int gdk_colormap_alloc_colors(GdkColormap*, GdkColor*, int, int, int, int*) = colormap_alloc_colors;
extern int gdk_colormap_alloc_color(GdkColormap*, GdkColor*, int, int) = colormap_alloc_color;
extern void gdk_colormap_free_colors(GdkColormap*, GdkColor*, int) = colormap_free_colors;
extern void gdk_colormap_query_color(GdkColormap*, long, GdkColor*) = colormap_query_color;
extern GdkVisual* gdk_colormap_get_visual(GdkColormap*) = colormap_get_visual;
extern GdkColor* gdk_color_copy(GdkColor*) = color_copy;
extern void gdk_color_free(GdkColor*) = color_free;
extern int gdk_color_parse(char*, GdkColor*) = color_parse;
extern int gdk_color_hash(GdkColor*) = color_hash;
extern int gdk_color_equal(GdkColor*, GdkColor*) = color_equal;
extern char* gdk_color_to_string(GdkColor*) = color_to_string;
extern long gdk_color_get_type() = color_get_type;
extern void gdk_colors_store(GdkColormap*, GdkColor*, int) = colors_store;
extern int gdk_color_white(GdkColormap*, GdkColor*) = color_white;
extern int gdk_color_black(GdkColormap*, GdkColor*) = color_black;
extern int gdk_color_alloc(GdkColormap*, GdkColor*) = color_alloc;
extern int gdk_color_change(GdkColormap*, GdkColor*) = color_change;
extern int gdk_colors_alloc(GdkColormap*, int, long*, int, long*, int) = colors_alloc;
extern void gdk_colors_free(GdkColormap*, long*, int, long) = colors_free;
extern long gdk_drag_context_get_type() = drag_context_get_type;
extern GdkDragContext* gdk_drag_context_new() = drag_context_new;
extern void gdk_drag_context_ref(GdkDragContext*) = drag_context_ref;
extern void gdk_drag_context_unref(GdkDragContext*) = drag_context_unref;
extern void gdk_drag_status(GdkDragContext*, int, int) = drag_status;
extern void gdk_drop_reply(GdkDragContext*, int, int) = drop_reply;
extern void gdk_drop_finish(GdkDragContext*, int, int) = drop_finish;
extern void/*struct _GdkAtom*/* gdk_drag_get_selection(GdkDragContext*) = drag_get_selection;
extern GdkDragContext* gdk_drag_begin(GdkWindow*, GList*) = drag_begin;
extern int gdk_drag_get_protocol_for_display(GdkDisplay*, int, int*) = drag_get_protocol_for_display;
extern void gdk_drag_find_window_for_screen(GdkDragContext*, GdkWindow*, GdkScreen*, int, int, GdkWindow**, int*) = drag_find_window_for_screen;
extern int gdk_drag_get_protocol(int, int*) = drag_get_protocol;
extern void gdk_drag_find_window(GdkDragContext*, GdkWindow*, int, int, GdkWindow**, int*) = drag_find_window;
extern int gdk_drag_motion(GdkDragContext*, GdkWindow*, int, int, int, int, int, int) = drag_motion;
extern void gdk_drag_drop(GdkDragContext*, int) = drag_drop;
extern void gdk_drag_abort(GdkDragContext*, int) = drag_abort;
extern int gdk_drag_drop_succeeded(GdkDragContext*) = drag_drop_succeeded;
extern long gdk_device_get_type() = device_get_type;
extern GList* gdk_devices_list() = devices_list;
extern void gdk_device_set_source(GdkDevice*, int) = device_set_source;
extern int gdk_device_set_mode(GdkDevice*, int) = device_set_mode;
extern void gdk_device_set_key(GdkDevice*, int, int, int) = device_set_key;
extern void gdk_device_set_axis_use(GdkDevice*, int, int) = device_set_axis_use;
extern void gdk_device_get_state(GdkDevice*, GdkWindow*, double*, int*) = device_get_state;
extern int gdk_device_get_history(GdkDevice*, GdkWindow*, int, int, GdkTimeCoord***, int*) = device_get_history;
extern void gdk_device_free_history(GdkTimeCoord**, int) = device_free_history;
extern int gdk_device_get_axis(GdkDevice*, double*, int, double*) = device_get_axis;
extern void gdk_input_set_extension_events(GdkWindow*, int, int) = input_set_extension_events;
extern GdkDevice* gdk_device_get_core_pointer() = device_get_core_pointer;
extern long gdk_event_get_type() = event_get_type;
extern int gdk_events_pending() = events_pending;
extern GdkEvent* gdk_event_get() = event_get;
extern GdkEvent* gdk_event_peek() = event_peek;
extern GdkEvent* gdk_event_get_graphics_expose(GdkWindow*) = event_get_graphics_expose;
extern void gdk_event_put(GdkEvent*) = event_put;
extern GdkEvent* gdk_event_new(int) = event_new;
extern GdkEvent* gdk_event_copy(GdkEvent*) = event_copy;
extern void gdk_event_free(GdkEvent*) = event_free;
extern int gdk_event_get_time(GdkEvent*) = event_get_time;
extern int gdk_event_get_state(GdkEvent*, int*) = event_get_state;
extern int gdk_event_get_coords(GdkEvent*, double*, double*) = event_get_coords;
extern int gdk_event_get_root_coords(GdkEvent*, double*, double*) = event_get_root_coords;
extern int gdk_event_get_axis(GdkEvent*, int, double*) = event_get_axis;
extern void gdk_event_request_motions(GdkEventMotion*) = event_request_motions;
extern void gdk_event_handler_set(void*, void*, void*) = event_handler_set;
extern void gdk_event_set_screen(GdkEvent*, GdkScreen*) = event_set_screen;
extern GdkScreen* gdk_event_get_screen(GdkEvent*) = event_get_screen;
extern void gdk_set_show_events(int) = set_show_events;
extern int gdk_get_show_events() = get_show_events;
extern void gdk_add_client_message_filter(void/*struct _GdkAtom*/*, void*, void*) = add_client_message_filter;
extern int gdk_setting_get(char*, GValue*) = setting_get;
extern long gdk_display_get_type() = display_get_type;
extern GdkDisplay* gdk_display_open(char*) = display_open;
extern char* gdk_display_get_name(GdkDisplay*) = display_get_name;
extern int gdk_display_get_n_screens(GdkDisplay*) = display_get_n_screens;
extern GdkScreen* gdk_display_get_screen(GdkDisplay*, int) = display_get_screen;
extern GdkScreen* gdk_display_get_default_screen(GdkDisplay*) = display_get_default_screen;
extern void gdk_display_pointer_ungrab(GdkDisplay*, int) = display_pointer_ungrab;
extern void gdk_display_keyboard_ungrab(GdkDisplay*, int) = display_keyboard_ungrab;
extern int gdk_display_pointer_is_grabbed(GdkDisplay*) = display_pointer_is_grabbed;
extern void gdk_display_beep(GdkDisplay*) = display_beep;
extern void gdk_display_sync(GdkDisplay*) = display_sync;
extern void gdk_display_flush(GdkDisplay*) = display_flush;
extern void gdk_display_close(GdkDisplay*) = display_close;
extern GList* gdk_display_list_devices(GdkDisplay*) = display_list_devices;
extern GdkEvent* gdk_display_get_event(GdkDisplay*) = display_get_event;
extern GdkEvent* gdk_display_peek_event(GdkDisplay*) = display_peek_event;
extern void gdk_display_put_event(GdkDisplay*, GdkEvent*) = display_put_event;
extern void gdk_display_add_client_message_filter(GdkDisplay*, void/*struct _GdkAtom*/*, void*, void*) = display_add_client_message_filter;
extern void gdk_display_set_double_click_time(GdkDisplay*, int) = display_set_double_click_time;
extern void gdk_display_set_double_click_distance(GdkDisplay*, int) = display_set_double_click_distance;
extern GdkDisplay* gdk_display_get_default() = display_get_default;
extern GdkDevice* gdk_display_get_core_pointer(GdkDisplay*) = display_get_core_pointer;
extern void gdk_display_get_pointer(GdkDisplay*, GdkScreen**, int*, int*, int*) = display_get_pointer;
extern GdkWindow* gdk_display_get_window_at_pointer(GdkDisplay*, int*, int*) = display_get_window_at_pointer;
extern void gdk_display_warp_pointer(GdkDisplay*, GdkScreen*, int, int) = display_warp_pointer;
extern GdkDisplayPointerHooks* gdk_display_set_pointer_hooks(GdkDisplay*, GdkDisplayPointerHooks*) = display_set_pointer_hooks;
extern GdkDisplay* gdk_display_open_default_libgtk_only() = display_open_default_libgtk_only;
extern int gdk_display_supports_cursor_alpha(GdkDisplay*) = display_supports_cursor_alpha;
extern int gdk_display_supports_cursor_color(GdkDisplay*) = display_supports_cursor_color;
extern int gdk_display_get_default_cursor_size(GdkDisplay*) = display_get_default_cursor_size;
extern void gdk_display_get_maximal_cursor_size(GdkDisplay*, int*, int*) = display_get_maximal_cursor_size;
extern GdkWindow* gdk_display_get_default_group(GdkDisplay*) = display_get_default_group;
extern int gdk_display_supports_selection_notification(GdkDisplay*) = display_supports_selection_notification;
extern int gdk_display_request_selection_notification(GdkDisplay*, void/*struct _GdkAtom*/*) = display_request_selection_notification;
extern int gdk_display_supports_clipboard_persistence(GdkDisplay*) = display_supports_clipboard_persistence;
extern void gdk_display_store_clipboard(GdkDisplay*, GdkWindow*, int, void/*struct _GdkAtom*/**, int) = display_store_clipboard;
extern int gdk_display_supports_shapes(GdkDisplay*) = display_supports_shapes;
extern int gdk_display_supports_input_shapes(GdkDisplay*) = display_supports_input_shapes;
extern int gdk_display_supports_composite(GdkDisplay*) = display_supports_composite;
extern long gdk_screen_get_type() = screen_get_type;
extern GdkColormap* gdk_screen_get_default_colormap(GdkScreen*) = screen_get_default_colormap;
extern void gdk_screen_set_default_colormap(GdkScreen*, GdkColormap*) = screen_set_default_colormap;
extern GdkColormap* gdk_screen_get_system_colormap(GdkScreen*) = screen_get_system_colormap;
extern GdkVisual* gdk_screen_get_system_visual(GdkScreen*) = screen_get_system_visual;
extern GdkColormap* gdk_screen_get_rgb_colormap(GdkScreen*) = screen_get_rgb_colormap;
extern GdkVisual* gdk_screen_get_rgb_visual(GdkScreen*) = screen_get_rgb_visual;
extern GdkColormap* gdk_screen_get_rgba_colormap(GdkScreen*) = screen_get_rgba_colormap;
extern GdkVisual* gdk_screen_get_rgba_visual(GdkScreen*) = screen_get_rgba_visual;
extern int gdk_screen_is_composited(GdkScreen*) = screen_is_composited;
extern GdkWindow* gdk_screen_get_root_window(GdkScreen*) = screen_get_root_window;
extern GdkDisplay* gdk_screen_get_display(GdkScreen*) = screen_get_display;
extern int gdk_screen_get_number(GdkScreen*) = screen_get_number;
extern int gdk_screen_get_width(GdkScreen*) = screen_get_width;
extern int gdk_screen_get_height(GdkScreen*) = screen_get_height;
extern int gdk_screen_get_width_mm(GdkScreen*) = screen_get_width_mm;
extern int gdk_screen_get_height_mm(GdkScreen*) = screen_get_height_mm;
extern GList* gdk_screen_list_visuals(GdkScreen*) = screen_list_visuals;
extern GList* gdk_screen_get_toplevel_windows(GdkScreen*) = screen_get_toplevel_windows;
extern char* gdk_screen_make_display_name(GdkScreen*) = screen_make_display_name;
extern int gdk_screen_get_n_monitors(GdkScreen*) = screen_get_n_monitors;
extern void gdk_screen_get_monitor_geometry(GdkScreen*, int, GdkRectangle*) = screen_get_monitor_geometry;
extern int gdk_screen_get_monitor_at_point(GdkScreen*, int, int) = screen_get_monitor_at_point;
extern int gdk_screen_get_monitor_at_window(GdkScreen*, GdkWindow*) = screen_get_monitor_at_window;
extern int gdk_screen_get_monitor_width_mm(GdkScreen*, int) = screen_get_monitor_width_mm;
extern int gdk_screen_get_monitor_height_mm(GdkScreen*, int) = screen_get_monitor_height_mm;
extern char* gdk_screen_get_monitor_plug_name(GdkScreen*, int) = screen_get_monitor_plug_name;
extern void gdk_screen_broadcast_client_message(GdkScreen*, GdkEvent*) = screen_broadcast_client_message;
extern GdkScreen* gdk_screen_get_default() = screen_get_default;
extern int gdk_screen_get_setting(GdkScreen*, char*, GValue*) = screen_get_setting;
extern void gdk_screen_set_font_options(GdkScreen*, cairo_font_options_t*) = screen_set_font_options;
extern cairo_font_options_t* gdk_screen_get_font_options(GdkScreen*) = screen_get_font_options;
extern void gdk_screen_set_resolution(GdkScreen*, double) = screen_set_resolution;
extern double gdk_screen_get_resolution(GdkScreen*) = screen_get_resolution;
extern GdkWindow* gdk_screen_get_active_window(GdkScreen*) = screen_get_active_window;
extern GList* gdk_screen_get_window_stack(GdkScreen*) = screen_get_window_stack;
extern long gdk_app_launch_context_get_type() = app_launch_context_get_type;
extern GdkAppLaunchContext* gdk_app_launch_context_new() = app_launch_context_new;
extern void gdk_app_launch_context_set_display(GdkAppLaunchContext*, GdkDisplay*) = app_launch_context_set_display;
extern void gdk_app_launch_context_set_screen(GdkAppLaunchContext*, GdkScreen*) = app_launch_context_set_screen;
extern void gdk_app_launch_context_set_desktop(GdkAppLaunchContext*, int) = app_launch_context_set_desktop;
extern void gdk_app_launch_context_set_timestamp(GdkAppLaunchContext*, int) = app_launch_context_set_timestamp;
extern void gdk_app_launch_context_set_icon(GdkAppLaunchContext*, GIcon*) = app_launch_context_set_icon;
extern void gdk_app_launch_context_set_icon_name(GdkAppLaunchContext*, char*) = app_launch_context_set_icon_name;
extern void gdk_rgb_init() = rgb_init;
extern long gdk_rgb_xpixel_from_rgb(int) = rgb_xpixel_from_rgb;
extern void gdk_rgb_gc_set_foreground(GdkGC*, int) = rgb_gc_set_foreground;
extern void gdk_rgb_gc_set_background(GdkGC*, int) = rgb_gc_set_background;
extern void gdk_rgb_find_color(GdkColormap*, GdkColor*) = rgb_find_color;
extern void gdk_draw_rgb_image(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int) = draw_rgb_image;
extern void gdk_draw_rgb_image_dithalign(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int, int, int) = draw_rgb_image_dithalign;
extern void gdk_draw_rgb_32_image(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int) = draw_rgb_32_image;
extern void gdk_draw_rgb_32_image_dithalign(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int, int, int) = draw_rgb_32_image_dithalign;
extern void gdk_draw_gray_image(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int) = draw_gray_image;
extern void gdk_draw_indexed_image(GdkDrawable*, GdkGC*, int, int, int, int, int, char*, int, GdkRgbCmap*) = draw_indexed_image;
extern GdkRgbCmap* gdk_rgb_cmap_new(int*, int) = rgb_cmap_new;
extern void gdk_rgb_cmap_free(GdkRgbCmap*) = rgb_cmap_free;
extern void gdk_rgb_set_verbose(int) = rgb_set_verbose;
extern void gdk_rgb_set_install(int) = rgb_set_install;
extern void gdk_rgb_set_min_colors(int) = rgb_set_min_colors;
extern GdkColormap* gdk_rgb_get_colormap() = rgb_get_colormap;
extern GdkVisual* gdk_rgb_get_visual() = rgb_get_visual;
extern int gdk_rgb_ditherable() = rgb_ditherable;
extern int gdk_rgb_colormap_ditherable(GdkColormap*) = rgb_colormap_ditherable;
extern int gdk_pixbuf_error_quark() = pixbuf_error_quark;
extern long gdk_pixbuf_get_type() = pixbuf_get_type;
extern GdkPixbuf* gdk_pixbuf_ref(GdkPixbuf*) = pixbuf_ref;
extern void gdk_pixbuf_unref(GdkPixbuf*) = pixbuf_unref;
extern int gdk_pixbuf_get_colorspace(GdkPixbuf*) = pixbuf_get_colorspace;
extern int gdk_pixbuf_get_n_channels(GdkPixbuf*) = pixbuf_get_n_channels;
extern int gdk_pixbuf_get_has_alpha(GdkPixbuf*) = pixbuf_get_has_alpha;
extern int gdk_pixbuf_get_bits_per_sample(GdkPixbuf*) = pixbuf_get_bits_per_sample;
extern char* gdk_pixbuf_get_pixels(GdkPixbuf*) = pixbuf_get_pixels;
extern int gdk_pixbuf_get_width(GdkPixbuf*) = pixbuf_get_width;
extern int gdk_pixbuf_get_height(GdkPixbuf*) = pixbuf_get_height;
extern int gdk_pixbuf_get_rowstride(GdkPixbuf*) = pixbuf_get_rowstride;
extern GdkPixbuf* gdk_pixbuf_new(int, int, int, int, int) = pixbuf_new;
extern GdkPixbuf* gdk_pixbuf_copy(GdkPixbuf*) = pixbuf_copy;
extern GdkPixbuf* gdk_pixbuf_new_subpixbuf(GdkPixbuf*, int, int, int, int) = pixbuf_new_subpixbuf;
extern GdkPixbuf* gdk_pixbuf_new_from_file(char*, GError**) = pixbuf_new_from_file;
extern GdkPixbuf* gdk_pixbuf_new_from_file_at_size(char*, int, int, GError**) = pixbuf_new_from_file_at_size;
extern GdkPixbuf* gdk_pixbuf_new_from_file_at_scale(char*, int, int, int, GError**) = pixbuf_new_from_file_at_scale;
extern GdkPixbuf* gdk_pixbuf_new_from_data(char*, int, int, int, int, int, int, void*, void*) = pixbuf_new_from_data;
extern GdkPixbuf* gdk_pixbuf_new_from_xpm_data(char**) = pixbuf_new_from_xpm_data;
extern GdkPixbuf* gdk_pixbuf_new_from_inline(int, char*, int, GError**) = pixbuf_new_from_inline;
extern void gdk_pixbuf_fill(GdkPixbuf*, int) = pixbuf_fill;
extern int gdk_pixbuf_save(GdkPixbuf*, char*, char*, GError**, ...) = pixbuf_save;
extern int gdk_pixbuf_savev(GdkPixbuf*, char*, char*, char**, char**, GError**) = pixbuf_savev;
extern int gdk_pixbuf_save_to_callback(GdkPixbuf*, void*, void*, char*, GError**, ...) = pixbuf_save_to_callback;
extern int gdk_pixbuf_save_to_callbackv(GdkPixbuf*, void*, void*, char*, char**, char**, GError**) = pixbuf_save_to_callbackv;
extern int gdk_pixbuf_save_to_buffer(GdkPixbuf*, char**, long*, char*, GError**, ...) = pixbuf_save_to_buffer;
extern int gdk_pixbuf_save_to_bufferv(GdkPixbuf*, char**, long*, char*, char**, char**, GError**) = pixbuf_save_to_bufferv;
extern GdkPixbuf* gdk_pixbuf_new_from_stream(GInputStream*, GCancellable*, GError**) = pixbuf_new_from_stream;
extern GdkPixbuf* gdk_pixbuf_new_from_stream_at_scale(GInputStream*, int, int, int, GCancellable*, GError**) = pixbuf_new_from_stream_at_scale;
extern int gdk_pixbuf_save_to_stream(GdkPixbuf*, GOutputStream*, char*, GCancellable*, GError**, ...) = pixbuf_save_to_stream;
extern GdkPixbuf* gdk_pixbuf_add_alpha(GdkPixbuf*, int, char, char, char) = pixbuf_add_alpha;
extern void gdk_pixbuf_copy_area(GdkPixbuf*, int, int, int, int, GdkPixbuf*, int, int) = pixbuf_copy_area;
extern void gdk_pixbuf_saturate_and_pixelate(GdkPixbuf*, GdkPixbuf*, float, int) = pixbuf_saturate_and_pixelate;
extern GdkPixbuf* gdk_pixbuf_apply_embedded_orientation(GdkPixbuf*) = pixbuf_apply_embedded_orientation;
extern char* gdk_pixbuf_get_option(GdkPixbuf*, char*) = pixbuf_get_option;
extern void gdk_pixbuf_scale(GdkPixbuf*, GdkPixbuf*, int, int, int, int, double, double, double, double, int) = pixbuf_scale;
extern void gdk_pixbuf_composite(GdkPixbuf*, GdkPixbuf*, int, int, int, int, double, double, double, double, int, int) = pixbuf_composite;
extern void gdk_pixbuf_composite_color(GdkPixbuf*, GdkPixbuf*, int, int, int, int, double, double, double, double, int, int, int, int, int, int, int) = pixbuf_composite_color;
extern GdkPixbuf* gdk_pixbuf_scale_simple(GdkPixbuf*, int, int, int) = pixbuf_scale_simple;
extern GdkPixbuf* gdk_pixbuf_composite_color_simple(GdkPixbuf*, int, int, int, int, int, int, int) = pixbuf_composite_color_simple;
extern GdkPixbuf* gdk_pixbuf_rotate_simple(GdkPixbuf*, int) = pixbuf_rotate_simple;
extern GdkPixbuf* gdk_pixbuf_flip(GdkPixbuf*, int) = pixbuf_flip;
extern long gdk_pixbuf_animation_get_type() = pixbuf_animation_get_type;
extern GdkPixbufAnimation* gdk_pixbuf_animation_new_from_file(char*, GError**) = pixbuf_animation_new_from_file;
extern GdkPixbufAnimation* gdk_pixbuf_animation_ref(GdkPixbufAnimation*) = pixbuf_animation_ref;
extern void gdk_pixbuf_animation_unref(GdkPixbufAnimation*) = pixbuf_animation_unref;
extern int gdk_pixbuf_animation_get_width(GdkPixbufAnimation*) = pixbuf_animation_get_width;
extern int gdk_pixbuf_animation_get_height(GdkPixbufAnimation*) = pixbuf_animation_get_height;
extern int gdk_pixbuf_animation_is_static_image(GdkPixbufAnimation*) = pixbuf_animation_is_static_image;
extern GdkPixbuf* gdk_pixbuf_animation_get_static_image(GdkPixbufAnimation*) = pixbuf_animation_get_static_image;
extern GdkPixbufAnimationIter* gdk_pixbuf_animation_get_iter(GdkPixbufAnimation*, GTimeVal*) = pixbuf_animation_get_iter;
extern long gdk_pixbuf_animation_iter_get_type() = pixbuf_animation_iter_get_type;
extern int gdk_pixbuf_animation_iter_get_delay_time(GdkPixbufAnimationIter*) = pixbuf_animation_iter_get_delay_time;
extern GdkPixbuf* gdk_pixbuf_animation_iter_get_pixbuf(GdkPixbufAnimationIter*) = pixbuf_animation_iter_get_pixbuf;
extern int gdk_pixbuf_animation_iter_on_currently_loading_frame(GdkPixbufAnimationIter*) = pixbuf_animation_iter_on_currently_loading_frame;
extern int gdk_pixbuf_animation_iter_advance(GdkPixbufAnimationIter*, GTimeVal*) = pixbuf_animation_iter_advance;
extern long gdk_pixbuf_simple_anim_get_type() = pixbuf_simple_anim_get_type;
extern long gdk_pixbuf_simple_anim_iter_get_type() = pixbuf_simple_anim_iter_get_type;
extern GdkPixbufSimpleAnim* gdk_pixbuf_simple_anim_new(int, int, float) = pixbuf_simple_anim_new;
extern void gdk_pixbuf_simple_anim_add_frame(GdkPixbufSimpleAnim*, GdkPixbuf*) = pixbuf_simple_anim_add_frame;
extern GSList* gdk_pixbuf_get_formats() = pixbuf_get_formats;
extern char* gdk_pixbuf_format_get_name(GdkPixbufFormat*) = pixbuf_format_get_name;
extern char* gdk_pixbuf_format_get_description(GdkPixbufFormat*) = pixbuf_format_get_description;
extern char** gdk_pixbuf_format_get_mime_types(GdkPixbufFormat*) = pixbuf_format_get_mime_types;
extern char** gdk_pixbuf_format_get_extensions(GdkPixbufFormat*) = pixbuf_format_get_extensions;
extern int gdk_pixbuf_format_is_writable(GdkPixbufFormat*) = pixbuf_format_is_writable;
extern int gdk_pixbuf_format_is_scalable(GdkPixbufFormat*) = pixbuf_format_is_scalable;
extern int gdk_pixbuf_format_is_disabled(GdkPixbufFormat*) = pixbuf_format_is_disabled;
extern void gdk_pixbuf_format_set_disabled(GdkPixbufFormat*, int) = pixbuf_format_set_disabled;
extern char* gdk_pixbuf_format_get_license(GdkPixbufFormat*) = pixbuf_format_get_license;
extern GdkPixbufFormat* gdk_pixbuf_get_file_info(char*, int*, int*) = pixbuf_get_file_info;
extern long gdk_pixbuf_loader_get_type() = pixbuf_loader_get_type;
extern GdkPixbufLoader* gdk_pixbuf_loader_new() = pixbuf_loader_new;
extern GdkPixbufLoader* gdk_pixbuf_loader_new_with_type(char*, GError**) = pixbuf_loader_new_with_type;
extern GdkPixbufLoader* gdk_pixbuf_loader_new_with_mime_type(char*, GError**) = pixbuf_loader_new_with_mime_type;
extern void gdk_pixbuf_loader_set_size(GdkPixbufLoader*, int, int) = pixbuf_loader_set_size;
extern int gdk_pixbuf_loader_write(GdkPixbufLoader*, char*, long, GError**) = pixbuf_loader_write;
extern GdkPixbuf* gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader*) = pixbuf_loader_get_pixbuf;
extern GdkPixbufAnimation* gdk_pixbuf_loader_get_animation(GdkPixbufLoader*) = pixbuf_loader_get_animation;
extern int gdk_pixbuf_loader_close(GdkPixbufLoader*, GError**) = pixbuf_loader_close;
extern GdkPixbufFormat* gdk_pixbuf_loader_get_format(GdkPixbufLoader*) = pixbuf_loader_get_format;
extern long gdk_pixbuf_alpha_mode_get_type() = pixbuf_alpha_mode_get_type;
extern long gdk_colorspace_get_type() = colorspace_get_type;
extern long gdk_pixbuf_error_get_type() = pixbuf_error_get_type;
extern long gdk_interp_type_get_type() = interp_type_get_type;
extern long gdk_pixbuf_rotation_get_type() = pixbuf_rotation_get_type;
extern void gdk_pixbuf_render_threshold_alpha(GdkPixbuf*, GdkBitmap*, int, int, int, int, int, int, int) = pixbuf_render_threshold_alpha;
extern void gdk_pixbuf_render_to_drawable(GdkPixbuf*, GdkDrawable*, GdkGC*, int, int, int, int, int, int, int, int, int) = pixbuf_render_to_drawable;
extern void gdk_pixbuf_render_to_drawable_alpha(GdkPixbuf*, GdkDrawable*, int, int, int, int, int, int, int, int, int, int, int) = pixbuf_render_to_drawable_alpha;
extern void gdk_pixbuf_render_pixmap_and_mask_for_colormap(GdkPixbuf*, GdkColormap*, GdkPixmap**, GdkBitmap**, int) = pixbuf_render_pixmap_and_mask_for_colormap;
extern void gdk_pixbuf_render_pixmap_and_mask(GdkPixbuf*, GdkPixmap**, GdkBitmap**, int) = pixbuf_render_pixmap_and_mask;
extern GdkPixbuf* gdk_pixbuf_get_from_drawable(GdkPixbuf*, GdkDrawable*, GdkColormap*, int, int, int, int, int, int) = pixbuf_get_from_drawable;
extern GdkPixbuf* gdk_pixbuf_get_from_image(GdkPixbuf*, GdkImage*, GdkColormap*, int, int, int, int, int, int) = pixbuf_get_from_image;
extern cairo_t* gdk_cairo_create(GdkDrawable*) = cairo_create;
extern void gdk_cairo_set_source_color(cairo_t*, GdkColor*) = cairo_set_source_color;
extern void gdk_cairo_set_source_pixbuf(cairo_t*, GdkPixbuf*, double, double) = cairo_set_source_pixbuf;
extern void gdk_cairo_set_source_pixmap(cairo_t*, GdkPixmap*, double, double) = cairo_set_source_pixmap;
extern void gdk_cairo_rectangle(cairo_t*, GdkRectangle*) = cairo_rectangle;
extern void gdk_cairo_region(cairo_t*, GdkRegion*) = cairo_region;
extern long gdk_cursor_get_type() = cursor_get_type;
extern GdkCursor* gdk_cursor_new_for_display(GdkDisplay*, int) = cursor_new_for_display;
extern GdkCursor* gdk_cursor_new(int) = cursor_new;
extern GdkCursor* gdk_cursor_new_from_pixmap(GdkPixmap*, GdkPixmap*, GdkColor*, GdkColor*, int, int) = cursor_new_from_pixmap;
extern GdkCursor* gdk_cursor_new_from_pixbuf(GdkDisplay*, GdkPixbuf*, int, int) = cursor_new_from_pixbuf;
extern GdkDisplay* gdk_cursor_get_display(GdkCursor*) = cursor_get_display;
extern GdkCursor* gdk_cursor_ref(GdkCursor*) = cursor_ref;
extern void gdk_cursor_unref(GdkCursor*) = cursor_unref;
extern GdkCursor* gdk_cursor_new_from_name(GdkDisplay*, char*) = cursor_new_from_name;
extern GdkPixbuf* gdk_cursor_get_image(GdkCursor*) = cursor_get_image;
extern long gdk_display_manager_get_type() = display_manager_get_type;
extern GdkDisplayManager* gdk_display_manager_get() = display_manager_get;
extern GdkDisplay* gdk_display_manager_get_default_display(GdkDisplayManager*) = display_manager_get_default_display;
extern void gdk_display_manager_set_default_display(GdkDisplayManager*, GdkDisplay*) = display_manager_set_default_display;
extern GSList* gdk_display_manager_list_displays(GdkDisplayManager*) = display_manager_list_displays;
extern long gdk_gc_get_type() = gc_get_type;
extern GdkGC* gdk_gc_new(GdkDrawable*) = gc_new;
extern GdkGC* gdk_gc_new_with_values(GdkDrawable*, GdkGCValues*, int) = gc_new_with_values;
extern GdkGC* gdk_gc_ref(GdkGC*) = gc_ref;
extern void gdk_gc_unref(GdkGC*) = gc_unref;
extern void gdk_gc_get_values(GdkGC*, GdkGCValues*) = gc_get_values;
extern void gdk_gc_set_values(GdkGC*, GdkGCValues*, int) = gc_set_values;
extern void gdk_gc_set_foreground(GdkGC*, GdkColor*) = gc_set_foreground;
extern void gdk_gc_set_background(GdkGC*, GdkColor*) = gc_set_background;
extern void gdk_gc_set_font(GdkGC*, GdkFont*) = gc_set_font;
extern void gdk_gc_set_function(GdkGC*, int) = gc_set_function;
extern void gdk_gc_set_fill(GdkGC*, int) = gc_set_fill;
extern void gdk_gc_set_tile(GdkGC*, GdkPixmap*) = gc_set_tile;
extern void gdk_gc_set_stipple(GdkGC*, GdkPixmap*) = gc_set_stipple;
extern void gdk_gc_set_ts_origin(GdkGC*, int, int) = gc_set_ts_origin;
extern void gdk_gc_set_clip_origin(GdkGC*, int, int) = gc_set_clip_origin;
extern void gdk_gc_set_clip_mask(GdkGC*, GdkBitmap*) = gc_set_clip_mask;
extern void gdk_gc_set_clip_rectangle(GdkGC*, GdkRectangle*) = gc_set_clip_rectangle;
extern void gdk_gc_set_clip_region(GdkGC*, GdkRegion*) = gc_set_clip_region;
extern void gdk_gc_set_subwindow(GdkGC*, int) = gc_set_subwindow;
extern void gdk_gc_set_exposures(GdkGC*, int) = gc_set_exposures;
extern void gdk_gc_set_line_attributes(GdkGC*, int, int, int, int) = gc_set_line_attributes;
extern void gdk_gc_set_dashes(GdkGC*, int, char*, int) = gc_set_dashes;
extern void gdk_gc_offset(GdkGC*, int, int) = gc_offset;
extern void gdk_gc_copy(GdkGC*, GdkGC*) = gc_copy;
extern void gdk_gc_set_colormap(GdkGC*, GdkColormap*) = gc_set_colormap;
extern GdkColormap* gdk_gc_get_colormap(GdkGC*) = gc_get_colormap;
extern void gdk_gc_set_rgb_fg_color(GdkGC*, GdkColor*) = gc_set_rgb_fg_color;
extern void gdk_gc_set_rgb_bg_color(GdkGC*, GdkColor*) = gc_set_rgb_bg_color;
extern GdkScreen* gdk_gc_get_screen(GdkGC*) = gc_get_screen;
extern long gdk_drawable_get_type() = drawable_get_type;
extern void gdk_drawable_set_data(GdkDrawable*, char*, void*, void*) = drawable_set_data;
extern void* gdk_drawable_get_data(GdkDrawable*, char*) = drawable_get_data;
extern void gdk_drawable_get_size(GdkDrawable*, int*, int*) = drawable_get_size;
extern void gdk_drawable_set_colormap(GdkDrawable*, GdkColormap*) = drawable_set_colormap;
extern GdkColormap* gdk_drawable_get_colormap(GdkDrawable*) = drawable_get_colormap;
extern GdkVisual* gdk_drawable_get_visual(GdkDrawable*) = drawable_get_visual;
extern int gdk_drawable_get_depth(GdkDrawable*) = drawable_get_depth;
extern GdkScreen* gdk_drawable_get_screen(GdkDrawable*) = drawable_get_screen;
extern GdkDisplay* gdk_drawable_get_display(GdkDrawable*) = drawable_get_display;
extern GdkDrawable* gdk_drawable_ref(GdkDrawable*) = drawable_ref;
extern void gdk_drawable_unref(GdkDrawable*) = drawable_unref;
extern void gdk_draw_point(GdkDrawable*, GdkGC*, int, int) = draw_point;
extern void gdk_draw_line(GdkDrawable*, GdkGC*, int, int, int, int) = draw_line;
extern void gdk_draw_rectangle(GdkDrawable*, GdkGC*, int, int, int, int, int) = draw_rectangle;
extern void gdk_draw_arc(GdkDrawable*, GdkGC*, int, int, int, int, int, int, int) = draw_arc;
extern void gdk_draw_polygon(GdkDrawable*, GdkGC*, int, GdkPoint*, int) = draw_polygon;
extern void gdk_draw_string(GdkDrawable*, GdkFont*, GdkGC*, int, int, char*) = draw_string;
extern void gdk_draw_text(GdkDrawable*, GdkFont*, GdkGC*, int, int, char*, int) = draw_text;
extern void gdk_draw_text_wc(GdkDrawable*, GdkFont*, GdkGC*, int, int, int*, int) = draw_text_wc;
extern void gdk_draw_drawable(GdkDrawable*, GdkGC*, GdkDrawable*, int, int, int, int, int, int) = draw_drawable;
extern void gdk_draw_image(GdkDrawable*, GdkGC*, GdkImage*, int, int, int, int, int, int) = draw_image;
extern void gdk_draw_points(GdkDrawable*, GdkGC*, GdkPoint*, int) = draw_points;
extern void gdk_draw_segments(GdkDrawable*, GdkGC*, GdkSegment*, int) = draw_segments;
extern void gdk_draw_lines(GdkDrawable*, GdkGC*, GdkPoint*, int) = draw_lines;
extern void gdk_draw_pixbuf(GdkDrawable*, GdkGC*, GdkPixbuf*, int, int, int, int, int, int, int, int, int) = draw_pixbuf;
extern void gdk_draw_glyphs(GdkDrawable*, GdkGC*, PangoFont*, int, int, PangoGlyphString*) = draw_glyphs;
extern void gdk_draw_layout_line(GdkDrawable*, GdkGC*, int, int, PangoLayoutLine*) = draw_layout_line;
extern void gdk_draw_layout(GdkDrawable*, GdkGC*, int, int, PangoLayout*) = draw_layout;
extern void gdk_draw_layout_line_with_colors(GdkDrawable*, GdkGC*, int, int, PangoLayoutLine*, GdkColor*, GdkColor*) = draw_layout_line_with_colors;
extern void gdk_draw_layout_with_colors(GdkDrawable*, GdkGC*, int, int, PangoLayout*, GdkColor*, GdkColor*) = draw_layout_with_colors;
extern void gdk_draw_glyphs_transformed(GdkDrawable*, GdkGC*, PangoMatrix*, PangoFont*, int, int, PangoGlyphString*) = draw_glyphs_transformed;
extern void gdk_draw_trapezoids(GdkDrawable*, GdkGC*, GdkTrapezoid*, int) = draw_trapezoids;
extern GdkImage* gdk_drawable_get_image(GdkDrawable*, int, int, int, int) = drawable_get_image;
extern GdkImage* gdk_drawable_copy_to_image(GdkDrawable*, GdkImage*, int, int, int, int, int, int) = drawable_copy_to_image;
extern GdkRegion* gdk_drawable_get_clip_region(GdkDrawable*) = drawable_get_clip_region;
extern GdkRegion* gdk_drawable_get_visible_region(GdkDrawable*) = drawable_get_visible_region;
extern long gdk_cursor_type_get_type() = cursor_type_get_type;
extern long gdk_drag_action_get_type() = drag_action_get_type;
extern long gdk_drag_protocol_get_type() = drag_protocol_get_type;
extern long gdk_filter_return_get_type() = filter_return_get_type;
extern long gdk_event_type_get_type() = event_type_get_type;
extern long gdk_event_mask_get_type() = event_mask_get_type;
extern long gdk_visibility_state_get_type() = visibility_state_get_type;
extern long gdk_scroll_direction_get_type() = scroll_direction_get_type;
extern long gdk_notify_type_get_type() = notify_type_get_type;
extern long gdk_crossing_mode_get_type() = crossing_mode_get_type;
extern long gdk_property_state_get_type() = property_state_get_type;
extern long gdk_window_state_get_type() = window_state_get_type;
extern long gdk_setting_action_get_type() = setting_action_get_type;
extern long gdk_owner_change_get_type() = owner_change_get_type;
extern long gdk_font_type_get_type() = font_type_get_type;
extern long gdk_cap_style_get_type() = cap_style_get_type;
extern long gdk_fill_get_type() = fill_get_type;
extern long gdk_function_get_type() = function_get_type;
extern long gdk_join_style_get_type() = join_style_get_type;
extern long gdk_line_style_get_type() = line_style_get_type;
extern long gdk_subwindow_mode_get_type() = subwindow_mode_get_type;
extern long gdk_gc_values_mask_get_type() = gc_values_mask_get_type;
extern long gdk_image_type_get_type() = image_type_get_type;
extern long gdk_extension_mode_get_type() = extension_mode_get_type;
extern long gdk_input_source_get_type() = input_source_get_type;
extern long gdk_input_mode_get_type() = input_mode_get_type;
extern long gdk_axis_use_get_type() = axis_use_get_type;
extern long gdk_prop_mode_get_type() = prop_mode_get_type;
extern long gdk_fill_rule_get_type() = fill_rule_get_type;
extern long gdk_overlap_type_get_type() = overlap_type_get_type;
extern long gdk_rgb_dither_get_type() = rgb_dither_get_type;
extern long gdk_byte_order_get_type() = byte_order_get_type;
extern long gdk_modifier_type_get_type() = modifier_type_get_type;
extern long gdk_input_condition_get_type() = input_condition_get_type;
extern long gdk_status_get_type() = status_get_type;
extern long gdk_grab_status_get_type() = grab_status_get_type;
extern long gdk_visual_type_get_type() = visual_type_get_type;
extern long gdk_window_class_get_type() = window_class_get_type;
extern long gdk_window_type_get_type() = window_type_get_type;
extern long gdk_window_attributes_type_get_type() = window_attributes_type_get_type;
extern long gdk_window_hints_get_type() = window_hints_get_type;
extern long gdk_window_type_hint_get_type() = window_type_hint_get_type;
extern long gdk_wm_decoration_get_type() = wm_decoration_get_type;
extern long gdk_wm_function_get_type() = wm_function_get_type;
extern long gdk_gravity_get_type() = gravity_get_type;
extern long gdk_window_edge_get_type() = window_edge_get_type;
extern long gdk_font_get_type() = font_get_type;
extern GdkFont* gdk_font_ref(GdkFont*) = font_ref;
extern void gdk_font_unref(GdkFont*) = font_unref;
extern int gdk_font_id(GdkFont*) = font_id;
extern int gdk_font_equal(GdkFont*, GdkFont*) = font_equal;
extern GdkFont* gdk_font_load_for_display(GdkDisplay*, char*) = font_load_for_display;
extern GdkFont* gdk_fontset_load_for_display(GdkDisplay*, char*) = fontset_load_for_display;
extern GdkFont* gdk_font_from_description_for_display(GdkDisplay*, PangoFontDescription*) = font_from_description_for_display;
extern GdkFont* gdk_font_load(char*) = font_load;
extern GdkFont* gdk_fontset_load(char*) = fontset_load;
extern GdkFont* gdk_font_from_description(PangoFontDescription*) = font_from_description;
extern int gdk_string_width(GdkFont*, char*) = string_width;
extern int gdk_text_width(GdkFont*, char*, int) = text_width;
extern int gdk_text_width_wc(GdkFont*, int*, int) = text_width_wc;
extern int gdk_char_width(GdkFont*, char) = char_width;
extern int gdk_char_width_wc(GdkFont*, int) = char_width_wc;
extern int gdk_string_measure(GdkFont*, char*) = string_measure;
extern int gdk_text_measure(GdkFont*, char*, int) = text_measure;
extern int gdk_char_measure(GdkFont*, char) = char_measure;
extern int gdk_string_height(GdkFont*, char*) = string_height;
extern int gdk_text_height(GdkFont*, char*, int) = text_height;
extern int gdk_char_height(GdkFont*, char) = char_height;
extern void gdk_text_extents(GdkFont*, char*, int, int*, int*, int*, int*, int*) = text_extents;
extern void gdk_text_extents_wc(GdkFont*, int*, int, int*, int*, int*, int*, int*) = text_extents_wc;
extern void gdk_string_extents(GdkFont*, char*, int*, int*, int*, int*, int*) = string_extents;
extern GdkDisplay* gdk_font_get_display(GdkFont*) = font_get_display;
extern long gdk_image_get_type() = image_get_type;
extern GdkImage* gdk_image_new(int, GdkVisual*, int, int) = image_new;
extern GdkImage* gdk_image_get(GdkDrawable*, int, int, int, int) = image_get;
extern GdkImage* gdk_image_ref(GdkImage*) = image_ref;
extern void gdk_image_unref(GdkImage*) = image_unref;
extern void gdk_image_put_pixel(GdkImage*, int, int, int) = image_put_pixel;
extern int gdk_image_get_pixel(GdkImage*, int, int) = image_get_pixel;
extern void gdk_image_set_colormap(GdkImage*, GdkColormap*) = image_set_colormap;
extern GdkColormap* gdk_image_get_colormap(GdkImage*) = image_get_colormap;
extern long gdk_keymap_get_type() = keymap_get_type;
extern GdkKeymap* gdk_keymap_get_default() = keymap_get_default;
extern GdkKeymap* gdk_keymap_get_for_display(GdkDisplay*) = keymap_get_for_display;
extern int gdk_keymap_lookup_key(GdkKeymap*, GdkKeymapKey*) = keymap_lookup_key;
extern int gdk_keymap_translate_keyboard_state(GdkKeymap*, int, int, int, int*, int*, int*, int*) = keymap_translate_keyboard_state;
extern int gdk_keymap_get_entries_for_keyval(GdkKeymap*, int, GdkKeymapKey**, int*) = keymap_get_entries_for_keyval;
extern int gdk_keymap_get_entries_for_keycode(GdkKeymap*, int, GdkKeymapKey**, int**, int*) = keymap_get_entries_for_keycode;
extern int gdk_keymap_get_direction(GdkKeymap*) = keymap_get_direction;
extern int gdk_keymap_have_bidi_layouts(GdkKeymap*) = keymap_have_bidi_layouts;
extern char* gdk_keyval_name(int) = keyval_name;
extern int gdk_keyval_from_name(char*) = keyval_from_name;
extern void gdk_keyval_convert_case(int, int*, int*) = keyval_convert_case;
extern int gdk_keyval_to_upper(int) = keyval_to_upper;
extern int gdk_keyval_to_lower(int) = keyval_to_lower;
extern int gdk_keyval_is_upper(int) = keyval_is_upper;
extern int gdk_keyval_is_lower(int) = keyval_is_lower;
extern int gdk_keyval_to_unicode(int) = keyval_to_unicode;
extern int gdk_unicode_to_keyval(int) = unicode_to_keyval;
extern long gdk_pango_renderer_get_type() = pango_renderer_get_type;
extern PangoRenderer* gdk_pango_renderer_new(GdkScreen*) = pango_renderer_new;
extern PangoRenderer* gdk_pango_renderer_get_default(GdkScreen*) = pango_renderer_get_default;
extern void gdk_pango_renderer_set_drawable(GdkPangoRenderer*, GdkDrawable*) = pango_renderer_set_drawable;
extern void gdk_pango_renderer_set_gc(GdkPangoRenderer*, GdkGC*) = pango_renderer_set_gc;
extern void gdk_pango_renderer_set_stipple(GdkPangoRenderer*, int, GdkBitmap*) = pango_renderer_set_stipple;
extern void gdk_pango_renderer_set_override_color(GdkPangoRenderer*, int, GdkColor*) = pango_renderer_set_override_color;
extern PangoContext* gdk_pango_context_get_for_screen(GdkScreen*) = pango_context_get_for_screen;
extern PangoContext* gdk_pango_context_get() = pango_context_get;
extern void gdk_pango_context_set_colormap(PangoContext*, GdkColormap*) = pango_context_set_colormap;
extern GdkRegion* gdk_pango_layout_line_get_clip_region(PangoLayoutLine*, int, int, int*, int) = pango_layout_line_get_clip_region;
extern GdkRegion* gdk_pango_layout_get_clip_region(PangoLayout*, int, int, int*, int) = pango_layout_get_clip_region;
extern PangoAttribute* gdk_pango_attr_stipple_new(GdkBitmap*) = pango_attr_stipple_new;
extern PangoAttribute* gdk_pango_attr_embossed_new(int) = pango_attr_embossed_new;
extern PangoAttribute* gdk_pango_attr_emboss_color_new(GdkColor*) = pango_attr_emboss_color_new;
extern long gdk_pixmap_get_type() = pixmap_get_type;
extern GdkPixmap* gdk_pixmap_new(GdkDrawable*, int, int, int) = pixmap_new;
extern GdkBitmap* gdk_bitmap_create_from_data(GdkDrawable*, char*, int, int) = bitmap_create_from_data;
extern GdkPixmap* gdk_pixmap_create_from_data(GdkDrawable*, char*, int, int, int, GdkColor*, GdkColor*) = pixmap_create_from_data;
extern GdkPixmap* gdk_pixmap_create_from_xpm(GdkDrawable*, GdkBitmap**, GdkColor*, char*) = pixmap_create_from_xpm;
extern GdkPixmap* gdk_pixmap_colormap_create_from_xpm(GdkDrawable*, GdkColormap*, GdkBitmap**, GdkColor*, char*) = pixmap_colormap_create_from_xpm;
extern GdkPixmap* gdk_pixmap_create_from_xpm_d(GdkDrawable*, GdkBitmap**, GdkColor*, char**) = pixmap_create_from_xpm_d;
extern GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d(GdkDrawable*, GdkColormap*, GdkBitmap**, GdkColor*, char**) = pixmap_colormap_create_from_xpm_d;
extern GdkPixmap* gdk_pixmap_foreign_new(int) = pixmap_foreign_new;
extern GdkPixmap* gdk_pixmap_lookup(int) = pixmap_lookup;
extern GdkPixmap* gdk_pixmap_foreign_new_for_display(GdkDisplay*, int) = pixmap_foreign_new_for_display;
extern GdkPixmap* gdk_pixmap_lookup_for_display(GdkDisplay*, int) = pixmap_lookup_for_display;
extern GdkPixmap* gdk_pixmap_foreign_new_for_screen(GdkScreen*, int, int, int, int) = pixmap_foreign_new_for_screen;
extern void/*struct _GdkAtom*/* gdk_atom_intern(char*, int) = atom_intern;
extern void/*struct _GdkAtom*/* gdk_atom_intern_static_string(char*) = atom_intern_static_string;
extern char* gdk_atom_name(void/*struct _GdkAtom*/*) = atom_name;
extern int gdk_property_get(GdkWindow*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, long, long, int, void/*struct _GdkAtom*/**, int*, int*, char**) = property_get;
extern void gdk_property_change(GdkWindow*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int, int, char*, int) = property_change;
extern void gdk_property_delete(GdkWindow*, void/*struct _GdkAtom*/*) = property_delete;
extern int gdk_text_property_to_text_list(void/*struct _GdkAtom*/*, int, char*, int, char***) = text_property_to_text_list;
extern int gdk_text_property_to_utf8_list(void/*struct _GdkAtom*/*, int, char*, int, char***) = text_property_to_utf8_list;
extern int gdk_utf8_to_compound_text(char*, void/*struct _GdkAtom*/**, int*, char**, int*) = utf8_to_compound_text;
extern int gdk_string_to_compound_text(char*, void/*struct _GdkAtom*/**, int*, char**, int*) = string_to_compound_text;
extern int gdk_text_property_to_text_list_for_display(GdkDisplay*, void/*struct _GdkAtom*/*, int, char*, int, char***) = text_property_to_text_list_for_display;
extern int gdk_text_property_to_utf8_list_for_display(GdkDisplay*, void/*struct _GdkAtom*/*, int, char*, int, char***) = text_property_to_utf8_list_for_display;
extern char* gdk_utf8_to_string_target(char*) = utf8_to_string_target;
extern int gdk_string_to_compound_text_for_display(GdkDisplay*, char*, void/*struct _GdkAtom*/**, int*, char**, int*) = string_to_compound_text_for_display;
extern int gdk_utf8_to_compound_text_for_display(GdkDisplay*, char*, void/*struct _GdkAtom*/**, int*, char**, int*) = utf8_to_compound_text_for_display;
extern void gdk_free_text_list(char**) = free_text_list;
extern void gdk_free_compound_text(char*) = free_compound_text;
extern GdkRegion* gdk_region_new() = region_new;
extern GdkRegion* gdk_region_polygon(GdkPoint*, int, int) = region_polygon;
extern GdkRegion* gdk_region_copy(GdkRegion*) = region_copy;
extern GdkRegion* gdk_region_rectangle(GdkRectangle*) = region_rectangle;
extern void gdk_region_destroy(GdkRegion*) = region_destroy;
extern void gdk_region_get_clipbox(GdkRegion*, GdkRectangle*) = region_get_clipbox;
extern void gdk_region_get_rectangles(GdkRegion*, GdkRectangle**, int*) = region_get_rectangles;
extern int gdk_region_empty(GdkRegion*) = region_empty;
extern int gdk_region_equal(GdkRegion*, GdkRegion*) = region_equal;
extern int gdk_region_point_in(GdkRegion*, int, int) = region_point_in;
extern int gdk_region_rect_in(GdkRegion*, GdkRectangle*) = region_rect_in;
extern void gdk_region_offset(GdkRegion*, int, int) = region_offset;
extern void gdk_region_shrink(GdkRegion*, int, int) = region_shrink;
extern void gdk_region_union_with_rect(GdkRegion*, GdkRectangle*) = region_union_with_rect;
extern void gdk_region_intersect(GdkRegion*, GdkRegion*) = region_intersect;
extern void gdk_region_union(GdkRegion*, GdkRegion*) = region_union;
extern void gdk_region_subtract(GdkRegion*, GdkRegion*) = region_subtract;
extern void gdk_region_xor(GdkRegion*, GdkRegion*) = region_xor;
extern void gdk_region_spans_intersect_foreach(GdkRegion*, GdkSpan*, int, int, void*, void*) = region_spans_intersect_foreach;
extern int gdk_selection_owner_set(GdkWindow*, void/*struct _GdkAtom*/*, int, int) = selection_owner_set;
extern GdkWindow* gdk_selection_owner_get(void/*struct _GdkAtom*/*) = selection_owner_get;
extern int gdk_selection_owner_set_for_display(GdkDisplay*, GdkWindow*, void/*struct _GdkAtom*/*, int, int) = selection_owner_set_for_display;
extern GdkWindow* gdk_selection_owner_get_for_display(GdkDisplay*, void/*struct _GdkAtom*/*) = selection_owner_get_for_display;
extern void gdk_selection_convert(GdkWindow*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int) = selection_convert;
extern int gdk_selection_property_get(GdkWindow*, char**, void/*struct _GdkAtom*/**, int*) = selection_property_get;
extern void gdk_selection_send_notify(int, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int) = selection_send_notify;
extern void gdk_selection_send_notify_for_display(GdkDisplay*, int, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int) = selection_send_notify_for_display;
extern int gdk_spawn_on_screen(GdkScreen*, char*, char**, char**, int, void*, void*, int*, GError**) = spawn_on_screen;
extern int gdk_spawn_on_screen_with_pipes(GdkScreen*, char*, char**, char**, int, void*, void*, int*, int*, int*, int*, GError**) = spawn_on_screen_with_pipes;
extern int gdk_spawn_command_line_on_screen(GdkScreen*, char*, GError**) = spawn_command_line_on_screen;
extern long gdk_window_object_get_type() = window_object_get_type;
extern GdkWindow* gdk_window_new(GdkWindow*, GdkWindowAttr*, int) = window_new;
extern void gdk_window_destroy(GdkWindow*) = window_destroy;
extern int gdk_window_get_window_type(GdkWindow*) = window_get_window_type;
extern GdkWindow* gdk_window_at_pointer(int*, int*) = window_at_pointer;
extern void gdk_window_show(GdkWindow*) = window_show;
extern void gdk_window_hide(GdkWindow*) = window_hide;
extern void gdk_window_withdraw(GdkWindow*) = window_withdraw;
extern void gdk_window_show_unraised(GdkWindow*) = window_show_unraised;
extern void gdk_window_move(GdkWindow*, int, int) = window_move;
extern void gdk_window_resize(GdkWindow*, int, int) = window_resize;
extern void gdk_window_move_resize(GdkWindow*, int, int, int, int) = window_move_resize;
extern void gdk_window_reparent(GdkWindow*, GdkWindow*, int, int) = window_reparent;
extern void gdk_window_clear(GdkWindow*) = window_clear;
extern void gdk_window_clear_area(GdkWindow*, int, int, int, int) = window_clear_area;
extern void gdk_window_clear_area_e(GdkWindow*, int, int, int, int) = window_clear_area_e;
extern void gdk_window_raise(GdkWindow*) = window_raise;
extern void gdk_window_lower(GdkWindow*) = window_lower;
extern void gdk_window_focus(GdkWindow*, int) = window_focus;
extern void gdk_window_set_user_data(GdkWindow*, void*) = window_set_user_data;
extern void gdk_window_set_override_redirect(GdkWindow*, int) = window_set_override_redirect;
extern void gdk_window_set_accept_focus(GdkWindow*, int) = window_set_accept_focus;
extern void gdk_window_set_focus_on_map(GdkWindow*, int) = window_set_focus_on_map;
extern void gdk_window_add_filter(GdkWindow*, void*, void*) = window_add_filter;
extern void gdk_window_remove_filter(GdkWindow*, void*, void*) = window_remove_filter;
extern void gdk_window_scroll(GdkWindow*, int, int) = window_scroll;
extern void gdk_window_move_region(GdkWindow*, GdkRegion*, int, int) = window_move_region;
extern void gdk_window_shape_combine_mask(GdkWindow*, GdkBitmap*, int, int) = window_shape_combine_mask;
extern void gdk_window_shape_combine_region(GdkWindow*, GdkRegion*, int, int) = window_shape_combine_region;
extern void gdk_window_set_child_shapes(GdkWindow*) = window_set_child_shapes;
extern void gdk_window_set_composited(GdkWindow*, int) = window_set_composited;
extern void gdk_window_merge_child_shapes(GdkWindow*) = window_merge_child_shapes;
extern void gdk_window_input_shape_combine_mask(GdkWindow*, GdkBitmap*, int, int) = window_input_shape_combine_mask;
extern void gdk_window_input_shape_combine_region(GdkWindow*, GdkRegion*, int, int) = window_input_shape_combine_region;
extern void gdk_window_set_child_input_shapes(GdkWindow*) = window_set_child_input_shapes;
extern void gdk_window_merge_child_input_shapes(GdkWindow*) = window_merge_child_input_shapes;
extern int gdk_window_is_visible(GdkWindow*) = window_is_visible;
extern int gdk_window_is_viewable(GdkWindow*) = window_is_viewable;
extern int gdk_window_get_state(GdkWindow*) = window_get_state;
extern int gdk_window_set_static_gravities(GdkWindow*, int) = window_set_static_gravities;
extern GdkWindow* gdk_window_foreign_new(int) = window_foreign_new;
extern GdkWindow* gdk_window_lookup(int) = window_lookup;
extern GdkWindow* gdk_window_foreign_new_for_display(GdkDisplay*, int) = window_foreign_new_for_display;
extern GdkWindow* gdk_window_lookup_for_display(GdkDisplay*, int) = window_lookup_for_display;
extern void gdk_window_set_hints(GdkWindow*, int, int, int, int, int, int, int) = window_set_hints;
extern void gdk_window_set_type_hint(GdkWindow*, int) = window_set_type_hint;
extern int gdk_window_get_type_hint(GdkWindow*) = window_get_type_hint;
extern void gdk_window_set_modal_hint(GdkWindow*, int) = window_set_modal_hint;
extern void gdk_window_set_skip_taskbar_hint(GdkWindow*, int) = window_set_skip_taskbar_hint;
extern void gdk_window_set_skip_pager_hint(GdkWindow*, int) = window_set_skip_pager_hint;
extern void gdk_window_set_urgency_hint(GdkWindow*, int) = window_set_urgency_hint;
extern void gdk_window_set_geometry_hints(GdkWindow*, GdkGeometry*, int) = window_set_geometry_hints;
extern void gdk_set_sm_client_id(char*) = set_sm_client_id;
extern void gdk_window_begin_paint_rect(GdkWindow*, GdkRectangle*) = window_begin_paint_rect;
extern void gdk_window_begin_paint_region(GdkWindow*, GdkRegion*) = window_begin_paint_region;
extern void gdk_window_end_paint(GdkWindow*) = window_end_paint;
extern void gdk_window_set_title(GdkWindow*, char*) = window_set_title;
extern void gdk_window_set_role(GdkWindow*, char*) = window_set_role;
extern void gdk_window_set_startup_id(GdkWindow*, char*) = window_set_startup_id;
extern void gdk_window_set_transient_for(GdkWindow*, GdkWindow*) = window_set_transient_for;
extern void gdk_window_set_background(GdkWindow*, GdkColor*) = window_set_background;
extern void gdk_window_set_back_pixmap(GdkWindow*, GdkPixmap*, int) = window_set_back_pixmap;
extern void gdk_window_set_cursor(GdkWindow*, GdkCursor*) = window_set_cursor;
extern void gdk_window_get_user_data(GdkWindow*, void**) = window_get_user_data;
extern void gdk_window_get_geometry(GdkWindow*, int*, int*, int*, int*, int*) = window_get_geometry;
extern void gdk_window_get_position(GdkWindow*, int*, int*) = window_get_position;
extern int gdk_window_get_origin(GdkWindow*, int*, int*) = window_get_origin;
extern int gdk_window_get_deskrelative_origin(GdkWindow*, int*, int*) = window_get_deskrelative_origin;
extern void gdk_window_get_root_origin(GdkWindow*, int*, int*) = window_get_root_origin;
extern void gdk_window_get_frame_extents(GdkWindow*, GdkRectangle*) = window_get_frame_extents;
extern GdkWindow* gdk_window_get_pointer(GdkWindow*, int*, int*, int*) = window_get_pointer;
extern GdkWindow* gdk_window_get_parent(GdkWindow*) = window_get_parent;
extern GdkWindow* gdk_window_get_toplevel(GdkWindow*) = window_get_toplevel;
extern GList* gdk_window_get_children(GdkWindow*) = window_get_children;
extern GList* gdk_window_peek_children(GdkWindow*) = window_peek_children;
extern int gdk_window_get_events(GdkWindow*) = window_get_events;
extern void gdk_window_set_events(GdkWindow*, int) = window_set_events;
extern void gdk_window_set_icon_list(GdkWindow*, GList*) = window_set_icon_list;
extern void gdk_window_set_icon(GdkWindow*, GdkWindow*, GdkPixmap*, GdkBitmap*) = window_set_icon;
extern void gdk_window_set_icon_name(GdkWindow*, char*) = window_set_icon_name;
extern void gdk_window_set_group(GdkWindow*, GdkWindow*) = window_set_group;
extern GdkWindow* gdk_window_get_group(GdkWindow*) = window_get_group;
extern void gdk_window_set_decorations(GdkWindow*, int) = window_set_decorations;
extern int gdk_window_get_decorations(GdkWindow*, int*) = window_get_decorations;
extern void gdk_window_set_functions(GdkWindow*, int) = window_set_functions;
extern GList* gdk_window_get_toplevels() = window_get_toplevels;
extern void gdk_window_beep(GdkWindow*) = window_beep;
extern void gdk_window_iconify(GdkWindow*) = window_iconify;
extern void gdk_window_deiconify(GdkWindow*) = window_deiconify;
extern void gdk_window_stick(GdkWindow*) = window_stick;
extern void gdk_window_unstick(GdkWindow*) = window_unstick;
extern void gdk_window_maximize(GdkWindow*) = window_maximize;
extern void gdk_window_unmaximize(GdkWindow*) = window_unmaximize;
extern void gdk_window_fullscreen(GdkWindow*) = window_fullscreen;
extern void gdk_window_unfullscreen(GdkWindow*) = window_unfullscreen;
extern void gdk_window_set_keep_above(GdkWindow*, int) = window_set_keep_above;
extern void gdk_window_set_keep_below(GdkWindow*, int) = window_set_keep_below;
extern void gdk_window_set_opacity(GdkWindow*, double) = window_set_opacity;
extern void gdk_window_register_dnd(GdkWindow*) = window_register_dnd;
extern void gdk_window_begin_resize_drag(GdkWindow*, int, int, int, int, int) = window_begin_resize_drag;
extern void gdk_window_begin_move_drag(GdkWindow*, int, int, int, int) = window_begin_move_drag;
extern void gdk_window_invalidate_rect(GdkWindow*, GdkRectangle*, int) = window_invalidate_rect;
extern void gdk_window_invalidate_region(GdkWindow*, GdkRegion*, int) = window_invalidate_region;
extern void gdk_window_invalidate_maybe_recurse(GdkWindow*, GdkRegion*, void*, void*) = window_invalidate_maybe_recurse;
extern GdkRegion* gdk_window_get_update_area(GdkWindow*) = window_get_update_area;
extern void gdk_window_freeze_updates(GdkWindow*) = window_freeze_updates;
extern void gdk_window_thaw_updates(GdkWindow*) = window_thaw_updates;
extern void gdk_window_freeze_toplevel_updates_libgtk_only(GdkWindow*) = window_freeze_toplevel_updates_libgtk_only;
extern void gdk_window_thaw_toplevel_updates_libgtk_only(GdkWindow*) = window_thaw_toplevel_updates_libgtk_only;
extern void gdk_window_process_all_updates() = window_process_all_updates;
extern void gdk_window_process_updates(GdkWindow*, int) = window_process_updates;
extern void gdk_window_set_debug_updates(int) = window_set_debug_updates;
extern void gdk_window_constrain_size(GdkGeometry*, int, int, int, int*, int*) = window_constrain_size;
extern void gdk_window_get_internal_paint_info(GdkWindow*, GdkDrawable**, int*, int*) = window_get_internal_paint_info;
extern void gdk_window_enable_synchronized_configure(GdkWindow*) = window_enable_synchronized_configure;
extern void gdk_window_configure_finished(GdkWindow*) = window_configure_finished;
extern GdkPointerHooks* gdk_set_pointer_hooks(GdkPointerHooks*) = set_pointer_hooks;
extern GdkWindow* gdk_get_default_root_window() = get_default_root_window;
extern void gdk_window_redirect_to_drawable(GdkWindow*, GdkDrawable*, int, int, int, int, int, int) = window_redirect_to_drawable;
extern void gdk_window_remove_redirection(GdkWindow*) = window_remove_redirection;
extern void gdk_test_render_sync(GdkWindow*) = test_render_sync;
extern int gdk_test_simulate_key(GdkWindow*, int, int, int, int, int) = test_simulate_key;
extern int gdk_test_simulate_button(GdkWindow*, int, int, int, int, int) = test_simulate_button;
extern long gdk_visual_get_type() = visual_get_type;
extern int gdk_visual_get_best_depth() = visual_get_best_depth;
extern int gdk_visual_get_best_type() = visual_get_best_type;
extern GdkVisual* gdk_visual_get_system() = visual_get_system;
extern GdkVisual* gdk_visual_get_best() = visual_get_best;
extern GdkVisual* gdk_visual_get_best_with_depth(int) = visual_get_best_with_depth;
extern GdkVisual* gdk_visual_get_best_with_type(int) = visual_get_best_with_type;
extern GdkVisual* gdk_visual_get_best_with_both(int, int) = visual_get_best_with_both;
extern void gdk_query_depths(int**, int*) = query_depths;
extern void gdk_query_visual_types(int**, int*) = query_visual_types;
extern GList* gdk_list_visuals() = list_visuals;
extern GdkScreen* gdk_visual_get_screen(GdkVisual*) = visual_get_screen;
extern void gdk_parse_args(int*, char***) = parse_args;
extern void gdk_init(int*, char***) = init;
extern int gdk_init_check(int*, char***) = init_check;
extern void gdk_add_option_entries_libgtk_only(GOptionGroup*) = add_option_entries_libgtk_only;
extern void gdk_pre_parse_libgtk_only() = pre_parse_libgtk_only;
extern void gdk_exit(int) = exit;
extern char* gdk_set_locale() = set_locale;
extern char* gdk_get_program_class() = get_program_class;
extern void gdk_set_program_class(char*) = set_program_class;
extern void gdk_error_trap_push() = error_trap_push;
extern int gdk_error_trap_pop() = error_trap_pop;
extern void gdk_set_use_xshm(int) = set_use_xshm;
extern int gdk_get_use_xshm() = get_use_xshm;
extern char* gdk_get_display() = get_display;
extern char* gdk_get_display_arg_name() = get_display_arg_name;
extern int gdk_input_add_full(int, int, void*, void*, void*) = input_add_full;
extern int gdk_input_add(int, int, void*, void*) = input_add;
extern void gdk_input_remove(int) = input_remove;
extern int gdk_pointer_grab(GdkWindow*, int, int, GdkWindow*, GdkCursor*, int) = pointer_grab;
extern int gdk_keyboard_grab(GdkWindow*, int, int) = keyboard_grab;
extern int gdk_pointer_grab_info_libgtk_only(GdkDisplay*, GdkWindow**, int*) = pointer_grab_info_libgtk_only;
extern int gdk_keyboard_grab_info_libgtk_only(GdkDisplay*, GdkWindow**, int*) = keyboard_grab_info_libgtk_only;
extern void gdk_pointer_ungrab(int) = pointer_ungrab;
extern void gdk_keyboard_ungrab(int) = keyboard_ungrab;
extern int gdk_pointer_is_grabbed() = pointer_is_grabbed;
extern int gdk_screen_width() = screen_width;
extern int gdk_screen_height() = screen_height;
extern int gdk_screen_width_mm() = screen_width_mm;
extern int gdk_screen_height_mm() = screen_height_mm;
extern void gdk_beep() = beep;
extern void gdk_flush() = flush;
extern void gdk_set_double_click_time(int) = set_double_click_time;
extern int gdk_rectangle_intersect(GdkRectangle*, GdkRectangle*, GdkRectangle*) = rectangle_intersect;
extern void gdk_rectangle_union(GdkRectangle*, GdkRectangle*, GdkRectangle*) = rectangle_union;
extern long gdk_rectangle_get_type() = rectangle_get_type;
extern char* gdk_wcstombs(int*) = wcstombs;
extern int gdk_mbstowcs(int*, char*, int) = mbstowcs;
extern int gdk_event_send_client_message(GdkEvent*, int) = event_send_client_message;
extern void gdk_event_send_clientmessage_toall(GdkEvent*) = event_send_clientmessage_toall;
extern int gdk_event_send_client_message_for_display(GdkDisplay*, GdkEvent*, int) = event_send_client_message_for_display;
extern void gdk_notify_startup_complete() = notify_startup_complete;
extern void gdk_notify_startup_complete_with_id(char*) = notify_startup_complete_with_id;
extern void gdk_threads_enter() = threads_enter;
extern void gdk_threads_leave() = threads_leave;
extern void gdk_threads_init() = threads_init;
extern void gdk_threads_set_lock_functions(void*, void*) = threads_set_lock_functions;
extern int gdk_threads_add_idle_full(int, void*, void*, void*) = threads_add_idle_full;
extern int gdk_threads_add_idle(void*, void*) = threads_add_idle;
extern int gdk_threads_add_timeout_full(int, int, void*, void*, void*) = threads_add_timeout_full;
extern int gdk_threads_add_timeout(int, void*, void*) = threads_add_timeout;
extern int gdk_threads_add_timeout_seconds_full(int, int, void*, void*, void*) = threads_add_timeout_seconds_full;
extern int gdk_threads_add_timeout_seconds(int, void*, void*) = threads_add_timeout_seconds;
/* /usr/include/gtk-2.0/gtk/gtk.h: */
using "lib:gtk";

namespace gtk;
const gtk::PATH_PRIO_MASK = 15;
const gtk::BUTTONBOX_DEFAULT = -1;
const gtk::MAX_COMPOSE_LEN = 7;
const gtk::PRIORITY_HIGH = -100;
const gtk::PRIORITY_DEFAULT = 200;
const gtk::PRIORITY_LOW = 300;
const gtk::PAPER_NAME_A3 = "iso_a3";
const gtk::PAPER_NAME_A4 = "iso_a4";
const gtk::PAPER_NAME_A5 = "iso_a5";
const gtk::PAPER_NAME_B5 = "iso_b5";
const gtk::PAPER_NAME_LETTER = "na_letter";
const gtk::PAPER_NAME_EXECUTIVE = "na_executive";
const gtk::PAPER_NAME_LEGAL = "na_legal";
const gtk::PRINT_SETTINGS_PRINTER = "printer";
const gtk::PRINT_SETTINGS_ORIENTATION = "orientation";
const gtk::PRINT_SETTINGS_PAPER_FORMAT = "paper-format";
const gtk::PRINT_SETTINGS_PAPER_WIDTH = "paper-width";
const gtk::PRINT_SETTINGS_PAPER_HEIGHT = "paper-height";
const gtk::PRINT_SETTINGS_N_COPIES = "n-copies";
const gtk::PRINT_SETTINGS_DEFAULT_SOURCE = "default-source";
const gtk::PRINT_SETTINGS_QUALITY = "quality";
const gtk::PRINT_SETTINGS_RESOLUTION = "resolution";
const gtk::PRINT_SETTINGS_USE_COLOR = "use-color";
const gtk::PRINT_SETTINGS_DUPLEX = "duplex";
const gtk::PRINT_SETTINGS_COLLATE = "collate";
const gtk::PRINT_SETTINGS_REVERSE = "reverse";
const gtk::PRINT_SETTINGS_MEDIA_TYPE = "media-type";
const gtk::PRINT_SETTINGS_DITHER = "dither";
const gtk::PRINT_SETTINGS_SCALE = "scale";
const gtk::PRINT_SETTINGS_PRINT_PAGES = "print-pages";
const gtk::PRINT_SETTINGS_PAGE_RANGES = "page-ranges";
const gtk::PRINT_SETTINGS_PAGE_SET = "page-set";
const gtk::PRINT_SETTINGS_FINISHINGS = "finishings";
const gtk::PRINT_SETTINGS_NUMBER_UP = "number-up";
const gtk::PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout";
const gtk::PRINT_SETTINGS_OUTPUT_BIN = "output-bin";
const gtk::PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format";
const gtk::PRINT_SETTINGS_OUTPUT_URI = "output-uri";
const gtk::PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version";
const gtk::PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra";
const gtk::INPUT_ERROR = -1;
const gtk::STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication";
const gtk::STOCK_DIALOG_INFO = "gtk-dialog-info";
const gtk::STOCK_DIALOG_WARNING = "gtk-dialog-warning";
const gtk::STOCK_DIALOG_ERROR = "gtk-dialog-error";
const gtk::STOCK_DIALOG_QUESTION = "gtk-dialog-question";
const gtk::STOCK_DND = "gtk-dnd";
const gtk::STOCK_DND_MULTIPLE = "gtk-dnd-multiple";
const gtk::STOCK_ABOUT = "gtk-about";
const gtk::STOCK_ADD = "gtk-add";
const gtk::STOCK_APPLY = "gtk-apply";
const gtk::STOCK_BOLD = "gtk-bold";
const gtk::STOCK_CANCEL = "gtk-cancel";
const gtk::STOCK_CDROM = "gtk-cdrom";
const gtk::STOCK_CLEAR = "gtk-clear";
const gtk::STOCK_CLOSE = "gtk-close";
const gtk::STOCK_COLOR_PICKER = "gtk-color-picker";
const gtk::STOCK_CONVERT = "gtk-convert";
const gtk::STOCK_CONNECT = "gtk-connect";
const gtk::STOCK_COPY = "gtk-copy";
const gtk::STOCK_CUT = "gtk-cut";
const gtk::STOCK_DELETE = "gtk-delete";
const gtk::STOCK_DIRECTORY = "gtk-directory";
const gtk::STOCK_DISCARD = "gtk-discard";
const gtk::STOCK_DISCONNECT = "gtk-disconnect";
const gtk::STOCK_EDIT = "gtk-edit";
const gtk::STOCK_EXECUTE = "gtk-execute";
const gtk::STOCK_FILE = "gtk-file";
const gtk::STOCK_FIND = "gtk-find";
const gtk::STOCK_FIND_AND_REPLACE = "gtk-find-and-replace";
const gtk::STOCK_FLOPPY = "gtk-floppy";
const gtk::STOCK_FULLSCREEN = "gtk-fullscreen";
const gtk::STOCK_GOTO_BOTTOM = "gtk-goto-bottom";
const gtk::STOCK_GOTO_FIRST = "gtk-goto-first";
const gtk::STOCK_GOTO_LAST = "gtk-goto-last";
const gtk::STOCK_GOTO_TOP = "gtk-goto-top";
const gtk::STOCK_GO_BACK = "gtk-go-back";
const gtk::STOCK_GO_DOWN = "gtk-go-down";
const gtk::STOCK_GO_FORWARD = "gtk-go-forward";
const gtk::STOCK_GO_UP = "gtk-go-up";
const gtk::STOCK_HARDDISK = "gtk-harddisk";
const gtk::STOCK_HELP = "gtk-help";
const gtk::STOCK_HOME = "gtk-home";
const gtk::STOCK_INDEX = "gtk-index";
const gtk::STOCK_INDENT = "gtk-indent";
const gtk::STOCK_INFO = "gtk-info";
const gtk::STOCK_UNINDENT = "gtk-unindent";
const gtk::STOCK_ITALIC = "gtk-italic";
const gtk::STOCK_JUMP_TO = "gtk-jump-to";
const gtk::STOCK_JUSTIFY_CENTER = "gtk-justify-center";
const gtk::STOCK_JUSTIFY_FILL = "gtk-justify-fill";
const gtk::STOCK_JUSTIFY_LEFT = "gtk-justify-left";
const gtk::STOCK_JUSTIFY_RIGHT = "gtk-justify-right";
const gtk::STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen";
const gtk::STOCK_MISSING_IMAGE = "gtk-missing-image";
const gtk::STOCK_MEDIA_FORWARD = "gtk-media-forward";
const gtk::STOCK_MEDIA_NEXT = "gtk-media-next";
const gtk::STOCK_MEDIA_PAUSE = "gtk-media-pause";
const gtk::STOCK_MEDIA_PLAY = "gtk-media-play";
const gtk::STOCK_MEDIA_PREVIOUS = "gtk-media-previous";
const gtk::STOCK_MEDIA_RECORD = "gtk-media-record";
const gtk::STOCK_MEDIA_REWIND = "gtk-media-rewind";
const gtk::STOCK_MEDIA_STOP = "gtk-media-stop";
const gtk::STOCK_NETWORK = "gtk-network";
const gtk::STOCK_NEW = "gtk-new";
const gtk::STOCK_NO = "gtk-no";
const gtk::STOCK_OK = "gtk-ok";
const gtk::STOCK_OPEN = "gtk-open";
const gtk::STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait";
const gtk::STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape";
const gtk::STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape";
const gtk::STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait";
const gtk::STOCK_PAGE_SETUP = "gtk-page-setup";
const gtk::STOCK_PASTE = "gtk-paste";
const gtk::STOCK_PREFERENCES = "gtk-preferences";
const gtk::STOCK_PRINT = "gtk-print";
const gtk::STOCK_PRINT_ERROR = "gtk-print-error";
const gtk::STOCK_PRINT_PAUSED = "gtk-print-paused";
const gtk::STOCK_PRINT_PREVIEW = "gtk-print-preview";
const gtk::STOCK_PRINT_REPORT = "gtk-print-report";
const gtk::STOCK_PRINT_WARNING = "gtk-print-warning";
const gtk::STOCK_PROPERTIES = "gtk-properties";
const gtk::STOCK_QUIT = "gtk-quit";
const gtk::STOCK_REDO = "gtk-redo";
const gtk::STOCK_REFRESH = "gtk-refresh";
const gtk::STOCK_REMOVE = "gtk-remove";
const gtk::STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved";
const gtk::STOCK_SAVE = "gtk-save";
const gtk::STOCK_SAVE_AS = "gtk-save-as";
const gtk::STOCK_SELECT_ALL = "gtk-select-all";
const gtk::STOCK_SELECT_COLOR = "gtk-select-color";
const gtk::STOCK_SELECT_FONT = "gtk-select-font";
const gtk::STOCK_SORT_ASCENDING = "gtk-sort-ascending";
const gtk::STOCK_SORT_DESCENDING = "gtk-sort-descending";
const gtk::STOCK_SPELL_CHECK = "gtk-spell-check";
const gtk::STOCK_STOP = "gtk-stop";
const gtk::STOCK_STRIKETHROUGH = "gtk-strikethrough";
const gtk::STOCK_UNDELETE = "gtk-undelete";
const gtk::STOCK_UNDERLINE = "gtk-underline";
const gtk::STOCK_UNDO = "gtk-undo";
const gtk::STOCK_YES = "gtk-yes";
const gtk::STOCK_ZOOM_100 = "gtk-zoom-100";
const gtk::STOCK_ZOOM_FIT = "gtk-zoom-fit";
const gtk::STOCK_ZOOM_IN = "gtk-zoom-in";
const gtk::STOCK_ZOOM_OUT = "gtk-zoom-out";
const gtk::MAJOR_VERSION = 2;
const gtk::MINOR_VERSION = 14;
const gtk::MICRO_VERSION = 4;
const gtk::BINARY_AGE = 1404;
const gtk::INTERFACE_AGE = 4;
const gtk::ACCEL_VISIBLE = 1;
const gtk::ACCEL_LOCKED = 2;
const gtk::ACCEL_MASK = 7;
const gtk::ANCHOR_CENTER = 0;
const gtk::ANCHOR_NORTH = 1;
const gtk::ANCHOR_NORTH_WEST = 2;
const gtk::ANCHOR_NORTH_EAST = 3;
const gtk::ANCHOR_SOUTH = 4;
const gtk::ANCHOR_SOUTH_WEST = 5;
const gtk::ANCHOR_SOUTH_EAST = 6;
const gtk::ANCHOR_WEST = 7;
const gtk::ANCHOR_EAST = 8;
const gtk::ANCHOR_N = 1;
const gtk::ANCHOR_NW = 2;
const gtk::ANCHOR_NE = 3;
const gtk::ANCHOR_S = 4;
const gtk::ANCHOR_SW = 5;
const gtk::ANCHOR_SE = 6;
const gtk::ANCHOR_W = 7;
const gtk::ANCHOR_E = 8;
const gtk::ARG_READABLE = 1;
const gtk::ARG_WRITABLE = 2;
const gtk::ARG_CONSTRUCT = 4;
const gtk::ARG_CONSTRUCT_ONLY = 8;
const gtk::ARG_CHILD_ARG = 16;
const gtk::ARROW_UP = 0;
const gtk::ARROW_DOWN = 1;
const gtk::ARROW_LEFT = 2;
const gtk::ARROW_RIGHT = 3;
const gtk::ARROW_NONE = 4;
const gtk::ASSISTANT_PAGE_CONTENT = 0;
const gtk::ASSISTANT_PAGE_INTRO = 1;
const gtk::ASSISTANT_PAGE_CONFIRM = 2;
const gtk::ASSISTANT_PAGE_SUMMARY = 3;
const gtk::ASSISTANT_PAGE_PROGRESS = 4;
const gtk::EXPAND = 1;
const gtk::SHRINK = 2;
const gtk::FILL = 4;
const gtk::BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0;
const gtk::BUILDER_ERROR_UNHANDLED_TAG = 1;
const gtk::BUILDER_ERROR_MISSING_ATTRIBUTE = 2;
const gtk::BUILDER_ERROR_INVALID_ATTRIBUTE = 3;
const gtk::BUILDER_ERROR_INVALID_TAG = 4;
const gtk::BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5;
const gtk::BUILDER_ERROR_INVALID_VALUE = 6;
const gtk::BUILDER_ERROR_VERSION_MISMATCH = 7;
const gtk::BUTTON_IGNORED = 0;
const gtk::BUTTON_SELECTS = 1;
const gtk::BUTTON_DRAGS = 2;
const gtk::BUTTON_EXPANDS = 4;
const gtk::BUTTONBOX_DEFAULT_STYLE = 0;
const gtk::BUTTONBOX_SPREAD = 1;
const gtk::BUTTONBOX_EDGE = 2;
const gtk::BUTTONBOX_START = 3;
const gtk::BUTTONBOX_END = 4;
const gtk::BUTTONBOX_CENTER = 5;
const gtk::BUTTONS_NONE = 0;
const gtk::BUTTONS_OK = 1;
const gtk::BUTTONS_CLOSE = 2;
const gtk::BUTTONS_CANCEL = 3;
const gtk::BUTTONS_YES_NO = 4;
const gtk::BUTTONS_OK_CANCEL = 5;
const gtk::CLIST_DRAG_NONE = 0;
const gtk::CLIST_DRAG_BEFORE = 1;
const gtk::CLIST_DRAG_INTO = 2;
const gtk::CLIST_DRAG_AFTER = 3;
const gtk::CTREE_EXPANDER_NONE = 0;
const gtk::CTREE_EXPANDER_SQUARE = 1;
const gtk::CTREE_EXPANDER_TRIANGLE = 2;
const gtk::CTREE_EXPANDER_CIRCULAR = 3;
const gtk::CTREE_EXPANSION_EXPAND = 0;
const gtk::CTREE_EXPANSION_EXPAND_RECURSIVE = 1;
const gtk::CTREE_EXPANSION_COLLAPSE = 2;
const gtk::CTREE_EXPANSION_COLLAPSE_RECURSIVE = 3;
const gtk::CTREE_EXPANSION_TOGGLE = 4;
const gtk::CTREE_EXPANSION_TOGGLE_RECURSIVE = 5;
const gtk::CTREE_LINES_NONE = 0;
const gtk::CTREE_LINES_SOLID = 1;
const gtk::CTREE_LINES_DOTTED = 2;
const gtk::CTREE_LINES_TABBED = 3;
const gtk::CTREE_POS_BEFORE = 0;
const gtk::CTREE_POS_AS_CHILD = 1;
const gtk::CTREE_POS_AFTER = 2;
const gtk::CALENDAR_SHOW_HEADING = 1;
const gtk::CALENDAR_SHOW_DAY_NAMES = 2;
const gtk::CALENDAR_NO_MONTH_CHANGE = 4;
const gtk::CALENDAR_SHOW_WEEK_NUMBERS = 8;
const gtk::CALENDAR_WEEK_START_MONDAY = 16;
const gtk::CALENDAR_SHOW_DETAILS = 32;
const gtk::CELL_RENDERER_ACCEL_MODE_GTK = 0;
const gtk::CELL_RENDERER_ACCEL_MODE_OTHER = 1;
const gtk::CELL_RENDERER_MODE_INERT = 0;
const gtk::CELL_RENDERER_MODE_ACTIVATABLE = 1;
const gtk::CELL_RENDERER_MODE_EDITABLE = 2;
const gtk::CELL_RENDERER_SELECTED = 1;
const gtk::CELL_RENDERER_PRELIT = 2;
const gtk::CELL_RENDERER_INSENSITIVE = 4;
const gtk::CELL_RENDERER_SORTED = 8;
const gtk::CELL_RENDERER_FOCUSED = 16;
const gtk::CELL_EMPTY = 0;
const gtk::CELL_TEXT = 1;
const gtk::CELL_PIXMAP = 2;
const gtk::CELL_PIXTEXT = 3;
const gtk::CELL_WIDGET = 4;
const gtk::CORNER_TOP_LEFT = 0;
const gtk::CORNER_BOTTOM_LEFT = 1;
const gtk::CORNER_TOP_RIGHT = 2;
const gtk::CORNER_BOTTOM_RIGHT = 3;
const gtk::CURVE_TYPE_LINEAR = 0;
const gtk::CURVE_TYPE_SPLINE = 1;
const gtk::CURVE_TYPE_FREE = 2;
const gtk::DEBUG_MISC = 1;
const gtk::DEBUG_PLUGSOCKET = 2;
const gtk::DEBUG_TEXT = 4;
const gtk::DEBUG_TREE = 8;
const gtk::DEBUG_UPDATES = 16;
const gtk::DEBUG_KEYBINDINGS = 32;
const gtk::DEBUG_MULTIHEAD = 64;
const gtk::DEBUG_MODULES = 128;
const gtk::DEBUG_GEOMETRY = 256;
const gtk::DEBUG_ICONTHEME = 512;
const gtk::DEBUG_PRINTING = 1024;
const gtk::DEBUG_BUILDER = 2048;
const gtk::DELETE_CHARS = 0;
const gtk::DELETE_WORD_ENDS = 1;
const gtk::DELETE_WORDS = 2;
const gtk::DELETE_DISPLAY_LINES = 3;
const gtk::DELETE_DISPLAY_LINE_ENDS = 4;
const gtk::DELETE_PARAGRAPH_ENDS = 5;
const gtk::DELETE_PARAGRAPHS = 6;
const gtk::DELETE_WHITESPACE = 7;
const gtk::DEST_DEFAULT_MOTION = 1;
const gtk::DEST_DEFAULT_HIGHLIGHT = 2;
const gtk::DEST_DEFAULT_DROP = 4;
const gtk::DEST_DEFAULT_ALL = 7;
const gtk::DIALOG_MODAL = 1;
const gtk::DIALOG_DESTROY_WITH_PARENT = 2;
const gtk::DIALOG_NO_SEPARATOR = 4;
const gtk::DIR_TAB_FORWARD = 0;
const gtk::DIR_TAB_BACKWARD = 1;
const gtk::DIR_UP = 2;
const gtk::DIR_DOWN = 3;
const gtk::DIR_LEFT = 4;
const gtk::DIR_RIGHT = 5;
const gtk::DRAG_RESULT_SUCCESS = 0;
const gtk::DRAG_RESULT_NO_TARGET = 1;
const gtk::DRAG_RESULT_USER_CANCELLED = 2;
const gtk::DRAG_RESULT_TIMEOUT_EXPIRED = 3;
const gtk::DRAG_RESULT_GRAB_BROKEN = 4;
const gtk::DRAG_RESULT_ERROR = 5;
const gtk::EXPANDER_COLLAPSED = 0;
const gtk::EXPANDER_SEMI_COLLAPSED = 1;
const gtk::EXPANDER_SEMI_EXPANDED = 2;
const gtk::EXPANDER_EXPANDED = 3;
const gtk::FILE_CHOOSER_ACTION_OPEN = 0;
const gtk::FILE_CHOOSER_ACTION_SAVE = 1;
const gtk::FILE_CHOOSER_ACTION_SELECT_FOLDER = 2;
const gtk::FILE_CHOOSER_ACTION_CREATE_FOLDER = 3;
const gtk::FILE_CHOOSER_CONFIRMATION_CONFIRM = 0;
const gtk::FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1;
const gtk::FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2;
const gtk::FILE_CHOOSER_ERROR_NONEXISTENT = 0;
const gtk::FILE_CHOOSER_ERROR_BAD_FILENAME = 1;
const gtk::FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2;
const gtk::FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3;
const gtk::FILE_FILTER_FILENAME = 1;
const gtk::FILE_FILTER_URI = 2;
const gtk::FILE_FILTER_DISPLAY_NAME = 4;
const gtk::FILE_FILTER_MIME_TYPE = 8;
const gtk::IM_PREEDIT_NOTHING = 0;
const gtk::IM_PREEDIT_CALLBACK = 1;
const gtk::IM_PREEDIT_NONE = 2;
const gtk::IM_STATUS_NOTHING = 0;
const gtk::IM_STATUS_CALLBACK = 1;
const gtk::IM_STATUS_NONE = 2;
const gtk::ICON_LOOKUP_NO_SVG = 1;
const gtk::ICON_LOOKUP_FORCE_SVG = 2;
const gtk::ICON_LOOKUP_USE_BUILTIN = 4;
const gtk::ICON_LOOKUP_GENERIC_FALLBACK = 8;
const gtk::ICON_LOOKUP_FORCE_SIZE = 16;
const gtk::ICON_SIZE_INVALID = 0;
const gtk::ICON_SIZE_MENU = 1;
const gtk::ICON_SIZE_SMALL_TOOLBAR = 2;
const gtk::ICON_SIZE_LARGE_TOOLBAR = 3;
const gtk::ICON_SIZE_BUTTON = 4;
const gtk::ICON_SIZE_DND = 5;
const gtk::ICON_SIZE_DIALOG = 6;
const gtk::ICON_THEME_NOT_FOUND = 0;
const gtk::ICON_THEME_FAILED = 1;
const gtk::ICON_VIEW_NO_DROP = 0;
const gtk::ICON_VIEW_DROP_INTO = 1;
const gtk::ICON_VIEW_DROP_LEFT = 2;
const gtk::ICON_VIEW_DROP_RIGHT = 3;
const gtk::ICON_VIEW_DROP_ABOVE = 4;
const gtk::ICON_VIEW_DROP_BELOW = 5;
const gtk::IMAGE_EMPTY = 0;
const gtk::IMAGE_PIXMAP = 1;
const gtk::IMAGE_IMAGE = 2;
const gtk::IMAGE_PIXBUF = 3;
const gtk::IMAGE_STOCK = 4;
const gtk::IMAGE_ICON_SET = 5;
const gtk::IMAGE_ANIMATION = 6;
const gtk::IMAGE_ICON_NAME = 7;
const gtk::IMAGE_GICON = 8;
const gtk::JUSTIFY_LEFT = 0;
const gtk::JUSTIFY_RIGHT = 1;
const gtk::JUSTIFY_CENTER = 2;
const gtk::JUSTIFY_FILL = 3;
const gtk::MATCH_ALL = 0;
const gtk::MATCH_ALL_TAIL = 1;
const gtk::MATCH_HEAD = 2;
const gtk::MATCH_TAIL = 3;
const gtk::MATCH_EXACT = 4;
const gtk::MATCH_LAST = 5;
const gtk::MENU_DIR_PARENT = 0;
const gtk::MENU_DIR_CHILD = 1;
const gtk::MENU_DIR_NEXT = 2;
const gtk::MENU_DIR_PREV = 3;
const gtk::MESSAGE_INFO = 0;
const gtk::MESSAGE_WARNING = 1;
const gtk::MESSAGE_QUESTION = 2;
const gtk::MESSAGE_ERROR = 3;
const gtk::MESSAGE_OTHER = 4;
const gtk::PIXELS = 0;
const gtk::INCHES = 1;
const gtk::CENTIMETERS = 2;
const gtk::MOVEMENT_LOGICAL_POSITIONS = 0;
const gtk::MOVEMENT_VISUAL_POSITIONS = 1;
const gtk::MOVEMENT_WORDS = 2;
const gtk::MOVEMENT_DISPLAY_LINES = 3;
const gtk::MOVEMENT_DISPLAY_LINE_ENDS = 4;
const gtk::MOVEMENT_PARAGRAPHS = 5;
const gtk::MOVEMENT_PARAGRAPH_ENDS = 6;
const gtk::MOVEMENT_PAGES = 7;
const gtk::MOVEMENT_BUFFER_ENDS = 8;
const gtk::MOVEMENT_HORIZONTAL_PAGES = 9;
const gtk::NOTEBOOK_TAB_FIRST = 0;
const gtk::NOTEBOOK_TAB_LAST = 1;
const gtk::NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0;
const gtk::NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1;
const gtk::NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2;
const gtk::NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3;
const gtk::NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4;
const gtk::NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5;
const gtk::NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6;
const gtk::NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7;
const gtk::IN_DESTRUCTION = 1;
const gtk::FLOATING = 2;
const gtk::RESERVED_1 = 4;
const gtk::RESERVED_2 = 8;
const gtk::ORIENTATION_HORIZONTAL = 0;
const gtk::ORIENTATION_VERTICAL = 1;
const gtk::PACK_DIRECTION_LTR = 0;
const gtk::PACK_DIRECTION_RTL = 1;
const gtk::PACK_DIRECTION_TTB = 2;
const gtk::PACK_DIRECTION_BTT = 3;
const gtk::PACK_START = 0;
const gtk::PACK_END = 1;
const gtk::PAGE_ORIENTATION_PORTRAIT = 0;
const gtk::PAGE_ORIENTATION_LANDSCAPE = 1;
const gtk::PAGE_ORIENTATION_REVERSE_PORTRAIT = 2;
const gtk::PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3;
const gtk::PAGE_SET_ALL = 0;
const gtk::PAGE_SET_EVEN = 1;
const gtk::PAGE_SET_ODD = 2;
const gtk::PATH_PRIO_LOWEST = 0;
const gtk::PATH_PRIO_GTK = 4;
const gtk::PATH_PRIO_APPLICATION = 8;
const gtk::PATH_PRIO_THEME = 10;
const gtk::PATH_PRIO_RC = 12;
const gtk::PATH_PRIO_HIGHEST = 15;
const gtk::PATH_WIDGET = 0;
const gtk::PATH_WIDGET_CLASS = 1;
const gtk::PATH_CLASS = 2;
const gtk::POLICY_ALWAYS = 0;
const gtk::POLICY_AUTOMATIC = 1;
const gtk::POLICY_NEVER = 2;
const gtk::POS_LEFT = 0;
const gtk::POS_RIGHT = 1;
const gtk::POS_TOP = 2;
const gtk::POS_BOTTOM = 3;
const gtk::PREVIEW_COLOR = 0;
const gtk::PREVIEW_GRAYSCALE = 1;
const gtk::PRINT_DUPLEX_SIMPLEX = 0;
const gtk::PRINT_DUPLEX_HORIZONTAL = 1;
const gtk::PRINT_DUPLEX_VERTICAL = 2;
const gtk::PRINT_ERROR_GENERAL = 0;
const gtk::PRINT_ERROR_INTERNAL_ERROR = 1;
const gtk::PRINT_ERROR_NOMEM = 2;
const gtk::PRINT_ERROR_INVALID_FILE = 3;
const gtk::PRINT_OPERATION_ACTION_PRINT_DIALOG = 0;
const gtk::PRINT_OPERATION_ACTION_PRINT = 1;
const gtk::PRINT_OPERATION_ACTION_PREVIEW = 2;
const gtk::PRINT_OPERATION_ACTION_EXPORT = 3;
const gtk::PRINT_OPERATION_RESULT_ERROR = 0;
const gtk::PRINT_OPERATION_RESULT_APPLY = 1;
const gtk::PRINT_OPERATION_RESULT_CANCEL = 2;
const gtk::PRINT_OPERATION_RESULT_IN_PROGRESS = 3;
const gtk::PRINT_PAGES_ALL = 0;
const gtk::PRINT_PAGES_CURRENT = 1;
const gtk::PRINT_PAGES_RANGES = 2;
const gtk::PRINT_QUALITY_LOW = 0;
const gtk::PRINT_QUALITY_NORMAL = 1;
const gtk::PRINT_QUALITY_HIGH = 2;
const gtk::PRINT_QUALITY_DRAFT = 3;
const gtk::PRINT_STATUS_INITIAL = 0;
const gtk::PRINT_STATUS_PREPARING = 1;
const gtk::PRINT_STATUS_GENERATING_DATA = 2;
const gtk::PRINT_STATUS_SENDING_DATA = 3;
const gtk::PRINT_STATUS_PENDING = 4;
const gtk::PRINT_STATUS_PENDING_ISSUE = 5;
const gtk::PRINT_STATUS_PRINTING = 6;
const gtk::PRINT_STATUS_FINISHED = 7;
const gtk::PRINT_STATUS_FINISHED_ABORTED = 8;
const gtk::PROGRESS_LEFT_TO_RIGHT = 0;
const gtk::PROGRESS_RIGHT_TO_LEFT = 1;
const gtk::PROGRESS_BOTTOM_TO_TOP = 2;
const gtk::PROGRESS_TOP_TO_BOTTOM = 3;
const gtk::PROGRESS_CONTINUOUS = 0;
const gtk::PROGRESS_DISCRETE = 1;
const gtk::RC_FG = 1;
const gtk::RC_BG = 2;
const gtk::RC_TEXT = 4;
const gtk::RC_BASE = 8;
const gtk::RC_TOKEN_INVALID = 270;
const gtk::RC_TOKEN_INCLUDE = 271;
const gtk::RC_TOKEN_NORMAL = 272;
const gtk::RC_TOKEN_ACTIVE = 273;
const gtk::RC_TOKEN_PRELIGHT = 274;
const gtk::RC_TOKEN_SELECTED = 275;
const gtk::RC_TOKEN_INSENSITIVE = 276;
const gtk::RC_TOKEN_FG = 277;
const gtk::RC_TOKEN_BG = 278;
const gtk::RC_TOKEN_TEXT = 279;
const gtk::RC_TOKEN_BASE = 280;
const gtk::RC_TOKEN_XTHICKNESS = 281;
const gtk::RC_TOKEN_YTHICKNESS = 282;
const gtk::RC_TOKEN_FONT = 283;
const gtk::RC_TOKEN_FONTSET = 284;
const gtk::RC_TOKEN_FONT_NAME = 285;
const gtk::RC_TOKEN_BG_PIXMAP = 286;
const gtk::RC_TOKEN_PIXMAP_PATH = 287;
const gtk::RC_TOKEN_STYLE = 288;
const gtk::RC_TOKEN_BINDING = 289;
const gtk::RC_TOKEN_BIND = 290;
const gtk::RC_TOKEN_WIDGET = 291;
const gtk::RC_TOKEN_WIDGET_CLASS = 292;
const gtk::RC_TOKEN_CLASS = 293;
const gtk::RC_TOKEN_LOWEST = 294;
const gtk::RC_TOKEN_GTK = 295;
const gtk::RC_TOKEN_APPLICATION = 296;
const gtk::RC_TOKEN_THEME = 297;
const gtk::RC_TOKEN_RC = 298;
const gtk::RC_TOKEN_HIGHEST = 299;
const gtk::RC_TOKEN_ENGINE = 300;
const gtk::RC_TOKEN_MODULE_PATH = 301;
const gtk::RC_TOKEN_IM_MODULE_PATH = 302;
const gtk::RC_TOKEN_IM_MODULE_FILE = 303;
const gtk::RC_TOKEN_STOCK = 304;
const gtk::RC_TOKEN_LTR = 305;
const gtk::RC_TOKEN_RTL = 306;
const gtk::RC_TOKEN_COLOR = 307;
const gtk::RC_TOKEN_UNBIND = 308;
const gtk::RC_TOKEN_LAST = 309;
const gtk::RECENT_CHOOSER_ERROR_NOT_FOUND = 0;
const gtk::RECENT_CHOOSER_ERROR_INVALID_URI = 1;
const gtk::RECENT_FILTER_URI = 1;
const gtk::RECENT_FILTER_DISPLAY_NAME = 2;
const gtk::RECENT_FILTER_MIME_TYPE = 4;
const gtk::RECENT_FILTER_APPLICATION = 8;
const gtk::RECENT_FILTER_GROUP = 16;
const gtk::RECENT_FILTER_AGE = 32;
const gtk::RECENT_MANAGER_ERROR_NOT_FOUND = 0;
const gtk::RECENT_MANAGER_ERROR_INVALID_URI = 1;
const gtk::RECENT_MANAGER_ERROR_INVALID_ENCODING = 2;
const gtk::RECENT_MANAGER_ERROR_NOT_REGISTERED = 3;
const gtk::RECENT_MANAGER_ERROR_READ = 4;
const gtk::RECENT_MANAGER_ERROR_WRITE = 5;
const gtk::RECENT_MANAGER_ERROR_UNKNOWN = 6;
const gtk::RECENT_SORT_NONE = 0;
const gtk::RECENT_SORT_MRU = 1;
const gtk::RECENT_SORT_LRU = 2;
const gtk::RECENT_SORT_CUSTOM = 3;
const gtk::RELIEF_NORMAL = 0;
const gtk::RELIEF_HALF = 1;
const gtk::RELIEF_NONE = 2;
const gtk::RESIZE_PARENT = 0;
const gtk::RESIZE_QUEUE = 1;
const gtk::RESIZE_IMMEDIATE = 2;
const gtk::RESPONSE_NONE = -1;
const gtk::RESPONSE_REJECT = -2;
const gtk::RESPONSE_ACCEPT = -3;
const gtk::RESPONSE_DELETE_EVENT = -4;
const gtk::RESPONSE_OK = -5;
const gtk::RESPONSE_CANCEL = -6;
const gtk::RESPONSE_CLOSE = -7;
const gtk::RESPONSE_YES = -8;
const gtk::RESPONSE_NO = -9;
const gtk::RESPONSE_APPLY = -10;
const gtk::RESPONSE_HELP = -11;
const gtk::SCROLL_STEPS = 0;
const gtk::SCROLL_PAGES = 1;
const gtk::SCROLL_ENDS = 2;
const gtk::SCROLL_HORIZONTAL_STEPS = 3;
const gtk::SCROLL_HORIZONTAL_PAGES = 4;
const gtk::SCROLL_HORIZONTAL_ENDS = 5;
const gtk::SCROLL_NONE = 0;
const gtk::SCROLL_JUMP = 1;
const gtk::SCROLL_STEP_BACKWARD = 2;
const gtk::SCROLL_STEP_FORWARD = 3;
const gtk::SCROLL_PAGE_BACKWARD = 4;
const gtk::SCROLL_PAGE_FORWARD = 5;
const gtk::SCROLL_STEP_UP = 6;
const gtk::SCROLL_STEP_DOWN = 7;
const gtk::SCROLL_PAGE_UP = 8;
const gtk::SCROLL_PAGE_DOWN = 9;
const gtk::SCROLL_STEP_LEFT = 10;
const gtk::SCROLL_STEP_RIGHT = 11;
const gtk::SCROLL_PAGE_LEFT = 12;
const gtk::SCROLL_PAGE_RIGHT = 13;
const gtk::SCROLL_START = 14;
const gtk::SCROLL_END = 15;
const gtk::SELECTION_NONE = 0;
const gtk::SELECTION_SINGLE = 1;
const gtk::SELECTION_BROWSE = 2;
const gtk::SELECTION_MULTIPLE = 3;
const gtk::SELECTION_EXTENDED = 3;
const gtk::SENSITIVITY_AUTO = 0;
const gtk::SENSITIVITY_ON = 1;
const gtk::SENSITIVITY_OFF = 2;
const gtk::SHADOW_NONE = 0;
const gtk::SHADOW_IN = 1;
const gtk::SHADOW_OUT = 2;
const gtk::SHADOW_ETCHED_IN = 3;
const gtk::SHADOW_ETCHED_OUT = 4;
const gtk::SIDE_TOP = 0;
const gtk::SIDE_BOTTOM = 1;
const gtk::SIDE_LEFT = 2;
const gtk::SIDE_RIGHT = 3;
const gtk::RUN_FIRST = 1;
const gtk::RUN_LAST = 2;
const gtk::RUN_BOTH = 3;
const gtk::RUN_NO_RECURSE = 8;
const gtk::RUN_ACTION = 32;
const gtk::RUN_NO_HOOKS = 64;
const gtk::SIZE_GROUP_NONE = 0;
const gtk::SIZE_GROUP_HORIZONTAL = 1;
const gtk::SIZE_GROUP_VERTICAL = 2;
const gtk::SIZE_GROUP_BOTH = 3;
const gtk::SORT_ASCENDING = 0;
const gtk::SORT_DESCENDING = 1;
const gtk::UPDATE_ALWAYS = 0;
const gtk::UPDATE_IF_VALID = 1;
const gtk::SPIN_STEP_FORWARD = 0;
const gtk::SPIN_STEP_BACKWARD = 1;
const gtk::SPIN_PAGE_FORWARD = 2;
const gtk::SPIN_PAGE_BACKWARD = 3;
const gtk::SPIN_HOME = 4;
const gtk::SPIN_END = 5;
const gtk::SPIN_USER_DEFINED = 6;
const gtk::STATE_NORMAL = 0;
const gtk::STATE_ACTIVE = 1;
const gtk::STATE_PRELIGHT = 2;
const gtk::STATE_SELECTED = 3;
const gtk::STATE_INSENSITIVE = 4;
const gtk::DIRECTION_LEFT = 0;
const gtk::DIRECTION_RIGHT = 1;
const gtk::TOP_BOTTOM = 0;
const gtk::LEFT_RIGHT = 1;
const gtk::TARGET_SAME_APP = 1;
const gtk::TARGET_SAME_WIDGET = 2;
const gtk::TARGET_OTHER_APP = 4;
const gtk::TARGET_OTHER_WIDGET = 8;
const gtk::TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = -1;
const gtk::TEXT_BUFFER_TARGET_INFO_RICH_TEXT = -2;
const gtk::TEXT_BUFFER_TARGET_INFO_TEXT = -3;
const gtk::TEXT_DIR_NONE = 0;
const gtk::TEXT_DIR_LTR = 1;
const gtk::TEXT_DIR_RTL = 2;
const gtk::TEXT_SEARCH_VISIBLE_ONLY = 1;
const gtk::TEXT_SEARCH_TEXT_ONLY = 2;
const gtk::TEXT_WINDOW_PRIVATE = 0;
const gtk::TEXT_WINDOW_WIDGET = 1;
const gtk::TEXT_WINDOW_TEXT = 2;
const gtk::TEXT_WINDOW_LEFT = 3;
const gtk::TEXT_WINDOW_RIGHT = 4;
const gtk::TEXT_WINDOW_TOP = 5;
const gtk::TEXT_WINDOW_BOTTOM = 6;
const gtk::TOOLBAR_CHILD_SPACE = 0;
const gtk::TOOLBAR_CHILD_BUTTON = 1;
const gtk::TOOLBAR_CHILD_TOGGLEBUTTON = 2;
const gtk::TOOLBAR_CHILD_RADIOBUTTON = 3;
const gtk::TOOLBAR_CHILD_WIDGET = 4;
const gtk::TOOLBAR_SPACE_EMPTY = 0;
const gtk::TOOLBAR_SPACE_LINE = 1;
const gtk::TOOLBAR_ICONS = 0;
const gtk::TOOLBAR_TEXT = 1;
const gtk::TOOLBAR_BOTH = 2;
const gtk::TOOLBAR_BOTH_HORIZ = 3;
const gtk::TREE_MODEL_ITERS_PERSIST = 1;
const gtk::TREE_MODEL_LIST_ONLY = 2;
const gtk::TREE_VIEW_COLUMN_GROW_ONLY = 0;
const gtk::TREE_VIEW_COLUMN_AUTOSIZE = 1;
const gtk::TREE_VIEW_COLUMN_FIXED = 2;
const gtk::TREE_VIEW_DROP_BEFORE = 0;
const gtk::TREE_VIEW_DROP_AFTER = 1;
const gtk::TREE_VIEW_DROP_INTO_OR_BEFORE = 2;
const gtk::TREE_VIEW_DROP_INTO_OR_AFTER = 3;
const gtk::TREE_VIEW_GRID_LINES_NONE = 0;
const gtk::TREE_VIEW_GRID_LINES_HORIZONTAL = 1;
const gtk::TREE_VIEW_GRID_LINES_VERTICAL = 2;
const gtk::TREE_VIEW_GRID_LINES_BOTH = 3;
const gtk::UI_MANAGER_AUTO = 0;
const gtk::UI_MANAGER_MENUBAR = 1;
const gtk::UI_MANAGER_MENU = 2;
const gtk::UI_MANAGER_TOOLBAR = 4;
const gtk::UI_MANAGER_PLACEHOLDER = 8;
const gtk::UI_MANAGER_POPUP = 16;
const gtk::UI_MANAGER_MENUITEM = 32;
const gtk::UI_MANAGER_TOOLITEM = 64;
const gtk::UI_MANAGER_SEPARATOR = 128;
const gtk::UI_MANAGER_ACCELERATOR = 256;
const gtk::UNIT_PIXEL = 0;
const gtk::UNIT_POINTS = 1;
const gtk::UNIT_INCH = 2;
const gtk::UNIT_MM = 3;
const gtk::UPDATE_CONTINUOUS = 0;
const gtk::UPDATE_DISCONTINUOUS = 1;
const gtk::UPDATE_DELAYED = 2;
const gtk::VISIBILITY_NONE = 0;
const gtk::VISIBILITY_PARTIAL = 1;
const gtk::VISIBILITY_FULL = 2;
const gtk::TOPLEVEL = 16;
const gtk::NO_WINDOW = 32;
const gtk::REALIZED = 64;
const gtk::MAPPED = 128;
const gtk::VISIBLE = 256;
const gtk::SENSITIVE = 512;
const gtk::PARENT_SENSITIVE = 1024;
const gtk::CAN_FOCUS = 2048;
const gtk::HAS_FOCUS = 4096;
const gtk::CAN_DEFAULT = 8192;
const gtk::HAS_DEFAULT = 16384;
const gtk::HAS_GRAB = 32768;
const gtk::RC_STYLE = 65536;
const gtk::COMPOSITE_CHILD = 131072;
const gtk::NO_REPARENT = 262144;
const gtk::APP_PAINTABLE = 524288;
const gtk::RECEIVES_DEFAULT = 1048576;
const gtk::DOUBLE_BUFFERED = 2097152;
const gtk::NO_SHOW_ALL = 4194304;
const gtk::WIDGET_HELP_TOOLTIP = 0;
const gtk::WIDGET_HELP_WHATS_THIS = 1;
const gtk::WIN_POS_NONE = 0;
const gtk::WIN_POS_CENTER = 1;
const gtk::WIN_POS_MOUSE = 2;
const gtk::WIN_POS_CENTER_ALWAYS = 3;
const gtk::WIN_POS_CENTER_ON_PARENT = 4;
const gtk::WINDOW_TOPLEVEL = 0;
const gtk::WINDOW_POPUP = 1;
const gtk::WRAP_NONE = 0;
const gtk::WRAP_CHAR = 1;
const gtk::WRAP_WORD = 2;
const gtk::WRAP_WORD_CHAR = 3;
const gtk::TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1;
const gtk::TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2;
const gtk::CLIST_IN_DRAG = 1;
const gtk::CLIST_ROW_HEIGHT_SET = 2;
const gtk::CLIST_SHOW_TITLES = 4;
const gtk::CLIST_ADD_MODE = 16;
const gtk::CLIST_AUTO_SORT = 32;
const gtk::CLIST_AUTO_RESIZE_BLOCKED = 64;
const gtk::CLIST_REORDERABLE = 128;
const gtk::CLIST_USE_DRAG_ICONS = 256;
const gtk::CLIST_DRAW_DRAG_LINE = 512;
const gtk::CLIST_DRAW_DRAG_RECT = 1024;
extern long gtk_accel_group_get_type() = accel_group_get_type;
extern GtkAccelGroup* gtk_accel_group_new() = accel_group_new;
extern int gtk_accel_group_get_is_locked(GtkAccelGroup*) = accel_group_get_is_locked;
extern int gtk_accel_group_get_modifier_mask(GtkAccelGroup*) = accel_group_get_modifier_mask;
extern void gtk_accel_group_lock(GtkAccelGroup*) = accel_group_lock;
extern void gtk_accel_group_unlock(GtkAccelGroup*) = accel_group_unlock;
extern void gtk_accel_group_connect(GtkAccelGroup*, int, int, int, GClosure*) = accel_group_connect;
extern void gtk_accel_group_connect_by_path(GtkAccelGroup*, char*, GClosure*) = accel_group_connect_by_path;
extern int gtk_accel_group_disconnect(GtkAccelGroup*, GClosure*) = accel_group_disconnect;
extern int gtk_accel_group_disconnect_key(GtkAccelGroup*, int, int) = accel_group_disconnect_key;
extern int gtk_accel_group_activate(GtkAccelGroup*, int, GObject*, int, int) = accel_group_activate;
extern int gtk_accel_groups_activate(GObject*, int, int) = accel_groups_activate;
extern GSList* gtk_accel_groups_from_object(GObject*) = accel_groups_from_object;
extern GtkAccelKey* gtk_accel_group_find(GtkAccelGroup*, void*, void*) = accel_group_find;
extern GtkAccelGroup* gtk_accel_group_from_accel_closure(GClosure*) = accel_group_from_accel_closure;
extern int gtk_accelerator_valid(int, int) = accelerator_valid;
extern void gtk_accelerator_parse(char*, int*, int*) = accelerator_parse;
extern char* gtk_accelerator_name(int, int) = accelerator_name;
extern char* gtk_accelerator_get_label(int, int) = accelerator_get_label;
extern void gtk_accelerator_set_default_mod_mask(int) = accelerator_set_default_mod_mask;
extern int gtk_accelerator_get_default_mod_mask() = accelerator_get_default_mod_mask;
extern GtkAccelGroupEntry* gtk_accel_group_query(GtkAccelGroup*, int, int, int*) = accel_group_query;
extern long gtk_accel_flags_get_type() = accel_flags_get_type;
extern long gtk_assistant_page_type_get_type() = assistant_page_type_get_type;
extern long gtk_builder_error_get_type() = builder_error_get_type;
extern long gtk_calendar_display_options_get_type() = calendar_display_options_get_type;
extern long gtk_cell_renderer_state_get_type() = cell_renderer_state_get_type;
extern long gtk_cell_renderer_mode_get_type() = cell_renderer_mode_get_type;
extern long gtk_cell_renderer_accel_mode_get_type() = cell_renderer_accel_mode_get_type;
extern long gtk_debug_flag_get_type() = debug_flag_get_type;
extern long gtk_dialog_flags_get_type() = dialog_flags_get_type;
extern long gtk_response_type_get_type() = response_type_get_type;
extern long gtk_dest_defaults_get_type() = dest_defaults_get_type;
extern long gtk_target_flags_get_type() = target_flags_get_type;
extern long gtk_anchor_type_get_type() = anchor_type_get_type;
extern long gtk_arrow_type_get_type() = arrow_type_get_type;
extern long gtk_attach_options_get_type() = attach_options_get_type;
extern long gtk_button_box_style_get_type() = button_box_style_get_type;
extern long gtk_curve_type_get_type() = curve_type_get_type;
extern long gtk_delete_type_get_type() = delete_type_get_type;
extern long gtk_direction_type_get_type() = direction_type_get_type;
extern long gtk_expander_style_get_type() = expander_style_get_type;
extern long gtk_icon_size_get_type() = icon_size_get_type;
extern long gtk_sensitivity_type_get_type() = sensitivity_type_get_type;
extern long gtk_side_type_get_type() = side_type_get_type;
extern long gtk_text_direction_get_type() = text_direction_get_type;
extern long gtk_justification_get_type() = justification_get_type;
extern long gtk_match_type_get_type() = match_type_get_type;
extern long gtk_menu_direction_type_get_type() = menu_direction_type_get_type;
extern long gtk_metric_type_get_type() = metric_type_get_type;
extern long gtk_movement_step_get_type() = movement_step_get_type;
extern long gtk_scroll_step_get_type() = scroll_step_get_type;
extern long gtk_orientation_get_type() = orientation_get_type;
extern long gtk_corner_type_get_type() = corner_type_get_type;
extern long gtk_pack_type_get_type() = pack_type_get_type;
extern long gtk_path_priority_type_get_type() = path_priority_type_get_type;
extern long gtk_path_type_get_type() = path_type_get_type;
extern long gtk_policy_type_get_type() = policy_type_get_type;
extern long gtk_position_type_get_type() = position_type_get_type;
extern long gtk_preview_type_get_type() = preview_type_get_type;
extern long gtk_relief_style_get_type() = relief_style_get_type;
extern long gtk_resize_mode_get_type() = resize_mode_get_type;
extern long gtk_signal_run_type_get_type() = signal_run_type_get_type;
extern long gtk_scroll_type_get_type() = scroll_type_get_type;
extern long gtk_selection_mode_get_type() = selection_mode_get_type;
extern long gtk_shadow_type_get_type() = shadow_type_get_type;
extern long gtk_state_type_get_type() = state_type_get_type;
extern long gtk_submenu_direction_get_type() = submenu_direction_get_type;
extern long gtk_submenu_placement_get_type() = submenu_placement_get_type;
extern long gtk_toolbar_style_get_type() = toolbar_style_get_type;
extern long gtk_update_type_get_type() = update_type_get_type;
extern long gtk_visibility_get_type() = visibility_get_type;
extern long gtk_window_position_get_type() = window_position_get_type;
extern long gtk_window_type_get_type() = window_type_get_type;
extern long gtk_wrap_mode_get_type() = wrap_mode_get_type;
extern long gtk_sort_type_get_type() = sort_type_get_type;
extern long gtk_im_preedit_style_get_type() = im_preedit_style_get_type;
extern long gtk_im_status_style_get_type() = im_status_style_get_type;
extern long gtk_pack_direction_get_type() = pack_direction_get_type;
extern long gtk_print_pages_get_type() = print_pages_get_type;
extern long gtk_page_set_get_type() = page_set_get_type;
extern long gtk_number_up_layout_get_type() = number_up_layout_get_type;
extern long gtk_page_orientation_get_type() = page_orientation_get_type;
extern long gtk_print_quality_get_type() = print_quality_get_type;
extern long gtk_print_duplex_get_type() = print_duplex_get_type;
extern long gtk_unit_get_type() = unit_get_type;
extern long gtk_tree_view_grid_lines_get_type() = tree_view_grid_lines_get_type;
extern long gtk_drag_result_get_type() = drag_result_get_type;
extern long gtk_file_chooser_action_get_type() = file_chooser_action_get_type;
extern long gtk_file_chooser_confirmation_get_type() = file_chooser_confirmation_get_type;
extern long gtk_file_chooser_error_get_type() = file_chooser_error_get_type;
extern long gtk_file_filter_flags_get_type() = file_filter_flags_get_type;
extern long gtk_icon_lookup_flags_get_type() = icon_lookup_flags_get_type;
extern long gtk_icon_theme_error_get_type() = icon_theme_error_get_type;
extern long gtk_icon_view_drop_position_get_type() = icon_view_drop_position_get_type;
extern long gtk_image_type_get_type() = image_type_get_type;
extern long gtk_message_type_get_type() = message_type_get_type;
extern long gtk_buttons_type_get_type() = buttons_type_get_type;
extern long gtk_notebook_tab_get_type() = notebook_tab_get_type;
extern long gtk_object_flags_get_type() = object_flags_get_type;
extern long gtk_arg_flags_get_type() = arg_flags_get_type;
extern long gtk_print_status_get_type() = print_status_get_type;
extern long gtk_print_operation_result_get_type() = print_operation_result_get_type;
extern long gtk_print_operation_action_get_type() = print_operation_action_get_type;
extern long gtk_print_error_get_type() = print_error_get_type;
extern long gtk_private_flags_get_type() = private_flags_get_type;
extern long gtk_progress_bar_style_get_type() = progress_bar_style_get_type;
extern long gtk_progress_bar_orientation_get_type() = progress_bar_orientation_get_type;
extern long gtk_rc_flags_get_type() = rc_flags_get_type;
extern long gtk_rc_token_type_get_type() = rc_token_type_get_type;
extern long gtk_recent_sort_type_get_type() = recent_sort_type_get_type;
extern long gtk_recent_chooser_error_get_type() = recent_chooser_error_get_type;
extern long gtk_recent_filter_flags_get_type() = recent_filter_flags_get_type;
extern long gtk_recent_manager_error_get_type() = recent_manager_error_get_type;
extern long gtk_size_group_mode_get_type() = size_group_mode_get_type;
extern long gtk_spin_button_update_policy_get_type() = spin_button_update_policy_get_type;
extern long gtk_spin_type_get_type() = spin_type_get_type;
extern long gtk_text_buffer_target_info_get_type() = text_buffer_target_info_get_type;
extern long gtk_text_search_flags_get_type() = text_search_flags_get_type;
extern long gtk_text_window_type_get_type() = text_window_type_get_type;
extern long gtk_toolbar_child_type_get_type() = toolbar_child_type_get_type;
extern long gtk_toolbar_space_style_get_type() = toolbar_space_style_get_type;
extern long gtk_tree_model_flags_get_type() = tree_model_flags_get_type;
extern long gtk_tree_view_drop_position_get_type() = tree_view_drop_position_get_type;
extern long gtk_tree_view_column_sizing_get_type() = tree_view_column_sizing_get_type;
extern long gtk_ui_manager_item_type_get_type() = ui_manager_item_type_get_type;
extern long gtk_widget_flags_get_type() = widget_flags_get_type;
extern long gtk_widget_help_type_get_type() = widget_help_type_get_type;
extern long gtk_tree_view_mode_get_type() = tree_view_mode_get_type;
extern long gtk_cell_type_get_type() = cell_type_get_type;
extern long gtk_clist_drag_pos_get_type() = clist_drag_pos_get_type;
extern long gtk_button_action_get_type() = button_action_get_type;
extern long gtk_ctree_pos_get_type() = ctree_pos_get_type;
extern long gtk_ctree_line_style_get_type() = ctree_line_style_get_type;
extern long gtk_ctree_expander_style_get_type() = ctree_expander_style_get_type;
extern long gtk_ctree_expansion_type_get_type() = ctree_expansion_type_get_type;
extern long gtk_identifier_get_type() = identifier_get_type;
extern void gtk_type_init(int) = type_init;
extern long gtk_type_unique(long, GtkTypeInfo*) = type_unique;
extern void* gtk_type_class(long) = type_class;
extern void* gtk_type_new(long) = type_new;
extern GtkEnumValue* gtk_type_enum_get_values(long) = type_enum_get_values;
extern GtkFlagValue* gtk_type_flags_get_values(long) = type_flags_get_values;
extern GtkEnumValue* gtk_type_enum_find_value(long, char*) = type_enum_find_value;
extern GtkFlagValue* gtk_type_flags_find_value(long, char*) = type_flags_find_value;
extern long gtk_object_get_type() = object_get_type;
extern void gtk_object_sink(GtkObject*) = object_sink;
extern void gtk_object_destroy(GtkObject*) = object_destroy;
extern GtkObject* gtk_object_new(long, char*, ...) = object_new;
extern GtkObject* gtk_object_ref(GtkObject*) = object_ref;
extern void gtk_object_unref(GtkObject*) = object_unref;
extern void gtk_object_weakref(GtkObject*, void*, void*) = object_weakref;
extern void gtk_object_weakunref(GtkObject*, void*, void*) = object_weakunref;
extern void gtk_object_set_data(GtkObject*, char*, void*) = object_set_data;
extern void gtk_object_set_data_full(GtkObject*, char*, void*, void*) = object_set_data_full;
extern void gtk_object_remove_data(GtkObject*, char*) = object_remove_data;
extern void* gtk_object_get_data(GtkObject*, char*) = object_get_data;
extern void gtk_object_remove_no_notify(GtkObject*, char*) = object_remove_no_notify;
extern void gtk_object_set_user_data(GtkObject*, void*) = object_set_user_data;
extern void* gtk_object_get_user_data(GtkObject*) = object_get_user_data;
extern void gtk_object_set_data_by_id(GtkObject*, int, void*) = object_set_data_by_id;
extern void gtk_object_set_data_by_id_full(GtkObject*, int, void*, void*) = object_set_data_by_id_full;
extern void* gtk_object_get_data_by_id(GtkObject*, int) = object_get_data_by_id;
extern void gtk_object_remove_data_by_id(GtkObject*, int) = object_remove_data_by_id;
extern void gtk_object_remove_no_notify_by_id(GtkObject*, int) = object_remove_no_notify_by_id;
extern void gtk_object_get(GtkObject*, char*, ...) = object_get;
extern void gtk_object_set(GtkObject*, char*, ...) = object_set;
extern void gtk_object_add_arg_type(char*, long, int, int) = object_add_arg_type;
extern long gtk_adjustment_get_type() = adjustment_get_type;
extern GtkObject* gtk_adjustment_new(double, double, double, double, double, double) = adjustment_new;
extern void gtk_adjustment_changed(GtkAdjustment*) = adjustment_changed;
extern void gtk_adjustment_value_changed(GtkAdjustment*) = adjustment_value_changed;
extern void gtk_adjustment_clamp_page(GtkAdjustment*, double, double) = adjustment_clamp_page;
extern double gtk_adjustment_get_value(GtkAdjustment*) = adjustment_get_value;
extern void gtk_adjustment_set_value(GtkAdjustment*, double) = adjustment_set_value;
extern double gtk_adjustment_get_lower(GtkAdjustment*) = adjustment_get_lower;
extern void gtk_adjustment_set_lower(GtkAdjustment*, double) = adjustment_set_lower;
extern double gtk_adjustment_get_upper(GtkAdjustment*) = adjustment_get_upper;
extern void gtk_adjustment_set_upper(GtkAdjustment*, double) = adjustment_set_upper;
extern double gtk_adjustment_get_step_increment(GtkAdjustment*) = adjustment_get_step_increment;
extern void gtk_adjustment_set_step_increment(GtkAdjustment*, double) = adjustment_set_step_increment;
extern double gtk_adjustment_get_page_increment(GtkAdjustment*) = adjustment_get_page_increment;
extern void gtk_adjustment_set_page_increment(GtkAdjustment*, double) = adjustment_set_page_increment;
extern double gtk_adjustment_get_page_size(GtkAdjustment*) = adjustment_get_page_size;
extern void gtk_adjustment_set_page_size(GtkAdjustment*, double) = adjustment_set_page_size;
extern void gtk_adjustment_configure(GtkAdjustment*, double, double, double, double, double, double) = adjustment_configure;
extern long gtk_style_get_type() = style_get_type;
extern GtkStyle* gtk_style_new() = style_new;
extern GtkStyle* gtk_style_copy(GtkStyle*) = style_copy;
extern GtkStyle* gtk_style_attach(GtkStyle*, GdkWindow*) = style_attach;
extern void gtk_style_detach(GtkStyle*) = style_detach;
extern GtkStyle* gtk_style_ref(GtkStyle*) = style_ref;
extern void gtk_style_unref(GtkStyle*) = style_unref;
extern GdkFont* gtk_style_get_font(GtkStyle*) = style_get_font;
extern void gtk_style_set_font(GtkStyle*, GdkFont*) = style_set_font;
extern void gtk_style_set_background(GtkStyle*, GdkWindow*, int) = style_set_background;
extern void gtk_style_apply_default_background(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, int, int, int, int) = style_apply_default_background;
extern GtkIconSet* gtk_style_lookup_icon_set(GtkStyle*, char*) = style_lookup_icon_set;
extern int gtk_style_lookup_color(GtkStyle*, char*, GdkColor*) = style_lookup_color;
extern GdkPixbuf* gtk_style_render_icon(GtkStyle*, GtkIconSource*, int, int, int, GtkWidget*, char*) = style_render_icon;
extern void gtk_draw_hline(GtkStyle*, GdkWindow*, int, int, int, int) = draw_hline;
extern void gtk_draw_vline(GtkStyle*, GdkWindow*, int, int, int, int) = draw_vline;
extern void gtk_draw_shadow(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_shadow;
extern void gtk_draw_polygon(GtkStyle*, GdkWindow*, int, int, GdkPoint*, int, int) = draw_polygon;
extern void gtk_draw_arrow(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int, int) = draw_arrow;
extern void gtk_draw_diamond(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_diamond;
extern void gtk_draw_box(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_box;
extern void gtk_draw_flat_box(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_flat_box;
extern void gtk_draw_check(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_check;
extern void gtk_draw_option(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_option;
extern void gtk_draw_tab(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_tab;
extern void gtk_draw_shadow_gap(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int, int, int) = draw_shadow_gap;
extern void gtk_draw_box_gap(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int, int, int) = draw_box_gap;
extern void gtk_draw_extension(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int) = draw_extension;
extern void gtk_draw_focus(GtkStyle*, GdkWindow*, int, int, int, int) = draw_focus;
extern void gtk_draw_slider(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int) = draw_slider;
extern void gtk_draw_handle(GtkStyle*, GdkWindow*, int, int, int, int, int, int, int) = draw_handle;
extern void gtk_draw_expander(GtkStyle*, GdkWindow*, int, int, int, int) = draw_expander;
extern void gtk_draw_layout(GtkStyle*, GdkWindow*, int, int, int, int, PangoLayout*) = draw_layout;
extern void gtk_draw_resize_grip(GtkStyle*, GdkWindow*, int, int, int, int, int, int) = draw_resize_grip;
extern void gtk_paint_hline(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, int) = paint_hline;
extern void gtk_paint_vline(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, int) = paint_vline;
extern void gtk_paint_shadow(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_shadow;
extern void gtk_paint_polygon(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, GdkPoint*, int, int) = paint_polygon;
extern void gtk_paint_arrow(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int, int) = paint_arrow;
extern void gtk_paint_diamond(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_diamond;
extern void gtk_paint_box(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_box;
extern void gtk_paint_flat_box(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_flat_box;
extern void gtk_paint_check(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_check;
extern void gtk_paint_option(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_option;
extern void gtk_paint_tab(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_tab;
extern void gtk_paint_shadow_gap(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int, int, int) = paint_shadow_gap;
extern void gtk_paint_box_gap(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int, int, int) = paint_box_gap;
extern void gtk_paint_extension(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int) = paint_extension;
extern void gtk_paint_focus(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int) = paint_focus;
extern void gtk_paint_slider(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int) = paint_slider;
extern void gtk_paint_handle(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int) = paint_handle;
extern void gtk_paint_expander(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, int) = paint_expander;
extern void gtk_paint_layout(GtkStyle*, GdkWindow*, int, int, GdkRectangle*, GtkWidget*, char*, int, int, PangoLayout*) = paint_layout;
extern void gtk_paint_resize_grip(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, int, int, int) = paint_resize_grip;
extern long gtk_border_get_type() = border_get_type;
extern GtkBorder* gtk_border_new() = border_new;
extern GtkBorder* gtk_border_copy(GtkBorder*) = border_copy;
extern void gtk_border_free(GtkBorder*) = border_free;
extern void gtk_draw_string(GtkStyle*, GdkWindow*, int, int, int, char*) = draw_string;
extern void gtk_paint_string(GtkStyle*, GdkWindow*, int, GdkRectangle*, GtkWidget*, char*, int, int, char*) = paint_string;
extern void gtk_draw_insertion_cursor(GtkWidget*, GdkDrawable*, GdkRectangle*, GdkRectangle*, int, int, int) = draw_insertion_cursor;
extern void gtk_rc_add_default_file(char*) = rc_add_default_file;
extern void gtk_rc_set_default_files(char**) = rc_set_default_files;
extern char** gtk_rc_get_default_files() = rc_get_default_files;
extern GtkStyle* gtk_rc_get_style(GtkWidget*) = rc_get_style;
extern GtkStyle* gtk_rc_get_style_by_paths(GtkSettings*, char*, char*, long) = rc_get_style_by_paths;
extern int gtk_rc_reparse_all_for_settings(GtkSettings*, int) = rc_reparse_all_for_settings;
extern void gtk_rc_reset_styles(GtkSettings*) = rc_reset_styles;
extern char* gtk_rc_find_pixmap_in_path(GtkSettings*, GScanner*, char*) = rc_find_pixmap_in_path;
extern void gtk_rc_parse(char*) = rc_parse;
extern void gtk_rc_parse_string(char*) = rc_parse_string;
extern int gtk_rc_reparse_all() = rc_reparse_all;
extern void gtk_rc_add_widget_name_style(GtkRcStyle*, char*) = rc_add_widget_name_style;
extern void gtk_rc_add_widget_class_style(GtkRcStyle*, char*) = rc_add_widget_class_style;
extern void gtk_rc_add_class_style(GtkRcStyle*, char*) = rc_add_class_style;
extern long gtk_rc_style_get_type() = rc_style_get_type;
extern GtkRcStyle* gtk_rc_style_new() = rc_style_new;
extern GtkRcStyle* gtk_rc_style_copy(GtkRcStyle*) = rc_style_copy;
extern void gtk_rc_style_ref(GtkRcStyle*) = rc_style_ref;
extern void gtk_rc_style_unref(GtkRcStyle*) = rc_style_unref;
extern char* gtk_rc_find_module_in_path(char*) = rc_find_module_in_path;
extern char* gtk_rc_get_theme_dir() = rc_get_theme_dir;
extern char* gtk_rc_get_module_dir() = rc_get_module_dir;
extern char* gtk_rc_get_im_module_path() = rc_get_im_module_path;
extern char* gtk_rc_get_im_module_file() = rc_get_im_module_file;
extern GScanner* gtk_rc_scanner_new() = rc_scanner_new;
extern int gtk_rc_parse_color(GScanner*, GdkColor*) = rc_parse_color;
extern int gtk_rc_parse_color_full(GScanner*, GtkRcStyle*, GdkColor*) = rc_parse_color_full;
extern int gtk_rc_parse_state(GScanner*, int*) = rc_parse_state;
extern int gtk_rc_parse_priority(GScanner*, int*) = rc_parse_priority;
extern long gtk_settings_get_type() = settings_get_type;
extern GtkSettings* gtk_settings_get_default() = settings_get_default;
extern GtkSettings* gtk_settings_get_for_screen(GdkScreen*) = settings_get_for_screen;
extern void gtk_settings_install_property(GParamSpec*) = settings_install_property;
extern void gtk_settings_install_property_parser(GParamSpec*, void*) = settings_install_property_parser;
extern int gtk_rc_property_parse_color(GParamSpec*, GString*, GValue*) = rc_property_parse_color;
extern int gtk_rc_property_parse_enum(GParamSpec*, GString*, GValue*) = rc_property_parse_enum;
extern int gtk_rc_property_parse_flags(GParamSpec*, GString*, GValue*) = rc_property_parse_flags;
extern int gtk_rc_property_parse_requisition(GParamSpec*, GString*, GValue*) = rc_property_parse_requisition;
extern int gtk_rc_property_parse_border(GParamSpec*, GString*, GValue*) = rc_property_parse_border;
extern void gtk_settings_set_property_value(GtkSettings*, char*, GtkSettingsValue*) = settings_set_property_value;
extern void gtk_settings_set_string_property(GtkSettings*, char*, char*, char*) = settings_set_string_property;
extern void gtk_settings_set_long_property(GtkSettings*, char*, long, char*) = settings_set_long_property;
extern void gtk_settings_set_double_property(GtkSettings*, char*, double, char*) = settings_set_double_property;
extern long gtk_widget_get_type() = widget_get_type;
extern GtkWidget* gtk_widget_new(long, char*, ...) = widget_new;
extern void gtk_widget_destroy(GtkWidget*) = widget_destroy;
extern void gtk_widget_destroyed(GtkWidget*, GtkWidget**) = widget_destroyed;
extern GtkWidget* gtk_widget_ref(GtkWidget*) = widget_ref;
extern void gtk_widget_unref(GtkWidget*) = widget_unref;
extern void gtk_widget_set(GtkWidget*, char*, ...) = widget_set;
extern void gtk_widget_unparent(GtkWidget*) = widget_unparent;
extern void gtk_widget_show(GtkWidget*) = widget_show;
extern void gtk_widget_show_now(GtkWidget*) = widget_show_now;
extern void gtk_widget_hide(GtkWidget*) = widget_hide;
extern void gtk_widget_show_all(GtkWidget*) = widget_show_all;
extern void gtk_widget_hide_all(GtkWidget*) = widget_hide_all;
extern void gtk_widget_set_no_show_all(GtkWidget*, int) = widget_set_no_show_all;
extern int gtk_widget_get_no_show_all(GtkWidget*) = widget_get_no_show_all;
extern void gtk_widget_map(GtkWidget*) = widget_map;
extern void gtk_widget_unmap(GtkWidget*) = widget_unmap;
extern void gtk_widget_realize(GtkWidget*) = widget_realize;
extern void gtk_widget_unrealize(GtkWidget*) = widget_unrealize;
extern void gtk_widget_queue_draw(GtkWidget*) = widget_queue_draw;
extern void gtk_widget_queue_draw_area(GtkWidget*, int, int, int, int) = widget_queue_draw_area;
extern void gtk_widget_queue_clear(GtkWidget*) = widget_queue_clear;
extern void gtk_widget_queue_clear_area(GtkWidget*, int, int, int, int) = widget_queue_clear_area;
extern void gtk_widget_queue_resize(GtkWidget*) = widget_queue_resize;
extern void gtk_widget_queue_resize_no_redraw(GtkWidget*) = widget_queue_resize_no_redraw;
extern void gtk_widget_draw(GtkWidget*, GdkRectangle*) = widget_draw;
extern void gtk_widget_size_request(GtkWidget*, GtkRequisition*) = widget_size_request;
extern void gtk_widget_size_allocate(GtkWidget*, GtkAllocation*) = widget_size_allocate;
extern void gtk_widget_get_child_requisition(GtkWidget*, GtkRequisition*) = widget_get_child_requisition;
extern void gtk_widget_add_accelerator(GtkWidget*, char*, GtkAccelGroup*, int, int, int) = widget_add_accelerator;
extern int gtk_widget_remove_accelerator(GtkWidget*, GtkAccelGroup*, int, int) = widget_remove_accelerator;
extern void gtk_widget_set_accel_path(GtkWidget*, char*, GtkAccelGroup*) = widget_set_accel_path;
extern GList* gtk_widget_list_accel_closures(GtkWidget*) = widget_list_accel_closures;
extern int gtk_widget_can_activate_accel(GtkWidget*, int) = widget_can_activate_accel;
extern int gtk_widget_mnemonic_activate(GtkWidget*, int) = widget_mnemonic_activate;
extern int gtk_widget_event(GtkWidget*, GdkEvent*) = widget_event;
extern int gtk_widget_send_expose(GtkWidget*, GdkEvent*) = widget_send_expose;
extern int gtk_widget_activate(GtkWidget*) = widget_activate;
extern int gtk_widget_set_scroll_adjustments(GtkWidget*, GtkAdjustment*, GtkAdjustment*) = widget_set_scroll_adjustments;
extern void gtk_widget_reparent(GtkWidget*, GtkWidget*) = widget_reparent;
extern int gtk_widget_intersect(GtkWidget*, GdkRectangle*, GdkRectangle*) = widget_intersect;
extern GdkRegion* gtk_widget_region_intersect(GtkWidget*, GdkRegion*) = widget_region_intersect;
extern void gtk_widget_freeze_child_notify(GtkWidget*) = widget_freeze_child_notify;
extern void gtk_widget_child_notify(GtkWidget*, char*) = widget_child_notify;
extern void gtk_widget_thaw_child_notify(GtkWidget*) = widget_thaw_child_notify;
extern int gtk_widget_is_focus(GtkWidget*) = widget_is_focus;
extern void gtk_widget_grab_focus(GtkWidget*) = widget_grab_focus;
extern void gtk_widget_grab_default(GtkWidget*) = widget_grab_default;
extern void gtk_widget_set_name(GtkWidget*, char*) = widget_set_name;
extern char* gtk_widget_get_name(GtkWidget*) = widget_get_name;
extern void gtk_widget_set_state(GtkWidget*, int) = widget_set_state;
extern void gtk_widget_set_sensitive(GtkWidget*, int) = widget_set_sensitive;
extern void gtk_widget_set_app_paintable(GtkWidget*, int) = widget_set_app_paintable;
extern void gtk_widget_set_double_buffered(GtkWidget*, int) = widget_set_double_buffered;
extern void gtk_widget_set_redraw_on_allocate(GtkWidget*, int) = widget_set_redraw_on_allocate;
extern void gtk_widget_set_parent(GtkWidget*, GtkWidget*) = widget_set_parent;
extern GtkWidget* gtk_widget_get_parent(GtkWidget*) = widget_get_parent;
extern void gtk_widget_set_parent_window(GtkWidget*, GdkWindow*) = widget_set_parent_window;
extern GdkWindow* gtk_widget_get_parent_window(GtkWidget*) = widget_get_parent_window;
extern void gtk_widget_set_child_visible(GtkWidget*, int) = widget_set_child_visible;
extern int gtk_widget_get_child_visible(GtkWidget*) = widget_get_child_visible;
extern GdkWindow* gtk_widget_get_window(GtkWidget*) = widget_get_window;
extern int gtk_widget_child_focus(GtkWidget*, int) = widget_child_focus;
extern int gtk_widget_keynav_failed(GtkWidget*, int) = widget_keynav_failed;
extern void gtk_widget_error_bell(GtkWidget*) = widget_error_bell;
extern void gtk_widget_set_size_request(GtkWidget*, int, int) = widget_set_size_request;
extern void gtk_widget_get_size_request(GtkWidget*, int*, int*) = widget_get_size_request;
extern void gtk_widget_set_uposition(GtkWidget*, int, int) = widget_set_uposition;
extern void gtk_widget_set_usize(GtkWidget*, int, int) = widget_set_usize;
extern void gtk_widget_set_events(GtkWidget*, int) = widget_set_events;
extern void gtk_widget_add_events(GtkWidget*, int) = widget_add_events;
extern void gtk_widget_set_extension_events(GtkWidget*, int) = widget_set_extension_events;
extern int gtk_widget_get_extension_events(GtkWidget*) = widget_get_extension_events;
extern GtkWidget* gtk_widget_get_toplevel(GtkWidget*) = widget_get_toplevel;
extern GtkWidget* gtk_widget_get_ancestor(GtkWidget*, long) = widget_get_ancestor;
extern GdkColormap* gtk_widget_get_colormap(GtkWidget*) = widget_get_colormap;
extern GdkVisual* gtk_widget_get_visual(GtkWidget*) = widget_get_visual;
extern GdkScreen* gtk_widget_get_screen(GtkWidget*) = widget_get_screen;
extern int gtk_widget_has_screen(GtkWidget*) = widget_has_screen;
extern GdkDisplay* gtk_widget_get_display(GtkWidget*) = widget_get_display;
extern GdkWindow* gtk_widget_get_root_window(GtkWidget*) = widget_get_root_window;
extern GtkSettings* gtk_widget_get_settings(GtkWidget*) = widget_get_settings;
extern GtkClipboard* gtk_widget_get_clipboard(GtkWidget*, void/*struct _GdkAtom*/*) = widget_get_clipboard;
extern GdkPixmap* gtk_widget_get_snapshot(GtkWidget*, GdkRectangle*) = widget_get_snapshot;
extern AtkObject* gtk_widget_get_accessible(GtkWidget*) = widget_get_accessible;
extern void gtk_widget_set_colormap(GtkWidget*, GdkColormap*) = widget_set_colormap;
extern int gtk_widget_get_events(GtkWidget*) = widget_get_events;
extern void gtk_widget_get_pointer(GtkWidget*, int*, int*) = widget_get_pointer;
extern int gtk_widget_is_ancestor(GtkWidget*, GtkWidget*) = widget_is_ancestor;
extern int gtk_widget_translate_coordinates(GtkWidget*, GtkWidget*, int, int, int*, int*) = widget_translate_coordinates;
extern int gtk_widget_hide_on_delete(GtkWidget*) = widget_hide_on_delete;
extern void gtk_widget_set_style(GtkWidget*, GtkStyle*) = widget_set_style;
extern void gtk_widget_ensure_style(GtkWidget*) = widget_ensure_style;
extern GtkStyle* gtk_widget_get_style(GtkWidget*) = widget_get_style;
extern void gtk_widget_modify_style(GtkWidget*, GtkRcStyle*) = widget_modify_style;
extern GtkRcStyle* gtk_widget_get_modifier_style(GtkWidget*) = widget_get_modifier_style;
extern void gtk_widget_modify_fg(GtkWidget*, int, GdkColor*) = widget_modify_fg;
extern void gtk_widget_modify_bg(GtkWidget*, int, GdkColor*) = widget_modify_bg;
extern void gtk_widget_modify_text(GtkWidget*, int, GdkColor*) = widget_modify_text;
extern void gtk_widget_modify_base(GtkWidget*, int, GdkColor*) = widget_modify_base;
extern void gtk_widget_modify_cursor(GtkWidget*, GdkColor*, GdkColor*) = widget_modify_cursor;
extern void gtk_widget_modify_font(GtkWidget*, PangoFontDescription*) = widget_modify_font;
extern PangoContext* gtk_widget_create_pango_context(GtkWidget*) = widget_create_pango_context;
extern PangoContext* gtk_widget_get_pango_context(GtkWidget*) = widget_get_pango_context;
extern PangoLayout* gtk_widget_create_pango_layout(GtkWidget*, char*) = widget_create_pango_layout;
extern GdkPixbuf* gtk_widget_render_icon(GtkWidget*, char*, int, char*) = widget_render_icon;
extern void gtk_widget_set_composite_name(GtkWidget*, char*) = widget_set_composite_name;
extern char* gtk_widget_get_composite_name(GtkWidget*) = widget_get_composite_name;
extern void gtk_widget_reset_rc_styles(GtkWidget*) = widget_reset_rc_styles;
extern void gtk_widget_push_colormap(GdkColormap*) = widget_push_colormap;
extern void gtk_widget_push_composite_child() = widget_push_composite_child;
extern void gtk_widget_pop_composite_child() = widget_pop_composite_child;
extern void gtk_widget_pop_colormap() = widget_pop_colormap;
extern void gtk_widget_class_install_style_property(GtkWidgetClass*, GParamSpec*) = widget_class_install_style_property;
extern void gtk_widget_class_install_style_property_parser(GtkWidgetClass*, GParamSpec*, void*) = widget_class_install_style_property_parser;
extern GParamSpec* gtk_widget_class_find_style_property(GtkWidgetClass*, char*) = widget_class_find_style_property;
extern GParamSpec** gtk_widget_class_list_style_properties(GtkWidgetClass*, int*) = widget_class_list_style_properties;
extern void gtk_widget_style_get_property(GtkWidget*, char*, GValue*) = widget_style_get_property;
extern void gtk_widget_style_get_valist(GtkWidget*, char*, void*) = widget_style_get_valist;
extern void gtk_widget_style_get(GtkWidget*, char*, ...) = widget_style_get;
extern void gtk_widget_set_default_colormap(GdkColormap*) = widget_set_default_colormap;
extern GtkStyle* gtk_widget_get_default_style() = widget_get_default_style;
extern GdkColormap* gtk_widget_get_default_colormap() = widget_get_default_colormap;
extern GdkVisual* gtk_widget_get_default_visual() = widget_get_default_visual;
extern void gtk_widget_set_direction(GtkWidget*, int) = widget_set_direction;
extern int gtk_widget_get_direction(GtkWidget*) = widget_get_direction;
extern void gtk_widget_set_default_direction(int) = widget_set_default_direction;
extern int gtk_widget_get_default_direction() = widget_get_default_direction;
extern int gtk_widget_is_composited(GtkWidget*) = widget_is_composited;
extern void gtk_widget_shape_combine_mask(GtkWidget*, GdkBitmap*, int, int) = widget_shape_combine_mask;
extern void gtk_widget_input_shape_combine_mask(GtkWidget*, GdkBitmap*, int, int) = widget_input_shape_combine_mask;
extern void gtk_widget_reset_shapes(GtkWidget*) = widget_reset_shapes;
extern void gtk_widget_path(GtkWidget*, int*, char**, char**) = widget_path;
extern void gtk_widget_class_path(GtkWidget*, int*, char**, char**) = widget_class_path;
extern GList* gtk_widget_list_mnemonic_labels(GtkWidget*) = widget_list_mnemonic_labels;
extern void gtk_widget_add_mnemonic_label(GtkWidget*, GtkWidget*) = widget_add_mnemonic_label;
extern void gtk_widget_remove_mnemonic_label(GtkWidget*, GtkWidget*) = widget_remove_mnemonic_label;
extern void gtk_widget_set_tooltip_window(GtkWidget*, GtkWindow*) = widget_set_tooltip_window;
extern GtkWindow* gtk_widget_get_tooltip_window(GtkWidget*) = widget_get_tooltip_window;
extern void gtk_widget_trigger_tooltip_query(GtkWidget*) = widget_trigger_tooltip_query;
extern void gtk_widget_set_tooltip_text(GtkWidget*, char*) = widget_set_tooltip_text;
extern char* gtk_widget_get_tooltip_text(GtkWidget*) = widget_get_tooltip_text;
extern void gtk_widget_set_tooltip_markup(GtkWidget*, char*) = widget_set_tooltip_markup;
extern char* gtk_widget_get_tooltip_markup(GtkWidget*) = widget_get_tooltip_markup;
extern void gtk_widget_set_has_tooltip(GtkWidget*, int) = widget_set_has_tooltip;
extern int gtk_widget_get_has_tooltip(GtkWidget*) = widget_get_has_tooltip;
extern long gtk_requisition_get_type() = requisition_get_type;
extern GtkRequisition* gtk_requisition_copy(GtkRequisition*) = requisition_copy;
extern void gtk_requisition_free(GtkRequisition*) = requisition_free;
extern long gtk_container_get_type() = container_get_type;
extern void gtk_container_set_border_width(GtkContainer*, int) = container_set_border_width;
extern int gtk_container_get_border_width(GtkContainer*) = container_get_border_width;
extern void gtk_container_add(GtkContainer*, GtkWidget*) = container_add;
extern void gtk_container_remove(GtkContainer*, GtkWidget*) = container_remove;
extern void gtk_container_set_resize_mode(GtkContainer*, int) = container_set_resize_mode;
extern int gtk_container_get_resize_mode(GtkContainer*) = container_get_resize_mode;
extern void gtk_container_check_resize(GtkContainer*) = container_check_resize;
extern void gtk_container_foreach(GtkContainer*, void*, void*) = container_foreach;
extern void gtk_container_foreach_full(GtkContainer*, void*, void*, void*, void*) = container_foreach_full;
extern GList* gtk_container_get_children(GtkContainer*) = container_get_children;
extern void gtk_container_propagate_expose(GtkContainer*, GtkWidget*, GdkEventExpose*) = container_propagate_expose;
extern void gtk_container_set_focus_chain(GtkContainer*, GList*) = container_set_focus_chain;
extern int gtk_container_get_focus_chain(GtkContainer*, GList**) = container_get_focus_chain;
extern void gtk_container_unset_focus_chain(GtkContainer*) = container_unset_focus_chain;
extern void gtk_container_set_reallocate_redraws(GtkContainer*, int) = container_set_reallocate_redraws;
extern void gtk_container_set_focus_child(GtkContainer*, GtkWidget*) = container_set_focus_child;
extern GtkWidget* gtk_container_get_focus_child(GtkContainer*) = container_get_focus_child;
extern void gtk_container_set_focus_vadjustment(GtkContainer*, GtkAdjustment*) = container_set_focus_vadjustment;
extern GtkAdjustment* gtk_container_get_focus_vadjustment(GtkContainer*) = container_get_focus_vadjustment;
extern void gtk_container_set_focus_hadjustment(GtkContainer*, GtkAdjustment*) = container_set_focus_hadjustment;
extern GtkAdjustment* gtk_container_get_focus_hadjustment(GtkContainer*) = container_get_focus_hadjustment;
extern void gtk_container_resize_children(GtkContainer*) = container_resize_children;
extern long gtk_container_child_type(GtkContainer*) = container_child_type;
extern void gtk_container_class_install_child_property(GtkContainerClass*, int, GParamSpec*) = container_class_install_child_property;
extern GParamSpec* gtk_container_class_find_child_property(GObjectClass*, char*) = container_class_find_child_property;
extern GParamSpec** gtk_container_class_list_child_properties(GObjectClass*, int*) = container_class_list_child_properties;
extern void gtk_container_add_with_properties(GtkContainer*, GtkWidget*, char*, ...) = container_add_with_properties;
extern void gtk_container_child_set(GtkContainer*, GtkWidget*, char*, ...) = container_child_set;
extern void gtk_container_child_get(GtkContainer*, GtkWidget*, char*, ...) = container_child_get;
extern void gtk_container_child_set_valist(GtkContainer*, GtkWidget*, char*, void*) = container_child_set_valist;
extern void gtk_container_child_get_valist(GtkContainer*, GtkWidget*, char*, void*) = container_child_get_valist;
extern void gtk_container_child_set_property(GtkContainer*, GtkWidget*, char*, GValue*) = container_child_set_property;
extern void gtk_container_child_get_property(GtkContainer*, GtkWidget*, char*, GValue*) = container_child_get_property;
extern void gtk_container_forall(GtkContainer*, void*, void*) = container_forall;
extern long gtk_bin_get_type() = bin_get_type;
extern GtkWidget* gtk_bin_get_child(GtkBin*) = bin_get_child;
extern long gtk_window_get_type() = window_get_type;
extern GtkWidget* gtk_window_new(int) = window_new;
extern void gtk_window_set_title(GtkWindow*, char*) = window_set_title;
extern char* gtk_window_get_title(GtkWindow*) = window_get_title;
extern void gtk_window_set_wmclass(GtkWindow*, char*, char*) = window_set_wmclass;
extern void gtk_window_set_role(GtkWindow*, char*) = window_set_role;
extern void gtk_window_set_startup_id(GtkWindow*, char*) = window_set_startup_id;
extern char* gtk_window_get_role(GtkWindow*) = window_get_role;
extern void gtk_window_add_accel_group(GtkWindow*, GtkAccelGroup*) = window_add_accel_group;
extern void gtk_window_remove_accel_group(GtkWindow*, GtkAccelGroup*) = window_remove_accel_group;
extern void gtk_window_set_position(GtkWindow*, int) = window_set_position;
extern int gtk_window_activate_focus(GtkWindow*) = window_activate_focus;
extern void gtk_window_set_focus(GtkWindow*, GtkWidget*) = window_set_focus;
extern GtkWidget* gtk_window_get_focus(GtkWindow*) = window_get_focus;
extern void gtk_window_set_default(GtkWindow*, GtkWidget*) = window_set_default;
extern GtkWidget* gtk_window_get_default_widget(GtkWindow*) = window_get_default_widget;
extern int gtk_window_activate_default(GtkWindow*) = window_activate_default;
extern void gtk_window_set_transient_for(GtkWindow*, GtkWindow*) = window_set_transient_for;
extern GtkWindow* gtk_window_get_transient_for(GtkWindow*) = window_get_transient_for;
extern void gtk_window_set_opacity(GtkWindow*, double) = window_set_opacity;
extern double gtk_window_get_opacity(GtkWindow*) = window_get_opacity;
extern void gtk_window_set_type_hint(GtkWindow*, int) = window_set_type_hint;
extern int gtk_window_get_type_hint(GtkWindow*) = window_get_type_hint;
extern void gtk_window_set_skip_taskbar_hint(GtkWindow*, int) = window_set_skip_taskbar_hint;
extern int gtk_window_get_skip_taskbar_hint(GtkWindow*) = window_get_skip_taskbar_hint;
extern void gtk_window_set_skip_pager_hint(GtkWindow*, int) = window_set_skip_pager_hint;
extern int gtk_window_get_skip_pager_hint(GtkWindow*) = window_get_skip_pager_hint;
extern void gtk_window_set_urgency_hint(GtkWindow*, int) = window_set_urgency_hint;
extern int gtk_window_get_urgency_hint(GtkWindow*) = window_get_urgency_hint;
extern void gtk_window_set_accept_focus(GtkWindow*, int) = window_set_accept_focus;
extern int gtk_window_get_accept_focus(GtkWindow*) = window_get_accept_focus;
extern void gtk_window_set_focus_on_map(GtkWindow*, int) = window_set_focus_on_map;
extern int gtk_window_get_focus_on_map(GtkWindow*) = window_get_focus_on_map;
extern void gtk_window_set_destroy_with_parent(GtkWindow*, int) = window_set_destroy_with_parent;
extern int gtk_window_get_destroy_with_parent(GtkWindow*) = window_get_destroy_with_parent;
extern void gtk_window_set_resizable(GtkWindow*, int) = window_set_resizable;
extern int gtk_window_get_resizable(GtkWindow*) = window_get_resizable;
extern void gtk_window_set_gravity(GtkWindow*, int) = window_set_gravity;
extern int gtk_window_get_gravity(GtkWindow*) = window_get_gravity;
extern void gtk_window_set_geometry_hints(GtkWindow*, GtkWidget*, GdkGeometry*, int) = window_set_geometry_hints;
extern void gtk_window_set_screen(GtkWindow*, GdkScreen*) = window_set_screen;
extern GdkScreen* gtk_window_get_screen(GtkWindow*) = window_get_screen;
extern int gtk_window_is_active(GtkWindow*) = window_is_active;
extern int gtk_window_has_toplevel_focus(GtkWindow*) = window_has_toplevel_focus;
extern void gtk_window_set_has_frame(GtkWindow*, int) = window_set_has_frame;
extern int gtk_window_get_has_frame(GtkWindow*) = window_get_has_frame;
extern void gtk_window_set_frame_dimensions(GtkWindow*, int, int, int, int) = window_set_frame_dimensions;
extern void gtk_window_get_frame_dimensions(GtkWindow*, int*, int*, int*, int*) = window_get_frame_dimensions;
extern void gtk_window_set_decorated(GtkWindow*, int) = window_set_decorated;
extern int gtk_window_get_decorated(GtkWindow*) = window_get_decorated;
extern void gtk_window_set_deletable(GtkWindow*, int) = window_set_deletable;
extern int gtk_window_get_deletable(GtkWindow*) = window_get_deletable;
extern void gtk_window_set_icon_list(GtkWindow*, GList*) = window_set_icon_list;
extern GList* gtk_window_get_icon_list(GtkWindow*) = window_get_icon_list;
extern void gtk_window_set_icon(GtkWindow*, GdkPixbuf*) = window_set_icon;
extern void gtk_window_set_icon_name(GtkWindow*, char*) = window_set_icon_name;
extern int gtk_window_set_icon_from_file(GtkWindow*, char*, GError**) = window_set_icon_from_file;
extern GdkPixbuf* gtk_window_get_icon(GtkWindow*) = window_get_icon;
extern char* gtk_window_get_icon_name(GtkWindow*) = window_get_icon_name;
extern void gtk_window_set_default_icon_list(GList*) = window_set_default_icon_list;
extern GList* gtk_window_get_default_icon_list() = window_get_default_icon_list;
extern void gtk_window_set_default_icon(GdkPixbuf*) = window_set_default_icon;
extern void gtk_window_set_default_icon_name(char*) = window_set_default_icon_name;
extern int gtk_window_set_default_icon_from_file(char*, GError**) = window_set_default_icon_from_file;
extern void gtk_window_set_auto_startup_notification(int) = window_set_auto_startup_notification;
extern void gtk_window_set_modal(GtkWindow*, int) = window_set_modal;
extern int gtk_window_get_modal(GtkWindow*) = window_get_modal;
extern GList* gtk_window_list_toplevels() = window_list_toplevels;
extern void gtk_window_add_mnemonic(GtkWindow*, int, GtkWidget*) = window_add_mnemonic;
extern void gtk_window_remove_mnemonic(GtkWindow*, int, GtkWidget*) = window_remove_mnemonic;
extern int gtk_window_mnemonic_activate(GtkWindow*, int, int) = window_mnemonic_activate;
extern void gtk_window_set_mnemonic_modifier(GtkWindow*, int) = window_set_mnemonic_modifier;
extern int gtk_window_get_mnemonic_modifier(GtkWindow*) = window_get_mnemonic_modifier;
extern int gtk_window_activate_key(GtkWindow*, GdkEventKey*) = window_activate_key;
extern int gtk_window_propagate_key_event(GtkWindow*, GdkEventKey*) = window_propagate_key_event;
extern void gtk_window_present(GtkWindow*) = window_present;
extern void gtk_window_present_with_time(GtkWindow*, int) = window_present_with_time;
extern void gtk_window_iconify(GtkWindow*) = window_iconify;
extern void gtk_window_deiconify(GtkWindow*) = window_deiconify;
extern void gtk_window_stick(GtkWindow*) = window_stick;
extern void gtk_window_unstick(GtkWindow*) = window_unstick;
extern void gtk_window_maximize(GtkWindow*) = window_maximize;
extern void gtk_window_unmaximize(GtkWindow*) = window_unmaximize;
extern void gtk_window_fullscreen(GtkWindow*) = window_fullscreen;
extern void gtk_window_unfullscreen(GtkWindow*) = window_unfullscreen;
extern void gtk_window_set_keep_above(GtkWindow*, int) = window_set_keep_above;
extern void gtk_window_set_keep_below(GtkWindow*, int) = window_set_keep_below;
extern void gtk_window_begin_resize_drag(GtkWindow*, int, int, int, int, int) = window_begin_resize_drag;
extern void gtk_window_begin_move_drag(GtkWindow*, int, int, int, int) = window_begin_move_drag;
extern void gtk_window_set_policy(GtkWindow*, int, int, int) = window_set_policy;
extern void gtk_window_set_default_size(GtkWindow*, int, int) = window_set_default_size;
extern void gtk_window_get_default_size(GtkWindow*, int*, int*) = window_get_default_size;
extern void gtk_window_resize(GtkWindow*, int, int) = window_resize;
extern void gtk_window_get_size(GtkWindow*, int*, int*) = window_get_size;
extern void gtk_window_move(GtkWindow*, int, int) = window_move;
extern void gtk_window_get_position(GtkWindow*, int*, int*) = window_get_position;
extern int gtk_window_parse_geometry(GtkWindow*, char*) = window_parse_geometry;
extern GtkWindowGroup* gtk_window_get_group(GtkWindow*) = window_get_group;
extern void gtk_window_reshow_with_initial_size(GtkWindow*) = window_reshow_with_initial_size;
extern long gtk_window_group_get_type() = window_group_get_type;
extern GtkWindowGroup* gtk_window_group_new() = window_group_new;
extern void gtk_window_group_add_window(GtkWindowGroup*, GtkWindow*) = window_group_add_window;
extern void gtk_window_group_remove_window(GtkWindowGroup*, GtkWindow*) = window_group_remove_window;
extern GList* gtk_window_group_list_windows(GtkWindowGroup*) = window_group_list_windows;
extern void gtk_window_remove_embedded_xid(GtkWindow*, int) = window_remove_embedded_xid;
extern void gtk_window_add_embedded_xid(GtkWindow*, int) = window_add_embedded_xid;
extern long gtk_dialog_get_type() = dialog_get_type;
extern GtkWidget* gtk_dialog_new() = dialog_new;
extern GtkWidget* gtk_dialog_new_with_buttons(char*, GtkWindow*, int, char*, ...) = dialog_new_with_buttons;
extern void gtk_dialog_add_action_widget(GtkDialog*, GtkWidget*, int) = dialog_add_action_widget;
extern GtkWidget* gtk_dialog_add_button(GtkDialog*, char*, int) = dialog_add_button;
extern void gtk_dialog_add_buttons(GtkDialog*, char*, ...) = dialog_add_buttons;
extern void gtk_dialog_set_response_sensitive(GtkDialog*, int, int) = dialog_set_response_sensitive;
extern void gtk_dialog_set_default_response(GtkDialog*, int) = dialog_set_default_response;
extern int gtk_dialog_get_response_for_widget(GtkDialog*, GtkWidget*) = dialog_get_response_for_widget;
extern void gtk_dialog_set_has_separator(GtkDialog*, int) = dialog_set_has_separator;
extern int gtk_dialog_get_has_separator(GtkDialog*) = dialog_get_has_separator;
extern int gtk_alternative_dialog_button_order(GdkScreen*) = alternative_dialog_button_order;
extern void gtk_dialog_set_alternative_button_order(GtkDialog*, int, ...) = dialog_set_alternative_button_order;
extern void gtk_dialog_set_alternative_button_order_from_array(GtkDialog*, int, int*) = dialog_set_alternative_button_order_from_array;
extern void gtk_dialog_response(GtkDialog*, int) = dialog_response;
extern int gtk_dialog_run(GtkDialog*) = dialog_run;
extern GtkWidget* gtk_dialog_get_action_area(GtkDialog*) = dialog_get_action_area;
extern GtkWidget* gtk_dialog_get_content_area(GtkDialog*) = dialog_get_content_area;
extern long gtk_about_dialog_get_type() = about_dialog_get_type;
extern GtkWidget* gtk_about_dialog_new() = about_dialog_new;
extern void gtk_show_about_dialog(GtkWindow*, char*, ...) = show_about_dialog;
extern char* gtk_about_dialog_get_name(GtkAboutDialog*) = about_dialog_get_name;
extern void gtk_about_dialog_set_name(GtkAboutDialog*, char*) = about_dialog_set_name;
extern char* gtk_about_dialog_get_program_name(GtkAboutDialog*) = about_dialog_get_program_name;
extern void gtk_about_dialog_set_program_name(GtkAboutDialog*, char*) = about_dialog_set_program_name;
extern char* gtk_about_dialog_get_version(GtkAboutDialog*) = about_dialog_get_version;
extern void gtk_about_dialog_set_version(GtkAboutDialog*, char*) = about_dialog_set_version;
extern char* gtk_about_dialog_get_copyright(GtkAboutDialog*) = about_dialog_get_copyright;
extern void gtk_about_dialog_set_copyright(GtkAboutDialog*, char*) = about_dialog_set_copyright;
extern char* gtk_about_dialog_get_comments(GtkAboutDialog*) = about_dialog_get_comments;
extern void gtk_about_dialog_set_comments(GtkAboutDialog*, char*) = about_dialog_set_comments;
extern char* gtk_about_dialog_get_license(GtkAboutDialog*) = about_dialog_get_license;
extern void gtk_about_dialog_set_license(GtkAboutDialog*, char*) = about_dialog_set_license;
extern int gtk_about_dialog_get_wrap_license(GtkAboutDialog*) = about_dialog_get_wrap_license;
extern void gtk_about_dialog_set_wrap_license(GtkAboutDialog*, int) = about_dialog_set_wrap_license;
extern char* gtk_about_dialog_get_website(GtkAboutDialog*) = about_dialog_get_website;
extern void gtk_about_dialog_set_website(GtkAboutDialog*, char*) = about_dialog_set_website;
extern char* gtk_about_dialog_get_website_label(GtkAboutDialog*) = about_dialog_get_website_label;
extern void gtk_about_dialog_set_website_label(GtkAboutDialog*, char*) = about_dialog_set_website_label;
extern char** gtk_about_dialog_get_authors(GtkAboutDialog*) = about_dialog_get_authors;
extern void gtk_about_dialog_set_authors(GtkAboutDialog*, char**) = about_dialog_set_authors;
extern char** gtk_about_dialog_get_documenters(GtkAboutDialog*) = about_dialog_get_documenters;
extern void gtk_about_dialog_set_documenters(GtkAboutDialog*, char**) = about_dialog_set_documenters;
extern char** gtk_about_dialog_get_artists(GtkAboutDialog*) = about_dialog_get_artists;
extern void gtk_about_dialog_set_artists(GtkAboutDialog*, char**) = about_dialog_set_artists;
extern char* gtk_about_dialog_get_translator_credits(GtkAboutDialog*) = about_dialog_get_translator_credits;
extern void gtk_about_dialog_set_translator_credits(GtkAboutDialog*, char*) = about_dialog_set_translator_credits;
extern GdkPixbuf* gtk_about_dialog_get_logo(GtkAboutDialog*) = about_dialog_get_logo;
extern void gtk_about_dialog_set_logo(GtkAboutDialog*, GdkPixbuf*) = about_dialog_set_logo;
extern char* gtk_about_dialog_get_logo_icon_name(GtkAboutDialog*) = about_dialog_get_logo_icon_name;
extern void gtk_about_dialog_set_logo_icon_name(GtkAboutDialog*, char*) = about_dialog_set_logo_icon_name;
extern void* gtk_about_dialog_set_email_hook(void*, void*, void*) = about_dialog_set_email_hook;
extern void* gtk_about_dialog_set_url_hook(void*, void*, void*) = about_dialog_set_url_hook;
extern long gtk_misc_get_type() = misc_get_type;
extern void gtk_misc_set_alignment(GtkMisc*, float, float) = misc_set_alignment;
extern void gtk_misc_get_alignment(GtkMisc*, float*, float*) = misc_get_alignment;
extern void gtk_misc_set_padding(GtkMisc*, int, int) = misc_set_padding;
extern void gtk_misc_get_padding(GtkMisc*, int*, int*) = misc_get_padding;
extern long gtk_menu_shell_get_type() = menu_shell_get_type;
extern void gtk_menu_shell_append(GtkMenuShell*, GtkWidget*) = menu_shell_append;
extern void gtk_menu_shell_prepend(GtkMenuShell*, GtkWidget*) = menu_shell_prepend;
extern void gtk_menu_shell_insert(GtkMenuShell*, GtkWidget*, int) = menu_shell_insert;
extern void gtk_menu_shell_deactivate(GtkMenuShell*) = menu_shell_deactivate;
extern void gtk_menu_shell_select_item(GtkMenuShell*, GtkWidget*) = menu_shell_select_item;
extern void gtk_menu_shell_deselect(GtkMenuShell*) = menu_shell_deselect;
extern void gtk_menu_shell_activate_item(GtkMenuShell*, GtkWidget*, int) = menu_shell_activate_item;
extern void gtk_menu_shell_select_first(GtkMenuShell*, int) = menu_shell_select_first;
extern void gtk_menu_shell_cancel(GtkMenuShell*) = menu_shell_cancel;
extern int gtk_menu_shell_get_take_focus(GtkMenuShell*) = menu_shell_get_take_focus;
extern void gtk_menu_shell_set_take_focus(GtkMenuShell*, int) = menu_shell_set_take_focus;
extern long gtk_menu_get_type() = menu_get_type;
extern GtkWidget* gtk_menu_new() = menu_new;
extern void gtk_menu_popup(GtkMenu*, GtkWidget*, GtkWidget*, void*, void*, int, int) = menu_popup;
extern void gtk_menu_reposition(GtkMenu*) = menu_reposition;
extern void gtk_menu_popdown(GtkMenu*) = menu_popdown;
extern GtkWidget* gtk_menu_get_active(GtkMenu*) = menu_get_active;
extern void gtk_menu_set_active(GtkMenu*, int) = menu_set_active;
extern void gtk_menu_set_accel_group(GtkMenu*, GtkAccelGroup*) = menu_set_accel_group;
extern GtkAccelGroup* gtk_menu_get_accel_group(GtkMenu*) = menu_get_accel_group;
extern void gtk_menu_set_accel_path(GtkMenu*, char*) = menu_set_accel_path;
extern char* gtk_menu_get_accel_path(GtkMenu*) = menu_get_accel_path;
extern void gtk_menu_attach_to_widget(GtkMenu*, GtkWidget*, void*) = menu_attach_to_widget;
extern void gtk_menu_detach(GtkMenu*) = menu_detach;
extern GtkWidget* gtk_menu_get_attach_widget(GtkMenu*) = menu_get_attach_widget;
extern void gtk_menu_set_tearoff_state(GtkMenu*, int) = menu_set_tearoff_state;
extern int gtk_menu_get_tearoff_state(GtkMenu*) = menu_get_tearoff_state;
extern void gtk_menu_set_title(GtkMenu*, char*) = menu_set_title;
extern char* gtk_menu_get_title(GtkMenu*) = menu_get_title;
extern void gtk_menu_reorder_child(GtkMenu*, GtkWidget*, int) = menu_reorder_child;
extern void gtk_menu_set_screen(GtkMenu*, GdkScreen*) = menu_set_screen;
extern void gtk_menu_attach(GtkMenu*, GtkWidget*, int, int, int, int) = menu_attach;
extern void gtk_menu_set_monitor(GtkMenu*, int) = menu_set_monitor;
extern int gtk_menu_get_monitor(GtkMenu*) = menu_get_monitor;
extern GList* gtk_menu_get_for_attach_widget(GtkWidget*) = menu_get_for_attach_widget;
extern long gtk_label_get_type() = label_get_type;
extern GtkWidget* gtk_label_new(char*) = label_new;
extern GtkWidget* gtk_label_new_with_mnemonic(char*) = label_new_with_mnemonic;
extern void gtk_label_set_text(GtkLabel*, char*) = label_set_text;
extern char* gtk_label_get_text(GtkLabel*) = label_get_text;
extern void gtk_label_set_attributes(GtkLabel*, PangoAttrList*) = label_set_attributes;
extern PangoAttrList* gtk_label_get_attributes(GtkLabel*) = label_get_attributes;
extern void gtk_label_set_label(GtkLabel*, char*) = label_set_label;
extern char* gtk_label_get_label(GtkLabel*) = label_get_label;
extern void gtk_label_set_markup(GtkLabel*, char*) = label_set_markup;
extern void gtk_label_set_use_markup(GtkLabel*, int) = label_set_use_markup;
extern int gtk_label_get_use_markup(GtkLabel*) = label_get_use_markup;
extern void gtk_label_set_use_underline(GtkLabel*, int) = label_set_use_underline;
extern int gtk_label_get_use_underline(GtkLabel*) = label_get_use_underline;
extern void gtk_label_set_markup_with_mnemonic(GtkLabel*, char*) = label_set_markup_with_mnemonic;
extern int gtk_label_get_mnemonic_keyval(GtkLabel*) = label_get_mnemonic_keyval;
extern void gtk_label_set_mnemonic_widget(GtkLabel*, GtkWidget*) = label_set_mnemonic_widget;
extern GtkWidget* gtk_label_get_mnemonic_widget(GtkLabel*) = label_get_mnemonic_widget;
extern void gtk_label_set_text_with_mnemonic(GtkLabel*, char*) = label_set_text_with_mnemonic;
extern void gtk_label_set_justify(GtkLabel*, int) = label_set_justify;
extern int gtk_label_get_justify(GtkLabel*) = label_get_justify;
extern void gtk_label_set_ellipsize(GtkLabel*, int) = label_set_ellipsize;
extern int gtk_label_get_ellipsize(GtkLabel*) = label_get_ellipsize;
extern void gtk_label_set_width_chars(GtkLabel*, int) = label_set_width_chars;
extern int gtk_label_get_width_chars(GtkLabel*) = label_get_width_chars;
extern void gtk_label_set_max_width_chars(GtkLabel*, int) = label_set_max_width_chars;
extern int gtk_label_get_max_width_chars(GtkLabel*) = label_get_max_width_chars;
extern void gtk_label_set_pattern(GtkLabel*, char*) = label_set_pattern;
extern void gtk_label_set_line_wrap(GtkLabel*, int) = label_set_line_wrap;
extern int gtk_label_get_line_wrap(GtkLabel*) = label_get_line_wrap;
extern void gtk_label_set_line_wrap_mode(GtkLabel*, int) = label_set_line_wrap_mode;
extern int gtk_label_get_line_wrap_mode(GtkLabel*) = label_get_line_wrap_mode;
extern void gtk_label_set_selectable(GtkLabel*, int) = label_set_selectable;
extern int gtk_label_get_selectable(GtkLabel*) = label_get_selectable;
extern void gtk_label_set_angle(GtkLabel*, double) = label_set_angle;
extern double gtk_label_get_angle(GtkLabel*) = label_get_angle;
extern void gtk_label_select_region(GtkLabel*, int, int) = label_select_region;
extern int gtk_label_get_selection_bounds(GtkLabel*, int*, int*) = label_get_selection_bounds;
extern PangoLayout* gtk_label_get_layout(GtkLabel*) = label_get_layout;
extern void gtk_label_get_layout_offsets(GtkLabel*, int*, int*) = label_get_layout_offsets;
extern void gtk_label_set_single_line_mode(GtkLabel*, int) = label_set_single_line_mode;
extern int gtk_label_get_single_line_mode(GtkLabel*) = label_get_single_line_mode;
extern void gtk_label_get(GtkLabel*, char**) = label_get;
extern int gtk_label_parse_uline(GtkLabel*, char*) = label_parse_uline;
extern long gtk_accel_label_get_type() = accel_label_get_type;
extern GtkWidget* gtk_accel_label_new(char*) = accel_label_new;
extern GtkWidget* gtk_accel_label_get_accel_widget(GtkAccelLabel*) = accel_label_get_accel_widget;
extern int gtk_accel_label_get_accel_width(GtkAccelLabel*) = accel_label_get_accel_width;
extern void gtk_accel_label_set_accel_widget(GtkAccelLabel*, GtkWidget*) = accel_label_set_accel_widget;
extern void gtk_accel_label_set_accel_closure(GtkAccelLabel*, GClosure*) = accel_label_set_accel_closure;
extern int gtk_accel_label_refetch(GtkAccelLabel*) = accel_label_refetch;
extern void gtk_accel_map_add_entry(char*, int, int) = accel_map_add_entry;
extern int gtk_accel_map_lookup_entry(char*, GtkAccelKey*) = accel_map_lookup_entry;
extern int gtk_accel_map_change_entry(char*, int, int, int) = accel_map_change_entry;
extern void gtk_accel_map_load(char*) = accel_map_load;
extern void gtk_accel_map_save(char*) = accel_map_save;
extern void gtk_accel_map_foreach(void*, void*) = accel_map_foreach;
extern void gtk_accel_map_load_fd(int) = accel_map_load_fd;
extern void gtk_accel_map_load_scanner(GScanner*) = accel_map_load_scanner;
extern void gtk_accel_map_save_fd(int) = accel_map_save_fd;
extern void gtk_accel_map_lock_path(char*) = accel_map_lock_path;
extern void gtk_accel_map_unlock_path(char*) = accel_map_unlock_path;
extern void gtk_accel_map_add_filter(char*) = accel_map_add_filter;
extern void gtk_accel_map_foreach_unfiltered(void*, void*) = accel_map_foreach_unfiltered;
extern long gtk_accel_map_get_type() = accel_map_get_type;
extern GtkAccelMap* gtk_accel_map_get() = accel_map_get;
extern long gtk_accessible_get_type() = accessible_get_type;
extern void gtk_accessible_connect_widget_destroyed(GtkAccessible*) = accessible_connect_widget_destroyed;
extern long gtk_action_get_type() = action_get_type;
extern GtkAction* gtk_action_new(char*, char*, char*, char*) = action_new;
extern char* gtk_action_get_name(GtkAction*) = action_get_name;
extern int gtk_action_is_sensitive(GtkAction*) = action_is_sensitive;
extern int gtk_action_get_sensitive(GtkAction*) = action_get_sensitive;
extern void gtk_action_set_sensitive(GtkAction*, int) = action_set_sensitive;
extern int gtk_action_is_visible(GtkAction*) = action_is_visible;
extern int gtk_action_get_visible(GtkAction*) = action_get_visible;
extern void gtk_action_set_visible(GtkAction*, int) = action_set_visible;
extern void gtk_action_activate(GtkAction*) = action_activate;
extern GtkWidget* gtk_action_create_icon(GtkAction*, int) = action_create_icon;
extern GtkWidget* gtk_action_create_menu_item(GtkAction*) = action_create_menu_item;
extern GtkWidget* gtk_action_create_tool_item(GtkAction*) = action_create_tool_item;
extern GtkWidget* gtk_action_create_menu(GtkAction*) = action_create_menu;
extern void gtk_action_connect_proxy(GtkAction*, GtkWidget*) = action_connect_proxy;
extern void gtk_action_disconnect_proxy(GtkAction*, GtkWidget*) = action_disconnect_proxy;
extern GSList* gtk_action_get_proxies(GtkAction*) = action_get_proxies;
extern GtkAction* gtk_widget_get_action(GtkWidget*) = widget_get_action;
extern void gtk_action_connect_accelerator(GtkAction*) = action_connect_accelerator;
extern void gtk_action_disconnect_accelerator(GtkAction*) = action_disconnect_accelerator;
extern char* gtk_action_get_accel_path(GtkAction*) = action_get_accel_path;
extern GClosure* gtk_action_get_accel_closure(GtkAction*) = action_get_accel_closure;
extern void gtk_action_block_activate_from(GtkAction*, GtkWidget*) = action_block_activate_from;
extern void gtk_action_unblock_activate_from(GtkAction*, GtkWidget*) = action_unblock_activate_from;
extern void gtk_action_set_accel_path(GtkAction*, char*) = action_set_accel_path;
extern void gtk_action_set_accel_group(GtkAction*, GtkAccelGroup*) = action_set_accel_group;
extern long gtk_action_group_get_type() = action_group_get_type;
extern GtkActionGroup* gtk_action_group_new(char*) = action_group_new;
extern char* gtk_action_group_get_name(GtkActionGroup*) = action_group_get_name;
extern int gtk_action_group_get_sensitive(GtkActionGroup*) = action_group_get_sensitive;
extern void gtk_action_group_set_sensitive(GtkActionGroup*, int) = action_group_set_sensitive;
extern int gtk_action_group_get_visible(GtkActionGroup*) = action_group_get_visible;
extern void gtk_action_group_set_visible(GtkActionGroup*, int) = action_group_set_visible;
extern GtkAction* gtk_action_group_get_action(GtkActionGroup*, char*) = action_group_get_action;
extern GList* gtk_action_group_list_actions(GtkActionGroup*) = action_group_list_actions;
extern void gtk_action_group_add_action(GtkActionGroup*, GtkAction*) = action_group_add_action;
extern void gtk_action_group_add_action_with_accel(GtkActionGroup*, GtkAction*, char*) = action_group_add_action_with_accel;
extern void gtk_action_group_remove_action(GtkActionGroup*, GtkAction*) = action_group_remove_action;
extern void gtk_action_group_add_actions(GtkActionGroup*, GtkActionEntry*, int, void*) = action_group_add_actions;
extern void gtk_action_group_add_toggle_actions(GtkActionGroup*, GtkToggleActionEntry*, int, void*) = action_group_add_toggle_actions;
extern void gtk_action_group_add_radio_actions(GtkActionGroup*, GtkRadioActionEntry*, int, int, void*, void*) = action_group_add_radio_actions;
extern void gtk_action_group_add_actions_full(GtkActionGroup*, GtkActionEntry*, int, void*, void*) = action_group_add_actions_full;
extern void gtk_action_group_add_toggle_actions_full(GtkActionGroup*, GtkToggleActionEntry*, int, void*, void*) = action_group_add_toggle_actions_full;
extern void gtk_action_group_add_radio_actions_full(GtkActionGroup*, GtkRadioActionEntry*, int, int, void*, void*, void*) = action_group_add_radio_actions_full;
extern void gtk_action_group_set_translate_func(GtkActionGroup*, void*, void*, void*) = action_group_set_translate_func;
extern void gtk_action_group_set_translation_domain(GtkActionGroup*, char*) = action_group_set_translation_domain;
extern char* gtk_action_group_translate_string(GtkActionGroup*, char*) = action_group_translate_string;
extern long gtk_alignment_get_type() = alignment_get_type;
extern GtkWidget* gtk_alignment_new(float, float, float, float) = alignment_new;
extern void gtk_alignment_set(GtkAlignment*, float, float, float, float) = alignment_set;
extern void gtk_alignment_set_padding(GtkAlignment*, int, int, int, int) = alignment_set_padding;
extern void gtk_alignment_get_padding(GtkAlignment*, int*, int*, int*, int*) = alignment_get_padding;
extern long gtk_arrow_get_type() = arrow_get_type;
extern GtkWidget* gtk_arrow_new(int, int) = arrow_new;
extern void gtk_arrow_set(GtkArrow*, int, int) = arrow_set;
extern long gtk_frame_get_type() = frame_get_type;
extern GtkWidget* gtk_frame_new(char*) = frame_new;
extern void gtk_frame_set_label(GtkFrame*, char*) = frame_set_label;
extern char* gtk_frame_get_label(GtkFrame*) = frame_get_label;
extern void gtk_frame_set_label_widget(GtkFrame*, GtkWidget*) = frame_set_label_widget;
extern GtkWidget* gtk_frame_get_label_widget(GtkFrame*) = frame_get_label_widget;
extern void gtk_frame_set_label_align(GtkFrame*, float, float) = frame_set_label_align;
extern void gtk_frame_get_label_align(GtkFrame*, float*, float*) = frame_get_label_align;
extern void gtk_frame_set_shadow_type(GtkFrame*, int) = frame_set_shadow_type;
extern int gtk_frame_get_shadow_type(GtkFrame*) = frame_get_shadow_type;
extern long gtk_aspect_frame_get_type() = aspect_frame_get_type;
extern GtkWidget* gtk_aspect_frame_new(char*, float, float, float, int) = aspect_frame_new;
extern void gtk_aspect_frame_set(GtkAspectFrame*, float, float, float, int) = aspect_frame_set;
extern long gtk_assistant_get_type() = assistant_get_type;
extern GtkWidget* gtk_assistant_new() = assistant_new;
extern int gtk_assistant_get_current_page(GtkAssistant*) = assistant_get_current_page;
extern void gtk_assistant_set_current_page(GtkAssistant*, int) = assistant_set_current_page;
extern int gtk_assistant_get_n_pages(GtkAssistant*) = assistant_get_n_pages;
extern GtkWidget* gtk_assistant_get_nth_page(GtkAssistant*, int) = assistant_get_nth_page;
extern int gtk_assistant_prepend_page(GtkAssistant*, GtkWidget*) = assistant_prepend_page;
extern int gtk_assistant_append_page(GtkAssistant*, GtkWidget*) = assistant_append_page;
extern int gtk_assistant_insert_page(GtkAssistant*, GtkWidget*, int) = assistant_insert_page;
extern void gtk_assistant_set_forward_page_func(GtkAssistant*, void*, void*, void*) = assistant_set_forward_page_func;
extern void gtk_assistant_set_page_type(GtkAssistant*, GtkWidget*, int) = assistant_set_page_type;
extern int gtk_assistant_get_page_type(GtkAssistant*, GtkWidget*) = assistant_get_page_type;
extern void gtk_assistant_set_page_title(GtkAssistant*, GtkWidget*, char*) = assistant_set_page_title;
extern char* gtk_assistant_get_page_title(GtkAssistant*, GtkWidget*) = assistant_get_page_title;
extern void gtk_assistant_set_page_header_image(GtkAssistant*, GtkWidget*, GdkPixbuf*) = assistant_set_page_header_image;
extern GdkPixbuf* gtk_assistant_get_page_header_image(GtkAssistant*, GtkWidget*) = assistant_get_page_header_image;
extern void gtk_assistant_set_page_side_image(GtkAssistant*, GtkWidget*, GdkPixbuf*) = assistant_set_page_side_image;
extern GdkPixbuf* gtk_assistant_get_page_side_image(GtkAssistant*, GtkWidget*) = assistant_get_page_side_image;
extern void gtk_assistant_set_page_complete(GtkAssistant*, GtkWidget*, int) = assistant_set_page_complete;
extern int gtk_assistant_get_page_complete(GtkAssistant*, GtkWidget*) = assistant_get_page_complete;
extern void gtk_assistant_add_action_widget(GtkAssistant*, GtkWidget*) = assistant_add_action_widget;
extern void gtk_assistant_remove_action_widget(GtkAssistant*, GtkWidget*) = assistant_remove_action_widget;
extern void gtk_assistant_update_buttons_state(GtkAssistant*) = assistant_update_buttons_state;
extern long gtk_box_get_type() = box_get_type;
extern void gtk_box_pack_start(GtkBox*, GtkWidget*, int, int, int) = box_pack_start;
extern void gtk_box_pack_end(GtkBox*, GtkWidget*, int, int, int) = box_pack_end;
extern void gtk_box_pack_start_defaults(GtkBox*, GtkWidget*) = box_pack_start_defaults;
extern void gtk_box_pack_end_defaults(GtkBox*, GtkWidget*) = box_pack_end_defaults;
extern void gtk_box_set_homogeneous(GtkBox*, int) = box_set_homogeneous;
extern int gtk_box_get_homogeneous(GtkBox*) = box_get_homogeneous;
extern void gtk_box_set_spacing(GtkBox*, int) = box_set_spacing;
extern int gtk_box_get_spacing(GtkBox*) = box_get_spacing;
extern void gtk_box_reorder_child(GtkBox*, GtkWidget*, int) = box_reorder_child;
extern void gtk_box_query_child_packing(GtkBox*, GtkWidget*, int*, int*, int*, int*) = box_query_child_packing;
extern void gtk_box_set_child_packing(GtkBox*, GtkWidget*, int, int, int, int) = box_set_child_packing;
extern long gtk_button_box_get_type() = button_box_get_type;
extern int gtk_button_box_get_layout(GtkButtonBox*) = button_box_get_layout;
extern void gtk_button_box_set_layout(GtkButtonBox*, int) = button_box_set_layout;
extern int gtk_button_box_get_child_secondary(GtkButtonBox*, GtkWidget*) = button_box_get_child_secondary;
extern void gtk_button_box_set_child_secondary(GtkButtonBox*, GtkWidget*, int) = button_box_set_child_secondary;
extern void gtk_button_box_set_child_size(GtkButtonBox*, int, int) = button_box_set_child_size;
extern void gtk_button_box_set_child_ipadding(GtkButtonBox*, int, int) = button_box_set_child_ipadding;
extern void gtk_button_box_get_child_size(GtkButtonBox*, int*, int*) = button_box_get_child_size;
extern void gtk_button_box_get_child_ipadding(GtkButtonBox*, int*, int*) = button_box_get_child_ipadding;
extern GtkBindingSet* gtk_binding_set_new(char*) = binding_set_new;
extern GtkBindingSet* gtk_binding_set_by_class(void*) = binding_set_by_class;
extern GtkBindingSet* gtk_binding_set_find(char*) = binding_set_find;
extern int gtk_bindings_activate(GtkObject*, int, int) = bindings_activate;
extern int gtk_bindings_activate_event(GtkObject*, GdkEventKey*) = bindings_activate_event;
extern int gtk_binding_set_activate(GtkBindingSet*, int, int, GtkObject*) = binding_set_activate;
extern void gtk_binding_entry_clear(GtkBindingSet*, int, int) = binding_entry_clear;
extern void gtk_binding_entry_add_signall(GtkBindingSet*, int, int, char*, GSList*) = binding_entry_add_signall;
extern int gtk_binding_parse_binding(GScanner*) = binding_parse_binding;
extern void gtk_binding_entry_skip(GtkBindingSet*, int, int) = binding_entry_skip;
extern void gtk_binding_entry_add_signal(GtkBindingSet*, int, int, char*, int, ...) = binding_entry_add_signal;
extern void gtk_binding_entry_remove(GtkBindingSet*, int, int) = binding_entry_remove;
extern void gtk_binding_set_add_path(GtkBindingSet*, int, char*, int) = binding_set_add_path;
extern int gtk_builder_error_quark() = builder_error_quark;
extern long gtk_builder_get_type() = builder_get_type;
extern GtkBuilder* gtk_builder_new() = builder_new;
extern int gtk_builder_add_from_file(GtkBuilder*, char*, GError**) = builder_add_from_file;
extern int gtk_builder_add_from_string(GtkBuilder*, char*, long, GError**) = builder_add_from_string;
extern int gtk_builder_add_objects_from_file(GtkBuilder*, char*, char**, GError**) = builder_add_objects_from_file;
extern int gtk_builder_add_objects_from_string(GtkBuilder*, char*, long, char**, GError**) = builder_add_objects_from_string;
extern GObject* gtk_builder_get_object(GtkBuilder*, char*) = builder_get_object;
extern GSList* gtk_builder_get_objects(GtkBuilder*) = builder_get_objects;
extern void gtk_builder_connect_signals(GtkBuilder*, void*) = builder_connect_signals;
extern void gtk_builder_connect_signals_full(GtkBuilder*, void*, void*) = builder_connect_signals_full;
extern void gtk_builder_set_translation_domain(GtkBuilder*, char*) = builder_set_translation_domain;
extern char* gtk_builder_get_translation_domain(GtkBuilder*) = builder_get_translation_domain;
extern long gtk_builder_get_type_from_name(GtkBuilder*, char*) = builder_get_type_from_name;
extern int gtk_builder_value_from_string(GtkBuilder*, GParamSpec*, char*, GValue*, GError**) = builder_value_from_string;
extern int gtk_builder_value_from_string_type(GtkBuilder*, long, char*, GValue*, GError**) = builder_value_from_string_type;
extern long gtk_buildable_get_type() = buildable_get_type;
extern void gtk_buildable_set_name(GtkBuildable*, char*) = buildable_set_name;
extern char* gtk_buildable_get_name(GtkBuildable*) = buildable_get_name;
extern void gtk_buildable_add_child(GtkBuildable*, GtkBuilder*, GObject*, char*) = buildable_add_child;
extern void gtk_buildable_set_buildable_property(GtkBuildable*, GtkBuilder*, char*, GValue*) = buildable_set_buildable_property;
extern GObject* gtk_buildable_construct_child(GtkBuildable*, GtkBuilder*, char*) = buildable_construct_child;
extern int gtk_buildable_custom_tag_start(GtkBuildable*, GtkBuilder*, GObject*, char*, GMarkupParser*, void**) = buildable_custom_tag_start;
extern void gtk_buildable_custom_tag_end(GtkBuildable*, GtkBuilder*, GObject*, char*, void**) = buildable_custom_tag_end;
extern void gtk_buildable_custom_finished(GtkBuildable*, GtkBuilder*, GObject*, char*, void*) = buildable_custom_finished;
extern void gtk_buildable_parser_finished(GtkBuildable*, GtkBuilder*) = buildable_parser_finished;
extern GObject* gtk_buildable_get_internal_child(GtkBuildable*, GtkBuilder*, char*) = buildable_get_internal_child;
extern long gtk_image_get_type() = image_get_type;
extern GtkWidget* gtk_image_new() = image_new;
extern GtkWidget* gtk_image_new_from_pixmap(GdkPixmap*, GdkBitmap*) = image_new_from_pixmap;
extern GtkWidget* gtk_image_new_from_image(GdkImage*, GdkBitmap*) = image_new_from_image;
extern GtkWidget* gtk_image_new_from_file(char*) = image_new_from_file;
extern GtkWidget* gtk_image_new_from_pixbuf(GdkPixbuf*) = image_new_from_pixbuf;
extern GtkWidget* gtk_image_new_from_stock(char*, int) = image_new_from_stock;
extern GtkWidget* gtk_image_new_from_icon_set(GtkIconSet*, int) = image_new_from_icon_set;
extern GtkWidget* gtk_image_new_from_animation(GdkPixbufAnimation*) = image_new_from_animation;
extern GtkWidget* gtk_image_new_from_icon_name(char*, int) = image_new_from_icon_name;
extern GtkWidget* gtk_image_new_from_gicon(GIcon*, int) = image_new_from_gicon;
extern void gtk_image_clear(GtkImage*) = image_clear;
extern void gtk_image_set_from_pixmap(GtkImage*, GdkPixmap*, GdkBitmap*) = image_set_from_pixmap;
extern void gtk_image_set_from_image(GtkImage*, GdkImage*, GdkBitmap*) = image_set_from_image;
extern void gtk_image_set_from_file(GtkImage*, char*) = image_set_from_file;
extern void gtk_image_set_from_pixbuf(GtkImage*, GdkPixbuf*) = image_set_from_pixbuf;
extern void gtk_image_set_from_stock(GtkImage*, char*, int) = image_set_from_stock;
extern void gtk_image_set_from_icon_set(GtkImage*, GtkIconSet*, int) = image_set_from_icon_set;
extern void gtk_image_set_from_animation(GtkImage*, GdkPixbufAnimation*) = image_set_from_animation;
extern void gtk_image_set_from_icon_name(GtkImage*, char*, int) = image_set_from_icon_name;
extern void gtk_image_set_from_gicon(GtkImage*, GIcon*, int) = image_set_from_gicon;
extern void gtk_image_set_pixel_size(GtkImage*, int) = image_set_pixel_size;
extern int gtk_image_get_storage_type(GtkImage*) = image_get_storage_type;
extern void gtk_image_get_pixmap(GtkImage*, GdkPixmap**, GdkBitmap**) = image_get_pixmap;
extern void gtk_image_get_image(GtkImage*, GdkImage**, GdkBitmap**) = image_get_image;
extern GdkPixbuf* gtk_image_get_pixbuf(GtkImage*) = image_get_pixbuf;
extern void gtk_image_get_stock(GtkImage*, char**, int*) = image_get_stock;
extern void gtk_image_get_icon_set(GtkImage*, GtkIconSet**, int*) = image_get_icon_set;
extern GdkPixbufAnimation* gtk_image_get_animation(GtkImage*) = image_get_animation;
extern void gtk_image_get_icon_name(GtkImage*, char**, int*) = image_get_icon_name;
extern void gtk_image_get_gicon(GtkImage*, GIcon**, int*) = image_get_gicon;
extern int gtk_image_get_pixel_size(GtkImage*) = image_get_pixel_size;
extern void gtk_image_set(GtkImage*, GdkImage*, GdkBitmap*) = image_set;
extern void gtk_image_get(GtkImage*, GdkImage**, GdkBitmap**) = image_get;
extern long gtk_button_get_type() = button_get_type;
extern GtkWidget* gtk_button_new() = button_new;
extern GtkWidget* gtk_button_new_with_label(char*) = button_new_with_label;
extern GtkWidget* gtk_button_new_from_stock(char*) = button_new_from_stock;
extern GtkWidget* gtk_button_new_with_mnemonic(char*) = button_new_with_mnemonic;
extern void gtk_button_pressed(GtkButton*) = button_pressed;
extern void gtk_button_released(GtkButton*) = button_released;
extern void gtk_button_clicked(GtkButton*) = button_clicked;
extern void gtk_button_enter(GtkButton*) = button_enter;
extern void gtk_button_leave(GtkButton*) = button_leave;
extern void gtk_button_set_relief(GtkButton*, int) = button_set_relief;
extern int gtk_button_get_relief(GtkButton*) = button_get_relief;
extern void gtk_button_set_label(GtkButton*, char*) = button_set_label;
extern char* gtk_button_get_label(GtkButton*) = button_get_label;
extern void gtk_button_set_use_underline(GtkButton*, int) = button_set_use_underline;
extern int gtk_button_get_use_underline(GtkButton*) = button_get_use_underline;
extern void gtk_button_set_use_stock(GtkButton*, int) = button_set_use_stock;
extern int gtk_button_get_use_stock(GtkButton*) = button_get_use_stock;
extern void gtk_button_set_focus_on_click(GtkButton*, int) = button_set_focus_on_click;
extern int gtk_button_get_focus_on_click(GtkButton*) = button_get_focus_on_click;
extern void gtk_button_set_alignment(GtkButton*, float, float) = button_set_alignment;
extern void gtk_button_get_alignment(GtkButton*, float*, float*) = button_get_alignment;
extern void gtk_button_set_image(GtkButton*, GtkWidget*) = button_set_image;
extern GtkWidget* gtk_button_get_image(GtkButton*) = button_get_image;
extern void gtk_button_set_image_position(GtkButton*, int) = button_set_image_position;
extern int gtk_button_get_image_position(GtkButton*) = button_get_image_position;
extern void gtk_marshal_BOOLEAN__VOID(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__VOID;
extern void gtk_marshal_BOOLEAN__POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__POINTER;
extern void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__POINTER_POINTER_INT_INT;
extern void gtk_marshal_BOOLEAN__POINTER_INT_INT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__POINTER_INT_INT;
extern void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__POINTER_INT_INT_UINT;
extern void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_BOOLEAN__POINTER_STRING_STRING_POINTER;
extern void gtk_marshal_ENUM__ENUM(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_ENUM__ENUM;
extern void gtk_marshal_INT__POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_INT__POINTER;
extern void gtk_marshal_INT__POINTER_CHAR_CHAR(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_INT__POINTER_CHAR_CHAR;
extern void gtk_marshal_VOID__ENUM_FLOAT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__ENUM_FLOAT;
extern void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__ENUM_FLOAT_BOOLEAN;
extern void gtk_marshal_VOID__INT_INT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__INT_INT;
extern void gtk_marshal_VOID__INT_INT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__INT_INT_POINTER;
extern void gtk_marshal_VOID__POINTER_INT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_INT;
extern void gtk_marshal_VOID__POINTER_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_POINTER;
extern void gtk_marshal_VOID__POINTER_POINTER_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_POINTER_POINTER;
extern void gtk_marshal_VOID__POINTER_STRING_STRING(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_STRING_STRING;
extern void gtk_marshal_VOID__POINTER_UINT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_UINT;
extern void gtk_marshal_VOID__POINTER_UINT_ENUM(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_UINT_ENUM;
extern void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_POINTER_UINT_UINT;
extern void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT;
extern void gtk_marshal_VOID__POINTER_UINT_UINT(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__POINTER_UINT_UINT;
extern void gtk_marshal_VOID__STRING_INT_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__STRING_INT_POINTER;
extern void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER;
extern void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__UINT_POINTER_UINT_UINT_ENUM;
extern void gtk_marshal_VOID__UINT_STRING(GClosure*, GValue*, int, GValue*, void*, void*) = marshal_VOID__UINT_STRING;
extern int gtk_signal_newv(char*, int, long, int, void*, long, int, long*) = signal_newv;
extern int gtk_signal_new(char*, int, long, int, void*, long, int, ...) = signal_new;
extern void gtk_signal_emit_stop_by_name(GtkObject*, char*) = signal_emit_stop_by_name;
extern void gtk_signal_connect_object_while_alive(GtkObject*, char*, void*, GtkObject*) = signal_connect_object_while_alive;
extern void gtk_signal_connect_while_alive(GtkObject*, char*, void*, void*, GtkObject*) = signal_connect_while_alive;
extern long gtk_signal_connect_full(GtkObject*, char*, void*, void*, void*, void*, int, int) = signal_connect_full;
extern void gtk_signal_emitv(GtkObject*, int, GtkArg*) = signal_emitv;
extern void gtk_signal_emit(GtkObject*, int, ...) = signal_emit;
extern void gtk_signal_emit_by_name(GtkObject*, char*, ...) = signal_emit_by_name;
extern void gtk_signal_emitv_by_name(GtkObject*, char*, GtkArg*) = signal_emitv_by_name;
extern void gtk_signal_compat_matched(GtkObject*, void*, void*, int, int) = signal_compat_matched;
extern long gtk_calendar_get_type() = calendar_get_type;
extern GtkWidget* gtk_calendar_new() = calendar_new;
extern int gtk_calendar_select_month(GtkCalendar*, int, int) = calendar_select_month;
extern void gtk_calendar_select_day(GtkCalendar*, int) = calendar_select_day;
extern int gtk_calendar_mark_day(GtkCalendar*, int) = calendar_mark_day;
extern int gtk_calendar_unmark_day(GtkCalendar*, int) = calendar_unmark_day;
extern void gtk_calendar_clear_marks(GtkCalendar*) = calendar_clear_marks;
extern void gtk_calendar_set_display_options(GtkCalendar*, int) = calendar_set_display_options;
extern int gtk_calendar_get_display_options(GtkCalendar*) = calendar_get_display_options;
extern void gtk_calendar_display_options(GtkCalendar*, int) = calendar_display_options;
extern void gtk_calendar_get_date(GtkCalendar*, int*, int*, int*) = calendar_get_date;
extern void gtk_calendar_set_detail_func(GtkCalendar*, void*, void*, void*) = calendar_set_detail_func;
extern void gtk_calendar_set_detail_width_chars(GtkCalendar*, int) = calendar_set_detail_width_chars;
extern void gtk_calendar_set_detail_height_rows(GtkCalendar*, int) = calendar_set_detail_height_rows;
extern int gtk_calendar_get_detail_width_chars(GtkCalendar*) = calendar_get_detail_width_chars;
extern int gtk_calendar_get_detail_height_rows(GtkCalendar*) = calendar_get_detail_height_rows;
extern void gtk_calendar_freeze(GtkCalendar*) = calendar_freeze;
extern void gtk_calendar_thaw(GtkCalendar*) = calendar_thaw;
extern long gtk_cell_editable_get_type() = cell_editable_get_type;
extern void gtk_cell_editable_start_editing(GtkCellEditable*, GdkEvent*) = cell_editable_start_editing;
extern void gtk_cell_editable_editing_done(GtkCellEditable*) = cell_editable_editing_done;
extern void gtk_cell_editable_remove_widget(GtkCellEditable*) = cell_editable_remove_widget;
extern long gtk_cell_renderer_get_type() = cell_renderer_get_type;
extern void gtk_cell_renderer_get_size(GtkCellRenderer*, GtkWidget*, GdkRectangle*, int*, int*, int*, int*) = cell_renderer_get_size;
extern void gtk_cell_renderer_render(GtkCellRenderer*, GdkWindow*, GtkWidget*, GdkRectangle*, GdkRectangle*, GdkRectangle*, int) = cell_renderer_render;
extern int gtk_cell_renderer_activate(GtkCellRenderer*, GdkEvent*, GtkWidget*, char*, GdkRectangle*, GdkRectangle*, int) = cell_renderer_activate;
extern GtkCellEditable* gtk_cell_renderer_start_editing(GtkCellRenderer*, GdkEvent*, GtkWidget*, char*, GdkRectangle*, GdkRectangle*, int) = cell_renderer_start_editing;
extern void gtk_cell_renderer_set_fixed_size(GtkCellRenderer*, int, int) = cell_renderer_set_fixed_size;
extern void gtk_cell_renderer_get_fixed_size(GtkCellRenderer*, int*, int*) = cell_renderer_get_fixed_size;
extern void gtk_cell_renderer_editing_canceled(GtkCellRenderer*) = cell_renderer_editing_canceled;
extern void gtk_cell_renderer_stop_editing(GtkCellRenderer*, int) = cell_renderer_stop_editing;
extern GtkTreePath* gtk_tree_path_new() = tree_path_new;
extern GtkTreePath* gtk_tree_path_new_from_string(char*) = tree_path_new_from_string;
extern GtkTreePath* gtk_tree_path_new_from_indices(int, ...) = tree_path_new_from_indices;
extern char* gtk_tree_path_to_string(GtkTreePath*) = tree_path_to_string;
extern GtkTreePath* gtk_tree_path_new_first() = tree_path_new_first;
extern void gtk_tree_path_append_index(GtkTreePath*, int) = tree_path_append_index;
extern void gtk_tree_path_prepend_index(GtkTreePath*, int) = tree_path_prepend_index;
extern int gtk_tree_path_get_depth(GtkTreePath*) = tree_path_get_depth;
extern int* gtk_tree_path_get_indices(GtkTreePath*) = tree_path_get_indices;
extern void gtk_tree_path_free(GtkTreePath*) = tree_path_free;
extern GtkTreePath* gtk_tree_path_copy(GtkTreePath*) = tree_path_copy;
extern long gtk_tree_path_get_type() = tree_path_get_type;
extern int gtk_tree_path_compare(GtkTreePath*, GtkTreePath*) = tree_path_compare;
extern void gtk_tree_path_next(GtkTreePath*) = tree_path_next;
extern int gtk_tree_path_prev(GtkTreePath*) = tree_path_prev;
extern int gtk_tree_path_up(GtkTreePath*) = tree_path_up;
extern void gtk_tree_path_down(GtkTreePath*) = tree_path_down;
extern int gtk_tree_path_is_ancestor(GtkTreePath*, GtkTreePath*) = tree_path_is_ancestor;
extern int gtk_tree_path_is_descendant(GtkTreePath*, GtkTreePath*) = tree_path_is_descendant;
extern long gtk_tree_row_reference_get_type() = tree_row_reference_get_type;
extern GtkTreeRowReference* gtk_tree_row_reference_new(GtkTreeModel*, GtkTreePath*) = tree_row_reference_new;
extern GtkTreeRowReference* gtk_tree_row_reference_new_proxy(GObject*, GtkTreeModel*, GtkTreePath*) = tree_row_reference_new_proxy;
extern GtkTreePath* gtk_tree_row_reference_get_path(GtkTreeRowReference*) = tree_row_reference_get_path;
extern GtkTreeModel* gtk_tree_row_reference_get_model(GtkTreeRowReference*) = tree_row_reference_get_model;
extern int gtk_tree_row_reference_valid(GtkTreeRowReference*) = tree_row_reference_valid;
extern GtkTreeRowReference* gtk_tree_row_reference_copy(GtkTreeRowReference*) = tree_row_reference_copy;
extern void gtk_tree_row_reference_free(GtkTreeRowReference*) = tree_row_reference_free;
extern void gtk_tree_row_reference_inserted(GObject*, GtkTreePath*) = tree_row_reference_inserted;
extern void gtk_tree_row_reference_deleted(GObject*, GtkTreePath*) = tree_row_reference_deleted;
extern void gtk_tree_row_reference_reordered(GObject*, GtkTreePath*, GtkTreeIter*, int*) = tree_row_reference_reordered;
extern GtkTreeIter* gtk_tree_iter_copy(GtkTreeIter*) = tree_iter_copy;
extern void gtk_tree_iter_free(GtkTreeIter*) = tree_iter_free;
extern long gtk_tree_iter_get_type() = tree_iter_get_type;
extern long gtk_tree_model_get_type() = tree_model_get_type;
extern int gtk_tree_model_get_flags(GtkTreeModel*) = tree_model_get_flags;
extern int gtk_tree_model_get_n_columns(GtkTreeModel*) = tree_model_get_n_columns;
extern long gtk_tree_model_get_column_type(GtkTreeModel*, int) = tree_model_get_column_type;
extern int gtk_tree_model_get_iter(GtkTreeModel*, GtkTreeIter*, GtkTreePath*) = tree_model_get_iter;
extern int gtk_tree_model_get_iter_from_string(GtkTreeModel*, GtkTreeIter*, char*) = tree_model_get_iter_from_string;
extern char* gtk_tree_model_get_string_from_iter(GtkTreeModel*, GtkTreeIter*) = tree_model_get_string_from_iter;
extern int gtk_tree_model_get_iter_first(GtkTreeModel*, GtkTreeIter*) = tree_model_get_iter_first;
extern GtkTreePath* gtk_tree_model_get_path(GtkTreeModel*, GtkTreeIter*) = tree_model_get_path;
extern void gtk_tree_model_get_value(GtkTreeModel*, GtkTreeIter*, int, GValue*) = tree_model_get_value;
extern int gtk_tree_model_iter_next(GtkTreeModel*, GtkTreeIter*) = tree_model_iter_next;
extern int gtk_tree_model_iter_children(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*) = tree_model_iter_children;
extern int gtk_tree_model_iter_has_child(GtkTreeModel*, GtkTreeIter*) = tree_model_iter_has_child;
extern int gtk_tree_model_iter_n_children(GtkTreeModel*, GtkTreeIter*) = tree_model_iter_n_children;
extern int gtk_tree_model_iter_nth_child(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, int) = tree_model_iter_nth_child;
extern int gtk_tree_model_iter_parent(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*) = tree_model_iter_parent;
extern void gtk_tree_model_ref_node(GtkTreeModel*, GtkTreeIter*) = tree_model_ref_node;
extern void gtk_tree_model_unref_node(GtkTreeModel*, GtkTreeIter*) = tree_model_unref_node;
extern void gtk_tree_model_get(GtkTreeModel*, GtkTreeIter*, ...) = tree_model_get;
extern void gtk_tree_model_get_valist(GtkTreeModel*, GtkTreeIter*, void*) = tree_model_get_valist;
extern void gtk_tree_model_foreach(GtkTreeModel*, void*, void*) = tree_model_foreach;
extern void gtk_tree_model_row_changed(GtkTreeModel*, GtkTreePath*, GtkTreeIter*) = tree_model_row_changed;
extern void gtk_tree_model_row_inserted(GtkTreeModel*, GtkTreePath*, GtkTreeIter*) = tree_model_row_inserted;
extern void gtk_tree_model_row_has_child_toggled(GtkTreeModel*, GtkTreePath*, GtkTreeIter*) = tree_model_row_has_child_toggled;
extern void gtk_tree_model_row_deleted(GtkTreeModel*, GtkTreePath*) = tree_model_row_deleted;
extern void gtk_tree_model_rows_reordered(GtkTreeModel*, GtkTreePath*, GtkTreeIter*, int*) = tree_model_rows_reordered;
extern long gtk_tree_sortable_get_type() = tree_sortable_get_type;
extern void gtk_tree_sortable_sort_column_changed(GtkTreeSortable*) = tree_sortable_sort_column_changed;
extern int gtk_tree_sortable_get_sort_column_id(GtkTreeSortable*, int*, int*) = tree_sortable_get_sort_column_id;
extern void gtk_tree_sortable_set_sort_column_id(GtkTreeSortable*, int, int) = tree_sortable_set_sort_column_id;
extern void gtk_tree_sortable_set_sort_func(GtkTreeSortable*, int, void*, void*, void*) = tree_sortable_set_sort_func;
extern void gtk_tree_sortable_set_default_sort_func(GtkTreeSortable*, void*, void*, void*) = tree_sortable_set_default_sort_func;
extern int gtk_tree_sortable_has_default_sort_func(GtkTreeSortable*) = tree_sortable_has_default_sort_func;
extern long gtk_tree_view_column_get_type() = tree_view_column_get_type;
extern GtkTreeViewColumn* gtk_tree_view_column_new() = tree_view_column_new;
extern GtkTreeViewColumn* gtk_tree_view_column_new_with_attributes(char*, GtkCellRenderer*, ...) = tree_view_column_new_with_attributes;
extern void gtk_tree_view_column_pack_start(GtkTreeViewColumn*, GtkCellRenderer*, int) = tree_view_column_pack_start;
extern void gtk_tree_view_column_pack_end(GtkTreeViewColumn*, GtkCellRenderer*, int) = tree_view_column_pack_end;
extern void gtk_tree_view_column_clear(GtkTreeViewColumn*) = tree_view_column_clear;
extern GList* gtk_tree_view_column_get_cell_renderers(GtkTreeViewColumn*) = tree_view_column_get_cell_renderers;
extern void gtk_tree_view_column_add_attribute(GtkTreeViewColumn*, GtkCellRenderer*, char*, int) = tree_view_column_add_attribute;
extern void gtk_tree_view_column_set_attributes(GtkTreeViewColumn*, GtkCellRenderer*, ...) = tree_view_column_set_attributes;
extern void gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn*, GtkCellRenderer*, void*, void*, void*) = tree_view_column_set_cell_data_func;
extern void gtk_tree_view_column_clear_attributes(GtkTreeViewColumn*, GtkCellRenderer*) = tree_view_column_clear_attributes;
extern void gtk_tree_view_column_set_spacing(GtkTreeViewColumn*, int) = tree_view_column_set_spacing;
extern int gtk_tree_view_column_get_spacing(GtkTreeViewColumn*) = tree_view_column_get_spacing;
extern void gtk_tree_view_column_set_visible(GtkTreeViewColumn*, int) = tree_view_column_set_visible;
extern int gtk_tree_view_column_get_visible(GtkTreeViewColumn*) = tree_view_column_get_visible;
extern void gtk_tree_view_column_set_resizable(GtkTreeViewColumn*, int) = tree_view_column_set_resizable;
extern int gtk_tree_view_column_get_resizable(GtkTreeViewColumn*) = tree_view_column_get_resizable;
extern void gtk_tree_view_column_set_sizing(GtkTreeViewColumn*, int) = tree_view_column_set_sizing;
extern int gtk_tree_view_column_get_sizing(GtkTreeViewColumn*) = tree_view_column_get_sizing;
extern int gtk_tree_view_column_get_width(GtkTreeViewColumn*) = tree_view_column_get_width;
extern int gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn*) = tree_view_column_get_fixed_width;
extern void gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn*, int) = tree_view_column_set_fixed_width;
extern void gtk_tree_view_column_set_min_width(GtkTreeViewColumn*, int) = tree_view_column_set_min_width;
extern int gtk_tree_view_column_get_min_width(GtkTreeViewColumn*) = tree_view_column_get_min_width;
extern void gtk_tree_view_column_set_max_width(GtkTreeViewColumn*, int) = tree_view_column_set_max_width;
extern int gtk_tree_view_column_get_max_width(GtkTreeViewColumn*) = tree_view_column_get_max_width;
extern void gtk_tree_view_column_clicked(GtkTreeViewColumn*) = tree_view_column_clicked;
extern void gtk_tree_view_column_set_title(GtkTreeViewColumn*, char*) = tree_view_column_set_title;
extern char* gtk_tree_view_column_get_title(GtkTreeViewColumn*) = tree_view_column_get_title;
extern void gtk_tree_view_column_set_expand(GtkTreeViewColumn*, int) = tree_view_column_set_expand;
extern int gtk_tree_view_column_get_expand(GtkTreeViewColumn*) = tree_view_column_get_expand;
extern void gtk_tree_view_column_set_clickable(GtkTreeViewColumn*, int) = tree_view_column_set_clickable;
extern int gtk_tree_view_column_get_clickable(GtkTreeViewColumn*) = tree_view_column_get_clickable;
extern void gtk_tree_view_column_set_widget(GtkTreeViewColumn*, GtkWidget*) = tree_view_column_set_widget;
extern GtkWidget* gtk_tree_view_column_get_widget(GtkTreeViewColumn*) = tree_view_column_get_widget;
extern void gtk_tree_view_column_set_alignment(GtkTreeViewColumn*, float) = tree_view_column_set_alignment;
extern float gtk_tree_view_column_get_alignment(GtkTreeViewColumn*) = tree_view_column_get_alignment;
extern void gtk_tree_view_column_set_reorderable(GtkTreeViewColumn*, int) = tree_view_column_set_reorderable;
extern int gtk_tree_view_column_get_reorderable(GtkTreeViewColumn*) = tree_view_column_get_reorderable;
extern void gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn*, int) = tree_view_column_set_sort_column_id;
extern int gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn*) = tree_view_column_get_sort_column_id;
extern void gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn*, int) = tree_view_column_set_sort_indicator;
extern int gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn*) = tree_view_column_get_sort_indicator;
extern void gtk_tree_view_column_set_sort_order(GtkTreeViewColumn*, int) = tree_view_column_set_sort_order;
extern int gtk_tree_view_column_get_sort_order(GtkTreeViewColumn*) = tree_view_column_get_sort_order;
extern void gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn*, GtkTreeModel*, GtkTreeIter*, int, int) = tree_view_column_cell_set_cell_data;
extern void gtk_tree_view_column_cell_get_size(GtkTreeViewColumn*, GdkRectangle*, int*, int*, int*, int*) = tree_view_column_cell_get_size;
extern int gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn*) = tree_view_column_cell_is_visible;
extern void gtk_tree_view_column_focus_cell(GtkTreeViewColumn*, GtkCellRenderer*) = tree_view_column_focus_cell;
extern int gtk_tree_view_column_cell_get_position(GtkTreeViewColumn*, GtkCellRenderer*, int*, int*) = tree_view_column_cell_get_position;
extern void gtk_tree_view_column_queue_resize(GtkTreeViewColumn*) = tree_view_column_queue_resize;
extern GtkWidget* gtk_tree_view_column_get_tree_view(GtkTreeViewColumn*) = tree_view_column_get_tree_view;
extern long gtk_cell_layout_get_type() = cell_layout_get_type;
extern void gtk_cell_layout_pack_start(GtkCellLayout*, GtkCellRenderer*, int) = cell_layout_pack_start;
extern void gtk_cell_layout_pack_end(GtkCellLayout*, GtkCellRenderer*, int) = cell_layout_pack_end;
extern GList* gtk_cell_layout_get_cells(GtkCellLayout*) = cell_layout_get_cells;
extern void gtk_cell_layout_clear(GtkCellLayout*) = cell_layout_clear;
extern void gtk_cell_layout_set_attributes(GtkCellLayout*, GtkCellRenderer*, ...) = cell_layout_set_attributes;
extern void gtk_cell_layout_add_attribute(GtkCellLayout*, GtkCellRenderer*, char*, int) = cell_layout_add_attribute;
extern void gtk_cell_layout_set_cell_data_func(GtkCellLayout*, GtkCellRenderer*, void*, void*, void*) = cell_layout_set_cell_data_func;
extern void gtk_cell_layout_clear_attributes(GtkCellLayout*, GtkCellRenderer*) = cell_layout_clear_attributes;
extern void gtk_cell_layout_reorder(GtkCellLayout*, GtkCellRenderer*, int) = cell_layout_reorder;
extern long gtk_cell_renderer_text_get_type() = cell_renderer_text_get_type;
extern GtkCellRenderer* gtk_cell_renderer_text_new() = cell_renderer_text_new;
extern void gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText*, int) = cell_renderer_text_set_fixed_height_from_font;
extern long gtk_cell_renderer_accel_get_type() = cell_renderer_accel_get_type;
extern GtkCellRenderer* gtk_cell_renderer_accel_new() = cell_renderer_accel_new;
extern long gtk_cell_renderer_combo_get_type() = cell_renderer_combo_get_type;
extern GtkCellRenderer* gtk_cell_renderer_combo_new() = cell_renderer_combo_new;
extern long gtk_cell_renderer_pixbuf_get_type() = cell_renderer_pixbuf_get_type;
extern GtkCellRenderer* gtk_cell_renderer_pixbuf_new() = cell_renderer_pixbuf_new;
extern long gtk_cell_renderer_progress_get_type() = cell_renderer_progress_get_type;
extern GtkCellRenderer* gtk_cell_renderer_progress_new() = cell_renderer_progress_new;
extern long gtk_cell_renderer_spin_get_type() = cell_renderer_spin_get_type;
extern GtkCellRenderer* gtk_cell_renderer_spin_new() = cell_renderer_spin_new;
extern long gtk_cell_renderer_toggle_get_type() = cell_renderer_toggle_get_type;
extern GtkCellRenderer* gtk_cell_renderer_toggle_new() = cell_renderer_toggle_new;
extern int gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle*) = cell_renderer_toggle_get_radio;
extern void gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle*, int) = cell_renderer_toggle_set_radio;
extern int gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle*) = cell_renderer_toggle_get_active;
extern void gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle*, int) = cell_renderer_toggle_set_active;
extern long gtk_cell_view_get_type() = cell_view_get_type;
extern GtkWidget* gtk_cell_view_new() = cell_view_new;
extern GtkWidget* gtk_cell_view_new_with_text(char*) = cell_view_new_with_text;
extern GtkWidget* gtk_cell_view_new_with_markup(char*) = cell_view_new_with_markup;
extern GtkWidget* gtk_cell_view_new_with_pixbuf(GdkPixbuf*) = cell_view_new_with_pixbuf;
extern void gtk_cell_view_set_model(GtkCellView*, GtkTreeModel*) = cell_view_set_model;
extern void gtk_cell_view_set_displayed_row(GtkCellView*, GtkTreePath*) = cell_view_set_displayed_row;
extern GtkTreePath* gtk_cell_view_get_displayed_row(GtkCellView*) = cell_view_get_displayed_row;
extern int gtk_cell_view_get_size_of_row(GtkCellView*, GtkTreePath*, GtkRequisition*) = cell_view_get_size_of_row;
extern void gtk_cell_view_set_background_color(GtkCellView*, GdkColor*) = cell_view_set_background_color;
extern GList* gtk_cell_view_get_cell_renderers(GtkCellView*) = cell_view_get_cell_renderers;
extern long gtk_toggle_button_get_type() = toggle_button_get_type;
extern GtkWidget* gtk_toggle_button_new() = toggle_button_new;
extern GtkWidget* gtk_toggle_button_new_with_label(char*) = toggle_button_new_with_label;
extern GtkWidget* gtk_toggle_button_new_with_mnemonic(char*) = toggle_button_new_with_mnemonic;
extern void gtk_toggle_button_set_mode(GtkToggleButton*, int) = toggle_button_set_mode;
extern int gtk_toggle_button_get_mode(GtkToggleButton*) = toggle_button_get_mode;
extern void gtk_toggle_button_set_active(GtkToggleButton*, int) = toggle_button_set_active;
extern int gtk_toggle_button_get_active(GtkToggleButton*) = toggle_button_get_active;
extern void gtk_toggle_button_toggled(GtkToggleButton*) = toggle_button_toggled;
extern void gtk_toggle_button_set_inconsistent(GtkToggleButton*, int) = toggle_button_set_inconsistent;
extern int gtk_toggle_button_get_inconsistent(GtkToggleButton*) = toggle_button_get_inconsistent;
extern long gtk_check_button_get_type() = check_button_get_type;
extern GtkWidget* gtk_check_button_new() = check_button_new;
extern GtkWidget* gtk_check_button_new_with_label(char*) = check_button_new_with_label;
extern GtkWidget* gtk_check_button_new_with_mnemonic(char*) = check_button_new_with_mnemonic;
extern long gtk_item_get_type() = item_get_type;
extern void gtk_item_select(GtkItem*) = item_select;
extern void gtk_item_deselect(GtkItem*) = item_deselect;
extern void gtk_item_toggle(GtkItem*) = item_toggle;
extern long gtk_menu_item_get_type() = menu_item_get_type;
extern GtkWidget* gtk_menu_item_new() = menu_item_new;
extern GtkWidget* gtk_menu_item_new_with_label(char*) = menu_item_new_with_label;
extern GtkWidget* gtk_menu_item_new_with_mnemonic(char*) = menu_item_new_with_mnemonic;
extern void gtk_menu_item_set_submenu(GtkMenuItem*, GtkWidget*) = menu_item_set_submenu;
extern GtkWidget* gtk_menu_item_get_submenu(GtkMenuItem*) = menu_item_get_submenu;
extern void gtk_menu_item_select(GtkMenuItem*) = menu_item_select;
extern void gtk_menu_item_deselect(GtkMenuItem*) = menu_item_deselect;
extern void gtk_menu_item_activate(GtkMenuItem*) = menu_item_activate;
extern void gtk_menu_item_toggle_size_request(GtkMenuItem*, int*) = menu_item_toggle_size_request;
extern void gtk_menu_item_toggle_size_allocate(GtkMenuItem*, int) = menu_item_toggle_size_allocate;
extern void gtk_menu_item_set_right_justified(GtkMenuItem*, int) = menu_item_set_right_justified;
extern int gtk_menu_item_get_right_justified(GtkMenuItem*) = menu_item_get_right_justified;
extern void gtk_menu_item_set_accel_path(GtkMenuItem*, char*) = menu_item_set_accel_path;
extern char* gtk_menu_item_get_accel_path(GtkMenuItem*) = menu_item_get_accel_path;
extern void gtk_menu_item_remove_submenu(GtkMenuItem*) = menu_item_remove_submenu;
extern long gtk_check_menu_item_get_type() = check_menu_item_get_type;
extern GtkWidget* gtk_check_menu_item_new() = check_menu_item_new;
extern GtkWidget* gtk_check_menu_item_new_with_label(char*) = check_menu_item_new_with_label;
extern GtkWidget* gtk_check_menu_item_new_with_mnemonic(char*) = check_menu_item_new_with_mnemonic;
extern void gtk_check_menu_item_set_active(GtkCheckMenuItem*, int) = check_menu_item_set_active;
extern int gtk_check_menu_item_get_active(GtkCheckMenuItem*) = check_menu_item_get_active;
extern void gtk_check_menu_item_toggled(GtkCheckMenuItem*) = check_menu_item_toggled;
extern void gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem*, int) = check_menu_item_set_inconsistent;
extern int gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem*) = check_menu_item_get_inconsistent;
extern void gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem*, int) = check_menu_item_set_draw_as_radio;
extern int gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem*) = check_menu_item_get_draw_as_radio;
extern void gtk_check_menu_item_set_show_toggle(GtkCheckMenuItem*, int) = check_menu_item_set_show_toggle;
extern long gtk_text_tag_get_type() = text_tag_get_type;
extern GtkTextTag* gtk_text_tag_new(char*) = text_tag_new;
extern int gtk_text_tag_get_priority(GtkTextTag*) = text_tag_get_priority;
extern void gtk_text_tag_set_priority(GtkTextTag*, int) = text_tag_set_priority;
extern int gtk_text_tag_event(GtkTextTag*, GObject*, GdkEvent*, GtkTextIter*) = text_tag_event;
extern GtkTextAttributes* gtk_text_attributes_new() = text_attributes_new;
extern GtkTextAttributes* gtk_text_attributes_copy(GtkTextAttributes*) = text_attributes_copy;
extern void gtk_text_attributes_copy_values(GtkTextAttributes*, GtkTextAttributes*) = text_attributes_copy_values;
extern void gtk_text_attributes_unref(GtkTextAttributes*) = text_attributes_unref;
extern GtkTextAttributes* gtk_text_attributes_ref(GtkTextAttributes*) = text_attributes_ref;
extern long gtk_text_attributes_get_type() = text_attributes_get_type;
extern long gtk_text_child_anchor_get_type() = text_child_anchor_get_type;
extern GtkTextChildAnchor* gtk_text_child_anchor_new() = text_child_anchor_new;
extern GList* gtk_text_child_anchor_get_widgets(GtkTextChildAnchor*) = text_child_anchor_get_widgets;
extern int gtk_text_child_anchor_get_deleted(GtkTextChildAnchor*) = text_child_anchor_get_deleted;
extern GtkTextBuffer* gtk_text_iter_get_buffer(GtkTextIter*) = text_iter_get_buffer;
extern GtkTextIter* gtk_text_iter_copy(GtkTextIter*) = text_iter_copy;
extern void gtk_text_iter_free(GtkTextIter*) = text_iter_free;
extern long gtk_text_iter_get_type() = text_iter_get_type;
extern int gtk_text_iter_get_offset(GtkTextIter*) = text_iter_get_offset;
extern int gtk_text_iter_get_line(GtkTextIter*) = text_iter_get_line;
extern int gtk_text_iter_get_line_offset(GtkTextIter*) = text_iter_get_line_offset;
extern int gtk_text_iter_get_line_index(GtkTextIter*) = text_iter_get_line_index;
extern int gtk_text_iter_get_visible_line_offset(GtkTextIter*) = text_iter_get_visible_line_offset;
extern int gtk_text_iter_get_visible_line_index(GtkTextIter*) = text_iter_get_visible_line_index;
extern int gtk_text_iter_get_char(GtkTextIter*) = text_iter_get_char;
extern char* gtk_text_iter_get_slice(GtkTextIter*, GtkTextIter*) = text_iter_get_slice;
extern char* gtk_text_iter_get_text(GtkTextIter*, GtkTextIter*) = text_iter_get_text;
extern char* gtk_text_iter_get_visible_slice(GtkTextIter*, GtkTextIter*) = text_iter_get_visible_slice;
extern char* gtk_text_iter_get_visible_text(GtkTextIter*, GtkTextIter*) = text_iter_get_visible_text;
extern GdkPixbuf* gtk_text_iter_get_pixbuf(GtkTextIter*) = text_iter_get_pixbuf;
extern GSList* gtk_text_iter_get_marks(GtkTextIter*) = text_iter_get_marks;
extern GtkTextChildAnchor* gtk_text_iter_get_child_anchor(GtkTextIter*) = text_iter_get_child_anchor;
extern GSList* gtk_text_iter_get_toggled_tags(GtkTextIter*, int) = text_iter_get_toggled_tags;
extern int gtk_text_iter_begins_tag(GtkTextIter*, GtkTextTag*) = text_iter_begins_tag;
extern int gtk_text_iter_ends_tag(GtkTextIter*, GtkTextTag*) = text_iter_ends_tag;
extern int gtk_text_iter_toggles_tag(GtkTextIter*, GtkTextTag*) = text_iter_toggles_tag;
extern int gtk_text_iter_has_tag(GtkTextIter*, GtkTextTag*) = text_iter_has_tag;
extern GSList* gtk_text_iter_get_tags(GtkTextIter*) = text_iter_get_tags;
extern int gtk_text_iter_editable(GtkTextIter*, int) = text_iter_editable;
extern int gtk_text_iter_can_insert(GtkTextIter*, int) = text_iter_can_insert;
extern int gtk_text_iter_starts_word(GtkTextIter*) = text_iter_starts_word;
extern int gtk_text_iter_ends_word(GtkTextIter*) = text_iter_ends_word;
extern int gtk_text_iter_inside_word(GtkTextIter*) = text_iter_inside_word;
extern int gtk_text_iter_starts_sentence(GtkTextIter*) = text_iter_starts_sentence;
extern int gtk_text_iter_ends_sentence(GtkTextIter*) = text_iter_ends_sentence;
extern int gtk_text_iter_inside_sentence(GtkTextIter*) = text_iter_inside_sentence;
extern int gtk_text_iter_starts_line(GtkTextIter*) = text_iter_starts_line;
extern int gtk_text_iter_ends_line(GtkTextIter*) = text_iter_ends_line;
extern int gtk_text_iter_is_cursor_position(GtkTextIter*) = text_iter_is_cursor_position;
extern int gtk_text_iter_get_chars_in_line(GtkTextIter*) = text_iter_get_chars_in_line;
extern int gtk_text_iter_get_bytes_in_line(GtkTextIter*) = text_iter_get_bytes_in_line;
extern int gtk_text_iter_get_attributes(GtkTextIter*, GtkTextAttributes*) = text_iter_get_attributes;
extern PangoLanguage* gtk_text_iter_get_language(GtkTextIter*) = text_iter_get_language;
extern int gtk_text_iter_is_end(GtkTextIter*) = text_iter_is_end;
extern int gtk_text_iter_is_start(GtkTextIter*) = text_iter_is_start;
extern int gtk_text_iter_forward_char(GtkTextIter*) = text_iter_forward_char;
extern int gtk_text_iter_backward_char(GtkTextIter*) = text_iter_backward_char;
extern int gtk_text_iter_forward_chars(GtkTextIter*, int) = text_iter_forward_chars;
extern int gtk_text_iter_backward_chars(GtkTextIter*, int) = text_iter_backward_chars;
extern int gtk_text_iter_forward_line(GtkTextIter*) = text_iter_forward_line;
extern int gtk_text_iter_backward_line(GtkTextIter*) = text_iter_backward_line;
extern int gtk_text_iter_forward_lines(GtkTextIter*, int) = text_iter_forward_lines;
extern int gtk_text_iter_backward_lines(GtkTextIter*, int) = text_iter_backward_lines;
extern int gtk_text_iter_forward_word_end(GtkTextIter*) = text_iter_forward_word_end;
extern int gtk_text_iter_backward_word_start(GtkTextIter*) = text_iter_backward_word_start;
extern int gtk_text_iter_forward_word_ends(GtkTextIter*, int) = text_iter_forward_word_ends;
extern int gtk_text_iter_backward_word_starts(GtkTextIter*, int) = text_iter_backward_word_starts;
extern int gtk_text_iter_forward_visible_line(GtkTextIter*) = text_iter_forward_visible_line;
extern int gtk_text_iter_backward_visible_line(GtkTextIter*) = text_iter_backward_visible_line;
extern int gtk_text_iter_forward_visible_lines(GtkTextIter*, int) = text_iter_forward_visible_lines;
extern int gtk_text_iter_backward_visible_lines(GtkTextIter*, int) = text_iter_backward_visible_lines;
extern int gtk_text_iter_forward_visible_word_end(GtkTextIter*) = text_iter_forward_visible_word_end;
extern int gtk_text_iter_backward_visible_word_start(GtkTextIter*) = text_iter_backward_visible_word_start;
extern int gtk_text_iter_forward_visible_word_ends(GtkTextIter*, int) = text_iter_forward_visible_word_ends;
extern int gtk_text_iter_backward_visible_word_starts(GtkTextIter*, int) = text_iter_backward_visible_word_starts;
extern int gtk_text_iter_forward_sentence_end(GtkTextIter*) = text_iter_forward_sentence_end;
extern int gtk_text_iter_backward_sentence_start(GtkTextIter*) = text_iter_backward_sentence_start;
extern int gtk_text_iter_forward_sentence_ends(GtkTextIter*, int) = text_iter_forward_sentence_ends;
extern int gtk_text_iter_backward_sentence_starts(GtkTextIter*, int) = text_iter_backward_sentence_starts;
extern int gtk_text_iter_forward_cursor_position(GtkTextIter*) = text_iter_forward_cursor_position;
extern int gtk_text_iter_backward_cursor_position(GtkTextIter*) = text_iter_backward_cursor_position;
extern int gtk_text_iter_forward_cursor_positions(GtkTextIter*, int) = text_iter_forward_cursor_positions;
extern int gtk_text_iter_backward_cursor_positions(GtkTextIter*, int) = text_iter_backward_cursor_positions;
extern int gtk_text_iter_forward_visible_cursor_position(GtkTextIter*) = text_iter_forward_visible_cursor_position;
extern int gtk_text_iter_backward_visible_cursor_position(GtkTextIter*) = text_iter_backward_visible_cursor_position;
extern int gtk_text_iter_forward_visible_cursor_positions(GtkTextIter*, int) = text_iter_forward_visible_cursor_positions;
extern int gtk_text_iter_backward_visible_cursor_positions(GtkTextIter*, int) = text_iter_backward_visible_cursor_positions;
extern void gtk_text_iter_set_offset(GtkTextIter*, int) = text_iter_set_offset;
extern void gtk_text_iter_set_line(GtkTextIter*, int) = text_iter_set_line;
extern void gtk_text_iter_set_line_offset(GtkTextIter*, int) = text_iter_set_line_offset;
extern void gtk_text_iter_set_line_index(GtkTextIter*, int) = text_iter_set_line_index;
extern void gtk_text_iter_forward_to_end(GtkTextIter*) = text_iter_forward_to_end;
extern int gtk_text_iter_forward_to_line_end(GtkTextIter*) = text_iter_forward_to_line_end;
extern void gtk_text_iter_set_visible_line_offset(GtkTextIter*, int) = text_iter_set_visible_line_offset;
extern void gtk_text_iter_set_visible_line_index(GtkTextIter*, int) = text_iter_set_visible_line_index;
extern int gtk_text_iter_forward_to_tag_toggle(GtkTextIter*, GtkTextTag*) = text_iter_forward_to_tag_toggle;
extern int gtk_text_iter_backward_to_tag_toggle(GtkTextIter*, GtkTextTag*) = text_iter_backward_to_tag_toggle;
extern int gtk_text_iter_forward_find_char(GtkTextIter*, void*, void*, GtkTextIter*) = text_iter_forward_find_char;
extern int gtk_text_iter_backward_find_char(GtkTextIter*, void*, void*, GtkTextIter*) = text_iter_backward_find_char;
extern int gtk_text_iter_forward_search(GtkTextIter*, char*, int, GtkTextIter*, GtkTextIter*, GtkTextIter*) = text_iter_forward_search;
extern int gtk_text_iter_backward_search(GtkTextIter*, char*, int, GtkTextIter*, GtkTextIter*, GtkTextIter*) = text_iter_backward_search;
extern int gtk_text_iter_equal(GtkTextIter*, GtkTextIter*) = text_iter_equal;
extern int gtk_text_iter_compare(GtkTextIter*, GtkTextIter*) = text_iter_compare;
extern int gtk_text_iter_in_range(GtkTextIter*, GtkTextIter*, GtkTextIter*) = text_iter_in_range;
extern void gtk_text_iter_order(GtkTextIter*, GtkTextIter*) = text_iter_order;
extern GtkTargetList* gtk_target_list_new(GtkTargetEntry*, int) = target_list_new;
extern GtkTargetList* gtk_target_list_ref(GtkTargetList*) = target_list_ref;
extern void gtk_target_list_unref(GtkTargetList*) = target_list_unref;
extern void gtk_target_list_add(GtkTargetList*, void/*struct _GdkAtom*/*, int, int) = target_list_add;
extern void gtk_target_list_add_text_targets(GtkTargetList*, int) = target_list_add_text_targets;
extern void gtk_target_list_add_rich_text_targets(GtkTargetList*, int, int, GtkTextBuffer*) = target_list_add_rich_text_targets;
extern void gtk_target_list_add_image_targets(GtkTargetList*, int, int) = target_list_add_image_targets;
extern void gtk_target_list_add_uri_targets(GtkTargetList*, int) = target_list_add_uri_targets;
extern void gtk_target_list_add_table(GtkTargetList*, GtkTargetEntry*, int) = target_list_add_table;
extern void gtk_target_list_remove(GtkTargetList*, void/*struct _GdkAtom*/*) = target_list_remove;
extern int gtk_target_list_find(GtkTargetList*, void/*struct _GdkAtom*/*, int*) = target_list_find;
extern GtkTargetEntry* gtk_target_table_new_from_list(GtkTargetList*, int*) = target_table_new_from_list;
extern void gtk_target_table_free(GtkTargetEntry*, int) = target_table_free;
extern int gtk_selection_owner_set(GtkWidget*, void/*struct _GdkAtom*/*, int) = selection_owner_set;
extern int gtk_selection_owner_set_for_display(GdkDisplay*, GtkWidget*, void/*struct _GdkAtom*/*, int) = selection_owner_set_for_display;
extern void gtk_selection_add_target(GtkWidget*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int) = selection_add_target;
extern void gtk_selection_add_targets(GtkWidget*, void/*struct _GdkAtom*/*, GtkTargetEntry*, int) = selection_add_targets;
extern void gtk_selection_clear_targets(GtkWidget*, void/*struct _GdkAtom*/*) = selection_clear_targets;
extern int gtk_selection_convert(GtkWidget*, void/*struct _GdkAtom*/*, void/*struct _GdkAtom*/*, int) = selection_convert;
extern void/*struct _GdkAtom*/* gtk_selection_data_get_target(GtkSelectionData*) = selection_data_get_target;
extern void/*struct _GdkAtom*/* gtk_selection_data_get_data_type(GtkSelectionData*) = selection_data_get_data_type;
extern int gtk_selection_data_get_format(GtkSelectionData*) = selection_data_get_format;
extern char* gtk_selection_data_get_data(GtkSelectionData*) = selection_data_get_data;
extern int gtk_selection_data_get_length(GtkSelectionData*) = selection_data_get_length;
extern GdkDisplay* gtk_selection_data_get_display(GtkSelectionData*) = selection_data_get_display;
extern void gtk_selection_data_set(GtkSelectionData*, void/*struct _GdkAtom*/*, int, char*, int) = selection_data_set;
extern int gtk_selection_data_set_text(GtkSelectionData*, char*, int) = selection_data_set_text;
extern char* gtk_selection_data_get_text(GtkSelectionData*) = selection_data_get_text;
extern int gtk_selection_data_set_pixbuf(GtkSelectionData*, GdkPixbuf*) = selection_data_set_pixbuf;
extern GdkPixbuf* gtk_selection_data_get_pixbuf(GtkSelectionData*) = selection_data_get_pixbuf;
extern int gtk_selection_data_set_uris(GtkSelectionData*, char**) = selection_data_set_uris;
extern char** gtk_selection_data_get_uris(GtkSelectionData*) = selection_data_get_uris;
extern int gtk_selection_data_get_targets(GtkSelectionData*, void/*struct _GdkAtom*/***, int*) = selection_data_get_targets;
extern int gtk_selection_data_targets_include_text(GtkSelectionData*) = selection_data_targets_include_text;
extern int gtk_selection_data_targets_include_rich_text(GtkSelectionData*, GtkTextBuffer*) = selection_data_targets_include_rich_text;
extern int gtk_selection_data_targets_include_image(GtkSelectionData*, int) = selection_data_targets_include_image;
extern int gtk_selection_data_targets_include_uri(GtkSelectionData*) = selection_data_targets_include_uri;
extern int gtk_targets_include_text(void/*struct _GdkAtom*/**, int) = targets_include_text;
extern int gtk_targets_include_rich_text(void/*struct _GdkAtom*/**, int, GtkTextBuffer*) = targets_include_rich_text;
extern int gtk_targets_include_image(void/*struct _GdkAtom*/**, int, int) = targets_include_image;
extern int gtk_targets_include_uri(void/*struct _GdkAtom*/**, int) = targets_include_uri;
extern void gtk_selection_remove_all(GtkWidget*) = selection_remove_all;
extern int gtk_selection_clear(GtkWidget*, GdkEventSelection*) = selection_clear;
extern long gtk_selection_data_get_type() = selection_data_get_type;
extern GtkSelectionData* gtk_selection_data_copy(GtkSelectionData*) = selection_data_copy;
extern void gtk_selection_data_free(GtkSelectionData*) = selection_data_free;
extern long gtk_target_list_get_type() = target_list_get_type;
extern long gtk_clipboard_get_type() = clipboard_get_type;
extern GtkClipboard* gtk_clipboard_get_for_display(GdkDisplay*, void/*struct _GdkAtom*/*) = clipboard_get_for_display;
extern GtkClipboard* gtk_clipboard_get(void/*struct _GdkAtom*/*) = clipboard_get;
extern GdkDisplay* gtk_clipboard_get_display(GtkClipboard*) = clipboard_get_display;
extern int gtk_clipboard_set_with_data(GtkClipboard*, GtkTargetEntry*, int, void*, void*, void*) = clipboard_set_with_data;
extern int gtk_clipboard_set_with_owner(GtkClipboard*, GtkTargetEntry*, int, void*, void*, GObject*) = clipboard_set_with_owner;
extern GObject* gtk_clipboard_get_owner(GtkClipboard*) = clipboard_get_owner;
extern void gtk_clipboard_clear(GtkClipboard*) = clipboard_clear;
extern void gtk_clipboard_set_text(GtkClipboard*, char*, int) = clipboard_set_text;
extern void gtk_clipboard_set_image(GtkClipboard*, GdkPixbuf*) = clipboard_set_image;
extern void gtk_clipboard_request_contents(GtkClipboard*, void/*struct _GdkAtom*/*, void*, void*) = clipboard_request_contents;
extern void gtk_clipboard_request_text(GtkClipboard*, void*, void*) = clipboard_request_text;
extern void gtk_clipboard_request_rich_text(GtkClipboard*, GtkTextBuffer*, void*, void*) = clipboard_request_rich_text;
extern void gtk_clipboard_request_image(GtkClipboard*, void*, void*) = clipboard_request_image;
extern void gtk_clipboard_request_uris(GtkClipboard*, void*, void*) = clipboard_request_uris;
extern void gtk_clipboard_request_targets(GtkClipboard*, void*, void*) = clipboard_request_targets;
extern GtkSelectionData* gtk_clipboard_wait_for_contents(GtkClipboard*, void/*struct _GdkAtom*/*) = clipboard_wait_for_contents;
extern char* gtk_clipboard_wait_for_text(GtkClipboard*) = clipboard_wait_for_text;
extern char* gtk_clipboard_wait_for_rich_text(GtkClipboard*, GtkTextBuffer*, void/*struct _GdkAtom*/**, long*) = clipboard_wait_for_rich_text;
extern GdkPixbuf* gtk_clipboard_wait_for_image(GtkClipboard*) = clipboard_wait_for_image;
extern char** gtk_clipboard_wait_for_uris(GtkClipboard*) = clipboard_wait_for_uris;
extern int gtk_clipboard_wait_for_targets(GtkClipboard*, void/*struct _GdkAtom*/***, int*) = clipboard_wait_for_targets;
extern int gtk_clipboard_wait_is_text_available(GtkClipboard*) = clipboard_wait_is_text_available;
extern int gtk_clipboard_wait_is_rich_text_available(GtkClipboard*, GtkTextBuffer*) = clipboard_wait_is_rich_text_available;
extern int gtk_clipboard_wait_is_image_available(GtkClipboard*) = clipboard_wait_is_image_available;
extern int gtk_clipboard_wait_is_uris_available(GtkClipboard*) = clipboard_wait_is_uris_available;
extern int gtk_clipboard_wait_is_target_available(GtkClipboard*, void/*struct _GdkAtom*/*) = clipboard_wait_is_target_available;
extern void gtk_clipboard_set_can_store(GtkClipboard*, GtkTargetEntry*, int) = clipboard_set_can_store;
extern void gtk_clipboard_store(GtkClipboard*) = clipboard_store;
extern long gtk_color_button_get_type() = color_button_get_type;
extern GtkWidget* gtk_color_button_new() = color_button_new;
extern GtkWidget* gtk_color_button_new_with_color(GdkColor*) = color_button_new_with_color;
extern void gtk_color_button_set_color(GtkColorButton*, GdkColor*) = color_button_set_color;
extern void gtk_color_button_set_alpha(GtkColorButton*, short) = color_button_set_alpha;
extern void gtk_color_button_get_color(GtkColorButton*, GdkColor*) = color_button_get_color;
extern short gtk_color_button_get_alpha(GtkColorButton*) = color_button_get_alpha;
extern void gtk_color_button_set_use_alpha(GtkColorButton*, int) = color_button_set_use_alpha;
extern int gtk_color_button_get_use_alpha(GtkColorButton*) = color_button_get_use_alpha;
extern void gtk_color_button_set_title(GtkColorButton*, char*) = color_button_set_title;
extern char* gtk_color_button_get_title(GtkColorButton*) = color_button_get_title;
extern long gtk_vbox_get_type() = vbox_get_type;
extern GtkWidget* gtk_vbox_new(int, int) = vbox_new;
extern long gtk_color_selection_get_type() = color_selection_get_type;
extern GtkWidget* gtk_color_selection_new() = color_selection_new;
extern int gtk_color_selection_get_has_opacity_control(GtkColorSelection*) = color_selection_get_has_opacity_control;
extern void gtk_color_selection_set_has_opacity_control(GtkColorSelection*, int) = color_selection_set_has_opacity_control;
extern int gtk_color_selection_get_has_palette(GtkColorSelection*) = color_selection_get_has_palette;
extern void gtk_color_selection_set_has_palette(GtkColorSelection*, int) = color_selection_set_has_palette;
extern void gtk_color_selection_set_current_color(GtkColorSelection*, GdkColor*) = color_selection_set_current_color;
extern void gtk_color_selection_set_current_alpha(GtkColorSelection*, short) = color_selection_set_current_alpha;
extern void gtk_color_selection_get_current_color(GtkColorSelection*, GdkColor*) = color_selection_get_current_color;
extern short gtk_color_selection_get_current_alpha(GtkColorSelection*) = color_selection_get_current_alpha;
extern void gtk_color_selection_set_previous_color(GtkColorSelection*, GdkColor*) = color_selection_set_previous_color;
extern void gtk_color_selection_set_previous_alpha(GtkColorSelection*, short) = color_selection_set_previous_alpha;
extern void gtk_color_selection_get_previous_color(GtkColorSelection*, GdkColor*) = color_selection_get_previous_color;
extern short gtk_color_selection_get_previous_alpha(GtkColorSelection*) = color_selection_get_previous_alpha;
extern int gtk_color_selection_is_adjusting(GtkColorSelection*) = color_selection_is_adjusting;
extern int gtk_color_selection_palette_from_string(char*, GdkColor**, int*) = color_selection_palette_from_string;
extern char* gtk_color_selection_palette_to_string(GdkColor*, int) = color_selection_palette_to_string;
extern void* gtk_color_selection_set_change_palette_hook(void*) = color_selection_set_change_palette_hook;
extern void* gtk_color_selection_set_change_palette_with_screen_hook(void*) = color_selection_set_change_palette_with_screen_hook;
extern void gtk_color_selection_set_color(GtkColorSelection*, double*) = color_selection_set_color;
extern void gtk_color_selection_get_color(GtkColorSelection*, double*) = color_selection_get_color;
extern void gtk_color_selection_set_update_policy(GtkColorSelection*, int) = color_selection_set_update_policy;
extern long gtk_color_selection_dialog_get_type() = color_selection_dialog_get_type;
extern GtkWidget* gtk_color_selection_dialog_new(char*) = color_selection_dialog_new;
extern GtkWidget* gtk_color_selection_dialog_get_color_selection(GtkColorSelectionDialog*) = color_selection_dialog_get_color_selection;
extern void gtk_drag_get_data(GtkWidget*, GdkDragContext*, void/*struct _GdkAtom*/*, int) = drag_get_data;
extern void gtk_drag_finish(GdkDragContext*, int, int, int) = drag_finish;
extern GtkWidget* gtk_drag_get_source_widget(GdkDragContext*) = drag_get_source_widget;
extern void gtk_drag_highlight(GtkWidget*) = drag_highlight;
extern void gtk_drag_unhighlight(GtkWidget*) = drag_unhighlight;
extern void gtk_drag_dest_set(GtkWidget*, int, GtkTargetEntry*, int, int) = drag_dest_set;
extern void gtk_drag_dest_set_proxy(GtkWidget*, GdkWindow*, int, int) = drag_dest_set_proxy;
extern void gtk_drag_dest_unset(GtkWidget*) = drag_dest_unset;
extern void/*struct _GdkAtom*/* gtk_drag_dest_find_target(GtkWidget*, GdkDragContext*, GtkTargetList*) = drag_dest_find_target;
extern GtkTargetList* gtk_drag_dest_get_target_list(GtkWidget*) = drag_dest_get_target_list;
extern void gtk_drag_dest_set_target_list(GtkWidget*, GtkTargetList*) = drag_dest_set_target_list;
extern void gtk_drag_dest_add_text_targets(GtkWidget*) = drag_dest_add_text_targets;
extern void gtk_drag_dest_add_image_targets(GtkWidget*) = drag_dest_add_image_targets;
extern void gtk_drag_dest_add_uri_targets(GtkWidget*) = drag_dest_add_uri_targets;
extern void gtk_drag_dest_set_track_motion(GtkWidget*, int) = drag_dest_set_track_motion;
extern int gtk_drag_dest_get_track_motion(GtkWidget*) = drag_dest_get_track_motion;
extern void gtk_drag_source_set(GtkWidget*, int, GtkTargetEntry*, int, int) = drag_source_set;
extern void gtk_drag_source_unset(GtkWidget*) = drag_source_unset;
extern GtkTargetList* gtk_drag_source_get_target_list(GtkWidget*) = drag_source_get_target_list;
extern void gtk_drag_source_set_target_list(GtkWidget*, GtkTargetList*) = drag_source_set_target_list;
extern void gtk_drag_source_add_text_targets(GtkWidget*) = drag_source_add_text_targets;
extern void gtk_drag_source_add_image_targets(GtkWidget*) = drag_source_add_image_targets;
extern void gtk_drag_source_add_uri_targets(GtkWidget*) = drag_source_add_uri_targets;
extern void gtk_drag_source_set_icon(GtkWidget*, GdkColormap*, GdkPixmap*, GdkBitmap*) = drag_source_set_icon;
extern void gtk_drag_source_set_icon_pixbuf(GtkWidget*, GdkPixbuf*) = drag_source_set_icon_pixbuf;
extern void gtk_drag_source_set_icon_stock(GtkWidget*, char*) = drag_source_set_icon_stock;
extern void gtk_drag_source_set_icon_name(GtkWidget*, char*) = drag_source_set_icon_name;
extern GdkDragContext* gtk_drag_begin(GtkWidget*, GtkTargetList*, int, int, GdkEvent*) = drag_begin;
extern void gtk_drag_set_icon_widget(GdkDragContext*, GtkWidget*, int, int) = drag_set_icon_widget;
extern void gtk_drag_set_icon_pixmap(GdkDragContext*, GdkColormap*, GdkPixmap*, GdkBitmap*, int, int) = drag_set_icon_pixmap;
extern void gtk_drag_set_icon_pixbuf(GdkDragContext*, GdkPixbuf*, int, int) = drag_set_icon_pixbuf;
extern void gtk_drag_set_icon_stock(GdkDragContext*, char*, int, int) = drag_set_icon_stock;
extern void gtk_drag_set_icon_name(GdkDragContext*, char*, int, int) = drag_set_icon_name;
extern void gtk_drag_set_icon_default(GdkDragContext*) = drag_set_icon_default;
extern int gtk_drag_check_threshold(GtkWidget*, int, int, int, int) = drag_check_threshold;
extern void gtk_drag_set_default_icon(GdkColormap*, GdkPixmap*, GdkBitmap*, int, int) = drag_set_default_icon;
extern long gtk_editable_get_type() = editable_get_type;
extern void gtk_editable_select_region(GtkEditable*, int, int) = editable_select_region;
extern int gtk_editable_get_selection_bounds(GtkEditable*, int*, int*) = editable_get_selection_bounds;
extern void gtk_editable_insert_text(GtkEditable*, char*, int, int*) = editable_insert_text;
extern void gtk_editable_delete_text(GtkEditable*, int, int) = editable_delete_text;
extern char* gtk_editable_get_chars(GtkEditable*, int, int) = editable_get_chars;
extern void gtk_editable_cut_clipboard(GtkEditable*) = editable_cut_clipboard;
extern void gtk_editable_copy_clipboard(GtkEditable*) = editable_copy_clipboard;
extern void gtk_editable_paste_clipboard(GtkEditable*) = editable_paste_clipboard;
extern void gtk_editable_delete_selection(GtkEditable*) = editable_delete_selection;
extern void gtk_editable_set_position(GtkEditable*, int) = editable_set_position;
extern int gtk_editable_get_position(GtkEditable*) = editable_get_position;
extern void gtk_editable_set_editable(GtkEditable*, int) = editable_set_editable;
extern int gtk_editable_get_editable(GtkEditable*) = editable_get_editable;
extern long gtk_im_context_get_type() = im_context_get_type;
extern void gtk_im_context_set_client_window(GtkIMContext*, GdkWindow*) = im_context_set_client_window;
extern void gtk_im_context_get_preedit_string(GtkIMContext*, char**, PangoAttrList**, int*) = im_context_get_preedit_string;
extern int gtk_im_context_filter_keypress(GtkIMContext*, GdkEventKey*) = im_context_filter_keypress;
extern void gtk_im_context_focus_in(GtkIMContext*) = im_context_focus_in;
extern void gtk_im_context_focus_out(GtkIMContext*) = im_context_focus_out;
extern void gtk_im_context_reset(GtkIMContext*) = im_context_reset;
extern void gtk_im_context_set_cursor_location(GtkIMContext*, GdkRectangle*) = im_context_set_cursor_location;
extern void gtk_im_context_set_use_preedit(GtkIMContext*, int) = im_context_set_use_preedit;
extern void gtk_im_context_set_surrounding(GtkIMContext*, char*, int, int) = im_context_set_surrounding;
extern int gtk_im_context_get_surrounding(GtkIMContext*, char**, int*) = im_context_get_surrounding;
extern int gtk_im_context_delete_surrounding(GtkIMContext*, int, int) = im_context_delete_surrounding;
extern long gtk_list_store_get_type() = list_store_get_type;
extern GtkListStore* gtk_list_store_new(int, ...) = list_store_new;
extern GtkListStore* gtk_list_store_newv(int, long*) = list_store_newv;
extern void gtk_list_store_set_column_types(GtkListStore*, int, long*) = list_store_set_column_types;
extern void gtk_list_store_set_value(GtkListStore*, GtkTreeIter*, int, GValue*) = list_store_set_value;
extern void gtk_list_store_set(GtkListStore*, GtkTreeIter*, ...) = list_store_set;
extern void gtk_list_store_set_valuesv(GtkListStore*, GtkTreeIter*, int*, GValue*, int) = list_store_set_valuesv;
extern void gtk_list_store_set_valist(GtkListStore*, GtkTreeIter*, void*) = list_store_set_valist;
extern int gtk_list_store_remove(GtkListStore*, GtkTreeIter*) = list_store_remove;
extern void gtk_list_store_insert(GtkListStore*, GtkTreeIter*, int) = list_store_insert;
extern void gtk_list_store_insert_before(GtkListStore*, GtkTreeIter*, GtkTreeIter*) = list_store_insert_before;
extern void gtk_list_store_insert_after(GtkListStore*, GtkTreeIter*, GtkTreeIter*) = list_store_insert_after;
extern void gtk_list_store_insert_with_values(GtkListStore*, GtkTreeIter*, int, ...) = list_store_insert_with_values;
extern void gtk_list_store_insert_with_valuesv(GtkListStore*, GtkTreeIter*, int, int*, GValue*, int) = list_store_insert_with_valuesv;
extern void gtk_list_store_prepend(GtkListStore*, GtkTreeIter*) = list_store_prepend;
extern void gtk_list_store_append(GtkListStore*, GtkTreeIter*) = list_store_append;
extern void gtk_list_store_clear(GtkListStore*) = list_store_clear;
extern int gtk_list_store_iter_is_valid(GtkListStore*, GtkTreeIter*) = list_store_iter_is_valid;
extern void gtk_list_store_reorder(GtkListStore*, int*) = list_store_reorder;
extern void gtk_list_store_swap(GtkListStore*, GtkTreeIter*, GtkTreeIter*) = list_store_swap;
extern void gtk_list_store_move_after(GtkListStore*, GtkTreeIter*, GtkTreeIter*) = list_store_move_after;
extern void gtk_list_store_move_before(GtkListStore*, GtkTreeIter*, GtkTreeIter*) = list_store_move_before;
extern long gtk_tree_model_filter_get_type() = tree_model_filter_get_type;
extern GtkTreeModel* gtk_tree_model_filter_new(GtkTreeModel*, GtkTreePath*) = tree_model_filter_new;
extern void gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter*, void*, void*, void*) = tree_model_filter_set_visible_func;
extern void gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter*, int, long*, void*, void*, void*) = tree_model_filter_set_modify_func;
extern void gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter*, int) = tree_model_filter_set_visible_column;
extern GtkTreeModel* gtk_tree_model_filter_get_model(GtkTreeModelFilter*) = tree_model_filter_get_model;
extern int gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter*, GtkTreeIter*, GtkTreeIter*) = tree_model_filter_convert_child_iter_to_iter;
extern void gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter*, GtkTreeIter*, GtkTreeIter*) = tree_model_filter_convert_iter_to_child_iter;
extern GtkTreePath* gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter*, GtkTreePath*) = tree_model_filter_convert_child_path_to_path;
extern GtkTreePath* gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter*, GtkTreePath*) = tree_model_filter_convert_path_to_child_path;
extern void gtk_tree_model_filter_refilter(GtkTreeModelFilter*) = tree_model_filter_refilter;
extern void gtk_tree_model_filter_clear_cache(GtkTreeModelFilter*) = tree_model_filter_clear_cache;
extern long gtk_entry_completion_get_type() = entry_completion_get_type;
extern GtkEntryCompletion* gtk_entry_completion_new() = entry_completion_new;
extern GtkWidget* gtk_entry_completion_get_entry(GtkEntryCompletion*) = entry_completion_get_entry;
extern void gtk_entry_completion_set_model(GtkEntryCompletion*, GtkTreeModel*) = entry_completion_set_model;
extern GtkTreeModel* gtk_entry_completion_get_model(GtkEntryCompletion*) = entry_completion_get_model;
extern void gtk_entry_completion_set_match_func(GtkEntryCompletion*, void*, void*, void*) = entry_completion_set_match_func;
extern void gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion*, int) = entry_completion_set_minimum_key_length;
extern int gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion*) = entry_completion_get_minimum_key_length;
extern void gtk_entry_completion_complete(GtkEntryCompletion*) = entry_completion_complete;
extern void gtk_entry_completion_insert_prefix(GtkEntryCompletion*) = entry_completion_insert_prefix;
extern void gtk_entry_completion_insert_action_text(GtkEntryCompletion*, int, char*) = entry_completion_insert_action_text;
extern void gtk_entry_completion_insert_action_markup(GtkEntryCompletion*, int, char*) = entry_completion_insert_action_markup;
extern void gtk_entry_completion_delete_action(GtkEntryCompletion*, int) = entry_completion_delete_action;
extern void gtk_entry_completion_set_inline_completion(GtkEntryCompletion*, int) = entry_completion_set_inline_completion;
extern int gtk_entry_completion_get_inline_completion(GtkEntryCompletion*) = entry_completion_get_inline_completion;
extern void gtk_entry_completion_set_inline_selection(GtkEntryCompletion*, int) = entry_completion_set_inline_selection;
extern int gtk_entry_completion_get_inline_selection(GtkEntryCompletion*) = entry_completion_get_inline_selection;
extern void gtk_entry_completion_set_popup_completion(GtkEntryCompletion*, int) = entry_completion_set_popup_completion;
extern int gtk_entry_completion_get_popup_completion(GtkEntryCompletion*) = entry_completion_get_popup_completion;
extern void gtk_entry_completion_set_popup_set_width(GtkEntryCompletion*, int) = entry_completion_set_popup_set_width;
extern int gtk_entry_completion_get_popup_set_width(GtkEntryCompletion*) = entry_completion_get_popup_set_width;
extern void gtk_entry_completion_set_popup_single_match(GtkEntryCompletion*, int) = entry_completion_set_popup_single_match;
extern int gtk_entry_completion_get_popup_single_match(GtkEntryCompletion*) = entry_completion_get_popup_single_match;
extern char* gtk_entry_completion_get_completion_prefix(GtkEntryCompletion*) = entry_completion_get_completion_prefix;
extern void gtk_entry_completion_set_text_column(GtkEntryCompletion*, int) = entry_completion_set_text_column;
extern int gtk_entry_completion_get_text_column(GtkEntryCompletion*) = entry_completion_get_text_column;
extern long gtk_entry_get_type() = entry_get_type;
extern GtkWidget* gtk_entry_new() = entry_new;
extern void gtk_entry_set_visibility(GtkEntry*, int) = entry_set_visibility;
extern int gtk_entry_get_visibility(GtkEntry*) = entry_get_visibility;
extern void gtk_entry_set_invisible_char(GtkEntry*, int) = entry_set_invisible_char;
extern int gtk_entry_get_invisible_char(GtkEntry*) = entry_get_invisible_char;
extern void gtk_entry_set_has_frame(GtkEntry*, int) = entry_set_has_frame;
extern int gtk_entry_get_has_frame(GtkEntry*) = entry_get_has_frame;
extern void gtk_entry_set_inner_border(GtkEntry*, GtkBorder*) = entry_set_inner_border;
extern GtkBorder* gtk_entry_get_inner_border(GtkEntry*) = entry_get_inner_border;
extern void gtk_entry_set_overwrite_mode(GtkEntry*, int) = entry_set_overwrite_mode;
extern int gtk_entry_get_overwrite_mode(GtkEntry*) = entry_get_overwrite_mode;
extern void gtk_entry_set_max_length(GtkEntry*, int) = entry_set_max_length;
extern int gtk_entry_get_max_length(GtkEntry*) = entry_get_max_length;
extern short gtk_entry_get_text_length(GtkEntry*) = entry_get_text_length;
extern void gtk_entry_set_activates_default(GtkEntry*, int) = entry_set_activates_default;
extern int gtk_entry_get_activates_default(GtkEntry*) = entry_get_activates_default;
extern void gtk_entry_set_width_chars(GtkEntry*, int) = entry_set_width_chars;
extern int gtk_entry_get_width_chars(GtkEntry*) = entry_get_width_chars;
extern void gtk_entry_set_text(GtkEntry*, char*) = entry_set_text;
extern char* gtk_entry_get_text(GtkEntry*) = entry_get_text;
extern PangoLayout* gtk_entry_get_layout(GtkEntry*) = entry_get_layout;
extern void gtk_entry_get_layout_offsets(GtkEntry*, int*, int*) = entry_get_layout_offsets;
extern void gtk_entry_set_alignment(GtkEntry*, float) = entry_set_alignment;
extern float gtk_entry_get_alignment(GtkEntry*) = entry_get_alignment;
extern void gtk_entry_set_completion(GtkEntry*, GtkEntryCompletion*) = entry_set_completion;
extern GtkEntryCompletion* gtk_entry_get_completion(GtkEntry*) = entry_get_completion;
extern int gtk_entry_layout_index_to_text_index(GtkEntry*, int) = entry_layout_index_to_text_index;
extern int gtk_entry_text_index_to_layout_index(GtkEntry*, int) = entry_text_index_to_layout_index;
extern void gtk_entry_set_cursor_hadjustment(GtkEntry*, GtkAdjustment*) = entry_set_cursor_hadjustment;
extern GtkAdjustment* gtk_entry_get_cursor_hadjustment(GtkEntry*) = entry_get_cursor_hadjustment;
extern GtkWidget* gtk_entry_new_with_max_length(int) = entry_new_with_max_length;
extern void gtk_entry_append_text(GtkEntry*, char*) = entry_append_text;
extern void gtk_entry_prepend_text(GtkEntry*, char*) = entry_prepend_text;
extern void gtk_entry_set_position(GtkEntry*, int) = entry_set_position;
extern void gtk_entry_select_region(GtkEntry*, int, int) = entry_select_region;
extern void gtk_entry_set_editable(GtkEntry*, int) = entry_set_editable;
extern long gtk_tree_view_get_type() = tree_view_get_type;
extern GtkWidget* gtk_tree_view_new() = tree_view_new;
extern GtkWidget* gtk_tree_view_new_with_model(GtkTreeModel*) = tree_view_new_with_model;
extern GtkTreeModel* gtk_tree_view_get_model(GtkTreeView*) = tree_view_get_model;
extern void gtk_tree_view_set_model(GtkTreeView*, GtkTreeModel*) = tree_view_set_model;
extern GtkTreeSelection* gtk_tree_view_get_selection(GtkTreeView*) = tree_view_get_selection;
extern GtkAdjustment* gtk_tree_view_get_hadjustment(GtkTreeView*) = tree_view_get_hadjustment;
extern void gtk_tree_view_set_hadjustment(GtkTreeView*, GtkAdjustment*) = tree_view_set_hadjustment;
extern GtkAdjustment* gtk_tree_view_get_vadjustment(GtkTreeView*) = tree_view_get_vadjustment;
extern void gtk_tree_view_set_vadjustment(GtkTreeView*, GtkAdjustment*) = tree_view_set_vadjustment;
extern int gtk_tree_view_get_headers_visible(GtkTreeView*) = tree_view_get_headers_visible;
extern void gtk_tree_view_set_headers_visible(GtkTreeView*, int) = tree_view_set_headers_visible;
extern void gtk_tree_view_columns_autosize(GtkTreeView*) = tree_view_columns_autosize;
extern int gtk_tree_view_get_headers_clickable(GtkTreeView*) = tree_view_get_headers_clickable;
extern void gtk_tree_view_set_headers_clickable(GtkTreeView*, int) = tree_view_set_headers_clickable;
extern void gtk_tree_view_set_rules_hint(GtkTreeView*, int) = tree_view_set_rules_hint;
extern int gtk_tree_view_get_rules_hint(GtkTreeView*) = tree_view_get_rules_hint;
extern int gtk_tree_view_append_column(GtkTreeView*, GtkTreeViewColumn*) = tree_view_append_column;
extern int gtk_tree_view_remove_column(GtkTreeView*, GtkTreeViewColumn*) = tree_view_remove_column;
extern int gtk_tree_view_insert_column(GtkTreeView*, GtkTreeViewColumn*, int) = tree_view_insert_column;
extern int gtk_tree_view_insert_column_with_attributes(GtkTreeView*, int, char*, GtkCellRenderer*, ...) = tree_view_insert_column_with_attributes;
extern int gtk_tree_view_insert_column_with_data_func(GtkTreeView*, int, char*, GtkCellRenderer*, void*, void*, void*) = tree_view_insert_column_with_data_func;
extern GtkTreeViewColumn* gtk_tree_view_get_column(GtkTreeView*, int) = tree_view_get_column;
extern GList* gtk_tree_view_get_columns(GtkTreeView*) = tree_view_get_columns;
extern void gtk_tree_view_move_column_after(GtkTreeView*, GtkTreeViewColumn*, GtkTreeViewColumn*) = tree_view_move_column_after;
extern void gtk_tree_view_set_expander_column(GtkTreeView*, GtkTreeViewColumn*) = tree_view_set_expander_column;
extern GtkTreeViewColumn* gtk_tree_view_get_expander_column(GtkTreeView*) = tree_view_get_expander_column;
extern void gtk_tree_view_set_column_drag_function(GtkTreeView*, void*, void*, void*) = tree_view_set_column_drag_function;
extern void gtk_tree_view_scroll_to_point(GtkTreeView*, int, int) = tree_view_scroll_to_point;
extern void gtk_tree_view_scroll_to_cell(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, int, float, float) = tree_view_scroll_to_cell;
extern void gtk_tree_view_row_activated(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*) = tree_view_row_activated;
extern void gtk_tree_view_expand_all(GtkTreeView*) = tree_view_expand_all;
extern void gtk_tree_view_collapse_all(GtkTreeView*) = tree_view_collapse_all;
extern void gtk_tree_view_expand_to_path(GtkTreeView*, GtkTreePath*) = tree_view_expand_to_path;
extern int gtk_tree_view_expand_row(GtkTreeView*, GtkTreePath*, int) = tree_view_expand_row;
extern int gtk_tree_view_collapse_row(GtkTreeView*, GtkTreePath*) = tree_view_collapse_row;
extern void gtk_tree_view_map_expanded_rows(GtkTreeView*, void*, void*) = tree_view_map_expanded_rows;
extern int gtk_tree_view_row_expanded(GtkTreeView*, GtkTreePath*) = tree_view_row_expanded;
extern void gtk_tree_view_set_reorderable(GtkTreeView*, int) = tree_view_set_reorderable;
extern int gtk_tree_view_get_reorderable(GtkTreeView*) = tree_view_get_reorderable;
extern void gtk_tree_view_set_cursor(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, int) = tree_view_set_cursor;
extern void gtk_tree_view_set_cursor_on_cell(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, GtkCellRenderer*, int) = tree_view_set_cursor_on_cell;
extern void gtk_tree_view_get_cursor(GtkTreeView*, GtkTreePath**, GtkTreeViewColumn**) = tree_view_get_cursor;
extern GdkWindow* gtk_tree_view_get_bin_window(GtkTreeView*) = tree_view_get_bin_window;
extern int gtk_tree_view_get_path_at_pos(GtkTreeView*, int, int, GtkTreePath**, GtkTreeViewColumn**, int*, int*) = tree_view_get_path_at_pos;
extern void gtk_tree_view_get_cell_area(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, GdkRectangle*) = tree_view_get_cell_area;
extern void gtk_tree_view_get_background_area(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*, GdkRectangle*) = tree_view_get_background_area;
extern void gtk_tree_view_get_visible_rect(GtkTreeView*, GdkRectangle*) = tree_view_get_visible_rect;
extern void gtk_tree_view_widget_to_tree_coords(GtkTreeView*, int, int, int*, int*) = tree_view_widget_to_tree_coords;
extern void gtk_tree_view_tree_to_widget_coords(GtkTreeView*, int, int, int*, int*) = tree_view_tree_to_widget_coords;
extern int gtk_tree_view_get_visible_range(GtkTreeView*, GtkTreePath**, GtkTreePath**) = tree_view_get_visible_range;
extern void gtk_tree_view_enable_model_drag_source(GtkTreeView*, int, GtkTargetEntry*, int, int) = tree_view_enable_model_drag_source;
extern void gtk_tree_view_enable_model_drag_dest(GtkTreeView*, GtkTargetEntry*, int, int) = tree_view_enable_model_drag_dest;
extern void gtk_tree_view_unset_rows_drag_source(GtkTreeView*) = tree_view_unset_rows_drag_source;
extern void gtk_tree_view_unset_rows_drag_dest(GtkTreeView*) = tree_view_unset_rows_drag_dest;
extern void gtk_tree_view_set_drag_dest_row(GtkTreeView*, GtkTreePath*, int) = tree_view_set_drag_dest_row;
extern void gtk_tree_view_get_drag_dest_row(GtkTreeView*, GtkTreePath**, int*) = tree_view_get_drag_dest_row;
extern int gtk_tree_view_get_dest_row_at_pos(GtkTreeView*, int, int, GtkTreePath**, int*) = tree_view_get_dest_row_at_pos;
extern GdkPixmap* gtk_tree_view_create_row_drag_icon(GtkTreeView*, GtkTreePath*) = tree_view_create_row_drag_icon;
extern void gtk_tree_view_set_enable_search(GtkTreeView*, int) = tree_view_set_enable_search;
extern int gtk_tree_view_get_enable_search(GtkTreeView*) = tree_view_get_enable_search;
extern int gtk_tree_view_get_search_column(GtkTreeView*) = tree_view_get_search_column;
extern void gtk_tree_view_set_search_column(GtkTreeView*, int) = tree_view_set_search_column;
extern void* gtk_tree_view_get_search_equal_func(GtkTreeView*) = tree_view_get_search_equal_func;
extern void gtk_tree_view_set_search_equal_func(GtkTreeView*, void*, void*, void*) = tree_view_set_search_equal_func;
extern GtkEntry* gtk_tree_view_get_search_entry(GtkTreeView*) = tree_view_get_search_entry;
extern void gtk_tree_view_set_search_entry(GtkTreeView*, GtkEntry*) = tree_view_set_search_entry;
extern void* gtk_tree_view_get_search_position_func(GtkTreeView*) = tree_view_get_search_position_func;
extern void gtk_tree_view_set_search_position_func(GtkTreeView*, void*, void*, void*) = tree_view_set_search_position_func;
extern void gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_widget_to_tree_coords;
extern void gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_tree_to_widget_coords;
extern void gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_widget_to_bin_window_coords;
extern void gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_bin_window_to_widget_coords;
extern void gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_tree_to_bin_window_coords;
extern void gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView*, int, int, int*, int*) = tree_view_convert_bin_window_to_tree_coords;
extern void gtk_tree_view_set_destroy_count_func(GtkTreeView*, void*, void*, void*) = tree_view_set_destroy_count_func;
extern void gtk_tree_view_set_fixed_height_mode(GtkTreeView*, int) = tree_view_set_fixed_height_mode;
extern int gtk_tree_view_get_fixed_height_mode(GtkTreeView*) = tree_view_get_fixed_height_mode;
extern void gtk_tree_view_set_hover_selection(GtkTreeView*, int) = tree_view_set_hover_selection;
extern int gtk_tree_view_get_hover_selection(GtkTreeView*) = tree_view_get_hover_selection;
extern void gtk_tree_view_set_hover_expand(GtkTreeView*, int) = tree_view_set_hover_expand;
extern int gtk_tree_view_get_hover_expand(GtkTreeView*) = tree_view_get_hover_expand;
extern void gtk_tree_view_set_rubber_banding(GtkTreeView*, int) = tree_view_set_rubber_banding;
extern int gtk_tree_view_get_rubber_banding(GtkTreeView*) = tree_view_get_rubber_banding;
extern int gtk_tree_view_is_rubber_banding_active(GtkTreeView*) = tree_view_is_rubber_banding_active;
extern void* gtk_tree_view_get_row_separator_func(GtkTreeView*) = tree_view_get_row_separator_func;
extern void gtk_tree_view_set_row_separator_func(GtkTreeView*, void*, void*, void*) = tree_view_set_row_separator_func;
extern int gtk_tree_view_get_grid_lines(GtkTreeView*) = tree_view_get_grid_lines;
extern void gtk_tree_view_set_grid_lines(GtkTreeView*, int) = tree_view_set_grid_lines;
extern int gtk_tree_view_get_enable_tree_lines(GtkTreeView*) = tree_view_get_enable_tree_lines;
extern void gtk_tree_view_set_enable_tree_lines(GtkTreeView*, int) = tree_view_set_enable_tree_lines;
extern void gtk_tree_view_set_show_expanders(GtkTreeView*, int) = tree_view_set_show_expanders;
extern int gtk_tree_view_get_show_expanders(GtkTreeView*) = tree_view_get_show_expanders;
extern void gtk_tree_view_set_level_indentation(GtkTreeView*, int) = tree_view_set_level_indentation;
extern int gtk_tree_view_get_level_indentation(GtkTreeView*) = tree_view_get_level_indentation;
extern void gtk_tree_view_set_tooltip_row(GtkTreeView*, GtkTooltip*, GtkTreePath*) = tree_view_set_tooltip_row;
extern void gtk_tree_view_set_tooltip_cell(GtkTreeView*, GtkTooltip*, GtkTreePath*, GtkTreeViewColumn*, GtkCellRenderer*) = tree_view_set_tooltip_cell;
extern int gtk_tree_view_get_tooltip_context(GtkTreeView*, int*, int*, int, GtkTreeModel**, GtkTreePath**, GtkTreeIter*) = tree_view_get_tooltip_context;
extern void gtk_tree_view_set_tooltip_column(GtkTreeView*, int) = tree_view_set_tooltip_column;
extern int gtk_tree_view_get_tooltip_column(GtkTreeView*) = tree_view_get_tooltip_column;
extern long gtk_combo_box_get_type() = combo_box_get_type;
extern GtkWidget* gtk_combo_box_new() = combo_box_new;
extern GtkWidget* gtk_combo_box_new_with_model(GtkTreeModel*) = combo_box_new_with_model;
extern int gtk_combo_box_get_wrap_width(GtkComboBox*) = combo_box_get_wrap_width;
extern void gtk_combo_box_set_wrap_width(GtkComboBox*, int) = combo_box_set_wrap_width;
extern int gtk_combo_box_get_row_span_column(GtkComboBox*) = combo_box_get_row_span_column;
extern void gtk_combo_box_set_row_span_column(GtkComboBox*, int) = combo_box_set_row_span_column;
extern int gtk_combo_box_get_column_span_column(GtkComboBox*) = combo_box_get_column_span_column;
extern void gtk_combo_box_set_column_span_column(GtkComboBox*, int) = combo_box_set_column_span_column;
extern int gtk_combo_box_get_add_tearoffs(GtkComboBox*) = combo_box_get_add_tearoffs;
extern void gtk_combo_box_set_add_tearoffs(GtkComboBox*, int) = combo_box_set_add_tearoffs;
extern char* gtk_combo_box_get_title(GtkComboBox*) = combo_box_get_title;
extern void gtk_combo_box_set_title(GtkComboBox*, char*) = combo_box_set_title;
extern int gtk_combo_box_get_focus_on_click(GtkComboBox*) = combo_box_get_focus_on_click;
extern void gtk_combo_box_set_focus_on_click(GtkComboBox*, int) = combo_box_set_focus_on_click;
extern int gtk_combo_box_get_active(GtkComboBox*) = combo_box_get_active;
extern void gtk_combo_box_set_active(GtkComboBox*, int) = combo_box_set_active;
extern int gtk_combo_box_get_active_iter(GtkComboBox*, GtkTreeIter*) = combo_box_get_active_iter;
extern void gtk_combo_box_set_active_iter(GtkComboBox*, GtkTreeIter*) = combo_box_set_active_iter;
extern void gtk_combo_box_set_model(GtkComboBox*, GtkTreeModel*) = combo_box_set_model;
extern GtkTreeModel* gtk_combo_box_get_model(GtkComboBox*) = combo_box_get_model;
extern void* gtk_combo_box_get_row_separator_func(GtkComboBox*) = combo_box_get_row_separator_func;
extern void gtk_combo_box_set_row_separator_func(GtkComboBox*, void*, void*, void*) = combo_box_set_row_separator_func;
extern void gtk_combo_box_set_button_sensitivity(GtkComboBox*, int) = combo_box_set_button_sensitivity;
extern int gtk_combo_box_get_button_sensitivity(GtkComboBox*) = combo_box_get_button_sensitivity;
extern GtkWidget* gtk_combo_box_new_text() = combo_box_new_text;
extern void gtk_combo_box_append_text(GtkComboBox*, char*) = combo_box_append_text;
extern void gtk_combo_box_insert_text(GtkComboBox*, int, char*) = combo_box_insert_text;
extern void gtk_combo_box_prepend_text(GtkComboBox*, char*) = combo_box_prepend_text;
extern void gtk_combo_box_remove_text(GtkComboBox*, int) = combo_box_remove_text;
extern char* gtk_combo_box_get_active_text(GtkComboBox*) = combo_box_get_active_text;
extern void gtk_combo_box_popup(GtkComboBox*) = combo_box_popup;
extern void gtk_combo_box_popdown(GtkComboBox*) = combo_box_popdown;
extern AtkObject* gtk_combo_box_get_popup_accessible(GtkComboBox*) = combo_box_get_popup_accessible;
extern long gtk_combo_box_entry_get_type() = combo_box_entry_get_type;
extern GtkWidget* gtk_combo_box_entry_new() = combo_box_entry_new;
extern GtkWidget* gtk_combo_box_entry_new_with_model(GtkTreeModel*, int) = combo_box_entry_new_with_model;
extern void gtk_combo_box_entry_set_text_column(GtkComboBoxEntry*, int) = combo_box_entry_set_text_column;
extern int gtk_combo_box_entry_get_text_column(GtkComboBoxEntry*) = combo_box_entry_get_text_column;
extern GtkWidget* gtk_combo_box_entry_new_text() = combo_box_entry_new_text;
extern long gtk_drawing_area_get_type() = drawing_area_get_type;
extern GtkWidget* gtk_drawing_area_new() = drawing_area_new;
extern void gtk_drawing_area_size(GtkDrawingArea*, int, int) = drawing_area_size;
extern long gtk_curve_get_type() = curve_get_type;
extern GtkWidget* gtk_curve_new() = curve_new;
extern void gtk_curve_reset(GtkCurve*) = curve_reset;
extern void gtk_curve_set_gamma(GtkCurve*, float) = curve_set_gamma;
extern void gtk_curve_set_range(GtkCurve*, float, float, float, float) = curve_set_range;
extern void gtk_curve_get_vector(GtkCurve*, int, float*) = curve_get_vector;
extern void gtk_curve_set_vector(GtkCurve*, int, float*) = curve_set_vector;
extern void gtk_curve_set_curve_type(GtkCurve*, int) = curve_set_curve_type;
extern long gtk_event_box_get_type() = event_box_get_type;
extern GtkWidget* gtk_event_box_new() = event_box_new;
extern int gtk_event_box_get_visible_window(GtkEventBox*) = event_box_get_visible_window;
extern void gtk_event_box_set_visible_window(GtkEventBox*, int) = event_box_set_visible_window;
extern int gtk_event_box_get_above_child(GtkEventBox*) = event_box_get_above_child;
extern void gtk_event_box_set_above_child(GtkEventBox*, int) = event_box_set_above_child;
extern long gtk_expander_get_type() = expander_get_type;
extern GtkWidget* gtk_expander_new(char*) = expander_new;
extern GtkWidget* gtk_expander_new_with_mnemonic(char*) = expander_new_with_mnemonic;
extern void gtk_expander_set_expanded(GtkExpander*, int) = expander_set_expanded;
extern int gtk_expander_get_expanded(GtkExpander*) = expander_get_expanded;
extern void gtk_expander_set_spacing(GtkExpander*, int) = expander_set_spacing;
extern int gtk_expander_get_spacing(GtkExpander*) = expander_get_spacing;
extern void gtk_expander_set_label(GtkExpander*, char*) = expander_set_label;
extern char* gtk_expander_get_label(GtkExpander*) = expander_get_label;
extern void gtk_expander_set_use_underline(GtkExpander*, int) = expander_set_use_underline;
extern int gtk_expander_get_use_underline(GtkExpander*) = expander_get_use_underline;
extern void gtk_expander_set_use_markup(GtkExpander*, int) = expander_set_use_markup;
extern int gtk_expander_get_use_markup(GtkExpander*) = expander_get_use_markup;
extern void gtk_expander_set_label_widget(GtkExpander*, GtkWidget*) = expander_set_label_widget;
extern GtkWidget* gtk_expander_get_label_widget(GtkExpander*) = expander_get_label_widget;
extern long gtk_fixed_get_type() = fixed_get_type;
extern GtkWidget* gtk_fixed_new() = fixed_new;
extern void gtk_fixed_put(GtkFixed*, GtkWidget*, int, int) = fixed_put;
extern void gtk_fixed_move(GtkFixed*, GtkWidget*, int, int) = fixed_move;
extern void gtk_fixed_set_has_window(GtkFixed*, int) = fixed_set_has_window;
extern int gtk_fixed_get_has_window(GtkFixed*) = fixed_get_has_window;
extern long gtk_file_filter_get_type() = file_filter_get_type;
extern GtkFileFilter* gtk_file_filter_new() = file_filter_new;
extern void gtk_file_filter_set_name(GtkFileFilter*, char*) = file_filter_set_name;
extern char* gtk_file_filter_get_name(GtkFileFilter*) = file_filter_get_name;
extern void gtk_file_filter_add_mime_type(GtkFileFilter*, char*) = file_filter_add_mime_type;
extern void gtk_file_filter_add_pattern(GtkFileFilter*, char*) = file_filter_add_pattern;
extern void gtk_file_filter_add_pixbuf_formats(GtkFileFilter*) = file_filter_add_pixbuf_formats;
extern void gtk_file_filter_add_custom(GtkFileFilter*, int, void*, void*, void*) = file_filter_add_custom;
extern int gtk_file_filter_get_needed(GtkFileFilter*) = file_filter_get_needed;
extern int gtk_file_filter_filter(GtkFileFilter*, GtkFileFilterInfo*) = file_filter_filter;
extern long gtk_file_chooser_get_type() = file_chooser_get_type;
extern int gtk_file_chooser_error_quark() = file_chooser_error_quark;
extern void gtk_file_chooser_set_action(GtkFileChooser*, int) = file_chooser_set_action;
extern int gtk_file_chooser_get_action(GtkFileChooser*) = file_chooser_get_action;
extern void gtk_file_chooser_set_local_only(GtkFileChooser*, int) = file_chooser_set_local_only;
extern int gtk_file_chooser_get_local_only(GtkFileChooser*) = file_chooser_get_local_only;
extern void gtk_file_chooser_set_select_multiple(GtkFileChooser*, int) = file_chooser_set_select_multiple;
extern int gtk_file_chooser_get_select_multiple(GtkFileChooser*) = file_chooser_get_select_multiple;
extern void gtk_file_chooser_set_show_hidden(GtkFileChooser*, int) = file_chooser_set_show_hidden;
extern int gtk_file_chooser_get_show_hidden(GtkFileChooser*) = file_chooser_get_show_hidden;
extern void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser*, int) = file_chooser_set_do_overwrite_confirmation;
extern int gtk_file_chooser_get_do_overwrite_confirmation(GtkFileChooser*) = file_chooser_get_do_overwrite_confirmation;
extern void gtk_file_chooser_set_current_name(GtkFileChooser*, char*) = file_chooser_set_current_name;
extern char* gtk_file_chooser_get_filename(GtkFileChooser*) = file_chooser_get_filename;
extern int gtk_file_chooser_set_filename(GtkFileChooser*, char*) = file_chooser_set_filename;
extern int gtk_file_chooser_select_filename(GtkFileChooser*, char*) = file_chooser_select_filename;
extern void gtk_file_chooser_unselect_filename(GtkFileChooser*, char*) = file_chooser_unselect_filename;
extern void gtk_file_chooser_select_all(GtkFileChooser*) = file_chooser_select_all;
extern void gtk_file_chooser_unselect_all(GtkFileChooser*) = file_chooser_unselect_all;
extern GSList* gtk_file_chooser_get_filenames(GtkFileChooser*) = file_chooser_get_filenames;
extern int gtk_file_chooser_set_current_folder(GtkFileChooser*, char*) = file_chooser_set_current_folder;
extern char* gtk_file_chooser_get_current_folder(GtkFileChooser*) = file_chooser_get_current_folder;
extern char* gtk_file_chooser_get_uri(GtkFileChooser*) = file_chooser_get_uri;
extern int gtk_file_chooser_set_uri(GtkFileChooser*, char*) = file_chooser_set_uri;
extern int gtk_file_chooser_select_uri(GtkFileChooser*, char*) = file_chooser_select_uri;
extern void gtk_file_chooser_unselect_uri(GtkFileChooser*, char*) = file_chooser_unselect_uri;
extern GSList* gtk_file_chooser_get_uris(GtkFileChooser*) = file_chooser_get_uris;
extern int gtk_file_chooser_set_current_folder_uri(GtkFileChooser*, char*) = file_chooser_set_current_folder_uri;
extern char* gtk_file_chooser_get_current_folder_uri(GtkFileChooser*) = file_chooser_get_current_folder_uri;
extern GFile* gtk_file_chooser_get_file(GtkFileChooser*) = file_chooser_get_file;
extern int gtk_file_chooser_set_file(GtkFileChooser*, GFile*, GError**) = file_chooser_set_file;
extern int gtk_file_chooser_select_file(GtkFileChooser*, GFile*, GError**) = file_chooser_select_file;
extern void gtk_file_chooser_unselect_file(GtkFileChooser*, GFile*) = file_chooser_unselect_file;
extern GSList* gtk_file_chooser_get_files(GtkFileChooser*) = file_chooser_get_files;
extern int gtk_file_chooser_set_current_folder_file(GtkFileChooser*, GFile*, GError**) = file_chooser_set_current_folder_file;
extern GFile* gtk_file_chooser_get_current_folder_file(GtkFileChooser*) = file_chooser_get_current_folder_file;
extern void gtk_file_chooser_set_preview_widget(GtkFileChooser*, GtkWidget*) = file_chooser_set_preview_widget;
extern GtkWidget* gtk_file_chooser_get_preview_widget(GtkFileChooser*) = file_chooser_get_preview_widget;
extern void gtk_file_chooser_set_preview_widget_active(GtkFileChooser*, int) = file_chooser_set_preview_widget_active;
extern int gtk_file_chooser_get_preview_widget_active(GtkFileChooser*) = file_chooser_get_preview_widget_active;
extern void gtk_file_chooser_set_use_preview_label(GtkFileChooser*, int) = file_chooser_set_use_preview_label;
extern int gtk_file_chooser_get_use_preview_label(GtkFileChooser*) = file_chooser_get_use_preview_label;
extern char* gtk_file_chooser_get_preview_filename(GtkFileChooser*) = file_chooser_get_preview_filename;
extern char* gtk_file_chooser_get_preview_uri(GtkFileChooser*) = file_chooser_get_preview_uri;
extern GFile* gtk_file_chooser_get_preview_file(GtkFileChooser*) = file_chooser_get_preview_file;
extern void gtk_file_chooser_set_extra_widget(GtkFileChooser*, GtkWidget*) = file_chooser_set_extra_widget;
extern GtkWidget* gtk_file_chooser_get_extra_widget(GtkFileChooser*) = file_chooser_get_extra_widget;
extern void gtk_file_chooser_add_filter(GtkFileChooser*, GtkFileFilter*) = file_chooser_add_filter;
extern void gtk_file_chooser_remove_filter(GtkFileChooser*, GtkFileFilter*) = file_chooser_remove_filter;
extern GSList* gtk_file_chooser_list_filters(GtkFileChooser*) = file_chooser_list_filters;
extern void gtk_file_chooser_set_filter(GtkFileChooser*, GtkFileFilter*) = file_chooser_set_filter;
extern GtkFileFilter* gtk_file_chooser_get_filter(GtkFileChooser*) = file_chooser_get_filter;
extern int gtk_file_chooser_add_shortcut_folder(GtkFileChooser*, char*, GError**) = file_chooser_add_shortcut_folder;
extern int gtk_file_chooser_remove_shortcut_folder(GtkFileChooser*, char*, GError**) = file_chooser_remove_shortcut_folder;
extern GSList* gtk_file_chooser_list_shortcut_folders(GtkFileChooser*) = file_chooser_list_shortcut_folders;
extern int gtk_file_chooser_add_shortcut_folder_uri(GtkFileChooser*, char*, GError**) = file_chooser_add_shortcut_folder_uri;
extern int gtk_file_chooser_remove_shortcut_folder_uri(GtkFileChooser*, char*, GError**) = file_chooser_remove_shortcut_folder_uri;
extern GSList* gtk_file_chooser_list_shortcut_folder_uris(GtkFileChooser*) = file_chooser_list_shortcut_folder_uris;
extern long gtk_hbox_get_type() = hbox_get_type;
extern GtkWidget* gtk_hbox_new(int, int) = hbox_new;
extern long gtk_file_chooser_button_get_type() = file_chooser_button_get_type;
extern GtkWidget* gtk_file_chooser_button_new(char*, int) = file_chooser_button_new;
extern GtkWidget* gtk_file_chooser_button_new_with_backend(char*, int, char*) = file_chooser_button_new_with_backend;
extern GtkWidget* gtk_file_chooser_button_new_with_dialog(GtkWidget*) = file_chooser_button_new_with_dialog;
extern char* gtk_file_chooser_button_get_title(GtkFileChooserButton*) = file_chooser_button_get_title;
extern void gtk_file_chooser_button_set_title(GtkFileChooserButton*, char*) = file_chooser_button_set_title;
extern int gtk_file_chooser_button_get_width_chars(GtkFileChooserButton*) = file_chooser_button_get_width_chars;
extern void gtk_file_chooser_button_set_width_chars(GtkFileChooserButton*, int) = file_chooser_button_set_width_chars;
extern int gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton*) = file_chooser_button_get_focus_on_click;
extern void gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton*, int) = file_chooser_button_set_focus_on_click;
extern long gtk_file_chooser_dialog_get_type() = file_chooser_dialog_get_type;
extern GtkWidget* gtk_file_chooser_dialog_new(char*, GtkWindow*, int, char*, ...) = file_chooser_dialog_new;
extern GtkWidget* gtk_file_chooser_dialog_new_with_backend(char*, GtkWindow*, int, char*, char*, ...) = file_chooser_dialog_new_with_backend;
extern long gtk_file_chooser_widget_get_type() = file_chooser_widget_get_type;
extern GtkWidget* gtk_file_chooser_widget_new(int) = file_chooser_widget_new;
extern GtkWidget* gtk_file_chooser_widget_new_with_backend(int, char*) = file_chooser_widget_new_with_backend;
extern long gtk_font_button_get_type() = font_button_get_type;
extern GtkWidget* gtk_font_button_new() = font_button_new;
extern GtkWidget* gtk_font_button_new_with_font(char*) = font_button_new_with_font;
extern char* gtk_font_button_get_title(GtkFontButton*) = font_button_get_title;
extern void gtk_font_button_set_title(GtkFontButton*, char*) = font_button_set_title;
extern int gtk_font_button_get_use_font(GtkFontButton*) = font_button_get_use_font;
extern void gtk_font_button_set_use_font(GtkFontButton*, int) = font_button_set_use_font;
extern int gtk_font_button_get_use_size(GtkFontButton*) = font_button_get_use_size;
extern void gtk_font_button_set_use_size(GtkFontButton*, int) = font_button_set_use_size;
extern char* gtk_font_button_get_font_name(GtkFontButton*) = font_button_get_font_name;
extern int gtk_font_button_set_font_name(GtkFontButton*, char*) = font_button_set_font_name;
extern int gtk_font_button_get_show_style(GtkFontButton*) = font_button_get_show_style;
extern void gtk_font_button_set_show_style(GtkFontButton*, int) = font_button_set_show_style;
extern int gtk_font_button_get_show_size(GtkFontButton*) = font_button_get_show_size;
extern void gtk_font_button_set_show_size(GtkFontButton*, int) = font_button_set_show_size;
extern long gtk_font_selection_get_type() = font_selection_get_type;
extern GtkWidget* gtk_font_selection_new() = font_selection_new;
extern GtkWidget* gtk_font_selection_get_family_list(GtkFontSelection*) = font_selection_get_family_list;
extern GtkWidget* gtk_font_selection_get_face_list(GtkFontSelection*) = font_selection_get_face_list;
extern GtkWidget* gtk_font_selection_get_size_entry(GtkFontSelection*) = font_selection_get_size_entry;
extern GtkWidget* gtk_font_selection_get_size_list(GtkFontSelection*) = font_selection_get_size_list;
extern GtkWidget* gtk_font_selection_get_preview_entry(GtkFontSelection*) = font_selection_get_preview_entry;
extern PangoFontFamily* gtk_font_selection_get_family(GtkFontSelection*) = font_selection_get_family;
extern PangoFontFace* gtk_font_selection_get_face(GtkFontSelection*) = font_selection_get_face;
extern int gtk_font_selection_get_size(GtkFontSelection*) = font_selection_get_size;
extern char* gtk_font_selection_get_font_name(GtkFontSelection*) = font_selection_get_font_name;
extern GdkFont* gtk_font_selection_get_font(GtkFontSelection*) = font_selection_get_font;
extern int gtk_font_selection_set_font_name(GtkFontSelection*, char*) = font_selection_set_font_name;
extern char* gtk_font_selection_get_preview_text(GtkFontSelection*) = font_selection_get_preview_text;
extern void gtk_font_selection_set_preview_text(GtkFontSelection*, char*) = font_selection_set_preview_text;
extern long gtk_font_selection_dialog_get_type() = font_selection_dialog_get_type;
extern GtkWidget* gtk_font_selection_dialog_new(char*) = font_selection_dialog_new;
extern GtkWidget* gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog*) = font_selection_dialog_get_ok_button;
extern GtkWidget* gtk_font_selection_dialog_get_apply_button(GtkFontSelectionDialog*) = font_selection_dialog_get_apply_button;
extern GtkWidget* gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog*) = font_selection_dialog_get_cancel_button;
extern char* gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog*) = font_selection_dialog_get_font_name;
extern GdkFont* gtk_font_selection_dialog_get_font(GtkFontSelectionDialog*) = font_selection_dialog_get_font;
extern int gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog*, char*) = font_selection_dialog_set_font_name;
extern char* gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog*) = font_selection_dialog_get_preview_text;
extern void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog*, char*) = font_selection_dialog_set_preview_text;
extern long gtk_gamma_curve_get_type() = gamma_curve_get_type;
extern GtkWidget* gtk_gamma_curve_new() = gamma_curve_new;
extern GdkGC* gtk_gc_get(int, GdkColormap*, GdkGCValues*, int) = gc_get;
extern void gtk_gc_release(GdkGC*) = gc_release;
extern long gtk_handle_box_get_type() = handle_box_get_type;
extern GtkWidget* gtk_handle_box_new() = handle_box_new;
extern void gtk_handle_box_set_shadow_type(GtkHandleBox*, int) = handle_box_set_shadow_type;
extern int gtk_handle_box_get_shadow_type(GtkHandleBox*) = handle_box_get_shadow_type;
extern void gtk_handle_box_set_handle_position(GtkHandleBox*, int) = handle_box_set_handle_position;
extern int gtk_handle_box_get_handle_position(GtkHandleBox*) = handle_box_get_handle_position;
extern void gtk_handle_box_set_snap_edge(GtkHandleBox*, int) = handle_box_set_snap_edge;
extern int gtk_handle_box_get_snap_edge(GtkHandleBox*) = handle_box_get_snap_edge;
extern int gtk_handle_box_get_child_detached(GtkHandleBox*) = handle_box_get_child_detached;
extern long gtk_hbutton_box_get_type() = hbutton_box_get_type;
extern GtkWidget* gtk_hbutton_box_new() = hbutton_box_new;
extern int gtk_hbutton_box_get_spacing_default() = hbutton_box_get_spacing_default;
extern int gtk_hbutton_box_get_layout_default() = hbutton_box_get_layout_default;
extern void gtk_hbutton_box_set_spacing_default(int) = hbutton_box_set_spacing_default;
extern void gtk_hbutton_box_set_layout_default(int) = hbutton_box_set_layout_default;
extern long gtk_paned_get_type() = paned_get_type;
extern void gtk_paned_add1(GtkPaned*, GtkWidget*) = paned_add1;
extern void gtk_paned_add2(GtkPaned*, GtkWidget*) = paned_add2;
extern void gtk_paned_pack1(GtkPaned*, GtkWidget*, int, int) = paned_pack1;
extern void gtk_paned_pack2(GtkPaned*, GtkWidget*, int, int) = paned_pack2;
extern int gtk_paned_get_position(GtkPaned*) = paned_get_position;
extern void gtk_paned_set_position(GtkPaned*, int) = paned_set_position;
extern GtkWidget* gtk_paned_get_child1(GtkPaned*) = paned_get_child1;
extern GtkWidget* gtk_paned_get_child2(GtkPaned*) = paned_get_child2;
extern void gtk_paned_compute_position(GtkPaned*, int, int, int) = paned_compute_position;
extern long gtk_hpaned_get_type() = hpaned_get_type;
extern GtkWidget* gtk_hpaned_new() = hpaned_new;
extern long gtk_ruler_get_type() = ruler_get_type;
extern void gtk_ruler_set_metric(GtkRuler*, int) = ruler_set_metric;
extern void gtk_ruler_set_range(GtkRuler*, double, double, double, double) = ruler_set_range;
extern void gtk_ruler_draw_ticks(GtkRuler*) = ruler_draw_ticks;
extern void gtk_ruler_draw_pos(GtkRuler*) = ruler_draw_pos;
extern int gtk_ruler_get_metric(GtkRuler*) = ruler_get_metric;
extern void gtk_ruler_get_range(GtkRuler*, double*, double*, double*, double*) = ruler_get_range;
extern long gtk_hruler_get_type() = hruler_get_type;
extern GtkWidget* gtk_hruler_new() = hruler_new;
extern long gtk_range_get_type() = range_get_type;
extern void gtk_range_set_update_policy(GtkRange*, int) = range_set_update_policy;
extern int gtk_range_get_update_policy(GtkRange*) = range_get_update_policy;
extern void gtk_range_set_adjustment(GtkRange*, GtkAdjustment*) = range_set_adjustment;
extern GtkAdjustment* gtk_range_get_adjustment(GtkRange*) = range_get_adjustment;
extern void gtk_range_set_inverted(GtkRange*, int) = range_set_inverted;
extern int gtk_range_get_inverted(GtkRange*) = range_get_inverted;
extern void gtk_range_set_lower_stepper_sensitivity(GtkRange*, int) = range_set_lower_stepper_sensitivity;
extern int gtk_range_get_lower_stepper_sensitivity(GtkRange*) = range_get_lower_stepper_sensitivity;
extern void gtk_range_set_upper_stepper_sensitivity(GtkRange*, int) = range_set_upper_stepper_sensitivity;
extern int gtk_range_get_upper_stepper_sensitivity(GtkRange*) = range_get_upper_stepper_sensitivity;
extern void gtk_range_set_increments(GtkRange*, double, double) = range_set_increments;
extern void gtk_range_set_range(GtkRange*, double, double) = range_set_range;
extern void gtk_range_set_value(GtkRange*, double) = range_set_value;
extern double gtk_range_get_value(GtkRange*) = range_get_value;
extern void gtk_range_set_show_fill_level(GtkRange*, int) = range_set_show_fill_level;
extern int gtk_range_get_show_fill_level(GtkRange*) = range_get_show_fill_level;
extern void gtk_range_set_restrict_to_fill_level(GtkRange*, int) = range_set_restrict_to_fill_level;
extern int gtk_range_get_restrict_to_fill_level(GtkRange*) = range_get_restrict_to_fill_level;
extern void gtk_range_set_fill_level(GtkRange*, double) = range_set_fill_level;
extern double gtk_range_get_fill_level(GtkRange*) = range_get_fill_level;
extern long gtk_scale_get_type() = scale_get_type;
extern void gtk_scale_set_digits(GtkScale*, int) = scale_set_digits;
extern int gtk_scale_get_digits(GtkScale*) = scale_get_digits;
extern void gtk_scale_set_draw_value(GtkScale*, int) = scale_set_draw_value;
extern int gtk_scale_get_draw_value(GtkScale*) = scale_get_draw_value;
extern void gtk_scale_set_value_pos(GtkScale*, int) = scale_set_value_pos;
extern int gtk_scale_get_value_pos(GtkScale*) = scale_get_value_pos;
extern PangoLayout* gtk_scale_get_layout(GtkScale*) = scale_get_layout;
extern void gtk_scale_get_layout_offsets(GtkScale*, int*, int*) = scale_get_layout_offsets;
extern long gtk_hscale_get_type() = hscale_get_type;
extern GtkWidget* gtk_hscale_new(GtkAdjustment*) = hscale_new;
extern GtkWidget* gtk_hscale_new_with_range(double, double, double) = hscale_new_with_range;
extern long gtk_scrollbar_get_type() = scrollbar_get_type;
extern long gtk_hscrollbar_get_type() = hscrollbar_get_type;
extern GtkWidget* gtk_hscrollbar_new(GtkAdjustment*) = hscrollbar_new;
extern long gtk_separator_get_type() = separator_get_type;
extern long gtk_hseparator_get_type() = hseparator_get_type;
extern GtkWidget* gtk_hseparator_new() = hseparator_new;
extern long gtk_hsv_get_type() = hsv_get_type;
extern GtkWidget* gtk_hsv_new() = hsv_new;
extern void gtk_hsv_set_color(GtkHSV*, double, double, double) = hsv_set_color;
extern void gtk_hsv_get_color(GtkHSV*, double*, double*, double*) = hsv_get_color;
extern void gtk_hsv_set_metrics(GtkHSV*, int, int) = hsv_set_metrics;
extern void gtk_hsv_get_metrics(GtkHSV*, int*, int*) = hsv_get_metrics;
extern int gtk_hsv_is_adjusting(GtkHSV*) = hsv_is_adjusting;
extern void gtk_hsv_to_rgb(double, double, double, double*, double*, double*) = hsv_to_rgb;
extern void gtk_rgb_to_hsv(double, double, double, double*, double*, double*) = rgb_to_hsv;
extern long gtk_icon_factory_get_type() = icon_factory_get_type;
extern GtkIconFactory* gtk_icon_factory_new() = icon_factory_new;
extern void gtk_icon_factory_add(GtkIconFactory*, char*, GtkIconSet*) = icon_factory_add;
extern GtkIconSet* gtk_icon_factory_lookup(GtkIconFactory*, char*) = icon_factory_lookup;
extern void gtk_icon_factory_add_default(GtkIconFactory*) = icon_factory_add_default;
extern void gtk_icon_factory_remove_default(GtkIconFactory*) = icon_factory_remove_default;
extern GtkIconSet* gtk_icon_factory_lookup_default(char*) = icon_factory_lookup_default;
extern int gtk_icon_size_lookup(int, int*, int*) = icon_size_lookup;
extern int gtk_icon_size_lookup_for_settings(GtkSettings*, int, int*, int*) = icon_size_lookup_for_settings;
extern int gtk_icon_size_register(char*, int, int) = icon_size_register;
extern void gtk_icon_size_register_alias(char*, int) = icon_size_register_alias;
extern int gtk_icon_size_from_name(char*) = icon_size_from_name;
extern char* gtk_icon_size_get_name(int) = icon_size_get_name;
extern long gtk_icon_set_get_type() = icon_set_get_type;
extern GtkIconSet* gtk_icon_set_new() = icon_set_new;
extern GtkIconSet* gtk_icon_set_new_from_pixbuf(GdkPixbuf*) = icon_set_new_from_pixbuf;
extern GtkIconSet* gtk_icon_set_ref(GtkIconSet*) = icon_set_ref;
extern void gtk_icon_set_unref(GtkIconSet*) = icon_set_unref;
extern GtkIconSet* gtk_icon_set_copy(GtkIconSet*) = icon_set_copy;
extern GdkPixbuf* gtk_icon_set_render_icon(GtkIconSet*, GtkStyle*, int, int, int, GtkWidget*, char*) = icon_set_render_icon;
extern void gtk_icon_set_add_source(GtkIconSet*, GtkIconSource*) = icon_set_add_source;
extern void gtk_icon_set_get_sizes(GtkIconSet*, int**, int*) = icon_set_get_sizes;
extern long gtk_icon_source_get_type() = icon_source_get_type;
extern GtkIconSource* gtk_icon_source_new() = icon_source_new;
extern GtkIconSource* gtk_icon_source_copy(GtkIconSource*) = icon_source_copy;
extern void gtk_icon_source_free(GtkIconSource*) = icon_source_free;
extern void gtk_icon_source_set_filename(GtkIconSource*, char*) = icon_source_set_filename;
extern void gtk_icon_source_set_icon_name(GtkIconSource*, char*) = icon_source_set_icon_name;
extern void gtk_icon_source_set_pixbuf(GtkIconSource*, GdkPixbuf*) = icon_source_set_pixbuf;
extern char* gtk_icon_source_get_filename(GtkIconSource*) = icon_source_get_filename;
extern char* gtk_icon_source_get_icon_name(GtkIconSource*) = icon_source_get_icon_name;
extern GdkPixbuf* gtk_icon_source_get_pixbuf(GtkIconSource*) = icon_source_get_pixbuf;
extern void gtk_icon_source_set_direction_wildcarded(GtkIconSource*, int) = icon_source_set_direction_wildcarded;
extern void gtk_icon_source_set_state_wildcarded(GtkIconSource*, int) = icon_source_set_state_wildcarded;
extern void gtk_icon_source_set_size_wildcarded(GtkIconSource*, int) = icon_source_set_size_wildcarded;
extern int gtk_icon_source_get_size_wildcarded(GtkIconSource*) = icon_source_get_size_wildcarded;
extern int gtk_icon_source_get_state_wildcarded(GtkIconSource*) = icon_source_get_state_wildcarded;
extern int gtk_icon_source_get_direction_wildcarded(GtkIconSource*) = icon_source_get_direction_wildcarded;
extern void gtk_icon_source_set_direction(GtkIconSource*, int) = icon_source_set_direction;
extern void gtk_icon_source_set_state(GtkIconSource*, int) = icon_source_set_state;
extern void gtk_icon_source_set_size(GtkIconSource*, int) = icon_source_set_size;
extern int gtk_icon_source_get_direction(GtkIconSource*) = icon_source_get_direction;
extern int gtk_icon_source_get_state(GtkIconSource*) = icon_source_get_state;
extern int gtk_icon_source_get_size(GtkIconSource*) = icon_source_get_size;
extern int gtk_icon_theme_error_quark() = icon_theme_error_quark;
extern long gtk_icon_theme_get_type() = icon_theme_get_type;
extern GtkIconTheme* gtk_icon_theme_new() = icon_theme_new;
extern GtkIconTheme* gtk_icon_theme_get_default() = icon_theme_get_default;
extern GtkIconTheme* gtk_icon_theme_get_for_screen(GdkScreen*) = icon_theme_get_for_screen;
extern void gtk_icon_theme_set_screen(GtkIconTheme*, GdkScreen*) = icon_theme_set_screen;
extern void gtk_icon_theme_set_search_path(GtkIconTheme*, char**, int) = icon_theme_set_search_path;
extern void gtk_icon_theme_get_search_path(GtkIconTheme*, char***, int*) = icon_theme_get_search_path;
extern void gtk_icon_theme_append_search_path(GtkIconTheme*, char*) = icon_theme_append_search_path;
extern void gtk_icon_theme_prepend_search_path(GtkIconTheme*, char*) = icon_theme_prepend_search_path;
extern void gtk_icon_theme_set_custom_theme(GtkIconTheme*, char*) = icon_theme_set_custom_theme;
extern int gtk_icon_theme_has_icon(GtkIconTheme*, char*) = icon_theme_has_icon;
extern int* gtk_icon_theme_get_icon_sizes(GtkIconTheme*, char*) = icon_theme_get_icon_sizes;
extern GtkIconInfo* gtk_icon_theme_lookup_icon(GtkIconTheme*, char*, int, int) = icon_theme_lookup_icon;
extern GtkIconInfo* gtk_icon_theme_choose_icon(GtkIconTheme*, char**, int, int) = icon_theme_choose_icon;
extern GdkPixbuf* gtk_icon_theme_load_icon(GtkIconTheme*, char*, int, int, GError**) = icon_theme_load_icon;
extern GtkIconInfo* gtk_icon_theme_lookup_by_gicon(GtkIconTheme*, GIcon*, int, int) = icon_theme_lookup_by_gicon;
extern GList* gtk_icon_theme_list_icons(GtkIconTheme*, char*) = icon_theme_list_icons;
extern GList* gtk_icon_theme_list_contexts(GtkIconTheme*) = icon_theme_list_contexts;
extern char* gtk_icon_theme_get_example_icon_name(GtkIconTheme*) = icon_theme_get_example_icon_name;
extern int gtk_icon_theme_rescan_if_needed(GtkIconTheme*) = icon_theme_rescan_if_needed;
extern void gtk_icon_theme_add_builtin_icon(char*, int, GdkPixbuf*) = icon_theme_add_builtin_icon;
extern long gtk_icon_info_get_type() = icon_info_get_type;
extern GtkIconInfo* gtk_icon_info_copy(GtkIconInfo*) = icon_info_copy;
extern void gtk_icon_info_free(GtkIconInfo*) = icon_info_free;
extern GtkIconInfo* gtk_icon_info_new_for_pixbuf(GtkIconTheme*, GdkPixbuf*) = icon_info_new_for_pixbuf;
extern int gtk_icon_info_get_base_size(GtkIconInfo*) = icon_info_get_base_size;
extern char* gtk_icon_info_get_filename(GtkIconInfo*) = icon_info_get_filename;
extern GdkPixbuf* gtk_icon_info_get_builtin_pixbuf(GtkIconInfo*) = icon_info_get_builtin_pixbuf;
extern GdkPixbuf* gtk_icon_info_load_icon(GtkIconInfo*, GError**) = icon_info_load_icon;
extern void gtk_icon_info_set_raw_coordinates(GtkIconInfo*, int) = icon_info_set_raw_coordinates;
extern int gtk_icon_info_get_embedded_rect(GtkIconInfo*, GdkRectangle*) = icon_info_get_embedded_rect;
extern int gtk_icon_info_get_attach_points(GtkIconInfo*, GdkPoint**, int*) = icon_info_get_attach_points;
extern char* gtk_icon_info_get_display_name(GtkIconInfo*) = icon_info_get_display_name;
extern long gtk_tooltip_get_type() = tooltip_get_type;
extern void gtk_tooltip_set_markup(GtkTooltip*, char*) = tooltip_set_markup;
extern void gtk_tooltip_set_text(GtkTooltip*, char*) = tooltip_set_text;
extern void gtk_tooltip_set_icon(GtkTooltip*, GdkPixbuf*) = tooltip_set_icon;
extern void gtk_tooltip_set_icon_from_stock(GtkTooltip*, char*, int) = tooltip_set_icon_from_stock;
extern void gtk_tooltip_set_icon_from_icon_name(GtkTooltip*, char*, int) = tooltip_set_icon_from_icon_name;
extern void gtk_tooltip_set_custom(GtkTooltip*, GtkWidget*) = tooltip_set_custom;
extern void gtk_tooltip_set_tip_area(GtkTooltip*, GdkRectangle*) = tooltip_set_tip_area;
extern void gtk_tooltip_trigger_tooltip_query(GdkDisplay*) = tooltip_trigger_tooltip_query;
extern long gtk_icon_view_get_type() = icon_view_get_type;
extern GtkWidget* gtk_icon_view_new() = icon_view_new;
extern GtkWidget* gtk_icon_view_new_with_model(GtkTreeModel*) = icon_view_new_with_model;
extern void gtk_icon_view_set_model(GtkIconView*, GtkTreeModel*) = icon_view_set_model;
extern GtkTreeModel* gtk_icon_view_get_model(GtkIconView*) = icon_view_get_model;
extern void gtk_icon_view_set_text_column(GtkIconView*, int) = icon_view_set_text_column;
extern int gtk_icon_view_get_text_column(GtkIconView*) = icon_view_get_text_column;
extern void gtk_icon_view_set_markup_column(GtkIconView*, int) = icon_view_set_markup_column;
extern int gtk_icon_view_get_markup_column(GtkIconView*) = icon_view_get_markup_column;
extern void gtk_icon_view_set_pixbuf_column(GtkIconView*, int) = icon_view_set_pixbuf_column;
extern int gtk_icon_view_get_pixbuf_column(GtkIconView*) = icon_view_get_pixbuf_column;
extern void gtk_icon_view_set_orientation(GtkIconView*, int) = icon_view_set_orientation;
extern int gtk_icon_view_get_orientation(GtkIconView*) = icon_view_get_orientation;
extern void gtk_icon_view_set_columns(GtkIconView*, int) = icon_view_set_columns;
extern int gtk_icon_view_get_columns(GtkIconView*) = icon_view_get_columns;
extern void gtk_icon_view_set_item_width(GtkIconView*, int) = icon_view_set_item_width;
extern int gtk_icon_view_get_item_width(GtkIconView*) = icon_view_get_item_width;
extern void gtk_icon_view_set_spacing(GtkIconView*, int) = icon_view_set_spacing;
extern int gtk_icon_view_get_spacing(GtkIconView*) = icon_view_get_spacing;
extern void gtk_icon_view_set_row_spacing(GtkIconView*, int) = icon_view_set_row_spacing;
extern int gtk_icon_view_get_row_spacing(GtkIconView*) = icon_view_get_row_spacing;
extern void gtk_icon_view_set_column_spacing(GtkIconView*, int) = icon_view_set_column_spacing;
extern int gtk_icon_view_get_column_spacing(GtkIconView*) = icon_view_get_column_spacing;
extern void gtk_icon_view_set_margin(GtkIconView*, int) = icon_view_set_margin;
extern int gtk_icon_view_get_margin(GtkIconView*) = icon_view_get_margin;
extern GtkTreePath* gtk_icon_view_get_path_at_pos(GtkIconView*, int, int) = icon_view_get_path_at_pos;
extern int gtk_icon_view_get_item_at_pos(GtkIconView*, int, int, GtkTreePath**, GtkCellRenderer**) = icon_view_get_item_at_pos;
extern int gtk_icon_view_get_visible_range(GtkIconView*, GtkTreePath**, GtkTreePath**) = icon_view_get_visible_range;
extern void gtk_icon_view_selected_foreach(GtkIconView*, void*, void*) = icon_view_selected_foreach;
extern void gtk_icon_view_set_selection_mode(GtkIconView*, int) = icon_view_set_selection_mode;
extern int gtk_icon_view_get_selection_mode(GtkIconView*) = icon_view_get_selection_mode;
extern void gtk_icon_view_select_path(GtkIconView*, GtkTreePath*) = icon_view_select_path;
extern void gtk_icon_view_unselect_path(GtkIconView*, GtkTreePath*) = icon_view_unselect_path;
extern int gtk_icon_view_path_is_selected(GtkIconView*, GtkTreePath*) = icon_view_path_is_selected;
extern GList* gtk_icon_view_get_selected_items(GtkIconView*) = icon_view_get_selected_items;
extern void gtk_icon_view_select_all(GtkIconView*) = icon_view_select_all;
extern void gtk_icon_view_unselect_all(GtkIconView*) = icon_view_unselect_all;
extern void gtk_icon_view_item_activated(GtkIconView*, GtkTreePath*) = icon_view_item_activated;
extern void gtk_icon_view_set_cursor(GtkIconView*, GtkTreePath*, GtkCellRenderer*, int) = icon_view_set_cursor;
extern int gtk_icon_view_get_cursor(GtkIconView*, GtkTreePath**, GtkCellRenderer**) = icon_view_get_cursor;
extern void gtk_icon_view_scroll_to_path(GtkIconView*, GtkTreePath*, int, float, float) = icon_view_scroll_to_path;
extern void gtk_icon_view_enable_model_drag_source(GtkIconView*, int, GtkTargetEntry*, int, int) = icon_view_enable_model_drag_source;
extern void gtk_icon_view_enable_model_drag_dest(GtkIconView*, GtkTargetEntry*, int, int) = icon_view_enable_model_drag_dest;
extern void gtk_icon_view_unset_model_drag_source(GtkIconView*) = icon_view_unset_model_drag_source;
extern void gtk_icon_view_unset_model_drag_dest(GtkIconView*) = icon_view_unset_model_drag_dest;
extern void gtk_icon_view_set_reorderable(GtkIconView*, int) = icon_view_set_reorderable;
extern int gtk_icon_view_get_reorderable(GtkIconView*) = icon_view_get_reorderable;
extern void gtk_icon_view_set_drag_dest_item(GtkIconView*, GtkTreePath*, int) = icon_view_set_drag_dest_item;
extern void gtk_icon_view_get_drag_dest_item(GtkIconView*, GtkTreePath**, int*) = icon_view_get_drag_dest_item;
extern int gtk_icon_view_get_dest_item_at_pos(GtkIconView*, int, int, GtkTreePath**, int*) = icon_view_get_dest_item_at_pos;
extern GdkPixmap* gtk_icon_view_create_drag_icon(GtkIconView*, GtkTreePath*) = icon_view_create_drag_icon;
extern void gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView*, int, int, int*, int*) = icon_view_convert_widget_to_bin_window_coords;
extern void gtk_icon_view_set_tooltip_item(GtkIconView*, GtkTooltip*, GtkTreePath*) = icon_view_set_tooltip_item;
extern void gtk_icon_view_set_tooltip_cell(GtkIconView*, GtkTooltip*, GtkTreePath*, GtkCellRenderer*) = icon_view_set_tooltip_cell;
extern int gtk_icon_view_get_tooltip_context(GtkIconView*, int*, int*, int, GtkTreeModel**, GtkTreePath**, GtkTreeIter*) = icon_view_get_tooltip_context;
extern void gtk_icon_view_set_tooltip_column(GtkIconView*, int) = icon_view_set_tooltip_column;
extern int gtk_icon_view_get_tooltip_column(GtkIconView*) = icon_view_get_tooltip_column;
extern long gtk_image_menu_item_get_type() = image_menu_item_get_type;
extern GtkWidget* gtk_image_menu_item_new() = image_menu_item_new;
extern GtkWidget* gtk_image_menu_item_new_with_label(char*) = image_menu_item_new_with_label;
extern GtkWidget* gtk_image_menu_item_new_with_mnemonic(char*) = image_menu_item_new_with_mnemonic;
extern GtkWidget* gtk_image_menu_item_new_from_stock(char*, GtkAccelGroup*) = image_menu_item_new_from_stock;
extern void gtk_image_menu_item_set_image(GtkImageMenuItem*, GtkWidget*) = image_menu_item_set_image;
extern GtkWidget* gtk_image_menu_item_get_image(GtkImageMenuItem*) = image_menu_item_get_image;
extern long gtk_im_context_simple_get_type() = im_context_simple_get_type;
extern GtkIMContext* gtk_im_context_simple_new() = im_context_simple_new;
extern void gtk_im_context_simple_add_table(GtkIMContextSimple*, short*, int, int) = im_context_simple_add_table;
extern long gtk_im_multicontext_get_type() = im_multicontext_get_type;
extern GtkIMContext* gtk_im_multicontext_new() = im_multicontext_new;
extern void gtk_im_multicontext_append_menuitems(GtkIMMulticontext*, GtkMenuShell*) = im_multicontext_append_menuitems;
extern long gtk_input_dialog_get_type() = input_dialog_get_type;
extern GtkWidget* gtk_input_dialog_new() = input_dialog_new;
extern long gtk_invisible_get_type() = invisible_get_type;
extern GtkWidget* gtk_invisible_new() = invisible_new;
extern GtkWidget* gtk_invisible_new_for_screen(GdkScreen*) = invisible_new_for_screen;
extern void gtk_invisible_set_screen(GtkInvisible*, GdkScreen*) = invisible_set_screen;
extern GdkScreen* gtk_invisible_get_screen(GtkInvisible*) = invisible_get_screen;
extern long gtk_layout_get_type() = layout_get_type;
extern GtkWidget* gtk_layout_new(GtkAdjustment*, GtkAdjustment*) = layout_new;
extern GdkWindow* gtk_layout_get_bin_window(GtkLayout*) = layout_get_bin_window;
extern void gtk_layout_put(GtkLayout*, GtkWidget*, int, int) = layout_put;
extern void gtk_layout_move(GtkLayout*, GtkWidget*, int, int) = layout_move;
extern void gtk_layout_set_size(GtkLayout*, int, int) = layout_set_size;
extern void gtk_layout_get_size(GtkLayout*, int*, int*) = layout_get_size;
extern GtkAdjustment* gtk_layout_get_hadjustment(GtkLayout*) = layout_get_hadjustment;
extern GtkAdjustment* gtk_layout_get_vadjustment(GtkLayout*) = layout_get_vadjustment;
extern void gtk_layout_set_hadjustment(GtkLayout*, GtkAdjustment*) = layout_set_hadjustment;
extern void gtk_layout_set_vadjustment(GtkLayout*, GtkAdjustment*) = layout_set_vadjustment;
extern void gtk_layout_freeze(GtkLayout*) = layout_freeze;
extern void gtk_layout_thaw(GtkLayout*) = layout_thaw;
extern long gtk_link_button_get_type() = link_button_get_type;
extern GtkWidget* gtk_link_button_new(char*) = link_button_new;
extern GtkWidget* gtk_link_button_new_with_label(char*, char*) = link_button_new_with_label;
extern char* gtk_link_button_get_uri(GtkLinkButton*) = link_button_get_uri;
extern void gtk_link_button_set_uri(GtkLinkButton*, char*) = link_button_set_uri;
extern void* gtk_link_button_set_uri_hook(void*, void*, void*) = link_button_set_uri_hook;
extern int gtk_link_button_get_visited(GtkLinkButton*) = link_button_get_visited;
extern void gtk_link_button_set_visited(GtkLinkButton*, int) = link_button_set_visited;
extern char* gtk_check_version(int, int, int) = check_version;
extern int gtk_parse_args(int*, char***) = parse_args;
extern void gtk_init(int*, char***) = init;
extern int gtk_init_check(int*, char***) = init_check;
extern int gtk_init_with_args(int*, char***, char*, GOptionEntry*, char*, GError**) = init_with_args;
extern GOptionGroup* gtk_get_option_group(int) = get_option_group;
extern void gtk_exit(int) = exit;
extern void gtk_disable_setlocale() = disable_setlocale;
extern char* gtk_set_locale() = set_locale;
extern PangoLanguage* gtk_get_default_language() = get_default_language;
extern int gtk_events_pending() = events_pending;
extern void gtk_main_do_event(GdkEvent*) = main_do_event;
extern void gtk_main() = main;
extern int gtk_main_level() = main_level;
extern void gtk_main_quit() = main_quit;
extern int gtk_main_iteration() = main_iteration;
extern int gtk_main_iteration_do(int) = main_iteration_do;
extern int gtk_true() = true;
extern int gtk_false() = false;
extern void gtk_grab_add(GtkWidget*) = grab_add;
extern GtkWidget* gtk_grab_get_current() = grab_get_current;
extern void gtk_grab_remove(GtkWidget*) = grab_remove;
extern void gtk_init_add(void*, void*) = init_add;
extern void gtk_quit_add_destroy(int, GtkObject*) = quit_add_destroy;
extern int gtk_quit_add(int, void*, void*) = quit_add;
extern int gtk_quit_add_full(int, void*, void*, void*, void*) = quit_add_full;
extern void gtk_quit_remove(int) = quit_remove;
extern void gtk_quit_remove_by_data(void*) = quit_remove_by_data;
extern int gtk_timeout_add(int, void*, void*) = timeout_add;
extern int gtk_timeout_add_full(int, void*, void*, void*, void*) = timeout_add_full;
extern void gtk_timeout_remove(int) = timeout_remove;
extern int gtk_idle_add(void*, void*) = idle_add;
extern int gtk_idle_add_priority(int, void*, void*) = idle_add_priority;
extern int gtk_idle_add_full(int, void*, void*, void*, void*) = idle_add_full;
extern void gtk_idle_remove(int) = idle_remove;
extern void gtk_idle_remove_by_data(void*) = idle_remove_by_data;
extern int gtk_input_add_full(int, int, void*, void*, void*, void*) = input_add_full;
extern void gtk_input_remove(int) = input_remove;
extern int gtk_key_snooper_install(void*, void*) = key_snooper_install;
extern void gtk_key_snooper_remove(int) = key_snooper_remove;
extern GdkEvent* gtk_get_current_event() = get_current_event;
extern int gtk_get_current_event_time() = get_current_event_time;
extern int gtk_get_current_event_state(int*) = get_current_event_state;
extern GtkWidget* gtk_get_event_widget(GdkEvent*) = get_event_widget;
extern void gtk_propagate_event(GtkWidget*, GdkEvent*) = propagate_event;
extern long gtk_menu_bar_get_type() = menu_bar_get_type;
extern GtkWidget* gtk_menu_bar_new() = menu_bar_new;
extern int gtk_menu_bar_get_pack_direction(GtkMenuBar*) = menu_bar_get_pack_direction;
extern void gtk_menu_bar_set_pack_direction(GtkMenuBar*, int) = menu_bar_set_pack_direction;
extern int gtk_menu_bar_get_child_pack_direction(GtkMenuBar*) = menu_bar_get_child_pack_direction;
extern void gtk_menu_bar_set_child_pack_direction(GtkMenuBar*, int) = menu_bar_set_child_pack_direction;
extern long gtk_tooltips_get_type() = tooltips_get_type;
extern GtkTooltips* gtk_tooltips_new() = tooltips_new;
extern void gtk_tooltips_enable(GtkTooltips*) = tooltips_enable;
extern void gtk_tooltips_disable(GtkTooltips*) = tooltips_disable;
extern void gtk_tooltips_set_delay(GtkTooltips*, int) = tooltips_set_delay;
extern void gtk_tooltips_set_tip(GtkTooltips*, GtkWidget*, char*, char*) = tooltips_set_tip;
extern GtkTooltipsData* gtk_tooltips_data_get(GtkWidget*) = tooltips_data_get;
extern void gtk_tooltips_force_window(GtkTooltips*) = tooltips_force_window;
extern int gtk_tooltips_get_info_from_tip_window(GtkWindow*, GtkTooltips**, GtkWidget**) = tooltips_get_info_from_tip_window;
extern long gtk_tool_item_get_type() = tool_item_get_type;
extern GtkToolItem* gtk_tool_item_new() = tool_item_new;
extern void gtk_tool_item_set_homogeneous(GtkToolItem*, int) = tool_item_set_homogeneous;
extern int gtk_tool_item_get_homogeneous(GtkToolItem*) = tool_item_get_homogeneous;
extern void gtk_tool_item_set_expand(GtkToolItem*, int) = tool_item_set_expand;
extern int gtk_tool_item_get_expand(GtkToolItem*) = tool_item_get_expand;
extern void gtk_tool_item_set_tooltip(GtkToolItem*, GtkTooltips*, char*, char*) = tool_item_set_tooltip;
extern void gtk_tool_item_set_tooltip_text(GtkToolItem*, char*) = tool_item_set_tooltip_text;
extern void gtk_tool_item_set_tooltip_markup(GtkToolItem*, char*) = tool_item_set_tooltip_markup;
extern void gtk_tool_item_set_use_drag_window(GtkToolItem*, int) = tool_item_set_use_drag_window;
extern int gtk_tool_item_get_use_drag_window(GtkToolItem*) = tool_item_get_use_drag_window;
extern void gtk_tool_item_set_visible_horizontal(GtkToolItem*, int) = tool_item_set_visible_horizontal;
extern int gtk_tool_item_get_visible_horizontal(GtkToolItem*) = tool_item_get_visible_horizontal;
extern void gtk_tool_item_set_visible_vertical(GtkToolItem*, int) = tool_item_set_visible_vertical;
extern int gtk_tool_item_get_visible_vertical(GtkToolItem*) = tool_item_get_visible_vertical;
extern int gtk_tool_item_get_is_important(GtkToolItem*) = tool_item_get_is_important;
extern void gtk_tool_item_set_is_important(GtkToolItem*, int) = tool_item_set_is_important;
extern int gtk_tool_item_get_icon_size(GtkToolItem*) = tool_item_get_icon_size;
extern int gtk_tool_item_get_orientation(GtkToolItem*) = tool_item_get_orientation;
extern int gtk_tool_item_get_toolbar_style(GtkToolItem*) = tool_item_get_toolbar_style;
extern int gtk_tool_item_get_relief_style(GtkToolItem*) = tool_item_get_relief_style;
extern GtkWidget* gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem*) = tool_item_retrieve_proxy_menu_item;
extern GtkWidget* gtk_tool_item_get_proxy_menu_item(GtkToolItem*, char*) = tool_item_get_proxy_menu_item;
extern void gtk_tool_item_set_proxy_menu_item(GtkToolItem*, char*, GtkWidget*) = tool_item_set_proxy_menu_item;
extern void gtk_tool_item_rebuild_menu(GtkToolItem*) = tool_item_rebuild_menu;
extern void gtk_tool_item_toolbar_reconfigured(GtkToolItem*) = tool_item_toolbar_reconfigured;
extern long gtk_tool_button_get_type() = tool_button_get_type;
extern GtkToolItem* gtk_tool_button_new(GtkWidget*, char*) = tool_button_new;
extern GtkToolItem* gtk_tool_button_new_from_stock(char*) = tool_button_new_from_stock;
extern void gtk_tool_button_set_label(GtkToolButton*, char*) = tool_button_set_label;
extern char* gtk_tool_button_get_label(GtkToolButton*) = tool_button_get_label;
extern void gtk_tool_button_set_use_underline(GtkToolButton*, int) = tool_button_set_use_underline;
extern int gtk_tool_button_get_use_underline(GtkToolButton*) = tool_button_get_use_underline;
extern void gtk_tool_button_set_stock_id(GtkToolButton*, char*) = tool_button_set_stock_id;
extern char* gtk_tool_button_get_stock_id(GtkToolButton*) = tool_button_get_stock_id;
extern void gtk_tool_button_set_icon_name(GtkToolButton*, char*) = tool_button_set_icon_name;
extern char* gtk_tool_button_get_icon_name(GtkToolButton*) = tool_button_get_icon_name;
extern void gtk_tool_button_set_icon_widget(GtkToolButton*, GtkWidget*) = tool_button_set_icon_widget;
extern GtkWidget* gtk_tool_button_get_icon_widget(GtkToolButton*) = tool_button_get_icon_widget;
extern void gtk_tool_button_set_label_widget(GtkToolButton*, GtkWidget*) = tool_button_set_label_widget;
extern GtkWidget* gtk_tool_button_get_label_widget(GtkToolButton*) = tool_button_get_label_widget;
extern long gtk_menu_tool_button_get_type() = menu_tool_button_get_type;
extern GtkToolItem* gtk_menu_tool_button_new(GtkWidget*, char*) = menu_tool_button_new;
extern GtkToolItem* gtk_menu_tool_button_new_from_stock(char*) = menu_tool_button_new_from_stock;
extern void gtk_menu_tool_button_set_menu(GtkMenuToolButton*, GtkWidget*) = menu_tool_button_set_menu;
extern GtkWidget* gtk_menu_tool_button_get_menu(GtkMenuToolButton*) = menu_tool_button_get_menu;
extern void gtk_menu_tool_button_set_arrow_tooltip(GtkMenuToolButton*, GtkTooltips*, char*, char*) = menu_tool_button_set_arrow_tooltip;
extern void gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton*, char*) = menu_tool_button_set_arrow_tooltip_text;
extern void gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton*, char*) = menu_tool_button_set_arrow_tooltip_markup;
extern long gtk_message_dialog_get_type() = message_dialog_get_type;
extern GtkWidget* gtk_message_dialog_new(GtkWindow*, int, int, int, char*, ...) = message_dialog_new;
extern GtkWidget* gtk_message_dialog_new_with_markup(GtkWindow*, int, int, int, char*, ...) = message_dialog_new_with_markup;
extern void gtk_message_dialog_set_image(GtkMessageDialog*, GtkWidget*) = message_dialog_set_image;
extern GtkWidget* gtk_message_dialog_get_image(GtkMessageDialog*) = message_dialog_get_image;
extern void gtk_message_dialog_set_markup(GtkMessageDialog*, char*) = message_dialog_set_markup;
extern void gtk_message_dialog_format_secondary_text(GtkMessageDialog*, char*, ...) = message_dialog_format_secondary_text;
extern void gtk_message_dialog_format_secondary_markup(GtkMessageDialog*, char*, ...) = message_dialog_format_secondary_markup;
extern long gtk_mount_operation_get_type() = mount_operation_get_type;
extern GMountOperation* gtk_mount_operation_new(GtkWindow*) = mount_operation_new;
extern int gtk_mount_operation_is_showing(GtkMountOperation*) = mount_operation_is_showing;
extern void gtk_mount_operation_set_parent(GtkMountOperation*, GtkWindow*) = mount_operation_set_parent;
extern GtkWindow* gtk_mount_operation_get_parent(GtkMountOperation*) = mount_operation_get_parent;
extern void gtk_mount_operation_set_screen(GtkMountOperation*, GdkScreen*) = mount_operation_set_screen;
extern GdkScreen* gtk_mount_operation_get_screen(GtkMountOperation*) = mount_operation_get_screen;
extern long gtk_notebook_get_type() = notebook_get_type;
extern GtkWidget* gtk_notebook_new() = notebook_new;
extern int gtk_notebook_append_page(GtkNotebook*, GtkWidget*, GtkWidget*) = notebook_append_page;
extern int gtk_notebook_append_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*) = notebook_append_page_menu;
extern int gtk_notebook_prepend_page(GtkNotebook*, GtkWidget*, GtkWidget*) = notebook_prepend_page;
extern int gtk_notebook_prepend_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*) = notebook_prepend_page_menu;
extern int gtk_notebook_insert_page(GtkNotebook*, GtkWidget*, GtkWidget*, int) = notebook_insert_page;
extern int gtk_notebook_insert_page_menu(GtkNotebook*, GtkWidget*, GtkWidget*, GtkWidget*, int) = notebook_insert_page_menu;
extern void gtk_notebook_remove_page(GtkNotebook*, int) = notebook_remove_page;
extern void gtk_notebook_set_window_creation_hook(void*, void*, void*) = notebook_set_window_creation_hook;
extern void gtk_notebook_set_group_id(GtkNotebook*, int) = notebook_set_group_id;
extern int gtk_notebook_get_group_id(GtkNotebook*) = notebook_get_group_id;
extern void gtk_notebook_set_group(GtkNotebook*, void*) = notebook_set_group;
extern void* gtk_notebook_get_group(GtkNotebook*) = notebook_get_group;
extern int gtk_notebook_get_current_page(GtkNotebook*) = notebook_get_current_page;
extern GtkWidget* gtk_notebook_get_nth_page(GtkNotebook*, int) = notebook_get_nth_page;
extern int gtk_notebook_get_n_pages(GtkNotebook*) = notebook_get_n_pages;
extern int gtk_notebook_page_num(GtkNotebook*, GtkWidget*) = notebook_page_num;
extern void gtk_notebook_set_current_page(GtkNotebook*, int) = notebook_set_current_page;
extern void gtk_notebook_next_page(GtkNotebook*) = notebook_next_page;
extern void gtk_notebook_prev_page(GtkNotebook*) = notebook_prev_page;
extern void gtk_notebook_set_show_border(GtkNotebook*, int) = notebook_set_show_border;
extern int gtk_notebook_get_show_border(GtkNotebook*) = notebook_get_show_border;
extern void gtk_notebook_set_show_tabs(GtkNotebook*, int) = notebook_set_show_tabs;
extern int gtk_notebook_get_show_tabs(GtkNotebook*) = notebook_get_show_tabs;
extern void gtk_notebook_set_tab_pos(GtkNotebook*, int) = notebook_set_tab_pos;
extern int gtk_notebook_get_tab_pos(GtkNotebook*) = notebook_get_tab_pos;
extern void gtk_notebook_set_homogeneous_tabs(GtkNotebook*, int) = notebook_set_homogeneous_tabs;
extern void gtk_notebook_set_tab_border(GtkNotebook*, int) = notebook_set_tab_border;
extern void gtk_notebook_set_tab_hborder(GtkNotebook*, int) = notebook_set_tab_hborder;
extern void gtk_notebook_set_tab_vborder(GtkNotebook*, int) = notebook_set_tab_vborder;
extern void gtk_notebook_set_scrollable(GtkNotebook*, int) = notebook_set_scrollable;
extern int gtk_notebook_get_scrollable(GtkNotebook*) = notebook_get_scrollable;
extern void gtk_notebook_popup_enable(GtkNotebook*) = notebook_popup_enable;
extern void gtk_notebook_popup_disable(GtkNotebook*) = notebook_popup_disable;
extern GtkWidget* gtk_notebook_get_tab_label(GtkNotebook*, GtkWidget*) = notebook_get_tab_label;
extern void gtk_notebook_set_tab_label(GtkNotebook*, GtkWidget*, GtkWidget*) = notebook_set_tab_label;
extern void gtk_notebook_set_tab_label_text(GtkNotebook*, GtkWidget*, char*) = notebook_set_tab_label_text;
extern char* gtk_notebook_get_tab_label_text(GtkNotebook*, GtkWidget*) = notebook_get_tab_label_text;
extern GtkWidget* gtk_notebook_get_menu_label(GtkNotebook*, GtkWidget*) = notebook_get_menu_label;
extern void gtk_notebook_set_menu_label(GtkNotebook*, GtkWidget*, GtkWidget*) = notebook_set_menu_label;
extern void gtk_notebook_set_menu_label_text(GtkNotebook*, GtkWidget*, char*) = notebook_set_menu_label_text;
extern char* gtk_notebook_get_menu_label_text(GtkNotebook*, GtkWidget*) = notebook_get_menu_label_text;
extern void gtk_notebook_query_tab_label_packing(GtkNotebook*, GtkWidget*, int*, int*, int*) = notebook_query_tab_label_packing;
extern void gtk_notebook_set_tab_label_packing(GtkNotebook*, GtkWidget*, int, int, int) = notebook_set_tab_label_packing;
extern void gtk_notebook_reorder_child(GtkNotebook*, GtkWidget*, int) = notebook_reorder_child;
extern int gtk_notebook_get_tab_reorderable(GtkNotebook*, GtkWidget*) = notebook_get_tab_reorderable;
extern void gtk_notebook_set_tab_reorderable(GtkNotebook*, GtkWidget*, int) = notebook_set_tab_reorderable;
extern int gtk_notebook_get_tab_detachable(GtkNotebook*, GtkWidget*) = notebook_get_tab_detachable;
extern void gtk_notebook_set_tab_detachable(GtkNotebook*, GtkWidget*, int) = notebook_set_tab_detachable;
extern long gtk_paper_size_get_type() = paper_size_get_type;
extern GtkPaperSize* gtk_paper_size_new(char*) = paper_size_new;
extern GtkPaperSize* gtk_paper_size_new_from_ppd(char*, char*, double, double) = paper_size_new_from_ppd;
extern GtkPaperSize* gtk_paper_size_new_custom(char*, char*, double, double, int) = paper_size_new_custom;
extern GtkPaperSize* gtk_paper_size_copy(GtkPaperSize*) = paper_size_copy;
extern void gtk_paper_size_free(GtkPaperSize*) = paper_size_free;
extern int gtk_paper_size_is_equal(GtkPaperSize*, GtkPaperSize*) = paper_size_is_equal;
extern GList* gtk_paper_size_get_paper_sizes(int) = paper_size_get_paper_sizes;
extern char* gtk_paper_size_get_name(GtkPaperSize*) = paper_size_get_name;
extern char* gtk_paper_size_get_display_name(GtkPaperSize*) = paper_size_get_display_name;
extern char* gtk_paper_size_get_ppd_name(GtkPaperSize*) = paper_size_get_ppd_name;
extern double gtk_paper_size_get_width(GtkPaperSize*, int) = paper_size_get_width;
extern double gtk_paper_size_get_height(GtkPaperSize*, int) = paper_size_get_height;
extern int gtk_paper_size_is_custom(GtkPaperSize*) = paper_size_is_custom;
extern void gtk_paper_size_set_size(GtkPaperSize*, double, double, int) = paper_size_set_size;
extern double gtk_paper_size_get_default_top_margin(GtkPaperSize*, int) = paper_size_get_default_top_margin;
extern double gtk_paper_size_get_default_bottom_margin(GtkPaperSize*, int) = paper_size_get_default_bottom_margin;
extern double gtk_paper_size_get_default_left_margin(GtkPaperSize*, int) = paper_size_get_default_left_margin;
extern double gtk_paper_size_get_default_right_margin(GtkPaperSize*, int) = paper_size_get_default_right_margin;
extern char* gtk_paper_size_get_default() = paper_size_get_default;
extern GtkPaperSize* gtk_paper_size_new_from_key_file(GKeyFile*, char*, GError**) = paper_size_new_from_key_file;
extern void gtk_paper_size_to_key_file(GtkPaperSize*, GKeyFile*, char*) = paper_size_to_key_file;
extern long gtk_page_setup_get_type() = page_setup_get_type;
extern GtkPageSetup* gtk_page_setup_new() = page_setup_new;
extern GtkPageSetup* gtk_page_setup_copy(GtkPageSetup*) = page_setup_copy;
extern int gtk_page_setup_get_orientation(GtkPageSetup*) = page_setup_get_orientation;
extern void gtk_page_setup_set_orientation(GtkPageSetup*, int) = page_setup_set_orientation;
extern GtkPaperSize* gtk_page_setup_get_paper_size(GtkPageSetup*) = page_setup_get_paper_size;
extern void gtk_page_setup_set_paper_size(GtkPageSetup*, GtkPaperSize*) = page_setup_set_paper_size;
extern double gtk_page_setup_get_top_margin(GtkPageSetup*, int) = page_setup_get_top_margin;
extern void gtk_page_setup_set_top_margin(GtkPageSetup*, double, int) = page_setup_set_top_margin;
extern double gtk_page_setup_get_bottom_margin(GtkPageSetup*, int) = page_setup_get_bottom_margin;
extern void gtk_page_setup_set_bottom_margin(GtkPageSetup*, double, int) = page_setup_set_bottom_margin;
extern double gtk_page_setup_get_left_margin(GtkPageSetup*, int) = page_setup_get_left_margin;
extern void gtk_page_setup_set_left_margin(GtkPageSetup*, double, int) = page_setup_set_left_margin;
extern double gtk_page_setup_get_right_margin(GtkPageSetup*, int) = page_setup_get_right_margin;
extern void gtk_page_setup_set_right_margin(GtkPageSetup*, double, int) = page_setup_set_right_margin;
extern void gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup*, GtkPaperSize*) = page_setup_set_paper_size_and_default_margins;
extern double gtk_page_setup_get_paper_width(GtkPageSetup*, int) = page_setup_get_paper_width;
extern double gtk_page_setup_get_paper_height(GtkPageSetup*, int) = page_setup_get_paper_height;
extern double gtk_page_setup_get_page_width(GtkPageSetup*, int) = page_setup_get_page_width;
extern double gtk_page_setup_get_page_height(GtkPageSetup*, int) = page_setup_get_page_height;
extern GtkPageSetup* gtk_page_setup_new_from_file(char*, GError**) = page_setup_new_from_file;
extern int gtk_page_setup_load_file(GtkPageSetup*, char*, GError**) = page_setup_load_file;
extern int gtk_page_setup_to_file(GtkPageSetup*, char*, GError**) = page_setup_to_file;
extern GtkPageSetup* gtk_page_setup_new_from_key_file(GKeyFile*, char*, GError**) = page_setup_new_from_key_file;
extern int gtk_page_setup_load_key_file(GtkPageSetup*, GKeyFile*, char*, GError**) = page_setup_load_key_file;
extern void gtk_page_setup_to_key_file(GtkPageSetup*, GKeyFile*, char*) = page_setup_to_key_file;
extern long gtk_socket_get_type() = socket_get_type;
extern GtkWidget* gtk_socket_new() = socket_new;
extern void gtk_socket_add_id(GtkSocket*, int) = socket_add_id;
extern int gtk_socket_get_id(GtkSocket*) = socket_get_id;
extern GdkWindow* gtk_socket_get_plug_window(GtkSocket*) = socket_get_plug_window;
extern void gtk_socket_steal(GtkSocket*, int) = socket_steal;
extern long gtk_plug_get_type() = plug_get_type;
extern void gtk_plug_construct(GtkPlug*, int) = plug_construct;
extern GtkWidget* gtk_plug_new(int) = plug_new;
extern void gtk_plug_construct_for_display(GtkPlug*, GdkDisplay*, int) = plug_construct_for_display;
extern GtkWidget* gtk_plug_new_for_display(GdkDisplay*, int) = plug_new_for_display;
extern int gtk_plug_get_id(GtkPlug*) = plug_get_id;
extern int gtk_plug_get_embedded(GtkPlug*) = plug_get_embedded;
extern GdkWindow* gtk_plug_get_socket_window(GtkPlug*) = plug_get_socket_window;
extern long gtk_print_context_get_type() = print_context_get_type;
extern cairo_t* gtk_print_context_get_cairo_context(GtkPrintContext*) = print_context_get_cairo_context;
extern GtkPageSetup* gtk_print_context_get_page_setup(GtkPrintContext*) = print_context_get_page_setup;
extern double gtk_print_context_get_width(GtkPrintContext*) = print_context_get_width;
extern double gtk_print_context_get_height(GtkPrintContext*) = print_context_get_height;
extern double gtk_print_context_get_dpi_x(GtkPrintContext*) = print_context_get_dpi_x;
extern double gtk_print_context_get_dpi_y(GtkPrintContext*) = print_context_get_dpi_y;
extern PangoFontMap* gtk_print_context_get_pango_fontmap(GtkPrintContext*) = print_context_get_pango_fontmap;
extern PangoContext* gtk_print_context_create_pango_context(GtkPrintContext*) = print_context_create_pango_context;
extern PangoLayout* gtk_print_context_create_pango_layout(GtkPrintContext*) = print_context_create_pango_layout;
extern void gtk_print_context_set_cairo_context(GtkPrintContext*, cairo_t*, double, double) = print_context_set_cairo_context;
extern long gtk_print_settings_get_type() = print_settings_get_type;
extern GtkPrintSettings* gtk_print_settings_new() = print_settings_new;
extern GtkPrintSettings* gtk_print_settings_copy(GtkPrintSettings*) = print_settings_copy;
extern GtkPrintSettings* gtk_print_settings_new_from_file(char*, GError**) = print_settings_new_from_file;
extern int gtk_print_settings_load_file(GtkPrintSettings*, char*, GError**) = print_settings_load_file;
extern int gtk_print_settings_to_file(GtkPrintSettings*, char*, GError**) = print_settings_to_file;
extern GtkPrintSettings* gtk_print_settings_new_from_key_file(GKeyFile*, char*, GError**) = print_settings_new_from_key_file;
extern int gtk_print_settings_load_key_file(GtkPrintSettings*, GKeyFile*, char*, GError**) = print_settings_load_key_file;
extern void gtk_print_settings_to_key_file(GtkPrintSettings*, GKeyFile*, char*) = print_settings_to_key_file;
extern int gtk_print_settings_has_key(GtkPrintSettings*, char*) = print_settings_has_key;
extern char* gtk_print_settings_get(GtkPrintSettings*, char*) = print_settings_get;
extern void gtk_print_settings_set(GtkPrintSettings*, char*, char*) = print_settings_set;
extern void gtk_print_settings_unset(GtkPrintSettings*, char*) = print_settings_unset;
extern void gtk_print_settings_foreach(GtkPrintSettings*, void*, void*) = print_settings_foreach;
extern int gtk_print_settings_get_bool(GtkPrintSettings*, char*) = print_settings_get_bool;
extern void gtk_print_settings_set_bool(GtkPrintSettings*, char*, int) = print_settings_set_bool;
extern double gtk_print_settings_get_double(GtkPrintSettings*, char*) = print_settings_get_double;
extern double gtk_print_settings_get_double_with_default(GtkPrintSettings*, char*, double) = print_settings_get_double_with_default;
extern void gtk_print_settings_set_double(GtkPrintSettings*, char*, double) = print_settings_set_double;
extern double gtk_print_settings_get_length(GtkPrintSettings*, char*, int) = print_settings_get_length;
extern void gtk_print_settings_set_length(GtkPrintSettings*, char*, double, int) = print_settings_set_length;
extern int gtk_print_settings_get_int(GtkPrintSettings*, char*) = print_settings_get_int;
extern int gtk_print_settings_get_int_with_default(GtkPrintSettings*, char*, int) = print_settings_get_int_with_default;
extern void gtk_print_settings_set_int(GtkPrintSettings*, char*, int) = print_settings_set_int;
extern char* gtk_print_settings_get_printer(GtkPrintSettings*) = print_settings_get_printer;
extern void gtk_print_settings_set_printer(GtkPrintSettings*, char*) = print_settings_set_printer;
extern int gtk_print_settings_get_orientation(GtkPrintSettings*) = print_settings_get_orientation;
extern void gtk_print_settings_set_orientation(GtkPrintSettings*, int) = print_settings_set_orientation;
extern GtkPaperSize* gtk_print_settings_get_paper_size(GtkPrintSettings*) = print_settings_get_paper_size;
extern void gtk_print_settings_set_paper_size(GtkPrintSettings*, GtkPaperSize*) = print_settings_set_paper_size;
extern double gtk_print_settings_get_paper_width(GtkPrintSettings*, int) = print_settings_get_paper_width;
extern void gtk_print_settings_set_paper_width(GtkPrintSettings*, double, int) = print_settings_set_paper_width;
extern double gtk_print_settings_get_paper_height(GtkPrintSettings*, int) = print_settings_get_paper_height;
extern void gtk_print_settings_set_paper_height(GtkPrintSettings*, double, int) = print_settings_set_paper_height;
extern int gtk_print_settings_get_use_color(GtkPrintSettings*) = print_settings_get_use_color;
extern void gtk_print_settings_set_use_color(GtkPrintSettings*, int) = print_settings_set_use_color;
extern int gtk_print_settings_get_collate(GtkPrintSettings*) = print_settings_get_collate;
extern void gtk_print_settings_set_collate(GtkPrintSettings*, int) = print_settings_set_collate;
extern int gtk_print_settings_get_reverse(GtkPrintSettings*) = print_settings_get_reverse;
extern void gtk_print_settings_set_reverse(GtkPrintSettings*, int) = print_settings_set_reverse;
extern int gtk_print_settings_get_duplex(GtkPrintSettings*) = print_settings_get_duplex;
extern void gtk_print_settings_set_duplex(GtkPrintSettings*, int) = print_settings_set_duplex;
extern int gtk_print_settings_get_quality(GtkPrintSettings*) = print_settings_get_quality;
extern void gtk_print_settings_set_quality(GtkPrintSettings*, int) = print_settings_set_quality;
extern int gtk_print_settings_get_n_copies(GtkPrintSettings*) = print_settings_get_n_copies;
extern void gtk_print_settings_set_n_copies(GtkPrintSettings*, int) = print_settings_set_n_copies;
extern int gtk_print_settings_get_number_up(GtkPrintSettings*) = print_settings_get_number_up;
extern void gtk_print_settings_set_number_up(GtkPrintSettings*, int) = print_settings_set_number_up;
extern int gtk_print_settings_get_number_up_layout(GtkPrintSettings*) = print_settings_get_number_up_layout;
extern void gtk_print_settings_set_number_up_layout(GtkPrintSettings*, int) = print_settings_set_number_up_layout;
extern int gtk_print_settings_get_resolution(GtkPrintSettings*) = print_settings_get_resolution;
extern void gtk_print_settings_set_resolution(GtkPrintSettings*, int) = print_settings_set_resolution;
extern double gtk_print_settings_get_scale(GtkPrintSettings*) = print_settings_get_scale;
extern void gtk_print_settings_set_scale(GtkPrintSettings*, double) = print_settings_set_scale;
extern int gtk_print_settings_get_print_pages(GtkPrintSettings*) = print_settings_get_print_pages;
extern void gtk_print_settings_set_print_pages(GtkPrintSettings*, int) = print_settings_set_print_pages;
extern GtkPageRange* gtk_print_settings_get_page_ranges(GtkPrintSettings*, int*) = print_settings_get_page_ranges;
extern void gtk_print_settings_set_page_ranges(GtkPrintSettings*, GtkPageRange*, int) = print_settings_set_page_ranges;
extern int gtk_print_settings_get_page_set(GtkPrintSettings*) = print_settings_get_page_set;
extern void gtk_print_settings_set_page_set(GtkPrintSettings*, int) = print_settings_set_page_set;
extern char* gtk_print_settings_get_default_source(GtkPrintSettings*) = print_settings_get_default_source;
extern void gtk_print_settings_set_default_source(GtkPrintSettings*, char*) = print_settings_set_default_source;
extern char* gtk_print_settings_get_media_type(GtkPrintSettings*) = print_settings_get_media_type;
extern void gtk_print_settings_set_media_type(GtkPrintSettings*, char*) = print_settings_set_media_type;
extern char* gtk_print_settings_get_dither(GtkPrintSettings*) = print_settings_get_dither;
extern void gtk_print_settings_set_dither(GtkPrintSettings*, char*) = print_settings_set_dither;
extern char* gtk_print_settings_get_finishings(GtkPrintSettings*) = print_settings_get_finishings;
extern void gtk_print_settings_set_finishings(GtkPrintSettings*, char*) = print_settings_set_finishings;
extern char* gtk_print_settings_get_output_bin(GtkPrintSettings*) = print_settings_get_output_bin;
extern void gtk_print_settings_set_output_bin(GtkPrintSettings*, char*) = print_settings_set_output_bin;
extern long gtk_print_operation_preview_get_type() = print_operation_preview_get_type;
extern void gtk_print_operation_preview_render_page(GtkPrintOperationPreview*, int) = print_operation_preview_render_page;
extern void gtk_print_operation_preview_end_preview(GtkPrintOperationPreview*) = print_operation_preview_end_preview;
extern int gtk_print_operation_preview_is_selected(GtkPrintOperationPreview*, int) = print_operation_preview_is_selected;
extern int gtk_print_error_quark() = print_error_quark;
extern long gtk_print_operation_get_type() = print_operation_get_type;
extern GtkPrintOperation* gtk_print_operation_new() = print_operation_new;
extern void gtk_print_operation_set_default_page_setup(GtkPrintOperation*, GtkPageSetup*) = print_operation_set_default_page_setup;
extern GtkPageSetup* gtk_print_operation_get_default_page_setup(GtkPrintOperation*) = print_operation_get_default_page_setup;
extern void gtk_print_operation_set_print_settings(GtkPrintOperation*, GtkPrintSettings*) = print_operation_set_print_settings;
extern GtkPrintSettings* gtk_print_operation_get_print_settings(GtkPrintOperation*) = print_operation_get_print_settings;
extern void gtk_print_operation_set_job_name(GtkPrintOperation*, char*) = print_operation_set_job_name;
extern void gtk_print_operation_set_n_pages(GtkPrintOperation*, int) = print_operation_set_n_pages;
extern void gtk_print_operation_set_current_page(GtkPrintOperation*, int) = print_operation_set_current_page;
extern void gtk_print_operation_set_use_full_page(GtkPrintOperation*, int) = print_operation_set_use_full_page;
extern void gtk_print_operation_set_unit(GtkPrintOperation*, int) = print_operation_set_unit;
extern void gtk_print_operation_set_export_filename(GtkPrintOperation*, char*) = print_operation_set_export_filename;
extern void gtk_print_operation_set_track_print_status(GtkPrintOperation*, int) = print_operation_set_track_print_status;
extern void gtk_print_operation_set_show_progress(GtkPrintOperation*, int) = print_operation_set_show_progress;
extern void gtk_print_operation_set_allow_async(GtkPrintOperation*, int) = print_operation_set_allow_async;
extern void gtk_print_operation_set_custom_tab_label(GtkPrintOperation*, char*) = print_operation_set_custom_tab_label;
extern int gtk_print_operation_run(GtkPrintOperation*, int, GtkWindow*, GError**) = print_operation_run;
extern void gtk_print_operation_get_error(GtkPrintOperation*, GError**) = print_operation_get_error;
extern int gtk_print_operation_get_status(GtkPrintOperation*) = print_operation_get_status;
extern char* gtk_print_operation_get_status_string(GtkPrintOperation*) = print_operation_get_status_string;
extern int gtk_print_operation_is_finished(GtkPrintOperation*) = print_operation_is_finished;
extern void gtk_print_operation_cancel(GtkPrintOperation*) = print_operation_cancel;
extern GtkPageSetup* gtk_print_run_page_setup_dialog(GtkWindow*, GtkPageSetup*, GtkPrintSettings*) = print_run_page_setup_dialog;
extern void gtk_print_run_page_setup_dialog_async(GtkWindow*, GtkPageSetup*, GtkPrintSettings*, void*, void*) = print_run_page_setup_dialog_async;
extern long gtk_progress_get_type() = progress_get_type;
extern void gtk_progress_set_show_text(GtkProgress*, int) = progress_set_show_text;
extern void gtk_progress_set_text_alignment(GtkProgress*, float, float) = progress_set_text_alignment;
extern void gtk_progress_set_format_string(GtkProgress*, char*) = progress_set_format_string;
extern void gtk_progress_set_adjustment(GtkProgress*, GtkAdjustment*) = progress_set_adjustment;
extern void gtk_progress_configure(GtkProgress*, double, double, double) = progress_configure;
extern void gtk_progress_set_percentage(GtkProgress*, double) = progress_set_percentage;
extern void gtk_progress_set_value(GtkProgress*, double) = progress_set_value;
extern double gtk_progress_get_value(GtkProgress*) = progress_get_value;
extern void gtk_progress_set_activity_mode(GtkProgress*, int) = progress_set_activity_mode;
extern char* gtk_progress_get_current_text(GtkProgress*) = progress_get_current_text;
extern char* gtk_progress_get_text_from_value(GtkProgress*, double) = progress_get_text_from_value;
extern double gtk_progress_get_current_percentage(GtkProgress*) = progress_get_current_percentage;
extern double gtk_progress_get_percentage_from_value(GtkProgress*, double) = progress_get_percentage_from_value;
extern long gtk_progress_bar_get_type() = progress_bar_get_type;
extern GtkWidget* gtk_progress_bar_new() = progress_bar_new;
extern void gtk_progress_bar_pulse(GtkProgressBar*) = progress_bar_pulse;
extern void gtk_progress_bar_set_text(GtkProgressBar*, char*) = progress_bar_set_text;
extern void gtk_progress_bar_set_fraction(GtkProgressBar*, double) = progress_bar_set_fraction;
extern void gtk_progress_bar_set_pulse_step(GtkProgressBar*, double) = progress_bar_set_pulse_step;
extern void gtk_progress_bar_set_orientation(GtkProgressBar*, int) = progress_bar_set_orientation;
extern char* gtk_progress_bar_get_text(GtkProgressBar*) = progress_bar_get_text;
extern double gtk_progress_bar_get_fraction(GtkProgressBar*) = progress_bar_get_fraction;
extern double gtk_progress_bar_get_pulse_step(GtkProgressBar*) = progress_bar_get_pulse_step;
extern int gtk_progress_bar_get_orientation(GtkProgressBar*) = progress_bar_get_orientation;
extern void gtk_progress_bar_set_ellipsize(GtkProgressBar*, int) = progress_bar_set_ellipsize;
extern int gtk_progress_bar_get_ellipsize(GtkProgressBar*) = progress_bar_get_ellipsize;
extern GtkWidget* gtk_progress_bar_new_with_adjustment(GtkAdjustment*) = progress_bar_new_with_adjustment;
extern void gtk_progress_bar_set_bar_style(GtkProgressBar*, int) = progress_bar_set_bar_style;
extern void gtk_progress_bar_set_discrete_blocks(GtkProgressBar*, int) = progress_bar_set_discrete_blocks;
extern void gtk_progress_bar_set_activity_step(GtkProgressBar*, int) = progress_bar_set_activity_step;
extern void gtk_progress_bar_set_activity_blocks(GtkProgressBar*, int) = progress_bar_set_activity_blocks;
extern void gtk_progress_bar_update(GtkProgressBar*, double) = progress_bar_update;
extern long gtk_toggle_action_get_type() = toggle_action_get_type;
extern GtkToggleAction* gtk_toggle_action_new(char*, char*, char*, char*) = toggle_action_new;
extern void gtk_toggle_action_toggled(GtkToggleAction*) = toggle_action_toggled;
extern void gtk_toggle_action_set_active(GtkToggleAction*, int) = toggle_action_set_active;
extern int gtk_toggle_action_get_active(GtkToggleAction*) = toggle_action_get_active;
extern void gtk_toggle_action_set_draw_as_radio(GtkToggleAction*, int) = toggle_action_set_draw_as_radio;
extern int gtk_toggle_action_get_draw_as_radio(GtkToggleAction*) = toggle_action_get_draw_as_radio;
extern long gtk_radio_action_get_type() = radio_action_get_type;
extern GtkRadioAction* gtk_radio_action_new(char*, char*, char*, char*, int) = radio_action_new;
extern GSList* gtk_radio_action_get_group(GtkRadioAction*) = radio_action_get_group;
extern void gtk_radio_action_set_group(GtkRadioAction*, GSList*) = radio_action_set_group;
extern int gtk_radio_action_get_current_value(GtkRadioAction*) = radio_action_get_current_value;
extern void gtk_radio_action_set_current_value(GtkRadioAction*, int) = radio_action_set_current_value;
extern long gtk_radio_button_get_type() = radio_button_get_type;
extern GtkWidget* gtk_radio_button_new(GSList*) = radio_button_new;
extern GtkWidget* gtk_radio_button_new_from_widget(GtkRadioButton*) = radio_button_new_from_widget;
extern GtkWidget* gtk_radio_button_new_with_label(GSList*, char*) = radio_button_new_with_label;
extern GtkWidget* gtk_radio_button_new_with_label_from_widget(GtkRadioButton*, char*) = radio_button_new_with_label_from_widget;
extern GtkWidget* gtk_radio_button_new_with_mnemonic(GSList*, char*) = radio_button_new_with_mnemonic;
extern GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton*, char*) = radio_button_new_with_mnemonic_from_widget;
extern GSList* gtk_radio_button_get_group(GtkRadioButton*) = radio_button_get_group;
extern void gtk_radio_button_set_group(GtkRadioButton*, GSList*) = radio_button_set_group;
extern long gtk_radio_menu_item_get_type() = radio_menu_item_get_type;
extern GtkWidget* gtk_radio_menu_item_new(GSList*) = radio_menu_item_new;
extern GtkWidget* gtk_radio_menu_item_new_with_label(GSList*, char*) = radio_menu_item_new_with_label;
extern GtkWidget* gtk_radio_menu_item_new_with_mnemonic(GSList*, char*) = radio_menu_item_new_with_mnemonic;
extern GtkWidget* gtk_radio_menu_item_new_from_widget(GtkRadioMenuItem*) = radio_menu_item_new_from_widget;
extern GtkWidget* gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem*, char*) = radio_menu_item_new_with_mnemonic_from_widget;
extern GtkWidget* gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem*, char*) = radio_menu_item_new_with_label_from_widget;
extern GSList* gtk_radio_menu_item_get_group(GtkRadioMenuItem*) = radio_menu_item_get_group;
extern void gtk_radio_menu_item_set_group(GtkRadioMenuItem*, GSList*) = radio_menu_item_set_group;
extern long gtk_toggle_tool_button_get_type() = toggle_tool_button_get_type;
extern GtkToolItem* gtk_toggle_tool_button_new() = toggle_tool_button_new;
extern GtkToolItem* gtk_toggle_tool_button_new_from_stock(char*) = toggle_tool_button_new_from_stock;
extern void gtk_toggle_tool_button_set_active(GtkToggleToolButton*, int) = toggle_tool_button_set_active;
extern int gtk_toggle_tool_button_get_active(GtkToggleToolButton*) = toggle_tool_button_get_active;
extern long gtk_radio_tool_button_get_type() = radio_tool_button_get_type;
extern GtkToolItem* gtk_radio_tool_button_new(GSList*) = radio_tool_button_new;
extern GtkToolItem* gtk_radio_tool_button_new_from_stock(GSList*, char*) = radio_tool_button_new_from_stock;
extern GtkToolItem* gtk_radio_tool_button_new_from_widget(GtkRadioToolButton*) = radio_tool_button_new_from_widget;
extern GtkToolItem* gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton*, char*) = radio_tool_button_new_with_stock_from_widget;
extern GSList* gtk_radio_tool_button_get_group(GtkRadioToolButton*) = radio_tool_button_get_group;
extern void gtk_radio_tool_button_set_group(GtkRadioToolButton*, GSList*) = radio_tool_button_set_group;
extern int gtk_recent_manager_error_quark() = recent_manager_error_quark;
extern long gtk_recent_manager_get_type() = recent_manager_get_type;
extern GtkRecentManager* gtk_recent_manager_new() = recent_manager_new;
extern GtkRecentManager* gtk_recent_manager_get_default() = recent_manager_get_default;
extern GtkRecentManager* gtk_recent_manager_get_for_screen(GdkScreen*) = recent_manager_get_for_screen;
extern void gtk_recent_manager_set_screen(GtkRecentManager*, GdkScreen*) = recent_manager_set_screen;
extern int gtk_recent_manager_add_item(GtkRecentManager*, char*) = recent_manager_add_item;
extern int gtk_recent_manager_add_full(GtkRecentManager*, char*, GtkRecentData*) = recent_manager_add_full;
extern int gtk_recent_manager_remove_item(GtkRecentManager*, char*, GError**) = recent_manager_remove_item;
extern GtkRecentInfo* gtk_recent_manager_lookup_item(GtkRecentManager*, char*, GError**) = recent_manager_lookup_item;
extern int gtk_recent_manager_has_item(GtkRecentManager*, char*) = recent_manager_has_item;
extern int gtk_recent_manager_move_item(GtkRecentManager*, char*, char*, GError**) = recent_manager_move_item;
extern void gtk_recent_manager_set_limit(GtkRecentManager*, int) = recent_manager_set_limit;
extern int gtk_recent_manager_get_limit(GtkRecentManager*) = recent_manager_get_limit;
extern GList* gtk_recent_manager_get_items(GtkRecentManager*) = recent_manager_get_items;
extern int gtk_recent_manager_purge_items(GtkRecentManager*, GError**) = recent_manager_purge_items;
extern long gtk_recent_info_get_type() = recent_info_get_type;
extern GtkRecentInfo* gtk_recent_info_ref(GtkRecentInfo*) = recent_info_ref;
extern void gtk_recent_info_unref(GtkRecentInfo*) = recent_info_unref;
extern char* gtk_recent_info_get_uri(GtkRecentInfo*) = recent_info_get_uri;
extern char* gtk_recent_info_get_display_name(GtkRecentInfo*) = recent_info_get_display_name;
extern char* gtk_recent_info_get_description(GtkRecentInfo*) = recent_info_get_description;
extern char* gtk_recent_info_get_mime_type(GtkRecentInfo*) = recent_info_get_mime_type;
extern long gtk_recent_info_get_added(GtkRecentInfo*) = recent_info_get_added;
extern long gtk_recent_info_get_modified(GtkRecentInfo*) = recent_info_get_modified;
extern long gtk_recent_info_get_visited(GtkRecentInfo*) = recent_info_get_visited;
extern int gtk_recent_info_get_private_hint(GtkRecentInfo*) = recent_info_get_private_hint;
extern int gtk_recent_info_get_application_info(GtkRecentInfo*, char*, char**, int*, long*) = recent_info_get_application_info;
extern char** gtk_recent_info_get_applications(GtkRecentInfo*, long*) = recent_info_get_applications;
extern char* gtk_recent_info_last_application(GtkRecentInfo*) = recent_info_last_application;
extern int gtk_recent_info_has_application(GtkRecentInfo*, char*) = recent_info_has_application;
extern char** gtk_recent_info_get_groups(GtkRecentInfo*, long*) = recent_info_get_groups;
extern int gtk_recent_info_has_group(GtkRecentInfo*, char*) = recent_info_has_group;
extern GdkPixbuf* gtk_recent_info_get_icon(GtkRecentInfo*, int) = recent_info_get_icon;
extern char* gtk_recent_info_get_short_name(GtkRecentInfo*) = recent_info_get_short_name;
extern char* gtk_recent_info_get_uri_display(GtkRecentInfo*) = recent_info_get_uri_display;
extern int gtk_recent_info_get_age(GtkRecentInfo*) = recent_info_get_age;
extern int gtk_recent_info_is_local(GtkRecentInfo*) = recent_info_is_local;
extern int gtk_recent_info_exists(GtkRecentInfo*) = recent_info_exists;
extern int gtk_recent_info_match(GtkRecentInfo*, GtkRecentInfo*) = recent_info_match;
extern long gtk_recent_action_get_type() = recent_action_get_type;
extern GtkAction* gtk_recent_action_new(char*, char*, char*, char*) = recent_action_new;
extern GtkAction* gtk_recent_action_new_for_manager(char*, char*, char*, char*, GtkRecentManager*) = recent_action_new_for_manager;
extern int gtk_recent_action_get_show_numbers(GtkRecentAction*) = recent_action_get_show_numbers;
extern void gtk_recent_action_set_show_numbers(GtkRecentAction*, int) = recent_action_set_show_numbers;
extern long gtk_recent_filter_get_type() = recent_filter_get_type;
extern GtkRecentFilter* gtk_recent_filter_new() = recent_filter_new;
extern void gtk_recent_filter_set_name(GtkRecentFilter*, char*) = recent_filter_set_name;
extern char* gtk_recent_filter_get_name(GtkRecentFilter*) = recent_filter_get_name;
extern void gtk_recent_filter_add_mime_type(GtkRecentFilter*, char*) = recent_filter_add_mime_type;
extern void gtk_recent_filter_add_pattern(GtkRecentFilter*, char*) = recent_filter_add_pattern;
extern void gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter*) = recent_filter_add_pixbuf_formats;
extern void gtk_recent_filter_add_application(GtkRecentFilter*, char*) = recent_filter_add_application;
extern void gtk_recent_filter_add_group(GtkRecentFilter*, char*) = recent_filter_add_group;
extern void gtk_recent_filter_add_age(GtkRecentFilter*, int) = recent_filter_add_age;
extern void gtk_recent_filter_add_custom(GtkRecentFilter*, int, void*, void*, void*) = recent_filter_add_custom;
extern int gtk_recent_filter_get_needed(GtkRecentFilter*) = recent_filter_get_needed;
extern int gtk_recent_filter_filter(GtkRecentFilter*, GtkRecentFilterInfo*) = recent_filter_filter;
extern int gtk_recent_chooser_error_quark() = recent_chooser_error_quark;
extern long gtk_recent_chooser_get_type() = recent_chooser_get_type;
extern void gtk_recent_chooser_set_show_private(GtkRecentChooser*, int) = recent_chooser_set_show_private;
extern int gtk_recent_chooser_get_show_private(GtkRecentChooser*) = recent_chooser_get_show_private;
extern void gtk_recent_chooser_set_show_not_found(GtkRecentChooser*, int) = recent_chooser_set_show_not_found;
extern int gtk_recent_chooser_get_show_not_found(GtkRecentChooser*) = recent_chooser_get_show_not_found;
extern void gtk_recent_chooser_set_select_multiple(GtkRecentChooser*, int) = recent_chooser_set_select_multiple;
extern int gtk_recent_chooser_get_select_multiple(GtkRecentChooser*) = recent_chooser_get_select_multiple;
extern void gtk_recent_chooser_set_limit(GtkRecentChooser*, int) = recent_chooser_set_limit;
extern int gtk_recent_chooser_get_limit(GtkRecentChooser*) = recent_chooser_get_limit;
extern void gtk_recent_chooser_set_local_only(GtkRecentChooser*, int) = recent_chooser_set_local_only;
extern int gtk_recent_chooser_get_local_only(GtkRecentChooser*) = recent_chooser_get_local_only;
extern void gtk_recent_chooser_set_show_tips(GtkRecentChooser*, int) = recent_chooser_set_show_tips;
extern int gtk_recent_chooser_get_show_tips(GtkRecentChooser*) = recent_chooser_get_show_tips;
extern void gtk_recent_chooser_set_show_numbers(GtkRecentChooser*, int) = recent_chooser_set_show_numbers;
extern int gtk_recent_chooser_get_show_numbers(GtkRecentChooser*) = recent_chooser_get_show_numbers;
extern void gtk_recent_chooser_set_show_icons(GtkRecentChooser*, int) = recent_chooser_set_show_icons;
extern int gtk_recent_chooser_get_show_icons(GtkRecentChooser*) = recent_chooser_get_show_icons;
extern void gtk_recent_chooser_set_sort_type(GtkRecentChooser*, int) = recent_chooser_set_sort_type;
extern int gtk_recent_chooser_get_sort_type(GtkRecentChooser*) = recent_chooser_get_sort_type;
extern void gtk_recent_chooser_set_sort_func(GtkRecentChooser*, void*, void*, void*) = recent_chooser_set_sort_func;
extern int gtk_recent_chooser_set_current_uri(GtkRecentChooser*, char*, GError**) = recent_chooser_set_current_uri;
extern char* gtk_recent_chooser_get_current_uri(GtkRecentChooser*) = recent_chooser_get_current_uri;
extern GtkRecentInfo* gtk_recent_chooser_get_current_item(GtkRecentChooser*) = recent_chooser_get_current_item;
extern int gtk_recent_chooser_select_uri(GtkRecentChooser*, char*, GError**) = recent_chooser_select_uri;
extern void gtk_recent_chooser_unselect_uri(GtkRecentChooser*, char*) = recent_chooser_unselect_uri;
extern void gtk_recent_chooser_select_all(GtkRecentChooser*) = recent_chooser_select_all;
extern void gtk_recent_chooser_unselect_all(GtkRecentChooser*) = recent_chooser_unselect_all;
extern GList* gtk_recent_chooser_get_items(GtkRecentChooser*) = recent_chooser_get_items;
extern char** gtk_recent_chooser_get_uris(GtkRecentChooser*, long*) = recent_chooser_get_uris;
extern void gtk_recent_chooser_add_filter(GtkRecentChooser*, GtkRecentFilter*) = recent_chooser_add_filter;
extern void gtk_recent_chooser_remove_filter(GtkRecentChooser*, GtkRecentFilter*) = recent_chooser_remove_filter;
extern GSList* gtk_recent_chooser_list_filters(GtkRecentChooser*) = recent_chooser_list_filters;
extern void gtk_recent_chooser_set_filter(GtkRecentChooser*, GtkRecentFilter*) = recent_chooser_set_filter;
extern GtkRecentFilter* gtk_recent_chooser_get_filter(GtkRecentChooser*) = recent_chooser_get_filter;
extern long gtk_recent_chooser_dialog_get_type() = recent_chooser_dialog_get_type;
extern GtkWidget* gtk_recent_chooser_dialog_new(char*, GtkWindow*, char*, ...) = recent_chooser_dialog_new;
extern GtkWidget* gtk_recent_chooser_dialog_new_for_manager(char*, GtkWindow*, GtkRecentManager*, char*, ...) = recent_chooser_dialog_new_for_manager;
extern long gtk_recent_chooser_menu_get_type() = recent_chooser_menu_get_type;
extern GtkWidget* gtk_recent_chooser_menu_new() = recent_chooser_menu_new;
extern GtkWidget* gtk_recent_chooser_menu_new_for_manager(GtkRecentManager*) = recent_chooser_menu_new_for_manager;
extern int gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu*) = recent_chooser_menu_get_show_numbers;
extern void gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu*, int) = recent_chooser_menu_set_show_numbers;
extern long gtk_recent_chooser_widget_get_type() = recent_chooser_widget_get_type;
extern GtkWidget* gtk_recent_chooser_widget_new() = recent_chooser_widget_new;
extern GtkWidget* gtk_recent_chooser_widget_new_for_manager(GtkRecentManager*) = recent_chooser_widget_new_for_manager;
extern long gtk_scale_button_get_type() = scale_button_get_type;
extern GtkWidget* gtk_scale_button_new(int, double, double, double, char**) = scale_button_new;
extern void gtk_scale_button_set_icons(GtkScaleButton*, char**) = scale_button_set_icons;
extern double gtk_scale_button_get_value(GtkScaleButton*) = scale_button_get_value;
extern void gtk_scale_button_set_value(GtkScaleButton*, double) = scale_button_set_value;
extern GtkAdjustment* gtk_scale_button_get_adjustment(GtkScaleButton*) = scale_button_get_adjustment;
extern void gtk_scale_button_set_adjustment(GtkScaleButton*, GtkAdjustment*) = scale_button_set_adjustment;
extern int gtk_scale_button_get_orientation(GtkScaleButton*) = scale_button_get_orientation;
extern void gtk_scale_button_set_orientation(GtkScaleButton*, int) = scale_button_set_orientation;
extern GtkWidget* gtk_scale_button_get_plus_button(GtkScaleButton*) = scale_button_get_plus_button;
extern GtkWidget* gtk_scale_button_get_minus_button(GtkScaleButton*) = scale_button_get_minus_button;
extern GtkWidget* gtk_scale_button_get_popup(GtkScaleButton*) = scale_button_get_popup;
extern long gtk_vscrollbar_get_type() = vscrollbar_get_type;
extern GtkWidget* gtk_vscrollbar_new(GtkAdjustment*) = vscrollbar_new;
extern long gtk_viewport_get_type() = viewport_get_type;
extern GtkWidget* gtk_viewport_new(GtkAdjustment*, GtkAdjustment*) = viewport_new;
extern GtkAdjustment* gtk_viewport_get_hadjustment(GtkViewport*) = viewport_get_hadjustment;
extern GtkAdjustment* gtk_viewport_get_vadjustment(GtkViewport*) = viewport_get_vadjustment;
extern void gtk_viewport_set_hadjustment(GtkViewport*, GtkAdjustment*) = viewport_set_hadjustment;
extern void gtk_viewport_set_vadjustment(GtkViewport*, GtkAdjustment*) = viewport_set_vadjustment;
extern void gtk_viewport_set_shadow_type(GtkViewport*, int) = viewport_set_shadow_type;
extern int gtk_viewport_get_shadow_type(GtkViewport*) = viewport_get_shadow_type;
extern long gtk_scrolled_window_get_type() = scrolled_window_get_type;
extern GtkWidget* gtk_scrolled_window_new(GtkAdjustment*, GtkAdjustment*) = scrolled_window_new;
extern void gtk_scrolled_window_set_hadjustment(GtkScrolledWindow*, GtkAdjustment*) = scrolled_window_set_hadjustment;
extern void gtk_scrolled_window_set_vadjustment(GtkScrolledWindow*, GtkAdjustment*) = scrolled_window_set_vadjustment;
extern GtkAdjustment* gtk_scrolled_window_get_hadjustment(GtkScrolledWindow*) = scrolled_window_get_hadjustment;
extern GtkAdjustment* gtk_scrolled_window_get_vadjustment(GtkScrolledWindow*) = scrolled_window_get_vadjustment;
extern GtkWidget* gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow*) = scrolled_window_get_hscrollbar;
extern GtkWidget* gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow*) = scrolled_window_get_vscrollbar;
extern void gtk_scrolled_window_set_policy(GtkScrolledWindow*, int, int) = scrolled_window_set_policy;
extern void gtk_scrolled_window_get_policy(GtkScrolledWindow*, int*, int*) = scrolled_window_get_policy;
extern void gtk_scrolled_window_set_placement(GtkScrolledWindow*, int) = scrolled_window_set_placement;
extern void gtk_scrolled_window_unset_placement(GtkScrolledWindow*) = scrolled_window_unset_placement;
extern int gtk_scrolled_window_get_placement(GtkScrolledWindow*) = scrolled_window_get_placement;
extern void gtk_scrolled_window_set_shadow_type(GtkScrolledWindow*, int) = scrolled_window_set_shadow_type;
extern int gtk_scrolled_window_get_shadow_type(GtkScrolledWindow*) = scrolled_window_get_shadow_type;
extern void gtk_scrolled_window_add_with_viewport(GtkScrolledWindow*, GtkWidget*) = scrolled_window_add_with_viewport;
extern long gtk_separator_menu_item_get_type() = separator_menu_item_get_type;
extern GtkWidget* gtk_separator_menu_item_new() = separator_menu_item_new;
extern long gtk_separator_tool_item_get_type() = separator_tool_item_get_type;
extern GtkToolItem* gtk_separator_tool_item_new() = separator_tool_item_new;
extern int gtk_separator_tool_item_get_draw(GtkSeparatorToolItem*) = separator_tool_item_get_draw;
extern void gtk_separator_tool_item_set_draw(GtkSeparatorToolItem*, int) = separator_tool_item_set_draw;
extern int gtk_show_uri(GdkScreen*, char*, int, GError**) = show_uri;
extern long gtk_size_group_get_type() = size_group_get_type;
extern GtkSizeGroup* gtk_size_group_new(int) = size_group_new;
extern void gtk_size_group_set_mode(GtkSizeGroup*, int) = size_group_set_mode;
extern int gtk_size_group_get_mode(GtkSizeGroup*) = size_group_get_mode;
extern void gtk_size_group_set_ignore_hidden(GtkSizeGroup*, int) = size_group_set_ignore_hidden;
extern int gtk_size_group_get_ignore_hidden(GtkSizeGroup*) = size_group_get_ignore_hidden;
extern void gtk_size_group_add_widget(GtkSizeGroup*, GtkWidget*) = size_group_add_widget;
extern void gtk_size_group_remove_widget(GtkSizeGroup*, GtkWidget*) = size_group_remove_widget;
extern GSList* gtk_size_group_get_widgets(GtkSizeGroup*) = size_group_get_widgets;
extern long gtk_spin_button_get_type() = spin_button_get_type;
extern void gtk_spin_button_configure(GtkSpinButton*, GtkAdjustment*, double, int) = spin_button_configure;
extern GtkWidget* gtk_spin_button_new(GtkAdjustment*, double, int) = spin_button_new;
extern GtkWidget* gtk_spin_button_new_with_range(double, double, double) = spin_button_new_with_range;
extern void gtk_spin_button_set_adjustment(GtkSpinButton*, GtkAdjustment*) = spin_button_set_adjustment;
extern GtkAdjustment* gtk_spin_button_get_adjustment(GtkSpinButton*) = spin_button_get_adjustment;
extern void gtk_spin_button_set_digits(GtkSpinButton*, int) = spin_button_set_digits;
extern int gtk_spin_button_get_digits(GtkSpinButton*) = spin_button_get_digits;
extern void gtk_spin_button_set_increments(GtkSpinButton*, double, double) = spin_button_set_increments;
extern void gtk_spin_button_get_increments(GtkSpinButton*, double*, double*) = spin_button_get_increments;
extern void gtk_spin_button_set_range(GtkSpinButton*, double, double) = spin_button_set_range;
extern void gtk_spin_button_get_range(GtkSpinButton*, double*, double*) = spin_button_get_range;
extern double gtk_spin_button_get_value(GtkSpinButton*) = spin_button_get_value;
extern int gtk_spin_button_get_value_as_int(GtkSpinButton*) = spin_button_get_value_as_int;
extern void gtk_spin_button_set_value(GtkSpinButton*, double) = spin_button_set_value;
extern void gtk_spin_button_set_update_policy(GtkSpinButton*, int) = spin_button_set_update_policy;
extern int gtk_spin_button_get_update_policy(GtkSpinButton*) = spin_button_get_update_policy;
extern void gtk_spin_button_set_numeric(GtkSpinButton*, int) = spin_button_set_numeric;
extern int gtk_spin_button_get_numeric(GtkSpinButton*) = spin_button_get_numeric;
extern void gtk_spin_button_spin(GtkSpinButton*, int, double) = spin_button_spin;
extern void gtk_spin_button_set_wrap(GtkSpinButton*, int) = spin_button_set_wrap;
extern int gtk_spin_button_get_wrap(GtkSpinButton*) = spin_button_get_wrap;
extern void gtk_spin_button_set_snap_to_ticks(GtkSpinButton*, int) = spin_button_set_snap_to_ticks;
extern int gtk_spin_button_get_snap_to_ticks(GtkSpinButton*) = spin_button_get_snap_to_ticks;
extern void gtk_spin_button_update(GtkSpinButton*) = spin_button_update;
extern long gtk_statusbar_get_type() = statusbar_get_type;
extern GtkWidget* gtk_statusbar_new() = statusbar_new;
extern int gtk_statusbar_get_context_id(GtkStatusbar*, char*) = statusbar_get_context_id;
extern int gtk_statusbar_push(GtkStatusbar*, int, char*) = statusbar_push;
extern void gtk_statusbar_pop(GtkStatusbar*, int) = statusbar_pop;
extern void gtk_statusbar_remove(GtkStatusbar*, int, int) = statusbar_remove;
extern void gtk_statusbar_set_has_resize_grip(GtkStatusbar*, int) = statusbar_set_has_resize_grip;
extern int gtk_statusbar_get_has_resize_grip(GtkStatusbar*) = statusbar_get_has_resize_grip;
extern long gtk_status_icon_get_type() = status_icon_get_type;
extern GtkStatusIcon* gtk_status_icon_new() = status_icon_new;
extern GtkStatusIcon* gtk_status_icon_new_from_pixbuf(GdkPixbuf*) = status_icon_new_from_pixbuf;
extern GtkStatusIcon* gtk_status_icon_new_from_file(char*) = status_icon_new_from_file;
extern GtkStatusIcon* gtk_status_icon_new_from_stock(char*) = status_icon_new_from_stock;
extern GtkStatusIcon* gtk_status_icon_new_from_icon_name(char*) = status_icon_new_from_icon_name;
extern GtkStatusIcon* gtk_status_icon_new_from_gicon(GIcon*) = status_icon_new_from_gicon;
extern void gtk_status_icon_set_from_pixbuf(GtkStatusIcon*, GdkPixbuf*) = status_icon_set_from_pixbuf;
extern void gtk_status_icon_set_from_file(GtkStatusIcon*, char*) = status_icon_set_from_file;
extern void gtk_status_icon_set_from_stock(GtkStatusIcon*, char*) = status_icon_set_from_stock;
extern void gtk_status_icon_set_from_icon_name(GtkStatusIcon*, char*) = status_icon_set_from_icon_name;
extern void gtk_status_icon_set_from_gicon(GtkStatusIcon*, GIcon*) = status_icon_set_from_gicon;
extern int gtk_status_icon_get_storage_type(GtkStatusIcon*) = status_icon_get_storage_type;
extern GdkPixbuf* gtk_status_icon_get_pixbuf(GtkStatusIcon*) = status_icon_get_pixbuf;
extern char* gtk_status_icon_get_stock(GtkStatusIcon*) = status_icon_get_stock;
extern char* gtk_status_icon_get_icon_name(GtkStatusIcon*) = status_icon_get_icon_name;
extern GIcon* gtk_status_icon_get_gicon(GtkStatusIcon*) = status_icon_get_gicon;
extern int gtk_status_icon_get_size(GtkStatusIcon*) = status_icon_get_size;
extern void gtk_status_icon_set_screen(GtkStatusIcon*, GdkScreen*) = status_icon_set_screen;
extern GdkScreen* gtk_status_icon_get_screen(GtkStatusIcon*) = status_icon_get_screen;
extern void gtk_status_icon_set_tooltip(GtkStatusIcon*, char*) = status_icon_set_tooltip;
extern void gtk_status_icon_set_visible(GtkStatusIcon*, int) = status_icon_set_visible;
extern int gtk_status_icon_get_visible(GtkStatusIcon*) = status_icon_get_visible;
extern void gtk_status_icon_set_blinking(GtkStatusIcon*, int) = status_icon_set_blinking;
extern int gtk_status_icon_get_blinking(GtkStatusIcon*) = status_icon_get_blinking;
extern int gtk_status_icon_is_embedded(GtkStatusIcon*) = status_icon_is_embedded;
extern void gtk_status_icon_position_menu(GtkMenu*, int*, int*, int*, void*) = status_icon_position_menu;
extern int gtk_status_icon_get_geometry(GtkStatusIcon*, GdkScreen**, GdkRectangle*, int*) = status_icon_get_geometry;
extern int gtk_status_icon_get_x11_window_id(GtkStatusIcon*) = status_icon_get_x11_window_id;
extern void gtk_stock_add(GtkStockItem*, int) = stock_add;
extern void gtk_stock_add_static(GtkStockItem*, int) = stock_add_static;
extern int gtk_stock_lookup(char*, GtkStockItem*) = stock_lookup;
extern GSList* gtk_stock_list_ids() = stock_list_ids;
extern GtkStockItem* gtk_stock_item_copy(GtkStockItem*) = stock_item_copy;
extern void gtk_stock_item_free(GtkStockItem*) = stock_item_free;
extern void gtk_stock_set_translate_func(char*, void*, void*, void*) = stock_set_translate_func;
extern long gtk_table_get_type() = table_get_type;
extern GtkWidget* gtk_table_new(int, int, int) = table_new;
extern void gtk_table_resize(GtkTable*, int, int) = table_resize;
extern void gtk_table_attach(GtkTable*, GtkWidget*, int, int, int, int, int, int, int, int) = table_attach;
extern void gtk_table_attach_defaults(GtkTable*, GtkWidget*, int, int, int, int) = table_attach_defaults;
extern void gtk_table_set_row_spacing(GtkTable*, int, int) = table_set_row_spacing;
extern int gtk_table_get_row_spacing(GtkTable*, int) = table_get_row_spacing;
extern void gtk_table_set_col_spacing(GtkTable*, int, int) = table_set_col_spacing;
extern int gtk_table_get_col_spacing(GtkTable*, int) = table_get_col_spacing;
extern void gtk_table_set_row_spacings(GtkTable*, int) = table_set_row_spacings;
extern int gtk_table_get_default_row_spacing(GtkTable*) = table_get_default_row_spacing;
extern void gtk_table_set_col_spacings(GtkTable*, int) = table_set_col_spacings;
extern int gtk_table_get_default_col_spacing(GtkTable*) = table_get_default_col_spacing;
extern void gtk_table_set_homogeneous(GtkTable*, int) = table_set_homogeneous;
extern int gtk_table_get_homogeneous(GtkTable*) = table_get_homogeneous;
extern long gtk_tearoff_menu_item_get_type() = tearoff_menu_item_get_type;
extern GtkWidget* gtk_tearoff_menu_item_new() = tearoff_menu_item_new;
extern long gtk_text_tag_table_get_type() = text_tag_table_get_type;
extern GtkTextTagTable* gtk_text_tag_table_new() = text_tag_table_new;
extern void gtk_text_tag_table_add(GtkTextTagTable*, GtkTextTag*) = text_tag_table_add;
extern void gtk_text_tag_table_remove(GtkTextTagTable*, GtkTextTag*) = text_tag_table_remove;
extern GtkTextTag* gtk_text_tag_table_lookup(GtkTextTagTable*, char*) = text_tag_table_lookup;
extern void gtk_text_tag_table_foreach(GtkTextTagTable*, void*, void*) = text_tag_table_foreach;
extern int gtk_text_tag_table_get_size(GtkTextTagTable*) = text_tag_table_get_size;
extern long gtk_text_mark_get_type() = text_mark_get_type;
extern void gtk_text_mark_set_visible(GtkTextMark*, int) = text_mark_set_visible;
extern int gtk_text_mark_get_visible(GtkTextMark*) = text_mark_get_visible;
extern GtkTextMark* gtk_text_mark_new(char*, int) = text_mark_new;
extern char* gtk_text_mark_get_name(GtkTextMark*) = text_mark_get_name;
extern int gtk_text_mark_get_deleted(GtkTextMark*) = text_mark_get_deleted;
extern GtkTextBuffer* gtk_text_mark_get_buffer(GtkTextMark*) = text_mark_get_buffer;
extern int gtk_text_mark_get_left_gravity(GtkTextMark*) = text_mark_get_left_gravity;
extern long gtk_text_buffer_get_type() = text_buffer_get_type;
extern GtkTextBuffer* gtk_text_buffer_new(GtkTextTagTable*) = text_buffer_new;
extern int gtk_text_buffer_get_line_count(GtkTextBuffer*) = text_buffer_get_line_count;
extern int gtk_text_buffer_get_char_count(GtkTextBuffer*) = text_buffer_get_char_count;
extern GtkTextTagTable* gtk_text_buffer_get_tag_table(GtkTextBuffer*) = text_buffer_get_tag_table;
extern void gtk_text_buffer_set_text(GtkTextBuffer*, char*, int) = text_buffer_set_text;
extern void gtk_text_buffer_insert(GtkTextBuffer*, GtkTextIter*, char*, int) = text_buffer_insert;
extern void gtk_text_buffer_insert_at_cursor(GtkTextBuffer*, char*, int) = text_buffer_insert_at_cursor;
extern int gtk_text_buffer_insert_interactive(GtkTextBuffer*, GtkTextIter*, char*, int, int) = text_buffer_insert_interactive;
extern int gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer*, char*, int, int) = text_buffer_insert_interactive_at_cursor;
extern void gtk_text_buffer_insert_range(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, GtkTextIter*) = text_buffer_insert_range;
extern int gtk_text_buffer_insert_range_interactive(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, GtkTextIter*, int) = text_buffer_insert_range_interactive;
extern void gtk_text_buffer_insert_with_tags(GtkTextBuffer*, GtkTextIter*, char*, int, GtkTextTag*, ...) = text_buffer_insert_with_tags;
extern void gtk_text_buffer_insert_with_tags_by_name(GtkTextBuffer*, GtkTextIter*, char*, int, char*, ...) = text_buffer_insert_with_tags_by_name;
extern void gtk_text_buffer_delete(GtkTextBuffer*, GtkTextIter*, GtkTextIter*) = text_buffer_delete;
extern int gtk_text_buffer_delete_interactive(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int) = text_buffer_delete_interactive;
extern int gtk_text_buffer_backspace(GtkTextBuffer*, GtkTextIter*, int, int) = text_buffer_backspace;
extern char* gtk_text_buffer_get_text(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int) = text_buffer_get_text;
extern char* gtk_text_buffer_get_slice(GtkTextBuffer*, GtkTextIter*, GtkTextIter*, int) = text_buffer_get_slice;
extern void gtk_text_buffer_insert_pixbuf(GtkTextBuffer*, GtkTextIter*, GdkPixbuf*) = text_buffer_insert_pixbuf;
extern void gtk_text_buffer_insert_child_anchor(GtkTextBuffer*, GtkTextIter*, GtkTextChildAnchor*) = text_buffer_insert_child_anchor;
extern GtkTextChildAnchor* gtk_text_buffer_create_child_anchor(GtkTextBuffer*, GtkTextIter*) = text_buffer_create_child_anchor;
extern void gtk_text_buffer_add_mark(GtkTextBuffer*, GtkTextMark*, GtkTextIter*) = text_buffer_add_mark;
extern GtkTextMark* gtk_text_buffer_create_mark(GtkTextBuffer*, char*, GtkTextIter*, int) = text_buffer_create_mark;
extern void gtk_text_buffer_move_mark(GtkTextBuffer*, GtkTextMark*, GtkTextIter*) = text_buffer_move_mark;
extern void gtk_text_buffer_delete_mark(GtkTextBuffer*, GtkTextMark*) = text_buffer_delete_mark;
extern GtkTextMark* gtk_text_buffer_get_mark(GtkTextBuffer*, char*) = text_buffer_get_mark;
extern void gtk_text_buffer_move_mark_by_name(GtkTextBuffer*, char*, GtkTextIter*) = text_buffer_move_mark_by_name;
extern void gtk_text_buffer_delete_mark_by_name(GtkTextBuffer*, char*) = text_buffer_delete_mark_by_name;
extern GtkTextMark* gtk_text_buffer_get_insert(GtkTextBuffer*) = text_buffer_get_insert;
extern GtkTextMark* gtk_text_buffer_get_selection_bound(GtkTextBuffer*) = text_buffer_get_selection_bound;
extern void gtk_text_buffer_place_cursor(GtkTextBuffer*, GtkTextIter*) = text_buffer_place_cursor;
extern void gtk_text_buffer_select_range(GtkTextBuffer*, GtkTextIter*, GtkTextIter*) = text_buffer_select_range;
extern void gtk_text_buffer_apply_tag(GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*) = text_buffer_apply_tag;
extern void gtk_text_buffer_remove_tag(GtkTextBuffer*, GtkTextTag*, GtkTextIter*, GtkTextIter*) = text_buffer_remove_tag;
extern void gtk_text_buffer_apply_tag_by_name(GtkTextBuffer*, char*, GtkTextIter*, GtkTextIter*) = text_buffer_apply_tag_by_name;
extern void gtk_text_buffer_remove_tag_by_name(GtkTextBuffer*, char*, GtkTextIter*, GtkTextIter*) = text_buffer_remove_tag_by_name;
extern void gtk_text_buffer_remove_all_tags(GtkTextBuffer*, GtkTextIter*, GtkTextIter*) = text_buffer_remove_all_tags;
extern GtkTextTag* gtk_text_buffer_create_tag(GtkTextBuffer*, char*, char*, ...) = text_buffer_create_tag;
extern void gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer*, GtkTextIter*, int, int) = text_buffer_get_iter_at_line_offset;
extern void gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer*, GtkTextIter*, int, int) = text_buffer_get_iter_at_line_index;
extern void gtk_text_buffer_get_iter_at_offset(GtkTextBuffer*, GtkTextIter*, int) = text_buffer_get_iter_at_offset;
extern void gtk_text_buffer_get_iter_at_line(GtkTextBuffer*, GtkTextIter*, int) = text_buffer_get_iter_at_line;
extern void gtk_text_buffer_get_start_iter(GtkTextBuffer*, GtkTextIter*) = text_buffer_get_start_iter;
extern void gtk_text_buffer_get_end_iter(GtkTextBuffer*, GtkTextIter*) = text_buffer_get_end_iter;
extern void gtk_text_buffer_get_bounds(GtkTextBuffer*, GtkTextIter*, GtkTextIter*) = text_buffer_get_bounds;
extern void gtk_text_buffer_get_iter_at_mark(GtkTextBuffer*, GtkTextIter*, GtkTextMark*) = text_buffer_get_iter_at_mark;
extern void gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer*, GtkTextIter*, GtkTextChildAnchor*) = text_buffer_get_iter_at_child_anchor;
extern int gtk_text_buffer_get_modified(GtkTextBuffer*) = text_buffer_get_modified;
extern void gtk_text_buffer_set_modified(GtkTextBuffer*, int) = text_buffer_set_modified;
extern int gtk_text_buffer_get_has_selection(GtkTextBuffer*) = text_buffer_get_has_selection;
extern void gtk_text_buffer_add_selection_clipboard(GtkTextBuffer*, GtkClipboard*) = text_buffer_add_selection_clipboard;
extern void gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer*, GtkClipboard*) = text_buffer_remove_selection_clipboard;
extern void gtk_text_buffer_cut_clipboard(GtkTextBuffer*, GtkClipboard*, int) = text_buffer_cut_clipboard;
extern void gtk_text_buffer_copy_clipboard(GtkTextBuffer*, GtkClipboard*) = text_buffer_copy_clipboard;
extern void gtk_text_buffer_paste_clipboard(GtkTextBuffer*, GtkClipboard*, GtkTextIter*, int) = text_buffer_paste_clipboard;
extern int gtk_text_buffer_get_selection_bounds(GtkTextBuffer*, GtkTextIter*, GtkTextIter*) = text_buffer_get_selection_bounds;
extern int gtk_text_buffer_delete_selection(GtkTextBuffer*, int, int) = text_buffer_delete_selection;
extern void gtk_text_buffer_begin_user_action(GtkTextBuffer*) = text_buffer_begin_user_action;
extern void gtk_text_buffer_end_user_action(GtkTextBuffer*) = text_buffer_end_user_action;
extern GtkTargetList* gtk_text_buffer_get_copy_target_list(GtkTextBuffer*) = text_buffer_get_copy_target_list;
extern GtkTargetList* gtk_text_buffer_get_paste_target_list(GtkTextBuffer*) = text_buffer_get_paste_target_list;
extern void/*struct _GdkAtom*/* gtk_text_buffer_register_serialize_format(GtkTextBuffer*, char*, void*, void*, void*) = text_buffer_register_serialize_format;
extern void/*struct _GdkAtom*/* gtk_text_buffer_register_serialize_tagset(GtkTextBuffer*, char*) = text_buffer_register_serialize_tagset;
extern void/*struct _GdkAtom*/* gtk_text_buffer_register_deserialize_format(GtkTextBuffer*, char*, void*, void*, void*) = text_buffer_register_deserialize_format;
extern void/*struct _GdkAtom*/* gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer*, char*) = text_buffer_register_deserialize_tagset;
extern void gtk_text_buffer_unregister_serialize_format(GtkTextBuffer*, void/*struct _GdkAtom*/*) = text_buffer_unregister_serialize_format;
extern void gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer*, void/*struct _GdkAtom*/*) = text_buffer_unregister_deserialize_format;
extern void gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer*, void/*struct _GdkAtom*/*, int) = text_buffer_deserialize_set_can_create_tags;
extern int gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer*, void/*struct _GdkAtom*/*) = text_buffer_deserialize_get_can_create_tags;
extern void/*struct _GdkAtom*/** gtk_text_buffer_get_serialize_formats(GtkTextBuffer*, int*) = text_buffer_get_serialize_formats;
extern void/*struct _GdkAtom*/** gtk_text_buffer_get_deserialize_formats(GtkTextBuffer*, int*) = text_buffer_get_deserialize_formats;
extern char* gtk_text_buffer_serialize(GtkTextBuffer*, GtkTextBuffer*, void/*struct _GdkAtom*/*, GtkTextIter*, GtkTextIter*, long*) = text_buffer_serialize;
extern int gtk_text_buffer_deserialize(GtkTextBuffer*, GtkTextBuffer*, void/*struct _GdkAtom*/*, GtkTextIter*, char*, long, GError**) = text_buffer_deserialize;
extern long gtk_text_view_get_type() = text_view_get_type;
extern GtkWidget* gtk_text_view_new() = text_view_new;
extern GtkWidget* gtk_text_view_new_with_buffer(GtkTextBuffer*) = text_view_new_with_buffer;
extern void gtk_text_view_set_buffer(GtkTextView*, GtkTextBuffer*) = text_view_set_buffer;
extern GtkTextBuffer* gtk_text_view_get_buffer(GtkTextView*) = text_view_get_buffer;
extern int gtk_text_view_scroll_to_iter(GtkTextView*, GtkTextIter*, double, int, double, double) = text_view_scroll_to_iter;
extern void gtk_text_view_scroll_to_mark(GtkTextView*, GtkTextMark*, double, int, double, double) = text_view_scroll_to_mark;
extern void gtk_text_view_scroll_mark_onscreen(GtkTextView*, GtkTextMark*) = text_view_scroll_mark_onscreen;
extern int gtk_text_view_move_mark_onscreen(GtkTextView*, GtkTextMark*) = text_view_move_mark_onscreen;
extern int gtk_text_view_place_cursor_onscreen(GtkTextView*) = text_view_place_cursor_onscreen;
extern void gtk_text_view_get_visible_rect(GtkTextView*, GdkRectangle*) = text_view_get_visible_rect;
extern void gtk_text_view_set_cursor_visible(GtkTextView*, int) = text_view_set_cursor_visible;
extern int gtk_text_view_get_cursor_visible(GtkTextView*) = text_view_get_cursor_visible;
extern void gtk_text_view_get_iter_location(GtkTextView*, GtkTextIter*, GdkRectangle*) = text_view_get_iter_location;
extern void gtk_text_view_get_iter_at_location(GtkTextView*, GtkTextIter*, int, int) = text_view_get_iter_at_location;
extern void gtk_text_view_get_iter_at_position(GtkTextView*, GtkTextIter*, int*, int, int) = text_view_get_iter_at_position;
extern void gtk_text_view_get_line_yrange(GtkTextView*, GtkTextIter*, int*, int*) = text_view_get_line_yrange;
extern void gtk_text_view_get_line_at_y(GtkTextView*, GtkTextIter*, int, int*) = text_view_get_line_at_y;
extern void gtk_text_view_buffer_to_window_coords(GtkTextView*, int, int, int, int*, int*) = text_view_buffer_to_window_coords;
extern void gtk_text_view_window_to_buffer_coords(GtkTextView*, int, int, int, int*, int*) = text_view_window_to_buffer_coords;
extern GdkWindow* gtk_text_view_get_window(GtkTextView*, int) = text_view_get_window;
extern int gtk_text_view_get_window_type(GtkTextView*, GdkWindow*) = text_view_get_window_type;
extern void gtk_text_view_set_border_window_size(GtkTextView*, int, int) = text_view_set_border_window_size;
extern int gtk_text_view_get_border_window_size(GtkTextView*, int) = text_view_get_border_window_size;
extern int gtk_text_view_forward_display_line(GtkTextView*, GtkTextIter*) = text_view_forward_display_line;
extern int gtk_text_view_backward_display_line(GtkTextView*, GtkTextIter*) = text_view_backward_display_line;
extern int gtk_text_view_forward_display_line_end(GtkTextView*, GtkTextIter*) = text_view_forward_display_line_end;
extern int gtk_text_view_backward_display_line_start(GtkTextView*, GtkTextIter*) = text_view_backward_display_line_start;
extern int gtk_text_view_starts_display_line(GtkTextView*, GtkTextIter*) = text_view_starts_display_line;
extern int gtk_text_view_move_visually(GtkTextView*, GtkTextIter*, int) = text_view_move_visually;
extern void gtk_text_view_add_child_at_anchor(GtkTextView*, GtkWidget*, GtkTextChildAnchor*) = text_view_add_child_at_anchor;
extern void gtk_text_view_add_child_in_window(GtkTextView*, GtkWidget*, int, int, int) = text_view_add_child_in_window;
extern void gtk_text_view_move_child(GtkTextView*, GtkWidget*, int, int) = text_view_move_child;
extern void gtk_text_view_set_wrap_mode(GtkTextView*, int) = text_view_set_wrap_mode;
extern int gtk_text_view_get_wrap_mode(GtkTextView*) = text_view_get_wrap_mode;
extern void gtk_text_view_set_editable(GtkTextView*, int) = text_view_set_editable;
extern int gtk_text_view_get_editable(GtkTextView*) = text_view_get_editable;
extern void gtk_text_view_set_overwrite(GtkTextView*, int) = text_view_set_overwrite;
extern int gtk_text_view_get_overwrite(GtkTextView*) = text_view_get_overwrite;
extern void gtk_text_view_set_accepts_tab(GtkTextView*, int) = text_view_set_accepts_tab;
extern int gtk_text_view_get_accepts_tab(GtkTextView*) = text_view_get_accepts_tab;
extern void gtk_text_view_set_pixels_above_lines(GtkTextView*, int) = text_view_set_pixels_above_lines;
extern int gtk_text_view_get_pixels_above_lines(GtkTextView*) = text_view_get_pixels_above_lines;
extern void gtk_text_view_set_pixels_below_lines(GtkTextView*, int) = text_view_set_pixels_below_lines;
extern int gtk_text_view_get_pixels_below_lines(GtkTextView*) = text_view_get_pixels_below_lines;
extern void gtk_text_view_set_pixels_inside_wrap(GtkTextView*, int) = text_view_set_pixels_inside_wrap;
extern int gtk_text_view_get_pixels_inside_wrap(GtkTextView*) = text_view_get_pixels_inside_wrap;
extern void gtk_text_view_set_justification(GtkTextView*, int) = text_view_set_justification;
extern int gtk_text_view_get_justification(GtkTextView*) = text_view_get_justification;
extern void gtk_text_view_set_left_margin(GtkTextView*, int) = text_view_set_left_margin;
extern int gtk_text_view_get_left_margin(GtkTextView*) = text_view_get_left_margin;
extern void gtk_text_view_set_right_margin(GtkTextView*, int) = text_view_set_right_margin;
extern int gtk_text_view_get_right_margin(GtkTextView*) = text_view_get_right_margin;
extern void gtk_text_view_set_indent(GtkTextView*, int) = text_view_set_indent;
extern int gtk_text_view_get_indent(GtkTextView*) = text_view_get_indent;
extern void gtk_text_view_set_tabs(GtkTextView*, PangoTabArray*) = text_view_set_tabs;
extern PangoTabArray* gtk_text_view_get_tabs(GtkTextView*) = text_view_get_tabs;
extern GtkTextAttributes* gtk_text_view_get_default_attributes(GtkTextView*) = text_view_get_default_attributes;
extern long gtk_pixmap_get_type() = pixmap_get_type;
extern GtkWidget* gtk_pixmap_new(GdkPixmap*, GdkBitmap*) = pixmap_new;
extern void gtk_pixmap_set(GtkPixmap*, GdkPixmap*, GdkBitmap*) = pixmap_set;
extern void gtk_pixmap_get(GtkPixmap*, GdkPixmap**, GdkBitmap**) = pixmap_get;
extern void gtk_pixmap_set_build_insensitive(GtkPixmap*, int) = pixmap_set_build_insensitive;
extern long gtk_toolbar_get_type() = toolbar_get_type;
extern GtkWidget* gtk_toolbar_new() = toolbar_new;
extern void gtk_toolbar_insert(GtkToolbar*, GtkToolItem*, int) = toolbar_insert;
extern int gtk_toolbar_get_item_index(GtkToolbar*, GtkToolItem*) = toolbar_get_item_index;
extern int gtk_toolbar_get_n_items(GtkToolbar*) = toolbar_get_n_items;
extern GtkToolItem* gtk_toolbar_get_nth_item(GtkToolbar*, int) = toolbar_get_nth_item;
extern int gtk_toolbar_get_show_arrow(GtkToolbar*) = toolbar_get_show_arrow;
extern void gtk_toolbar_set_show_arrow(GtkToolbar*, int) = toolbar_set_show_arrow;
extern int gtk_toolbar_get_orientation(GtkToolbar*) = toolbar_get_orientation;
extern void gtk_toolbar_set_orientation(GtkToolbar*, int) = toolbar_set_orientation;
extern int gtk_toolbar_get_tooltips(GtkToolbar*) = toolbar_get_tooltips;
extern void gtk_toolbar_set_tooltips(GtkToolbar*, int) = toolbar_set_tooltips;
extern int gtk_toolbar_get_style(GtkToolbar*) = toolbar_get_style;
extern void gtk_toolbar_set_style(GtkToolbar*, int) = toolbar_set_style;
extern void gtk_toolbar_unset_style(GtkToolbar*) = toolbar_unset_style;
extern int gtk_toolbar_get_icon_size(GtkToolbar*) = toolbar_get_icon_size;
extern int gtk_toolbar_get_relief_style(GtkToolbar*) = toolbar_get_relief_style;
extern int gtk_toolbar_get_drop_index(GtkToolbar*, int, int) = toolbar_get_drop_index;
extern void gtk_toolbar_set_drop_highlight_item(GtkToolbar*, GtkToolItem*, int) = toolbar_set_drop_highlight_item;
extern void gtk_toolbar_set_icon_size(GtkToolbar*, int) = toolbar_set_icon_size;
extern void gtk_toolbar_unset_icon_size(GtkToolbar*) = toolbar_unset_icon_size;
extern GtkWidget* gtk_toolbar_append_item(GtkToolbar*, char*, char*, char*, GtkWidget*, void*, void*) = toolbar_append_item;
extern GtkWidget* gtk_toolbar_prepend_item(GtkToolbar*, char*, char*, char*, GtkWidget*, void*, void*) = toolbar_prepend_item;
extern GtkWidget* gtk_toolbar_insert_item(GtkToolbar*, char*, char*, char*, GtkWidget*, void*, void*, int) = toolbar_insert_item;
extern GtkWidget* gtk_toolbar_insert_stock(GtkToolbar*, char*, char*, char*, void*, void*, int) = toolbar_insert_stock;
extern void gtk_toolbar_append_space(GtkToolbar*) = toolbar_append_space;
extern void gtk_toolbar_prepend_space(GtkToolbar*) = toolbar_prepend_space;
extern void gtk_toolbar_insert_space(GtkToolbar*, int) = toolbar_insert_space;
extern void gtk_toolbar_remove_space(GtkToolbar*, int) = toolbar_remove_space;
extern GtkWidget* gtk_toolbar_append_element(GtkToolbar*, int, GtkWidget*, char*, char*, char*, GtkWidget*, void*, void*) = toolbar_append_element;
extern GtkWidget* gtk_toolbar_prepend_element(GtkToolbar*, int, GtkWidget*, char*, char*, char*, GtkWidget*, void*, void*) = toolbar_prepend_element;
extern GtkWidget* gtk_toolbar_insert_element(GtkToolbar*, int, GtkWidget*, char*, char*, char*, GtkWidget*, void*, void*, int) = toolbar_insert_element;
extern void gtk_toolbar_append_widget(GtkToolbar*, GtkWidget*, char*, char*) = toolbar_append_widget;
extern void gtk_toolbar_prepend_widget(GtkToolbar*, GtkWidget*, char*, char*) = toolbar_prepend_widget;
extern void gtk_toolbar_insert_widget(GtkToolbar*, GtkWidget*, char*, char*, int) = toolbar_insert_widget;
extern long gtk_tool_shell_get_type() = tool_shell_get_type;
extern int gtk_tool_shell_get_icon_size(GtkToolShell*) = tool_shell_get_icon_size;
extern int gtk_tool_shell_get_orientation(GtkToolShell*) = tool_shell_get_orientation;
extern int gtk_tool_shell_get_style(GtkToolShell*) = tool_shell_get_style;
extern int gtk_tool_shell_get_relief_style(GtkToolShell*) = tool_shell_get_relief_style;
extern void gtk_tool_shell_rebuild_menu(GtkToolShell*) = tool_shell_rebuild_menu;
extern void gtk_test_init(int*, char***, ...) = test_init;
extern void gtk_test_register_all_types() = test_register_all_types;
extern long* gtk_test_list_all_types(int*) = test_list_all_types;
extern GtkWidget* gtk_test_find_widget(GtkWidget*, char*, long) = test_find_widget;
extern GtkWidget* gtk_test_create_widget(long, char*, ...) = test_create_widget;
extern GtkWidget* gtk_test_create_simple_window(char*, char*) = test_create_simple_window;
extern GtkWidget* gtk_test_display_button_window(char*, char*, ...) = test_display_button_window;
extern void gtk_test_slider_set_perc(GtkWidget*, double) = test_slider_set_perc;
extern double gtk_test_slider_get_value(GtkWidget*) = test_slider_get_value;
extern int gtk_test_spin_button_click(GtkSpinButton*, int, int) = test_spin_button_click;
extern int gtk_test_widget_click(GtkWidget*, int, int) = test_widget_click;
extern int gtk_test_widget_send_key(GtkWidget*, int, int) = test_widget_send_key;
extern void gtk_test_text_set(GtkWidget*, char*) = test_text_set;
extern char* gtk_test_text_get(GtkWidget*) = test_text_get;
extern GtkWidget* gtk_test_find_sibling(GtkWidget*, long) = test_find_sibling;
extern GtkWidget* gtk_test_find_label(GtkWidget*, char*) = test_find_label;
extern long gtk_tree_drag_source_get_type() = tree_drag_source_get_type;
extern int gtk_tree_drag_source_row_draggable(GtkTreeDragSource*, GtkTreePath*) = tree_drag_source_row_draggable;
extern int gtk_tree_drag_source_drag_data_delete(GtkTreeDragSource*, GtkTreePath*) = tree_drag_source_drag_data_delete;
extern int gtk_tree_drag_source_drag_data_get(GtkTreeDragSource*, GtkTreePath*, GtkSelectionData*) = tree_drag_source_drag_data_get;
extern long gtk_tree_drag_dest_get_type() = tree_drag_dest_get_type;
extern int gtk_tree_drag_dest_drag_data_received(GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*) = tree_drag_dest_drag_data_received;
extern int gtk_tree_drag_dest_row_drop_possible(GtkTreeDragDest*, GtkTreePath*, GtkSelectionData*) = tree_drag_dest_row_drop_possible;
extern int gtk_tree_set_row_drag_data(GtkSelectionData*, GtkTreeModel*, GtkTreePath*) = tree_set_row_drag_data;
extern int gtk_tree_get_row_drag_data(GtkSelectionData*, GtkTreeModel**, GtkTreePath**) = tree_get_row_drag_data;
extern long gtk_tree_model_sort_get_type() = tree_model_sort_get_type;
extern GtkTreeModel* gtk_tree_model_sort_new_with_model(GtkTreeModel*) = tree_model_sort_new_with_model;
extern GtkTreeModel* gtk_tree_model_sort_get_model(GtkTreeModelSort*) = tree_model_sort_get_model;
extern GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort*, GtkTreePath*) = tree_model_sort_convert_child_path_to_path;
extern int gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort*, GtkTreeIter*, GtkTreeIter*) = tree_model_sort_convert_child_iter_to_iter;
extern GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort*, GtkTreePath*) = tree_model_sort_convert_path_to_child_path;
extern void gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort*, GtkTreeIter*, GtkTreeIter*) = tree_model_sort_convert_iter_to_child_iter;
extern void gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort*) = tree_model_sort_reset_default_sort_func;
extern void gtk_tree_model_sort_clear_cache(GtkTreeModelSort*) = tree_model_sort_clear_cache;
extern int gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort*, GtkTreeIter*) = tree_model_sort_iter_is_valid;
extern long gtk_tree_selection_get_type() = tree_selection_get_type;
extern void gtk_tree_selection_set_mode(GtkTreeSelection*, int) = tree_selection_set_mode;
extern int gtk_tree_selection_get_mode(GtkTreeSelection*) = tree_selection_get_mode;
extern void gtk_tree_selection_set_select_function(GtkTreeSelection*, void*, void*, void*) = tree_selection_set_select_function;
extern void* gtk_tree_selection_get_user_data(GtkTreeSelection*) = tree_selection_get_user_data;
extern GtkTreeView* gtk_tree_selection_get_tree_view(GtkTreeSelection*) = tree_selection_get_tree_view;
extern void* gtk_tree_selection_get_select_function(GtkTreeSelection*) = tree_selection_get_select_function;
extern int gtk_tree_selection_get_selected(GtkTreeSelection*, GtkTreeModel**, GtkTreeIter*) = tree_selection_get_selected;
extern GList* gtk_tree_selection_get_selected_rows(GtkTreeSelection*, GtkTreeModel**) = tree_selection_get_selected_rows;
extern int gtk_tree_selection_count_selected_rows(GtkTreeSelection*) = tree_selection_count_selected_rows;
extern void gtk_tree_selection_selected_foreach(GtkTreeSelection*, void*, void*) = tree_selection_selected_foreach;
extern void gtk_tree_selection_select_path(GtkTreeSelection*, GtkTreePath*) = tree_selection_select_path;
extern void gtk_tree_selection_unselect_path(GtkTreeSelection*, GtkTreePath*) = tree_selection_unselect_path;
extern void gtk_tree_selection_select_iter(GtkTreeSelection*, GtkTreeIter*) = tree_selection_select_iter;
extern void gtk_tree_selection_unselect_iter(GtkTreeSelection*, GtkTreeIter*) = tree_selection_unselect_iter;
extern int gtk_tree_selection_path_is_selected(GtkTreeSelection*, GtkTreePath*) = tree_selection_path_is_selected;
extern int gtk_tree_selection_iter_is_selected(GtkTreeSelection*, GtkTreeIter*) = tree_selection_iter_is_selected;
extern void gtk_tree_selection_select_all(GtkTreeSelection*) = tree_selection_select_all;
extern void gtk_tree_selection_unselect_all(GtkTreeSelection*) = tree_selection_unselect_all;
extern void gtk_tree_selection_select_range(GtkTreeSelection*, GtkTreePath*, GtkTreePath*) = tree_selection_select_range;
extern void gtk_tree_selection_unselect_range(GtkTreeSelection*, GtkTreePath*, GtkTreePath*) = tree_selection_unselect_range;
extern long gtk_tree_store_get_type() = tree_store_get_type;
extern GtkTreeStore* gtk_tree_store_new(int, ...) = tree_store_new;
extern GtkTreeStore* gtk_tree_store_newv(int, long*) = tree_store_newv;
extern void gtk_tree_store_set_column_types(GtkTreeStore*, int, long*) = tree_store_set_column_types;
extern void gtk_tree_store_set_value(GtkTreeStore*, GtkTreeIter*, int, GValue*) = tree_store_set_value;
extern void gtk_tree_store_set(GtkTreeStore*, GtkTreeIter*, ...) = tree_store_set;
extern void gtk_tree_store_set_valuesv(GtkTreeStore*, GtkTreeIter*, int*, GValue*, int) = tree_store_set_valuesv;
extern void gtk_tree_store_set_valist(GtkTreeStore*, GtkTreeIter*, void*) = tree_store_set_valist;
extern int gtk_tree_store_remove(GtkTreeStore*, GtkTreeIter*) = tree_store_remove;
extern void gtk_tree_store_insert(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, int) = tree_store_insert;
extern void gtk_tree_store_insert_before(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, GtkTreeIter*) = tree_store_insert_before;
extern void gtk_tree_store_insert_after(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, GtkTreeIter*) = tree_store_insert_after;
extern void gtk_tree_store_insert_with_values(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, int, ...) = tree_store_insert_with_values;
extern void gtk_tree_store_insert_with_valuesv(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*, int, int*, GValue*, int) = tree_store_insert_with_valuesv;
extern void gtk_tree_store_prepend(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_prepend;
extern void gtk_tree_store_append(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_append;
extern int gtk_tree_store_is_ancestor(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_is_ancestor;
extern int gtk_tree_store_iter_depth(GtkTreeStore*, GtkTreeIter*) = tree_store_iter_depth;
extern void gtk_tree_store_clear(GtkTreeStore*) = tree_store_clear;
extern int gtk_tree_store_iter_is_valid(GtkTreeStore*, GtkTreeIter*) = tree_store_iter_is_valid;
extern void gtk_tree_store_reorder(GtkTreeStore*, GtkTreeIter*, int*) = tree_store_reorder;
extern void gtk_tree_store_swap(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_swap;
extern void gtk_tree_store_move_before(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_move_before;
extern void gtk_tree_store_move_after(GtkTreeStore*, GtkTreeIter*, GtkTreeIter*) = tree_store_move_after;
extern long gtk_ui_manager_get_type() = ui_manager_get_type;
extern GtkUIManager* gtk_ui_manager_new() = ui_manager_new;
extern void gtk_ui_manager_set_add_tearoffs(GtkUIManager*, int) = ui_manager_set_add_tearoffs;
extern int gtk_ui_manager_get_add_tearoffs(GtkUIManager*) = ui_manager_get_add_tearoffs;
extern void gtk_ui_manager_insert_action_group(GtkUIManager*, GtkActionGroup*, int) = ui_manager_insert_action_group;
extern void gtk_ui_manager_remove_action_group(GtkUIManager*, GtkActionGroup*) = ui_manager_remove_action_group;
extern GList* gtk_ui_manager_get_action_groups(GtkUIManager*) = ui_manager_get_action_groups;
extern GtkAccelGroup* gtk_ui_manager_get_accel_group(GtkUIManager*) = ui_manager_get_accel_group;
extern GtkWidget* gtk_ui_manager_get_widget(GtkUIManager*, char*) = ui_manager_get_widget;
extern GSList* gtk_ui_manager_get_toplevels(GtkUIManager*, int) = ui_manager_get_toplevels;
extern GtkAction* gtk_ui_manager_get_action(GtkUIManager*, char*) = ui_manager_get_action;
extern int gtk_ui_manager_add_ui_from_string(GtkUIManager*, char*, long, GError**) = ui_manager_add_ui_from_string;
extern int gtk_ui_manager_add_ui_from_file(GtkUIManager*, char*, GError**) = ui_manager_add_ui_from_file;
extern void gtk_ui_manager_add_ui(GtkUIManager*, int, char*, char*, char*, int, int) = ui_manager_add_ui;
extern void gtk_ui_manager_remove_ui(GtkUIManager*, int) = ui_manager_remove_ui;
extern char* gtk_ui_manager_get_ui(GtkUIManager*) = ui_manager_get_ui;
extern void gtk_ui_manager_ensure_update(GtkUIManager*) = ui_manager_ensure_update;
extern int gtk_ui_manager_new_merge_id(GtkUIManager*) = ui_manager_new_merge_id;
extern long gtk_vbutton_box_get_type() = vbutton_box_get_type;
extern GtkWidget* gtk_vbutton_box_new() = vbutton_box_new;
extern int gtk_vbutton_box_get_spacing_default() = vbutton_box_get_spacing_default;
extern void gtk_vbutton_box_set_spacing_default(int) = vbutton_box_set_spacing_default;
extern int gtk_vbutton_box_get_layout_default() = vbutton_box_get_layout_default;
extern void gtk_vbutton_box_set_layout_default(int) = vbutton_box_set_layout_default;
extern long gtk_volume_button_get_type() = volume_button_get_type;
extern GtkWidget* gtk_volume_button_new() = volume_button_new;
extern long gtk_vpaned_get_type() = vpaned_get_type;
extern GtkWidget* gtk_vpaned_new() = vpaned_new;
extern long gtk_vruler_get_type() = vruler_get_type;
extern GtkWidget* gtk_vruler_new() = vruler_new;
extern long gtk_vscale_get_type() = vscale_get_type;
extern GtkWidget* gtk_vscale_new(GtkAdjustment*) = vscale_new;
extern GtkWidget* gtk_vscale_new_with_range(double, double, double) = vscale_new_with_range;
extern long gtk_vseparator_get_type() = vseparator_get_type;
extern GtkWidget* gtk_vseparator_new() = vseparator_new;
extern long gtk_clist_get_type() = clist_get_type;
extern GtkWidget* gtk_clist_new(int) = clist_new;
extern GtkWidget* gtk_clist_new_with_titles(int, char**) = clist_new_with_titles;
extern void gtk_clist_set_hadjustment(GtkCList*, GtkAdjustment*) = clist_set_hadjustment;
extern void gtk_clist_set_vadjustment(GtkCList*, GtkAdjustment*) = clist_set_vadjustment;
extern GtkAdjustment* gtk_clist_get_hadjustment(GtkCList*) = clist_get_hadjustment;
extern GtkAdjustment* gtk_clist_get_vadjustment(GtkCList*) = clist_get_vadjustment;
extern void gtk_clist_set_shadow_type(GtkCList*, int) = clist_set_shadow_type;
extern void gtk_clist_set_selection_mode(GtkCList*, int) = clist_set_selection_mode;
extern void gtk_clist_set_reorderable(GtkCList*, int) = clist_set_reorderable;
extern void gtk_clist_set_use_drag_icons(GtkCList*, int) = clist_set_use_drag_icons;
extern void gtk_clist_set_button_actions(GtkCList*, int, char) = clist_set_button_actions;
extern void gtk_clist_freeze(GtkCList*) = clist_freeze;
extern void gtk_clist_thaw(GtkCList*) = clist_thaw;
extern void gtk_clist_column_titles_show(GtkCList*) = clist_column_titles_show;
extern void gtk_clist_column_titles_hide(GtkCList*) = clist_column_titles_hide;
extern void gtk_clist_column_title_active(GtkCList*, int) = clist_column_title_active;
extern void gtk_clist_column_title_passive(GtkCList*, int) = clist_column_title_passive;
extern void gtk_clist_column_titles_active(GtkCList*) = clist_column_titles_active;
extern void gtk_clist_column_titles_passive(GtkCList*) = clist_column_titles_passive;
extern void gtk_clist_set_column_title(GtkCList*, int, char*) = clist_set_column_title;
extern char* gtk_clist_get_column_title(GtkCList*, int) = clist_get_column_title;
extern void gtk_clist_set_column_widget(GtkCList*, int, GtkWidget*) = clist_set_column_widget;
extern GtkWidget* gtk_clist_get_column_widget(GtkCList*, int) = clist_get_column_widget;
extern void gtk_clist_set_column_justification(GtkCList*, int, int) = clist_set_column_justification;
extern void gtk_clist_set_column_visibility(GtkCList*, int, int) = clist_set_column_visibility;
extern void gtk_clist_set_column_resizeable(GtkCList*, int, int) = clist_set_column_resizeable;
extern void gtk_clist_set_column_auto_resize(GtkCList*, int, int) = clist_set_column_auto_resize;
extern int gtk_clist_columns_autosize(GtkCList*) = clist_columns_autosize;
extern int gtk_clist_optimal_column_width(GtkCList*, int) = clist_optimal_column_width;
extern void gtk_clist_set_column_width(GtkCList*, int, int) = clist_set_column_width;
extern void gtk_clist_set_column_min_width(GtkCList*, int, int) = clist_set_column_min_width;
extern void gtk_clist_set_column_max_width(GtkCList*, int, int) = clist_set_column_max_width;
extern void gtk_clist_set_row_height(GtkCList*, int) = clist_set_row_height;
extern void gtk_clist_moveto(GtkCList*, int, int, float, float) = clist_moveto;
extern int gtk_clist_row_is_visible(GtkCList*, int) = clist_row_is_visible;
extern int gtk_clist_get_cell_type(GtkCList*, int, int) = clist_get_cell_type;
extern void gtk_clist_set_text(GtkCList*, int, int, char*) = clist_set_text;
extern int gtk_clist_get_text(GtkCList*, int, int, char**) = clist_get_text;
extern void gtk_clist_set_pixmap(GtkCList*, int, int, GdkPixmap*, GdkBitmap*) = clist_set_pixmap;
extern int gtk_clist_get_pixmap(GtkCList*, int, int, GdkPixmap**, GdkBitmap**) = clist_get_pixmap;
extern void gtk_clist_set_pixtext(GtkCList*, int, int, char*, char, GdkPixmap*, GdkBitmap*) = clist_set_pixtext;
extern int gtk_clist_get_pixtext(GtkCList*, int, int, char**, char*, GdkPixmap**, GdkBitmap**) = clist_get_pixtext;
extern void gtk_clist_set_foreground(GtkCList*, int, GdkColor*) = clist_set_foreground;
extern void gtk_clist_set_background(GtkCList*, int, GdkColor*) = clist_set_background;
extern void gtk_clist_set_cell_style(GtkCList*, int, int, GtkStyle*) = clist_set_cell_style;
extern GtkStyle* gtk_clist_get_cell_style(GtkCList*, int, int) = clist_get_cell_style;
extern void gtk_clist_set_row_style(GtkCList*, int, GtkStyle*) = clist_set_row_style;
extern GtkStyle* gtk_clist_get_row_style(GtkCList*, int) = clist_get_row_style;
extern void gtk_clist_set_shift(GtkCList*, int, int, int, int) = clist_set_shift;
extern void gtk_clist_set_selectable(GtkCList*, int, int) = clist_set_selectable;
extern int gtk_clist_get_selectable(GtkCList*, int) = clist_get_selectable;
extern int gtk_clist_prepend(GtkCList*, char**) = clist_prepend;
extern int gtk_clist_append(GtkCList*, char**) = clist_append;
extern int gtk_clist_insert(GtkCList*, int, char**) = clist_insert;
extern void gtk_clist_remove(GtkCList*, int) = clist_remove;
extern void gtk_clist_set_row_data(GtkCList*, int, void*) = clist_set_row_data;
extern void gtk_clist_set_row_data_full(GtkCList*, int, void*, void*) = clist_set_row_data_full;
extern void* gtk_clist_get_row_data(GtkCList*, int) = clist_get_row_data;
extern int gtk_clist_find_row_from_data(GtkCList*, void*) = clist_find_row_from_data;
extern void gtk_clist_select_row(GtkCList*, int, int) = clist_select_row;
extern void gtk_clist_unselect_row(GtkCList*, int, int) = clist_unselect_row;
extern void gtk_clist_undo_selection(GtkCList*) = clist_undo_selection;
extern void gtk_clist_clear(GtkCList*) = clist_clear;
extern int gtk_clist_get_selection_info(GtkCList*, int, int, int*, int*) = clist_get_selection_info;
extern void gtk_clist_select_all(GtkCList*) = clist_select_all;
extern void gtk_clist_unselect_all(GtkCList*) = clist_unselect_all;
extern void gtk_clist_swap_rows(GtkCList*, int, int) = clist_swap_rows;
extern void gtk_clist_row_move(GtkCList*, int, int) = clist_row_move;
extern void gtk_clist_set_compare_func(GtkCList*, void*) = clist_set_compare_func;
extern void gtk_clist_set_sort_column(GtkCList*, int) = clist_set_sort_column;
extern void gtk_clist_set_sort_type(GtkCList*, int) = clist_set_sort_type;
extern void gtk_clist_sort(GtkCList*) = clist_sort;
extern void gtk_clist_set_auto_sort(GtkCList*, int) = clist_set_auto_sort;
extern long gtk_combo_get_type() = combo_get_type;
extern GtkWidget* gtk_combo_new() = combo_new;
extern void gtk_combo_set_value_in_list(GtkCombo*, int, int) = combo_set_value_in_list;
extern void gtk_combo_set_use_arrows(GtkCombo*, int) = combo_set_use_arrows;
extern void gtk_combo_set_use_arrows_always(GtkCombo*, int) = combo_set_use_arrows_always;
extern void gtk_combo_set_case_sensitive(GtkCombo*, int) = combo_set_case_sensitive;
extern void gtk_combo_set_item_string(GtkCombo*, GtkItem*, char*) = combo_set_item_string;
extern void gtk_combo_set_popdown_strings(GtkCombo*, GList*) = combo_set_popdown_strings;
extern void gtk_combo_disable_activate(GtkCombo*) = combo_disable_activate;
extern long gtk_ctree_get_type() = ctree_get_type;
extern GtkWidget* gtk_ctree_new_with_titles(int, int, char**) = ctree_new_with_titles;
extern GtkWidget* gtk_ctree_new(int, int) = ctree_new;
extern GtkCTreeNode* gtk_ctree_insert_node(GtkCTree*, GtkCTreeNode*, GtkCTreeNode*, char**, char, GdkPixmap*, GdkBitmap*, GdkPixmap*, GdkBitmap*, int, int) = ctree_insert_node;
extern void gtk_ctree_remove_node(GtkCTree*, GtkCTreeNode*) = ctree_remove_node;
extern GtkCTreeNode* gtk_ctree_insert_gnode(GtkCTree*, GtkCTreeNode*, GtkCTreeNode*, GNode*, void*, void*) = ctree_insert_gnode;
extern GNode* gtk_ctree_export_to_gnode(GtkCTree*, GNode*, GNode*, GtkCTreeNode*, void*, void*) = ctree_export_to_gnode;
extern void gtk_ctree_post_recursive(GtkCTree*, GtkCTreeNode*, void*, void*) = ctree_post_recursive;
extern void gtk_ctree_post_recursive_to_depth(GtkCTree*, GtkCTreeNode*, int, void*, void*) = ctree_post_recursive_to_depth;
extern void gtk_ctree_pre_recursive(GtkCTree*, GtkCTreeNode*, void*, void*) = ctree_pre_recursive;
extern void gtk_ctree_pre_recursive_to_depth(GtkCTree*, GtkCTreeNode*, int, void*, void*) = ctree_pre_recursive_to_depth;
extern int gtk_ctree_is_viewable(GtkCTree*, GtkCTreeNode*) = ctree_is_viewable;
extern GtkCTreeNode* gtk_ctree_last(GtkCTree*, GtkCTreeNode*) = ctree_last;
extern GtkCTreeNode* gtk_ctree_find_node_ptr(GtkCTree*, GtkCTreeRow*) = ctree_find_node_ptr;
extern GtkCTreeNode* gtk_ctree_node_nth(GtkCTree*, int) = ctree_node_nth;
extern int gtk_ctree_find(GtkCTree*, GtkCTreeNode*, GtkCTreeNode*) = ctree_find;
extern int gtk_ctree_is_ancestor(GtkCTree*, GtkCTreeNode*, GtkCTreeNode*) = ctree_is_ancestor;
extern GtkCTreeNode* gtk_ctree_find_by_row_data(GtkCTree*, GtkCTreeNode*, void*) = ctree_find_by_row_data;
extern GList* gtk_ctree_find_all_by_row_data(GtkCTree*, GtkCTreeNode*, void*) = ctree_find_all_by_row_data;
extern GtkCTreeNode* gtk_ctree_find_by_row_data_custom(GtkCTree*, GtkCTreeNode*, void*, void*) = ctree_find_by_row_data_custom;
extern GList* gtk_ctree_find_all_by_row_data_custom(GtkCTree*, GtkCTreeNode*, void*, void*) = ctree_find_all_by_row_data_custom;
extern int gtk_ctree_is_hot_spot(GtkCTree*, int, int) = ctree_is_hot_spot;
extern void gtk_ctree_move(GtkCTree*, GtkCTreeNode*, GtkCTreeNode*, GtkCTreeNode*) = ctree_move;
extern void gtk_ctree_expand(GtkCTree*, GtkCTreeNode*) = ctree_expand;
extern void gtk_ctree_expand_recursive(GtkCTree*, GtkCTreeNode*) = ctree_expand_recursive;
extern void gtk_ctree_expand_to_depth(GtkCTree*, GtkCTreeNode*, int) = ctree_expand_to_depth;
extern void gtk_ctree_collapse(GtkCTree*, GtkCTreeNode*) = ctree_collapse;
extern void gtk_ctree_collapse_recursive(GtkCTree*, GtkCTreeNode*) = ctree_collapse_recursive;
extern void gtk_ctree_collapse_to_depth(GtkCTree*, GtkCTreeNode*, int) = ctree_collapse_to_depth;
extern void gtk_ctree_toggle_expansion(GtkCTree*, GtkCTreeNode*) = ctree_toggle_expansion;
extern void gtk_ctree_toggle_expansion_recursive(GtkCTree*, GtkCTreeNode*) = ctree_toggle_expansion_recursive;
extern void gtk_ctree_select(GtkCTree*, GtkCTreeNode*) = ctree_select;
extern void gtk_ctree_select_recursive(GtkCTree*, GtkCTreeNode*) = ctree_select_recursive;
extern void gtk_ctree_unselect(GtkCTree*, GtkCTreeNode*) = ctree_unselect;
extern void gtk_ctree_unselect_recursive(GtkCTree*, GtkCTreeNode*) = ctree_unselect_recursive;
extern void gtk_ctree_real_select_recursive(GtkCTree*, GtkCTreeNode*, int) = ctree_real_select_recursive;
extern void gtk_ctree_node_set_text(GtkCTree*, GtkCTreeNode*, int, char*) = ctree_node_set_text;
extern void gtk_ctree_node_set_pixmap(GtkCTree*, GtkCTreeNode*, int, GdkPixmap*, GdkBitmap*) = ctree_node_set_pixmap;
extern void gtk_ctree_node_set_pixtext(GtkCTree*, GtkCTreeNode*, int, char*, char, GdkPixmap*, GdkBitmap*) = ctree_node_set_pixtext;
extern void gtk_ctree_set_node_info(GtkCTree*, GtkCTreeNode*, char*, char, GdkPixmap*, GdkBitmap*, GdkPixmap*, GdkBitmap*, int, int) = ctree_set_node_info;
extern void gtk_ctree_node_set_shift(GtkCTree*, GtkCTreeNode*, int, int, int) = ctree_node_set_shift;
extern void gtk_ctree_node_set_selectable(GtkCTree*, GtkCTreeNode*, int) = ctree_node_set_selectable;
extern int gtk_ctree_node_get_selectable(GtkCTree*, GtkCTreeNode*) = ctree_node_get_selectable;
extern int gtk_ctree_node_get_cell_type(GtkCTree*, GtkCTreeNode*, int) = ctree_node_get_cell_type;
extern int gtk_ctree_node_get_text(GtkCTree*, GtkCTreeNode*, int, char**) = ctree_node_get_text;
extern int gtk_ctree_node_get_pixmap(GtkCTree*, GtkCTreeNode*, int, GdkPixmap**, GdkBitmap**) = ctree_node_get_pixmap;
extern int gtk_ctree_node_get_pixtext(GtkCTree*, GtkCTreeNode*, int, char**, char*, GdkPixmap**, GdkBitmap**) = ctree_node_get_pixtext;
extern int gtk_ctree_get_node_info(GtkCTree*, GtkCTreeNode*, char**, char*, GdkPixmap**, GdkBitmap**, GdkPixmap**, GdkBitmap**, int*, int*) = ctree_get_node_info;
extern void gtk_ctree_node_set_row_style(GtkCTree*, GtkCTreeNode*, GtkStyle*) = ctree_node_set_row_style;
extern GtkStyle* gtk_ctree_node_get_row_style(GtkCTree*, GtkCTreeNode*) = ctree_node_get_row_style;
extern void gtk_ctree_node_set_cell_style(GtkCTree*, GtkCTreeNode*, int, GtkStyle*) = ctree_node_set_cell_style;
extern GtkStyle* gtk_ctree_node_get_cell_style(GtkCTree*, GtkCTreeNode*, int) = ctree_node_get_cell_style;
extern void gtk_ctree_node_set_foreground(GtkCTree*, GtkCTreeNode*, GdkColor*) = ctree_node_set_foreground;
extern void gtk_ctree_node_set_background(GtkCTree*, GtkCTreeNode*, GdkColor*) = ctree_node_set_background;
extern void gtk_ctree_node_set_row_data(GtkCTree*, GtkCTreeNode*, void*) = ctree_node_set_row_data;
extern void gtk_ctree_node_set_row_data_full(GtkCTree*, GtkCTreeNode*, void*, void*) = ctree_node_set_row_data_full;
extern void* gtk_ctree_node_get_row_data(GtkCTree*, GtkCTreeNode*) = ctree_node_get_row_data;
extern void gtk_ctree_node_moveto(GtkCTree*, GtkCTreeNode*, int, float, float) = ctree_node_moveto;
extern int gtk_ctree_node_is_visible(GtkCTree*, GtkCTreeNode*) = ctree_node_is_visible;
extern void gtk_ctree_set_indent(GtkCTree*, int) = ctree_set_indent;
extern void gtk_ctree_set_spacing(GtkCTree*, int) = ctree_set_spacing;
extern void gtk_ctree_set_show_stub(GtkCTree*, int) = ctree_set_show_stub;
extern void gtk_ctree_set_line_style(GtkCTree*, int) = ctree_set_line_style;
extern void gtk_ctree_set_expander_style(GtkCTree*, int) = ctree_set_expander_style;
extern void gtk_ctree_set_drag_compare_func(GtkCTree*, void*) = ctree_set_drag_compare_func;
extern void gtk_ctree_sort_node(GtkCTree*, GtkCTreeNode*) = ctree_sort_node;
extern void gtk_ctree_sort_recursive(GtkCTree*, GtkCTreeNode*) = ctree_sort_recursive;
extern long gtk_ctree_node_get_type() = ctree_node_get_type;
extern long gtk_file_selection_get_type() = file_selection_get_type;
extern GtkWidget* gtk_file_selection_new(char*) = file_selection_new;
extern void gtk_file_selection_set_filename(GtkFileSelection*, char*) = file_selection_set_filename;
extern char* gtk_file_selection_get_filename(GtkFileSelection*) = file_selection_get_filename;
extern void gtk_file_selection_complete(GtkFileSelection*, char*) = file_selection_complete;
extern void gtk_file_selection_show_fileop_buttons(GtkFileSelection*) = file_selection_show_fileop_buttons;
extern void gtk_file_selection_hide_fileop_buttons(GtkFileSelection*) = file_selection_hide_fileop_buttons;
extern char** gtk_file_selection_get_selections(GtkFileSelection*) = file_selection_get_selections;
extern void gtk_file_selection_set_select_multiple(GtkFileSelection*, int) = file_selection_set_select_multiple;
extern int gtk_file_selection_get_select_multiple(GtkFileSelection*) = file_selection_get_select_multiple;
extern long gtk_item_factory_get_type() = item_factory_get_type;
extern GtkItemFactory* gtk_item_factory_new(long, char*, GtkAccelGroup*) = item_factory_new;
extern void gtk_item_factory_construct(GtkItemFactory*, long, char*, GtkAccelGroup*) = item_factory_construct;
extern void gtk_item_factory_add_foreign(GtkWidget*, char*, GtkAccelGroup*, int, int) = item_factory_add_foreign;
extern GtkItemFactory* gtk_item_factory_from_widget(GtkWidget*) = item_factory_from_widget;
extern char* gtk_item_factory_path_from_widget(GtkWidget*) = item_factory_path_from_widget;
extern GtkWidget* gtk_item_factory_get_item(GtkItemFactory*, char*) = item_factory_get_item;
extern GtkWidget* gtk_item_factory_get_widget(GtkItemFactory*, char*) = item_factory_get_widget;
extern GtkWidget* gtk_item_factory_get_widget_by_action(GtkItemFactory*, int) = item_factory_get_widget_by_action;
extern GtkWidget* gtk_item_factory_get_item_by_action(GtkItemFactory*, int) = item_factory_get_item_by_action;
extern void gtk_item_factory_create_item(GtkItemFactory*, GtkItemFactoryEntry*, void*, int) = item_factory_create_item;
extern void gtk_item_factory_create_items(GtkItemFactory*, int, GtkItemFactoryEntry*, void*) = item_factory_create_items;
extern void gtk_item_factory_delete_item(GtkItemFactory*, char*) = item_factory_delete_item;
extern void gtk_item_factory_delete_entry(GtkItemFactory*, GtkItemFactoryEntry*) = item_factory_delete_entry;
extern void gtk_item_factory_delete_entries(GtkItemFactory*, int, GtkItemFactoryEntry*) = item_factory_delete_entries;
extern void gtk_item_factory_popup(GtkItemFactory*, int, int, int, int) = item_factory_popup;
extern void gtk_item_factory_popup_with_data(GtkItemFactory*, void*, void*, int, int, int, int) = item_factory_popup_with_data;
extern void* gtk_item_factory_popup_data(GtkItemFactory*) = item_factory_popup_data;
extern void* gtk_item_factory_popup_data_from_widget(GtkWidget*) = item_factory_popup_data_from_widget;
extern void gtk_item_factory_set_translate_func(GtkItemFactory*, void*, void*, void*) = item_factory_set_translate_func;
extern void gtk_item_factory_create_items_ac(GtkItemFactory*, int, GtkItemFactoryEntry*, void*, int) = item_factory_create_items_ac;
extern GtkItemFactory* gtk_item_factory_from_path(char*) = item_factory_from_path;
extern void gtk_item_factory_create_menu_entries(int, GtkMenuEntry*) = item_factory_create_menu_entries;
extern void gtk_item_factories_path_delete(char*, char*) = item_factories_path_delete;
extern long gtk_list_get_type() = list_get_type;
extern GtkWidget* gtk_list_new() = list_new;
extern void gtk_list_insert_items(GtkList*, GList*, int) = list_insert_items;
extern void gtk_list_append_items(GtkList*, GList*) = list_append_items;
extern void gtk_list_prepend_items(GtkList*, GList*) = list_prepend_items;
extern void gtk_list_remove_items(GtkList*, GList*) = list_remove_items;
extern void gtk_list_remove_items_no_unref(GtkList*, GList*) = list_remove_items_no_unref;
extern void gtk_list_clear_items(GtkList*, int, int) = list_clear_items;
extern void gtk_list_select_item(GtkList*, int) = list_select_item;
extern void gtk_list_unselect_item(GtkList*, int) = list_unselect_item;
extern void gtk_list_select_child(GtkList*, GtkWidget*) = list_select_child;
extern void gtk_list_unselect_child(GtkList*, GtkWidget*) = list_unselect_child;
extern int gtk_list_child_position(GtkList*, GtkWidget*) = list_child_position;
extern void gtk_list_set_selection_mode(GtkList*, int) = list_set_selection_mode;
extern void gtk_list_extend_selection(GtkList*, int, float, int) = list_extend_selection;
extern void gtk_list_start_selection(GtkList*) = list_start_selection;
extern void gtk_list_end_selection(GtkList*) = list_end_selection;
extern void gtk_list_select_all(GtkList*) = list_select_all;
extern void gtk_list_unselect_all(GtkList*) = list_unselect_all;
extern void gtk_list_scroll_horizontal(GtkList*, int, float) = list_scroll_horizontal;
extern void gtk_list_scroll_vertical(GtkList*, int, float) = list_scroll_vertical;
extern void gtk_list_toggle_add_mode(GtkList*) = list_toggle_add_mode;
extern void gtk_list_toggle_focus_row(GtkList*) = list_toggle_focus_row;
extern void gtk_list_toggle_row(GtkList*, GtkWidget*) = list_toggle_row;
extern void gtk_list_undo_selection(GtkList*) = list_undo_selection;
extern void gtk_list_end_drag_selection(GtkList*) = list_end_drag_selection;
extern long gtk_list_item_get_type() = list_item_get_type;
extern GtkWidget* gtk_list_item_new() = list_item_new;
extern GtkWidget* gtk_list_item_new_with_label(char*) = list_item_new_with_label;
extern void gtk_list_item_select(GtkListItem*) = list_item_select;
extern void gtk_list_item_deselect(GtkListItem*) = list_item_deselect;
extern long gtk_old_editable_get_type() = old_editable_get_type;
extern void gtk_old_editable_claim_selection(GtkOldEditable*, int, int) = old_editable_claim_selection;
extern void gtk_old_editable_changed(GtkOldEditable*) = old_editable_changed;
extern long gtk_option_menu_get_type() = option_menu_get_type;
extern GtkWidget* gtk_option_menu_new() = option_menu_new;
extern GtkWidget* gtk_option_menu_get_menu(GtkOptionMenu*) = option_menu_get_menu;
extern void gtk_option_menu_set_menu(GtkOptionMenu*, GtkWidget*) = option_menu_set_menu;
extern void gtk_option_menu_remove_menu(GtkOptionMenu*) = option_menu_remove_menu;
extern int gtk_option_menu_get_history(GtkOptionMenu*) = option_menu_get_history;
extern void gtk_option_menu_set_history(GtkOptionMenu*, int) = option_menu_set_history;
extern long gtk_preview_get_type() = preview_get_type;
extern void gtk_preview_uninit() = preview_uninit;
extern GtkWidget* gtk_preview_new(int) = preview_new;
extern void gtk_preview_size(GtkPreview*, int, int) = preview_size;
extern void gtk_preview_put(GtkPreview*, GdkWindow*, GdkGC*, int, int, int, int, int, int) = preview_put;
extern void gtk_preview_draw_row(GtkPreview*, char*, int, int, int) = preview_draw_row;
extern void gtk_preview_set_expand(GtkPreview*, int) = preview_set_expand;
extern void gtk_preview_set_gamma(double) = preview_set_gamma;
extern void gtk_preview_set_color_cube(int, int, int, int) = preview_set_color_cube;
extern void gtk_preview_set_install_cmap(int) = preview_set_install_cmap;
extern void gtk_preview_set_reserved(int) = preview_set_reserved;
extern void gtk_preview_set_dither(GtkPreview*, int) = preview_set_dither;
extern GdkVisual* gtk_preview_get_visual() = preview_get_visual;
extern GdkColormap* gtk_preview_get_cmap() = preview_get_cmap;
extern GtkPreviewInfo* gtk_preview_get_info() = preview_get_info;
extern void gtk_preview_reset() = preview_reset;
extern long gtk_tips_query_get_type() = tips_query_get_type;
extern GtkWidget* gtk_tips_query_new() = tips_query_new;
extern void gtk_tips_query_start_query(GtkTipsQuery*) = tips_query_start_query;
extern void gtk_tips_query_stop_query(GtkTipsQuery*) = tips_query_stop_query;
extern void gtk_tips_query_set_caller(GtkTipsQuery*, GtkWidget*) = tips_query_set_caller;
extern void gtk_tips_query_set_labels(GtkTipsQuery*, char*, char*) = tips_query_set_labels;
