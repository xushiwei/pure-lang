/* nonmodifying.pure -- Pure interface for C++ STL nonmodifying algorithms
    
Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/

using stlvec;
using "lib:stlalgorithm";

namespace stl;

/*** C++ Support *****************************************************/

private extern void sva_for_each(expr* it, expr* unary_fun);
private extern int sva_find_if(expr* it, expr* pred);
private extern int sva_find_first_of(expr* it1, expr* it2, expr* pred);
private extern int sva_adjacent_find(expr* it, expr* comp);
private extern int sva_count_if(expr* it, expr* unary_pred);
private extern expr* sva_mismatch(expr* it1, expr* it2, expr* comp);
private extern bool sva_equal(expr* it, expr* it2, expr* comp);
private extern int sva_search(expr* it1, expr* it2, expr* comp);
private extern int sva_search_n(expr* it1, int count, expr* val, expr* comp);
private extern int sva_find_end(expr* it1, expr* it2, expr* comp);

/*** Pure Interface **************************************************/

for_each it::svrng f = sva_for_each it f;

find it::svrng x = sva_find_if it (==x);

find_if it::svrng f = sva_find_if it f;

find_first_of it1::svrng it2::svrng f = sva_find_first_of it1 it2 f;

adjacent_find it::svrng f = sva_adjacent_find it f;

count it::svrng x = sva_count_if it (==x);

count_if it::svrng f = sva_count_if it f;

mismatch it1::svrng it2::svrng f = sva_mismatch it1 it2 f;

equal it1::svrng it2::svrng f = sva_equal it1 it2 f;

search it1::svrng it2::svrng f = sva_search it1 it2 f;

search_n it::svrng count::int x f = sva_search_n it count x f;

find_end it1::svrng it2::svrng f = sva_find_end it1 it2 f;







