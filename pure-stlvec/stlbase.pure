/* stlbase.pure: base module for Pure interface to C++ STL Containers 

Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/

using "lib:stlcontainer";

namespace stl;

// Functions for testing and debugging
extern int stl_refc(expr*) = refc;
extern void stl_set_px_trace(bool enable) = set_px_trace;
extern bool stl_px_trace_enabled() = px_trace_enabled;

namespace ;

// stlvec constuctors
nonfix STLVEC;
nonfix CONST_STLVEC;
STLVEC = 'STLVEC;
CONST_STLVEC = 'CONST_STLVEC;

// stlvec types
type stlvec (STLVEC _);
type stlvec (CONST_STLVEC _);
type mutable_stlvec (STLVEC _);
type const_stlvec (CONST_STLVEC _);

// stlvec iterator tuples
type svit (STLVEC _);
type svit (STLVEC _, _);
type svit (CONST_STLVEC _);
type svit (CONST_STLVEC _, _);
type const_svit (CONST_STLVEC _);
type const_svit (CONST_STLVEC _, _);
type mutable_svit (STLVEC _);
type mutable_svit (STLVEC _, _);

/*** Constants used to specify "iterator tuples" *************************/

namespace stl;

// For use with stlvecs
const svbeg  =  0;  // corresponds to C++ first element iterator
const svend  = -1;  // corresponds to C++ past-end iterator
const svback = -2;  // corresponds to C++ back_insert_iterator
const svrev  = -3;  // request reversal of iterators

nonfix svbeg;       // to make svbeg and svend usable as beg and end markers
nonfix svend;       // in C++ style looping over a stlvec's contents using 
nonfix svback;      // a recursion. i.e., make them literal constants like
nonfix svrev;       // (), []

// For use with other stl containers
private extern expr* stlbegin_sym();
private extern expr* stlend_sym();
const stlbeg = stlbegin_sym;
const stlend = stlend_sym;

nonfix stlbeg;    // to make stlbeg and stlend usable as beg and end markers
nonfix stlend;    // in C++ style looping over a stldict's contents using 
