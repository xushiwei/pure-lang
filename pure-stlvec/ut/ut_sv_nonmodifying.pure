/* ut_sv_nonmodifying.pure -- Unit tests for sv_nonmodifying.pure
    
Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.


*/

using system;
using stlvec;
using stlvec::nonmodifying;
using ut_helpers;

using namespace stl;

nonfix exception;

test_for_each = ok when
  show_start "for_each";  
  sv1 = stlvec (0..10); 
  sv2 = emptystlvec;
  for_each sv1 (append sv2);
  put err_p false; 
  catch eh $ for_each sv1 crash;
  ok0 = get err_p;
  ok1 = sv2 == sv1;
  erase sv2;
  for_each (sv1,1,6) (append sv2);
  ok2 = all_equal (==) sv2 (sv1,1,6);
  ok3 =  members sv2 == [1,2,3,4,5];
  ok4 = check_refcs sv1 [1,2,2,2,2,2,1,1,1,1,1];
  ok5 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "for_each" ok;
end with 
  eh x = put err_p true; 
  crash x = throw exception; 
end when 
  err_p = ref false; 
end; 

test_find = ok when
  show_start "find";
  sv = stlvec ("a".."e");
  ok0 = 1;
  ok1 = find sv "c" == 2;
  ok2 = find sv "a" == 0;
  ok3 = find (sv,2,5) "c" == 2;
  ok4 = find (sv,2,5) "a" == stl::svend;
  ok5 = check_refcs sv 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "find" ok;
end; 

test_find_if = ok when
  show_start "find_if";
  sv = stlvec ("a".."e");
  put err_p false; 
  catch eh $ find_if sv crash;
  ok0 = get err_p;
  ok1 = find_if sv (>"c") == 3;
  ok2 = find_if sv (=="a") == 0;
  ok3 = find_if sv (>"z") == stl::svend;
  ok4 = check_refcs sv 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4];
  show_result "find_if" ok;
end with 
  eh x = put err_p true; 
  crash x = throw exception; 
end when 
  err_p = ref false; 
end; 

test_find_first_of = ok when
  show_start "find_first_of";
  sv1 = stlvec ("a".."e");
  sv2 = stlvec ("x".."y");
  put err_p false; 
  catch eh $ find_first_of sv1 sv2 crash;
  ok0 = get err_p;
  ok1 = find_first_of sv1 sv2 (==) == stl::svend;
  append sv2 "c";
  ok2 = find_first_of (sv1,2,4) sv2 (==) == 2;
  update sv2 0 (sv1!0);
  rmlast sv2;
  ok3 = find_first_of sv1 sv2 (==) == 0;
  ok4 = check_refcs sv1 [2,1,1,1,1];
  ok5 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "find_first_of" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_adjacent_find = ok when
  show_start "adjacent_find";
  sv1 = stlvec ["a", "a", "b", "b", "c"];
  put err_p false; 
  catch eh $ adjacent_find sv1 crash;
  ok0 = get err_p;
  ok1 = adjacent_find sv1 (==) == 0;
  ok2 = adjacent_find (sv1,2,svend) (==) == 2;
  update sv1 0 "x";
  ok3 = adjacent_find sv1 (==) == 2;
  update sv1 3 "c";
  ok4 = adjacent_find sv1 (==) == 3;
  update sv1 3 "y";
  ok5 = adjacent_find sv1 (==) == svend;
  ok6 = check_refcs sv1 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5,ok6];
  show_result "adjacent_find" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_count = ok when
  show_start "count";
  sv = stlvec (list "aabbbcccc");
  ok0 = 1;
  ok1 = count sv "a" == 2;
  ok2 = count sv "b" == 3;
  ok3 = count sv "c" == 4;
  ok4 = count sv "x" == 0;
  ok5 = check_refcs sv 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "count" ok;
end; 

test_count_if = ok when
  show_start "count_if";
  sv = stlvec (-3..3);
  put err_p false; 
  catch eh $ count_if sv crash;
  ok0 = get err_p;
  ok1 = count_if sv (>0) == 3;
  ok2 = count_if (sv,1,svend) (<0) == 2;
  ok3 = count_if sv (==0) == 1;
  ok4 = count_if sv (>4) == 0;
  ok5 = check_refcs sv 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "count_if" ok;
end with 
  eh x = put err_p true; 
  crash x = throw exception; 
end when 
  err_p = ref false; 
end; 

test_mismatch = ok when
  show_start "mismatch";
  sv1 = stlvec ("a".."e");
  sv2 = stlvec ("x".."y");
  put err_p false; 
  catch eh $ mismatch sv1 sv2 crash;
  ok0 = get err_p;
  ok1 = mismatch sv1 sv2 (==) == (0,0);
  sv2 = stlvec ["a", "b","x"];
  ok2 = mismatch sv1 sv2 (==) == (2,2);
  sv2 = stlvec ["b","x"];
  ok3 = mismatch (sv1,1,svend) sv2 (==) == (2,1);
  sv2 = stlvec ("a".."e");
  ok4 = mismatch sv1 sv2 (==) == (svend, svend);
  ok5 = check_refcs sv1 1;
  ok6 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5,ok6];
  show_result "mismatch" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_equal = ok when
  show_start "equal";
  sv1 = stlvec ("a".."e");
  sv2 = stlvec sv1;
  put err_p false; 
  catch eh $ equal sv1 sv2 crash;
  ok0 = get err_p;
  ok1 = equal sv1 sv2 (==) == true;
  update sv2 1 "x";
  ok2 = equal sv1 sv2 (==) == false;
  ok3 = check_refcs sv1 [2,1,2,2,2];
  ok4 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4];
  show_result "equal" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_search = ok when
  show_start "search";
  sv1 = stlvec ("a".."g");
  sv2 = stlvec (sv1,2,5);
  put err_p false; 
  catch eh $ search sv1 sv2 crash;
  ok0 = get err_p;
  p = search sv1 sv2 (==);
  ok1 = p == 2;
  p = search (sv1,2,svend) (sv2,2,svend) (==);
  ok2 = p == 4; // not relative to (sv1,2)
  append sv2 "x";
  p = search sv1 sv2 (==);
  ok3 = p == svend;
  ok4 = check_refcs sv1 [1,1,2,2,2,1,1];
  ok5 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "search" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_search_n = ok when
  show_start "search_n";
  sv1 = stlvec ["a","b","c","c","c","f","g"];
  put err_p false; 
  catch eh $ search_n sv1 3 "c" crash;
  ok0 = get err_p;
  ok1 = 2 == search_n sv1 3 "c" (==);
  ok2 = 2 == search_n (sv1,2,svend) 3 "c" (==);
  ok3 = svend == search_n (sv1,2,svend) 1 "x" (==);
  ok4 = check_refcs sv1 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4];
  show_result "search_n" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_find_end = ok when
  show_start "find_end";
  sv1 = stlvec ("a".."g");
  sv2 = stlvec ("c".."e");
  put err_p false; 
  catch eh $ find_end sv1 sv2 crash;
  ok0 = get err_p;
  ok1 = 2 == find_end sv1 sv2 (==);
  ok2 = 4 == find_end (sv1,2,svend) (sv2,2,svend) (==);
  append sv2 "x";
  ok3 = svend == find_end sv1 sv2 (==);
  ok4 = check_refcs sv1 1;
  ok5 = check_refcs sv2 1;
  ok = all_ok [ok0,ok1,ok2,ok3,ok4,ok5];
  show_result "find_end" ok;
end with 
  eh x = put err_p true; 
  crash x y = throw exception; 
end when 
  err_p = ref false; 
end; 

test_sv_nonmodifying = ok when
  show_suite_start "SV_NONMODIFYING";
  ok = 1;
  ok = test_for_each && ok;
  ok = test_find && ok;
  ok = test_find_if && ok;
  ok = test_find_first_of && ok;
  ok = test_adjacent_find && ok;
  ok = test_count && ok;
  ok = test_count_if && ok;
  ok = test_mismatch && ok;
  ok = test_equal && ok;
  ok = test_search && ok;
  ok = test_search_n && ok;
  ok = test_find_end && ok;
  show_suite_result "SV_NONMODIFYING" ok;
end;

