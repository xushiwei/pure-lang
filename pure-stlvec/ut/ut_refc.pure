/* ut_x_refc.pure -- examples for tracing stlvec reference counting and
   and the creation and deletion of stlvecs.
   
Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.


   Usage - see REFC AND STLVEC TRACING in INTRO.txt

*/


using system;
using stlvec;
using ut_helpers;

/*** Helpers ***/

show_elm e::string = printf "    %s: %d\n" (e, stl::refc e - 2);

show_elm e::int = printf "    %d: %d\n" (e, stl::refc e - 2);

show_elm e::bigint = printf "    %s: %d\n" (str e, stl::refc e - 1);

show_refcs v = do show_elm v;

/*** Tests *************************************************************/

// basic ref counts from referencing members
test_mem_1 = () when
  names = ["Hello", "Peter", "Lily", "Holly", "Emily"];
  puts "\n--- test_mem_1: refcs for local vec  ---";
  puts "--- make vec";
  vec = stlvec names;
  puts "--- reserve vec";
  reserve vec 20;
  puts "--- get vec!1";
  x = vec!1;
  puts "--- update vec";
  update vec 2 "Fred";
  puts "--- append to vec";
  append vec "Mary";
  puts "--- show_refcs";
  show_refcs vec;
  puts "--- test_mem_1 done ---";
end;

// foldl and map
test_mem_2 = () when
  puts "\n--- test_mem_2: refcs for gbl_vec ---";
  puts "\n--- make vname ---";
  vnames = stlvec ["Hello", "Peter", "Lily", "Holly", "Emily"];
  puts "\n--- make vnums ---";
  vnums = [0,1,2,3,4];


  puts "\n--- foldl x0 (+) vnames ---";
  x0 = "_x0";
  x1 = foldl (+) x0 (vnames, 1, 4);
  show_elm x1;

  v2 = map (5*) vnums;
  puts "--- vnums after map ---";
  show_refcs vnums;
end;

// insertions and 
// TO DO

show_elapsed msg tb te = () when
  elp = te -tb;
  printf "%s time: %f\n" (msg, elp / CLOCKS_PER_SEC);
end;

test_time_1 = () when
  t1 = clock;
  xx = 10000;
  vxx = mkstlvec xx 1000000;
  vyy = map  (+xx) vxx;
  t2 = clock;
  show_elapsed "mkstlvec 1,000,000" t1 t2;
  show_elm xx;
  show_elm (vxx!2);
  show_elm (vyy!0);
end;


test_stlvec_refc = () when
  show_start "STLVEC_REFC";
  puts "";
  ok = 1;
  test_mem_1;
  test_mem_2;
  show_result "STLVEC_REFC" ok;
  puts "";
end;

