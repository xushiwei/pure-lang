/* sieve.pure - compute the number of primes up to n. */

using system;

/*** The sieve of Erathosthenes, stlvec version *****************************/

using stlvec;

// Returns the number of primes up to n, and a list containing them.
sieve_a n = (foldl sieve 0 (0..n-1), filter ((~=)0) x)
with
  sieve count i = count+1 when
                    p = i+1; do (\j -> replace x j 0) (i+p:i+2*p..n-1);
                  end if x!i; // x!i is prime
                = count otherwise;
end when
  x = stlvec (1..n); replace x 0 0;
end;


/*** The sieve of Erathosthenes, stlvec::algorithms versions *****************/

using stlvec::algorithms;
using namespace stl;

// Returns the number of primes up to n, and a stlvec containing them.
// Muy "C++"
sieve_b n = sift 2 with
  sift svend = #sv, sv when tail = remove sv 0; erase (sv,tail,svend); end;
  sift p = sift q when 
    loop_ms p (2*p); 
    q = find_if (sv,p+1,svend) (~=0);
  end; 
  loop_ms p m = if m<=n then replace sv m 0 $$ loop_ms p (m+p) else ();   
end when
  sv = stlvec (0..n); replace sv 1 0;
end;

// Returns the number of primes up to n, and a stlvec containing them.
// More idiomatic Pure -- uses "do" instead of a "recursive loop"
sieve_c n = sift 2 with
  sift svend = #sv, sv when tail = remove sv 0; erase (sv,tail,svend); end;
  sift p = sift q when 
    do (\j -> replace sv j 0) (2*p:3*p..n);
    q = find_if (sv,p+1,svend) (~=0);
  end; 
end when
  sv = stlvec (0..n); replace sv 1 0;
end;

/*** Harness to compare compiled versions ********************************/

test fun_abbrev n = () when
  if ~intp n then puts "bad number" else ();
  f = case fun_abbrev of
    "a" = sieve_a;
    "b" = sieve_b;
    _   = sieve_c;
  end;
  np, ps = f n;
  printf "%s found %d primes up to %d.\n" (str f,np,n);
end;

main = if argc < 3 then 
         puts "Usage: ./sieve [a-c] n"
       else case val (argv!2) of
	 upper::int = test (argv!1) upper;
	 _ = puts "bad number";
       end;

if ~compiling && argc > 0 then main else ();

/*** Times on an old Dell running Linux Mint ********************************

$> pure -c sieve.pure -o sieve

$> time ./sieve "a" 1000000
sieve_a found 78498 primes up to 1000000.

real	0m7.066s
user	0m6.712s
sys	0m0.248s

$> time ./sieve "b" 1000000
sieve_b found 78498 primes up to 1000000.

real	0m5.762s
user	0m5.536s
sys	0m0.144s

$> time ./sieve "c" 1000000
sieve_c found 78498 primes up to 1000000.

real	0m6.316s
user	0m6.048s
sys	0m0.188s

*/