/* stlutil.pure - some utilities for working with stlvecs

Copyright (c) 2011 by Peter Summerland <p.summerland@gmail.com>.

All rights reserved.

This software is is part of pure-stlvec, an addon to the Pure Programming
Language (http://code.google.com/p/pure-lang/).

This software is distributed under a BSD-style license in the hope that it
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the COPYING file
included with the pure-stlvec distribution package for details.

*/


using stlvec, stlstruct;

namespace stl;

/*** helpers *************************************************************/

intersperse sep [] = [];
intersperse sep [x] = [x];
intersperse sep (x:xs) = x:sep:intersperse sep xs;

join_with sep strs = strcat (intersperse sep strs);

/*** readable representation of a stlvec or range ************************/

tostr sz::int it::svit = tostr (sz, ",") it;
tostr (sz::int, sep::string) it::svit = res when
  sv,b,e = bounds it;
  sz = if sz <= 0 then 1000 else sz;
  rsz = e-b;
  elms = take sz (members it);
  s = join_with sep (map str elms);
  s = if #elms < rsz then s + sep + "..." else s;
  sfx = if e < #sv then " }" else "}";
  pfx = if typep mutable_svit it then "sv{" else "csv{";
  pfx = if b > 0 then pfx + " " else pfx;
  res = pfx + s + sfx;
end;

/*** readable representation of a stl::struct ***************************/

tostr sz::int s::struct = tostr (sz, ",") s;
tostr (sz::int, sep::string) s::struct = res when
  memstrs = join_with sep $ map memstr (members s);
  res = "struct "+(stl::struct_name s)+" {"+memstrs+"\n  }";
end with
  memstr x = "\n  " + ms when
    ms = if typep stlvec x then tostr (sz, sep) x 
         else if typep stl::struct x then tostr (sz, sep) x
         else str x;
  end;
end;

/*** consider putting this in .purerc ***********************************/

//::__show__  it::svit = tostr 5 it;

