
pure-ffi
========

This module provides an interface to the libffi library, which enables you to
call C functions from Pure and vice versa. It goes beyond Pure's built-in C
interface in that it also handles C structs and makes Pure functions callable
from C. Moreover, depending on the libffi implementation, it may also be
possible to call foreign languages other than C.

The libffi library provides a portable, high level programming interface to
various calling conventions. This allows a programmer to call any function
specified by a call interface description at run time. libffi should be
present on most gcc-based systems, but it is also available as a standalone
package at http://sourceware.org/libffi/.

INSTALLATION
============

Run 'make' to compile the module and 'make install' (as root) to install it in
the Pure library directory. This requires GNU make, and of course you need to
have Pure and libffi installed.

'make' tries to guess your Pure installation directory and platform-specific
setup. If it gets this wrong, you can set some variables manually. In
particular, 'make install prefix=/usr' sets the installation prefix, and 'make
PIC=-fPIC' or some similar flag might be needed for compilation on 64 bit
systems. Please see the Makefile for details.

USAGE
=====

The module exposes a simplified interface to libffi tailored to the Pure
language. The provided functions take the desired ABI, return type and tuple
of argument types as arguments. The ABI is specified using one of the FFI_*
constants defined by the module; for most purposes, FFI_DEFAULT_ABI is all
that's needed. C types are specified using certain special values void_t,
int_t etc., see ffi.pure for details. You can also get a list of these values
using 'show -g FFI_* *_t' after importing the ffi module.

The following functions are provided:

- fcall name abi rtype atypes: Creates a Pure function from a C function with
the given name (specified as a string), ABI, return and argument types. This
makes the C function callable in Pure.

- fclos fn abi rtype atypes: Creates a pointer to a C function from the given
Pure function fn. The resulting pointer can then be passed to other C
functions expecting functions as arguments. This allows you to create C
callbacks from Pure functions without writing a single line of C code.

Note that in difference to 'extern' functions, arguments to functions created
with libffi are always passed in uncurried form, as a Pure tuple. E.g.:

> using ffi;
> let fmod = fcall "fmod" FFI_DEFAULT_ABI double_t (double_t,double_t);
> fmod (5.3,0.7);
0.4

See the 'examples' folder in the sources for some more examples.

TODO
====

Struct support is not implemented yet, but should be ready by the time version
0.1 of this module is released.

Author
======

Albert Graef <Dr.Graef@t-online.de>
