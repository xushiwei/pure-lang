
========
pd-faust
========

Version @version@, |today|

Albert Graef <Dr.Graef@t-online.de>

pd-faust is a dynamic environment for running Faust dsps in Pd. It is based on
the author's :doc:`faust2pd<faust2pd>` script, but offers many improvements
and additional features:

* Faust dsps are implemented using two Pd objects, ``fsynth~`` and ``fdsp~``,
  which provide the necessary infrastructure to run Faust synthesizer and
  effect units in Pd, respectively.

* In contrast to faust2pd, the Pd GUI of Faust units is generated dynamically,
  inside Pd. Faust dsps can be reloaded at any time (even while the Pd patch
  is running), in which case the GUI, controller mappings etc. are regenerated
  automatically and on the fly as needed.

* Besides the GUI elements for operating the Faust controls, pd-pure
  recognizes the ``midi`` and ``osc`` controller attributes in the Faust
  source and provides corresponding MIDI and OSC controller mappings. It also
  features facilities for MIDI playback and OSC-based controller automation.
  (The latter two are implemented by the auxiliary ``midiseq`` and ``oscseq``
  objects and the ``midiosc`` helper abstraction which can be found in the
  examples folder.)

.. _faust2pd: faust2pd

Copying
=======

Copyright (c) 2011 by Albert Graef

pd-faust is distributed under the GNU LGPL v3+. Please see the included
COPYING and COPYING.LESSER files for details.

This package also includes the faust-stk instruments which are distributed
under an MIT-style license, please check the examples/synths/README-STK file
and the dsp files for authorship information and licensing details pertaining
to these. The original faust-stk sources can be found in the Faust
distribution, cf. http://faust.grame.fr/.

Installation
============

You'll need Faust_ and Pd_, obviously. The pd-faust objects are written in the
Pure_ programming language, so you'll also need an installation of the Pure
interpreter (0.50 or later), along with the following packages:
:doc:`pd-pure<pd-pure>` (0.15 or later), :doc:`pure-faust<pure-faust>` (0.6 or
later) and :doc:`pure-stldict<pure-stldict>` (any version). Finally, gcc and
GNU make (or compatible) are required to compile the helper dsps and the
example instruments; please check the Makefile for details.

.. _Faust: http://faust.grame.fr/
.. _Pd: http://puredata.info/
.. _Pure: http://pure-lang.googlecode.com/

For a basic installation run ``make``, then ``sudo make install``. This will
install the pd-pure objects in your Pd lib/extra/faust folder. Add this
directory to your Pd library search path (``--path`` option or
``Preferences/Path`` in Pd) and you should be set.

Some further build options are described in the Makefile. In particular, it is
possible to compile the Faust dsps to LLVM bitcode which can be loaded
directly by the Pure interpreter, but for that you'll need an LLVM-capable
C/C++ compiler such as clang or gcc with the dragonegg plugin. Please check
the LLVM_ website for details.

.. _LLVM: http://llvm.org/

Usage
=====

Working with pd-faust basically involves adding a bunch of ``fsynth~`` and
``fdsp~`` objects to a Pd patch along with the corresponding GUI subpatches,
and wiring up the Faust units in some variation of a synth-effects chain which
typically takes input from Pd's MIDI interface (``notein``, ``ctlin``, etc.)
and outputs the signals produced by the Faust units to Pd's audio interface
(``dac~``). For your convenience, the included ``midiosc`` object can be used
to handle the MIDI input and OSC controller automation.

The ``fdsp~`` object is invoked as follows::

  fdsp~ dspname instname channel

* ``dspname`` denotes the name of the Faust dsp (usually this is just the name
  of the .dsp file with the extension stripped off).

* ``instname`` denotes the name of the instance of the Faust unit. Multiple
  instances of the same Faust dsp can be used in a Pd patch, which must all
  have different instance names. In addition, the instance name is also used
  to identify the GUI subpatch of the unit (see below) and to generate unique
  OSC addresses for the unit's control elements.

* ``channel`` is the number of the MIDI channel the unit responds to. This can
  be 1..16, or 0 to specify "omni" operation (listen to MIDI messages on all
  channels).

The ``fdsp~`` object requires a Faust dsp which can work as an effect unit,
processing audio input and producing audio output. (Only stereo units are
fully supported in the present version.)

The ``fsynth~`` object works in a similar fashion, but has an additional
creation argument specifying the desired number of voices::

  fsynth~ dspname instname channel numvoices

The ``fsynth~`` object requires a Faust dsp which can work as a monophonic
synthesizer (having zero audio inputs and two audio outputs). The voice
controls (frequency, gain and gate) and the automatic allocation of voices
work analogous to :doc:`faust2pd<faust2pd>` (which see). Also note that an
``fsynth~`` operated in omni mode (``channel = 0``) automatically filters out
messages on channel 10 which is reserved for percussion in the General MIDI
standard.

.. note:: Like pd-pure, pd-faust remaps Pd's ``menu-open`` command so that it
   lets you edit the Faust source of an ``fdsp~`` or ``fsynth~`` object by
   right-clicking on the object and choosing ``Open`` from the context menu.

For each ``fdsp~`` and ``fsynth~`` object, the Pd patch should also contain an
(initially empty) "one-off" graph-on-parent subpatch with the same name as the
instance name of the Faust unit::

  pd instname

You don't have to insert anything into this subpatch, the contents (a bunch of
Pd GUI elements corresponding to the control elements of the Faust unit) will
be generated automatically by pd-faust when the corresponding ``fdsp~`` or
``fsynth~`` object is created (and whenever the unit gets reloaded at
runtime).

The ``fdsp~`` and ``fsynth~`` objects respond to the following messages:

* ``bang`` outputs the current control settings on the control outlet in OSC
  format.

* ``reload`` reloads the Faust unit. This also reloads the shared library or
  bitcode file if the unit was recompiled since the object was last loaded.

* ``addr value`` changes the control indicated by the OSC address ``addr``.
  This is also used internally for communication with the Pd GUI and for
  controller automation.

In addition, the objects also respond to MIDI controller messages of the form
``ctl val num chan``. The ``fsynth~`` object also understands note-related
messages of the form ``note num vel chan`` (note on/off) and ``bend val chan``
(pitch bend).

Examples
--------

The examples folder contains a few example patches which illustrate how this
all works. Having installed pd-faust as described above, you can run these
from the examples directory, e.g.: ``pd test.pd``. You can also run the
examples without actually installing pd-faust, if you add the ``-path ..``
option when running Pd from the examples directory.

The following examples are currently available:

* test.pd: Simple patch running a single Faust instrument.

* synth.pd: Slightly more elaborate patch featuring a synth-effects chain.

* bouree.pd: Full-featured example running various instruments.

For your convenience, related MIDI and OSC files as well as the Faust sources
of the instruments and effects are contained in corresponding subdirectories
(midi, osc, synths) of the examples directory. A slightly modified version of
the faust-stk instruments from the Faust distribution is also included, please
check the examples/synths/README-STK file for more information about these.

The MIDI files are in standard MIDI file format and come from various sources
on the web; I believe that they are all in the public domain and can thus be
distributed freely. The OSC files used by pd-faust for controller automation
are plain ASCII files suitable for hand-editing if you know what you are
doing; the format should be fairly self-explanatory.

Please note that in the present version the patch directory layout (MIDI, OSC
and Faust source files can be found in the midi, osc and synths subfolders,
respectively) is hardwired, so you should follow this layout for your own
pd-faust patches as well.

Operating the Patches
---------------------

The generated Pd GUI elements for the Faust dsps are pretty much the same as
with :doc:`faust2pd<faust2pd>`. The only addition is a "record" button (gray
toggle in the upper right corner) which enables recording of OSC automation
data.

In case the operation of the ``midiosc`` abstraction in the provided examples
is not immediately obvious, here is a brief rundown of the available controls:

* The creation argument of ``midiosc`` is the name of the MIDI file, either as
  a Pd symbol (in this case the .mid filename extension is supplied
  automatically) or as a double-quoted string.

* The ``start``, ``stop`` and ``cont`` controls in the *first* row of control
  elements start, stop and continue MIDI and OSC playback, respectively. The
  ``echo`` toggle in this row causes MIDI events to be printed in the Pd main
  window.

* Also, there's a ``loop`` toggle in the *third* row which repeats the
  playback of the MIDI and OSC sequence ad infinitum. The ``write`` and
  ``thru`` buttons in this row configure the handling of generated MIDI
  messages. The ``thru`` button, when switched on, routes the MIDI data during
  playback through Pd's MIDI output so that it can be used to drive an
  external MIDI device in addition to the Faust instruments. The ``write``
  button does the same with MIDI controller data generated either through
  automation data or by manually operating the control elements in the Pd GUI,
  see `External MIDI and OSC Controllers`_ below for details.

* The gray "record" toggle in the upper right corner of the abstraction
  enables recording of OSC controller automation data from any of the Faust
  units which have their "record" toggle switched on. Once ``midiosc``\ 's
  "record" toggle is switched on, recording will be started and stopped with
  the ``start``, ``stop`` and ``cont`` controls in the first row.

* There are some additional controls related to OSC recording in the *second*
  row: ``save`` saves the currently recorded data in an OSC file (this file
  will be located in the osc subdirectory, and have the same name as the MIDI
  file with new extension .osc); ``abort`` is like ``stop`` in that it stops
  recording and playback, but also throws away the data recorded in this run
  (while ``stop`` keeps it for later playback); and ``clear`` clears the
  entire recorded OSC sequence so that you can start a new one.

* Once some automation data has been recorded, it will be played back along
  with the MIDI file. You can then just listen to it, or go on to record more
  automation data, etc., ad lib. Use the ``echo`` toggle in the second row to
  print the OSC messages as they are played back.

* Last but not least, if you save the automation data with the ``save``
  button, it will be reloaded from its OSC file next time the patch is opened.

External MIDI and OSC Controllers
---------------------------------

The ``fsynth~`` object has built-in (and hard-wired) support for MIDI notes,
pitch bend and MIDI controller 123 (all notes off).

In addition, all Faust control elements in the Pd GUI can be operated by
user-configurable external MIDI controller input. To these ends, the labels of
the Faust control elements have to be marked up with the special ``midi``
attribute in the Faust source. For instance, a pan control (MIDI controller
10) may be implemented in the Faust source as follows::

  pan = hslider("pan [midi:ctrl 10]", 0, -1, 1, 0.01);

pd-faust will then provide the necessary logic to handle MIDI input from
controller 10 by changing the pan control in the Faust unit accordingly,
mapping the controller values 0..127 to the range and step size given in the
Faust source.

Conversely, if ``write`` mode is enabled (by switching on the ``write`` toggle
in the ``midiosc`` abstraction, see above), then MIDI controller data will be
generated in response to both OSC automation and the manual operation of the
Pd GUI elements. The generated MIDI controller data is then sent to Pd's MIDI
output, on the MIDI channel specified in the creation arguments of the Faust
unit (0 meaning "omni", i.e., output on all MIDI channels), so that it can
drive an external MIDI device such as a keyboard or a faderbox.

Note that, in principle, the same functionality is also available for external
OSC devices, employing explicit OSC controller assignments in the Faust source
by means of the ``osc`` attribute. E.g., the following would allow input and
output of OSC messages for the OSC ``/pan`` address::

  pan = hslider("pan [osc:/pan]", 0, -1, 1, 0.01);

The necessary infrastructure is already provided by pd-faust, but the OSC
input and output facilities needed to make this actually work are not
implemented in the ``midiosc`` abstraction right now.

Remote Control
--------------

Also included in the sources is a helper abstraction faust-remote.pd and an
accompanying elisp file faust-remote.el. These work pretty much like
pure-remote.pd and pure-remote.el in the :doc:`pd-pure<pd-pure>` distribution,
but are tailored for the remote control of Faust dsps in a Pd patch. In
particular, they enable you to quickly reload the Faust dsps in Pd using a
simple keyboard command (``C-C C-X`` by default) from Emacs. The
faust-remote.el program was designed to be used with Juan Romero's Emacs Faust
mode available at https://github.com/rukano/emacs-faust-mode; please see
etc/pure-remote.el for usage instructions.

Caveat
======

Some parts of this software might still be experimental, under construction
and/or bug-ridden. Bug reports, patches and suggestions are welcome. Please
send these directly to the author, or post them either to the Faust or the
Pure mailing list.
