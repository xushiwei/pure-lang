
/* fastcgi interface, cf. http://www.fastcgi.com/. */

// declare these here, so that we don't have to pull in the system module
public printf_error printf_value_error;
namespace __C with
extern expr *pure_printf_split(char *format);
end;
using namespace __C;

// Force libfcgi to be loaded on Windows.
#! --if *-mingw32
using "lib:fcgi";
#! --endif

using "lib:fastcgi";
namespace fastcgi;

/* FastCGI interface routines. */

extern int FCGI_Accept() = accept;
extern void FCGI_Finish() = finish;
extern int FCGI_StartFilterData() = start_filter_data;
extern void FCGI_SetExitStatus(int status) = set_exit_status;

// This is implemented as a macro in the fcgi_stdio interface. */
extern FILE *fastcgi_to_file(FCGI_FILE *fp) = to_file;

/* stdio variables and routines which are overwritten by fastcgi. You must use
   these instead of the stdio routines supplied in the system module in order
   to obtain input from and supply output to the fastcgi server. NOTE: fastcgi
   currently doesn't implement the scanf family, so it is missing here. Also,
   due to limitations of fastcgi, it isn't possible to use the special %Zd and
   %Rg conversions supported by the Pure printf routines when output goes to
   the server. (Streams opened via fastcgi::fopen should be fine, though.) */

public stdin stdout stderr;
// Initialize the stdin, stdout and stderr variables.
private extern void fastcgi_defs(); fastcgi_defs;

extern void FCGI_perror(char*) = perror;

private extern FCGI_FILE* FCGI_fopen(char* name, char* mode);
private extern FCGI_FILE* FCGI_popen(char* cmd, char* mode);
private extern FCGI_FILE* FCGI_fdopen(int fd, char* mode);
private extern FCGI_FILE* FCGI_freopen(char* name, char* mode, FCGI_FILE* fp);
private extern int FCGI_fclose(FCGI_FILE* fp), int FCGI_pclose(FCGI_FILE* fp);
private extern char* FCGI_fgets(void* buf, int size, FCGI_FILE* fp);

extern FCGI_FILE* FCGI_tmpfile() = tmpfile;
extern int FCGI_fflush(FCGI_FILE* fp) = fflush;
extern int FCGI_fputs(char* s, FCGI_FILE* fp) = fputs, int FCGI_puts(char* s) = puts;
extern size_t FCGI_fread(void* ptr, size_t size, size_t nmemb, FCGI_FILE* fp) = fread;
extern size_t FCGI_fwrite(void* ptr, size_t size, size_t nmemb, FCGI_FILE* fp) = fwrite;
extern void FCGI_clearerr(FCGI_FILE* fp) = clearerr;
extern int FCGI_feof(FCGI_FILE* fp) = feof, int FCGI_ferror(FCGI_FILE* fp) = ferror;
extern int FCGI_fileno(FCGI_FILE* fp);

extern int FCGI_fseek(FCGI_FILE* fp, long offset, int whence) = fseek;
extern long FCGI_ftell(FCGI_FILE *fp) = ftell;
extern void FCGI_rewind(FCGI_FILE *fp) = rewind;

extern void FCGI_setbuf(FCGI_FILE* fp, void* buf);
extern int FCGI_setvbuf(FCGI_FILE* fp, void* buf, int mode, size_t size);

public fopen fdopen freopen popen fclose pclose fget fgets gets;

fopen name::string mode::string = sentry FCGI_fclose fp if ~null fp
when fp = FCGI_fopen name mode end;

fdopen fd::int mode::string = sentry FCGI_fclose fp if ~null fp
when fp = FCGI_fdopen fd mode end;

freopen name::string mode::string fp::pointer = sentry FCGI_fclose fp
if ~null fp when
  fp = if get_sentry fp === FCGI_fclose then
         clear_sentry fp $$ FCGI_freopen name mode fp
       else NULL;
end;

popen name::string mode::string = sentry FCGI_pclose fp if ~null fp
when fp = FCGI_popen name mode end;

fclose fp::pointer = clear_sentry fp $$ FCGI_fclose fp
if get_sentry fp === FCGI_fclose;
pclose fp::pointer = clear_sentry fp $$ FCGI_pclose fp
if get_sentry fp === FCGI_pclose;

fgets f::pointer = read_a_line f buf "" when buf = malloc 1024 end
with read_a_line f buf t = check s when s = FCGI_fgets buf 1024 f end
  with check s::string = return (t+s) if done s;
		       = read_a_line f buf (t+s) otherwise;
       check s         = return s if null t;
                       = return t otherwise;
       done s::string  = feof f || ferror f || ~null s && last s == "\n";
       return x        = free buf $$ x;
  end;
end;

gets = if null s then s else if last s == "\n" then init s else s
when s = fgets stdin end;

fget f::pointer = read_a_file f buf "" when buf = malloc 0x10000 end
with read_a_file f buf t = check s when s = FCGI_fgets buf 0x10000 f end
  with check s::string = return (t+s) if feof f || ferror f;
		       = read_a_file f buf (t+s) otherwise;
       check s         = return s if null t;
                       = return t otherwise;
       return x        = free buf $$ x;
  end;
end;

private extern int fastcgi_fprintf(FCGI_FILE *fp, char *format);
private extern int fastcgi_fprintf_int(FCGI_FILE *fp, char *format, int x);
private extern int fastcgi_fprintf_double(FCGI_FILE *fp, char *format, double x);
private extern int fastcgi_fprintf_string(FCGI_FILE *fp, char *format, char *x);
private extern int fastcgi_fprintf_pointer(FCGI_FILE *fp, char *format, void *x);
private extern int fastcgi_fprintf_pointer(FCGI_FILE *fp, char *format, void *x);
private extern int fastcgi_fprintf_mpz(FCGI_FILE *fp, char *format, void *x);
private extern int fastcgi_fprintf_mpfr(FCGI_FILE *fp, char *format, mpfr *x);

public printf fprintf;

printf format::string args = fprintf stdout format args;

fprintf fp::pointer format::string args =
  catch error $ do_printf 0 formats args if listp formats
when
  args = if tuplep args then list args else [args];
  formats = pure_printf_split format;
end with
  error (printf_error res::int) = res;
  error x = throw x otherwise;
  literal s = head s ~= "%" || take 2 s == "%%";
  format_type x format =
    if index "diouxX" x >= 0 then
      if index format "R" < 0 && index format "Z" >= 0 then "Z" else "d"
    else if index "eEfgGaA" x >= 0 then
      if index format "R" >= 0 then "R" else "g"
    else x;
  do_printf count (format:formats) args =
    do_printf count formats args when
      res = fastcgi_fprintf fp format;
      count = if res>=0 then count+res else throw (printf_error res);
    end if literal format;
  do_printf count (format:formats) (arg:args) =
    do_printf count formats args when
      res = case format_type (last format) format, arg of
	"c", x::int | "c", x::bigint |
	"d", x::int | "d", x::bigint = fastcgi_fprintf_int fp format x;
	"g", x::double = fastcgi_fprintf_double fp format x;
	"s", x::string = fastcgi_fprintf_string fp format x;
	"p", x::string | "p", x::pointer =
	  fastcgi_fprintf_pointer fp format x;
	"Z", x::bigint = fastcgi_fprintf_mpz fp format x;
	"R", x::mpfr = fastcgi_fprintf_mpfr fp format x;
	_ = throw (printf_value_error format arg);
      end;
      count = if res>=0 then count+res else throw (printf_error res);
    end;
  do_printf count [] _ = count;
  do_printf count _ [] = throw out_of_bounds;
end;
