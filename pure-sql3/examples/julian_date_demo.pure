/* julian_date_demo.pure */

using system;
using julian;
using namespace julian;

/* Functions provided by julian.pure.

   jd_to_unixtime jd_to_greg jd_to_str

   unixtime_to_jd greg_to_jd str_to_jd 

   current_jd weekday bump begmonth endmonth;

*/


/* Helpers */

put_beg txt = puts "-----------------------" $$ puts ("Begin " + txt);
put_end txt = puts ("End " + txt);

put_jdutc name jd = 
  printf "%s = %f (utc: %s)\n" (name,jd,jd_to_str jd);
put_jdutc_long name jd = 
  printf "%s = %f (utc: %s)\n" (name,jd,jd_to_str(jd,"long"));

put_jdloc name jd = 
  printf "%s = %f (loc: %s)\n" (name,jd,jd_to_str ("loc",jd));
put_jdloc_long name jd = 
  printf "%s = %f (loc: %s)\n" (name,jd,jd_to_str("loc",jd,"long"));

put_ymd greg_tuple = 
  printf "jd1 = y: %04d, m: %02d, d: %02d\n" greg_tuple;
put_ymdhms greg_tuple = ()
when 
  tpl = if #greg_tuple == 3 then greg_tuple,0,0,0.0 else greg_tuple;   
  printf "jd1 = y: %04d, m: %02d, d: %02d, H: %02d, M: %02d, S: %06.3f\n" tpl;
end;

/* into */

intro = ()
when
  jd1 = current_jd;
  puts "Welcome to the julian.pure demo.\n";
  printf "Current julian date:   %f\n" jd1;
  printf "Current unix seconds:  %d\n" ( jd_to_unixtime jd1 );
  printf "Current UTC day:       %s\n" ( jd_to_str jd1 );
  printf "Current local day:     %s\n" ( jd_to_str ("loc", jd1) );
  printf "Current UTC weekday    %d\n" ( weekday jd1 );
  printf "Current local weekday: %d\n" ( weekday ("loc", jd1) );
  printf "Current UTC time:      %s\n" ( jd_to_str (jd1,"long") );
  printf "Current local time:    %s\n\n" ( jd_to_str ("loc", jd1, "long") );
  puts "demo1 - adding days, and fractions of days, to julian dates";
  puts "demo2 - bumping years and months";
  puts "demo3 - converting to and from greg-tuples and time-strings";
  puts "demo4 - adapting to local time zone";
end;


/* demos */

demo1 = ()
when
  put_beg "demo1 - adding days, and fractions of days, to julian dates";

  jd1 = str_to_jd "2000-01-15";
  jd2 = jd1 + 2.5*DAY ;
  jd3 = jd2 + 3*HOUR + 3.5*MIN;
  jd4 = jd1 + 3661*SEC;

  puts "------";
  printf "jd1 = Jan 1, 2005, %5.1f days after noon Nov 24, 4713 BC.\n" jd1;
  put_jdutc_long "jd1" jd1;
  puts "------\njd2 = jd1 + 2.5*DAY";
  printf "jd2 = jd1 + %f days\n" (jd2 - jd1);
  put_jdutc_long "jd2" jd2;
  puts "------\njd3 = jd2 + 3*HOUR + 3.5*MIN";
  printf "jd3 = jd2 + %f days\n" (jd3 - jd2);
  put_jdutc_long "jd3" jd3;
  puts "------\njd4 = jd1 + 3661*SEC";
  printf "jd4 = jd1 + %f days\n" (jd4 - jd1);
  put_jdutc_long "jd4" jd4;

  put_end "demo1";   
end;


demo2 = ()
when
  put_beg "demo2 - bumping years and months";
  jd1 = greg_to_jd (2000,01,15);
  jd2 = bump (jd1,1,1);
  jd3 = bump (jd1,0,13);
  jd4 = bump (jd1,-1,-1);
  jd5 = bump (jd1,0,-13);
  jd6 = endmonth jd1;
  jd7 = bump (jd6,0,1);
  jd8 = bump (jd7,0,1);
  jd9 = endmonth jd8;
  jd10 = begmonth jd9;
  jd11 = (bump (jd10,1,-1)) - DAY;
  jd12 = bump (jd11,0,1);

  put_jdutc "jd1" jd1;
  puts "------";
  puts "jd2 = jd1 + 1 year and + 1 month";
  puts "jd3 = jd1 + 13 months";
  put_jdutc "jd2" jd2;
  put_jdutc "jd3" jd3;
  puts "------";
  puts "jd4 = jd1 - 1 year and - 1 month";
  puts "jd5 = jd1 - 13 months";
  put_jdutc "jd4" jd4;
  put_jdutc "jd5" jd5;
  puts "------";
  puts "jd6 = endmonth jd1";
  puts "jd7 = jd6 + 1 month";
  put_jdutc "jd6" jd6;
  put_jdutc "jd7" jd7;
  puts "      N.B. Jan 31 + 1 month is Feb 29 not Mar 2";
  puts "------";
  puts "jd8 = jd7 + 1 month";
  puts "jd9 = endmonth jd8";
  put_jdutc "jd8" jd8;
  put_jdutc "jd9" jd9;
  puts "------";
  puts "jd10 = begmonth jd9";
  puts "jd11 = jd10 + 1 year - 1 month - 1 day";
  puts "jd12 = jd11 + 1 month";
  put_jdutc "jd10" jd10;
  put_jdutc "jd11" jd11;
  put_jdutc "jd12" jd12;
  puts "       N.B. Jan 31 + 1 month is Feb 28 not Mar 3";

  put_end "demo2";
end;

demo3 = ()
when
  put_beg "demo3 - converting to and from greg-tuples and time-strings";

  // convert from greg-tuple and string to jd
  jd1 = greg_to_jd (2000,01,15);
  jd2 = greg_to_jd (2000,01,15,0,0,0.0);
  jd3 = str_to_jd "2000-01-15";
  jd4 = str_to_jd "2000-01-15 00:00:00.000";
  if jd2 ~= jd1 then puts "long greg-tuple error" else ();
  if jd3 ~= jd1 then puts "short time-string error" else ();
  if jd4 ~= jd1 then puts "long time-string error" else ();

  // convert from jd to greg-tuple
  put_jdutc "jd1" jd1;
  y,m,d = jd_to_greg jd1;
  put_ymd (y,m,d);
  put_ymdhms (jd_to_greg (jd1,"long"));

  // convert from jd to string
  printf "jd1 - %s\n" ( jd_to_str jd1 );
  printf "jd1 - %s\n" ( jd_to_str (jd1,"long") );

  // convert from jd to unixtime and back
  ut1 = jd_to_unixtime jd1;
  printf "jd1 - seconds from Unix epoch (1971-01-01): %d\n" ut1;
  jd5 = unixtime_to_jd ut1;
  if jd5 ~= jd1 then puts "unixtime error" else ();
 
  put_end "demo3";
end;


demo4 = ()
when
  put_beg "demo4 - adapting to local time zone";

  // convert from local greg-tuple and local string to jd
  jd1 = greg_to_jd ("loc",2000,01,15);
  jd2 = greg_to_jd ("loc",2000,01,15,0,0,0.0);
  jd3 = str_to_jd ("loc","2000-01-15");
  jd4 = str_to_jd ("loc","2000-01-15 00:00:00.000");
  if jd2 ~= jd1 then puts "long greg-tuple error" else ();
  if jd3 ~= jd1 then puts "short time-string error" else ();
  if jd4 ~= jd1 then puts "long time-string error" else ();

  // convert from jd to local greg-tuple
  puts "---   jd1 printed out as utc values:";
  put_jdutc_long "jd1" jd1;
  put_ymdhms (jd_to_greg (jd1,"long"));
  printf "jd1 - %s\n" ( jd_to_str (jd1,"long") );

  puts "---   jd1 printed out as local values:";
  put_jdloc_long "jd1" jd1;
  put_ymdhms (jd_to_greg ("loc",jd1,"long"));
  printf "jd1 - %s\n" ( jd_to_str ("loc",jd1,"long") );

  put_end "demo4";
end;

/* run */

intro;