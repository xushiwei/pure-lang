
/* This is pretty much like the (Clojure) algorithm by Christophe Grand
   that was recently mentioned on Mike Fogus' blog, see http://blog.fogus.me/
   2011/10/18/programming-language-development-the-past-5-years/. */

using hashmap;

// for notational convenience
set = hashmap;
bag = hashmmap;

// for cosmetic purposes, order coordinate pairs lexicographically
(x1,y1) < (x2,y2) = x1<x2 || x1==x2 && y1<y2;

// helper function to calculate the frequencies of elements in a list
frequencies xs = [x=>#(s!x) | x = s] when s = bag xs end;

// the algorithm

neighbours (x,y) = [x+dx, y+dy | dx = -1..1; dy = -1..1; dx~=0 || dy~=0];

step b = sort (<) $ set
  [loc | loc=>n = frequencies $ catmap neighbours b;
   n==3 || n==2 && alive loc] when alive = member (set b) end;

// ASCII art rendering of a board b

board (x,y,w,h) b = strcat
  [string [if alive (x,y) then " o " else " . " | x = x..x+w-1] + "\n" |
   y = y..y+h-1] when alive = member (set b) end;

/* life (b[,n,w,h,x,y,t]) starts printing successive generations starting from
   an initial configuration b. The form of output can be selected with the
   optional parameters n,w,h,x,y,t as follows:

   - If n>0 then the given number of generations will be printed (including
     the initial configuration); otherwise, the procedure never stops until it
     gets interrupted by a signal (or runs out of memory).

   - If w>0 and h>0 then an ASCII facsimile of the board is printed,
     displaying a rectangular section of the board with the given width w and
     height h, starting from cell (x,y). In addition, the procedure pauses for
     t seconds after each iteration. Otherwise just the collection of live
     cells is printed for each generation, going as fast as possible (the t
     value is ignored in this case).

   The optional arguments *must* be specified in the indicated order. t may be
   any floating point value, the remaining options are all integers. For
   instance:

   > life blinker; // goes on forever, hit Ctrl+C to stop
   > life (blinker,10);
   > life (blinker,10,5,5);
   > life (blinker,10,5,5,-1,-1);
   > life (blinker,100,5,5,-1,-1,0.1);

   Instead of specifying the parameters for each call, you can also change the
   global defaults below. */

using system;

let w,h = 25,20; let x,y = 0,0; // section of the board to display
let t = 0.5; // pause between iterations (secs)
let n = 0; // number of iterations (0 means to go on forever)

life args = do f xs when
  // parse arguments
  b,n,x,y,w,h,t = case args of
    b,n,w,h,x,y,t | b,n,w,h,x,y | b,n,w,h,x | b,n,w,h | b,n,w | b,n |
    b = b,n,x,y,w,h,t;
  end;
  // check arguments (the "usage" exception will be picked up by the main
  // program below)
  all intpairp b && all intp [n,x,y,w,h] && realp t || throw "usage";
  t = double t;
  // figure out what to print and how
  xs = if n>0 then take n $ iterate step b else iterate step b;
  f  = if w>0 && h>0 then nanosleep.cst t.puts.board (x,y,w,h) else puts.str;
end with
  intpairp p = case p of (_::int,_::int) = true; _ = false end;
end;

/* Here are some sample configurations that you may want to try. Press Ctrl+C
   when you get bored.

   > life blinker;
   > life glider;
   > life (glider_gun,0,38);

   The glider gun needs some screen real estate, you probably have to maximize
   your terminal window for that one. */

let blinker = [(1,0),(1,1),(1,2)];

let glider =
  [(2,0),(2,1),(2,2),(1,2),(0,1)];

let glider_gun =
  [(1,5),(2,5),(1,6),(2,6),
   (11,5),(11,6),(11,7),
   (12,4),(12,8),
   (13,3),(13,9),(14,3),(14,9),
   (15,6),
   (16,8),(16,4),
   (17,5),(17,6),(17,7),(18,6),
   (21,5),(22,5),(21,4),(22,4),(21,3),(22,3),
   (23,6),(23,2),
   (25,6),(25,2),(25,7),(25,1),
   (35,4),(36,4),(35,3),(36,3)];

/* Main program: You can also compile the script to an executable (pure -c
   life.pure -o life) and invoke it from the command line. Examples:

   ./life glider
   ./life glider_gun -n100 -w38 -t0.1
   ./life blinker -x -1 -y -1 -w 5 -h 5 -t 0.1

   I hope that this is fairly self-explanatory; see below for a list of
   supported options. */

using getopt;

let opts = ["--number","--width","--height","--xcoord","--ycoord","--time"];
let full_opts = [s,s!![1,2],REQARG | s = opts];
let defaults = zipwith (=>) opts [n,w,h,x,y,t];

compiling || argc<=1 || main with
  main = catch usage $ (life.tuple.args) argv;
  args v = case getopt full_opts v of
    a,[_,b] = map eval (b : list (record (defaults+a)!!opts));
  end;
  usage _ = fprintf stderr "Usage: %s board [-nwhxyt arg ...]\n" (argv!0) $$
    exit 1;
end;
