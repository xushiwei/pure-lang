
TODO
====

While the interpreter is already useful as it is, there are still a few
features which would be nice to have in future releases. Most important items,
in no particular order:

- Symbolic (Pure-level) debugger, profiler. The necessary hooks are mostly
  there, we just need to add a few runtime calls in the generated code.

- Better error recovery in the parser. Unfortunately, Pure's terseness makes
  this rather difficult. The current panic mode recovery seems to cope
  surprisingly well with most common kinds of errors, although it might catch
  errors much too late in some cases.

- Add support for externals from languages with other calling conventions
  already fully supported by LLVM (Fortran, Ada?). A Q module adapter would
  also be useful, so that we can take advantage of the extensive set of
  system, GUI and multimedia libraries offered by Q.

- Interactive command to export the current program as an LLVM bitcode
  module which can then be compiled and linked (statically or dynamically)
  with other (C or Pure) modules. Likewise, offer an option which does the
  same from the command line.

- Multithreading support. This requires thread-local data instead of globals
  in a few places, and synchronization where interpreter globals are used
  (most notably, runtime compilation and expression memory management). We
  also need to add the necessary support functions to the runtime.

- Better support for proper tail calls. Currently this only works for direct
  calls. See the manual for details.

- More aggressive optimizations (common subexpression elimination for "pure"
  a.k.a. side-effect-free function calls, etc.).

- Support for Wadler views (or similar).
