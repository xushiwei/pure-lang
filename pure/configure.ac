
dnl To regenerate the configury after changes:
dnl autoconf -I config && autoheader -I config  (or just: make config)

AC_INIT(pure, 0.43)
AC_CONFIG_AUX_DIR(config)
dnl AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_HEADERS(config.h)
dnl Determine host information.
AC_CANONICAL_HOST
if test -z "${host}"; then
  host=unknown
fi
AC_DEFINE_UNQUOTED(HOST, "${host}", [Define to the name of the host system.])
AC_SUBST(host)
dnl Figure out special programs and filename extensions for various systems.
dnl XXXFIXME: This is probably incomplete.
DIFF="diff"
DLLEXT=".so"
rdynamic="-rdynamic"
case "$host" in
    *-*-mingw*)       DLLEXT=".dll"; DIFF="diff --strip-trailing-cr";;
    *-*-darwin*)      rdynamic=""; DLLEXT=".dylib";;
    hppa*-hp-hpux*)   rdynamic=""; DLLEXT=".sl";;
esac
AC_SUBST(DIFF)
AC_SUBST(DLLEXT)
AC_DEFINE_UNQUOTED(DLLEXT, "${DLLEXT}", [Define to the filename extension for shared libraries.])
dnl Check for programs.
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_CXX
if test -z "$BISON"; then
  AC_CHECK_PROG(BISON,bison,bison,bison-missing)
fi
if test "$BISON" = bison-missing; then
  AC_MSG_WARN([Cannot find bison, won't be able to regenerate parser.cc.])
fi
AC_ARG_VAR(BISON, [how to invoke bison (version 2.3 or later required)])
if test -z "$FLEX"; then
  AC_CHECK_PROG(FLEX,flex,flex,flex-missing)
fi
if test "$FLEX" = flex-missing; then
  AC_MSG_WARN([Cannot find flex, won't be able to regenerate lexer.cc.])
else
  flexminor=`"$FLEX" --version 2>&1 | sed -e 's,^flex 2\.5\.\(.*\),\1,'`
  if test "$flexminor" = "3" -o "$flexminor" = "4" -o "$flexminor" = "4a"; then
    AC_MSG_WARN([Your flex version is too old, consider installing flex 2.5.31 or newer.])
  fi
fi
AC_ARG_VAR(FLEX, [how to invoke flex (version 2.5.31 or later required)])
dnl Determine compiler characteristics.
AC_C_BIGENDIAN
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(size_t)
dnl Parse --enable options.
fastcc=yes
AC_ARG_ENABLE(fastcc,
  [  --enable-fastcc         enable fast calls/tail call optimization (default)],
  [case "${enableval}" in
    no)   fastcc=no ;;
  esac])
AC_ARG_ENABLE(debug,
  [  --enable-debug          enable the debug build],
  [case "${enableval}" in
    yes)  CXXFLAGS="-g"; CFLAGS="-g" ;;
  esac])
AC_ARG_ENABLE(debug2,
  [  --enable-debug2         enable the maintenance build],
  [case "${enableval}" in
    yes)  CPPFLAGS="$CPPFLAGS -DDEBUG=2"; CXXFLAGS="-g"; CFLAGS="-g" ;;
  esac])
AC_ARG_ENABLE(release,
  [  --enable-release        enable the release build],
  [case "${enableval}" in
    yes)  CPPFLAGS="$CPPFLAGS -DNDEBUG -DDEBUG=0"; CXXFLAGS="-O3";
          CFLAGS="-O3" ;;
  esac])
sharedlib=yes
AC_ARG_ENABLE(shared,
  [  --enable-shared         build the shared runtime library (default)],
  [case "${enableval}" in
    no)   LDFLAGS="$LDFLAGS $rdynamic"; sharedlib=no ;;
  esac])
AC_SUBST(sharedlib)
versioned=no
AC_ARG_ENABLE(versioned,
  [  --enable-versioned      versioned install],
  [case "${enableval}" in
    yes)  versioned=yes ;;
  esac])
AC_SUBST(versioned)
AC_ARG_ENABLE(warnings,
  [  --enable-warnings       enable compiler warnings (-Wall)],
  [case "${enableval}" in
    yes)  CXXFLAGS="$CXXFLAGS -Wall"; CFLAGS="$CFLAGS -Wall" ;;
  esac])
dnl Readline/libedit support.
vl_readline_libs="readline"
vl_editline_libs="edit editline"
AC_ARG_WITH(readline,
  [  --with-readline         readline support, if available (default)],
  [case "${withval}" in
     no)  vl_readline_libs="" ;;
   esac])
AC_ARG_WITH(editline,
  [  --with-editline         editline support, if available (default)],
  [case "${withval}" in
     no)  vl_editline_libs="" ;;
   esac])
if test -z "$vl_readline_libs" -a -z "$vl_editline_libs"; then
  vl_readline_libs=""
else
  vl_readline_libs="$vl_readline_libs $vl_editline_libs"
fi
vl_editline_libs=""
dnl Check for libraries.
AC_CHECK_LIB(gmp, __gmpz_init)
AC_CHECK_LIB(m, cos)
dnl On some systems iconv is in a separate library, and may actually be named
dnl libiconv.
AC_CHECK_LIB(iconv, libiconv)
if test $ac_cv_lib_iconv_libiconv = no; then
  AC_CHECK_LIB(iconv, iconv)
fi
dnl On non-POSIX systems like Windows, we have to get the glob and regex
dnl functions from separate libraries, too.
AC_CHECK_LIB(glob, glob)
AC_CHECK_LIB(regex, regcomp)
dnl readline/editline support (macro by Ville Laurikari).
AC_CHECK_READLINE
dnl iconv and nl_langinfo need special treatment (macros by Bruno Haible).
AM_ICONV
if test "$am_cv_func_iconv" != yes; then
  AC_MSG_ERROR([Cannot find iconv, please install GNU libiconv.])
fi
AM_LANGINFO_CODESET
dnl Determine how to get alloca.
AC_FUNC_ALLOCA
dnl Platform-dependent time functions.
AC_CHECK_FUNCS(ftime gettimeofday nanosleep usleep)
dnl Check for the dirent.h header and the readdir() function.
AC_CHECK_HEADERS([dirent.h])
AC_CHECK_FUNCS(readdir)
# Other platform-specific system functions.
AC_CHECK_HEADERS([sys/fcntl.h sys/wait.h])
AC_CHECK_FUNCS(fstat _setjmp _longjmp)
AC_CHECK_MEMBERS([struct stat.st_rdev])
dnl Platform specifics of signal handlers.
AC_REINSTALL_SIGHANDLERS
dnl Check to see whether we have POSIX/ISOC99 complex numbers.
AC_CHECK_TYPES([_Complex float, _Complex double])
dnl fastcc/tail call support.
if test $fastcc = yes; then
  AC_DEFINE(HAVE_FASTCC, 1, [Define to build with fastcc/TCO support (broken on some systems).])
fi
dnl Check for LLVM.
AC_CHECK_PROG(LLVMCONF,llvm-config,llvm-config,no)
if test "$LLVMCONF" = no; then
  AC_MSG_ERROR([Cannot find LLVM.])
fi
dnl Check for the new-style template arguments of the IRBuilder class.
AC_LANG_PUSH([C++])
save_CPPFLAGS=$CPPFLAGS
CPPFLAGS="`$LLVMCONF --cppflags` $CPPFLAGS"
AC_CACHE_CHECK([for new LLVM IRBuilder class (LLVM >= 2.6)], [pure_cv_new_builder26],
  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
       #include <llvm/LLVMContext.h>
       #include <llvm/Support/IRBuilder.h>
      ], [
        llvm::IRBuilder<> b(llvm::getGlobalContext());
      ])
    ], [pure_cv_new_builder26=yes], [pure_cv_new_builder26=no])
  ])
if test "$pure_cv_new_builder26" = yes; then
  AC_DEFINE(NEW_BUILDER, 1, [Define when building with new-style LLVM IRBuilder template class.])
  AC_DEFINE(LLVM26, 1, [Define when building with new-style LLVM API (LLVM 2.6 or later).])
AC_CACHE_CHECK([for new llvm::raw_fd_ostream interface (LLVM >= 2.7)], [pure_cv_new_ostream],
  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
	#include <string>
        #include <llvm/Support/raw_ostream.h>
      ], [
  	std::string error;
        llvm::raw_fd_ostream os("xxxjunk", error, llvm::raw_fd_ostream::F_Excl);
      ])
    ], [pure_cv_new_ostream=yes], [pure_cv_new_ostream=no])
  ])
if test "$pure_cv_new_ostream" = yes; then
  AC_DEFINE(NEW_OSTREAM, 1, [Define when building with new llvm::raw_fd_ostream interface (LLVM >= 2.7).])
fi
else
AC_CACHE_CHECK([for new LLVM IRBuilder class (LLVM >= 2.4)], [pure_cv_new_builder],
  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
       #include <llvm/Support/IRBuilder.h>
      ], [
        llvm::IRBuilder<> b;
      ])
    ], [pure_cv_new_builder=yes], [pure_cv_new_builder=no])
  ])
if test "$pure_cv_new_builder" = yes; then
  AC_DEFINE(NEW_BUILDER, 1, [Define when building with new-style LLVM IRBuilder template class.])
fi
fi
AC_CHECK_HEADERS([llvm/Support/raw_ostream.h llvm/Support/raw_os_ostream.h llvm/ModuleProvider.h])
AC_CHECK_DECLS([llvm::PerformTailCallOpt, llvm::GuaranteedTailCallOpt], [], [], [[#include <llvm/Target/TargetOptions.h>]])
CPPFLAGS=$save_CPPFLAGS
AC_LANG_POP([C++])

dnl Determine the LLVM version.
llvm_version=`$LLVMCONF --version`
AC_DEFINE_UNQUOTED(LLVM_VERSION, "${llvm_version}", [Define to the LLVM version string.])

dnl Output files.
AC_CONFIG_FILES([Makefile])
AC_OUTPUT

AC_MSG_RESULT([
Pure ${PACKAGE_VERSION} is now configured for LLVM ${llvm_version} on ${host}.

  Source directory:     ${srcdir}
  Installation prefix:  ${prefix}
  Versioned install:    $versioned
  C compiler:           $CC $CFLAGS $CPPFLAGS
  C++ compiler:         $CXX $CXXFLAGS $CPPFLAGS
  Linker:               $CXX $LDFLAGS $LIBS
  Readline support:	$rllib
  Build libpure:        $sharedlib
  fastcc/TCO support:   $fastcc

Now run 'make' to build everything, and 'make install' to install this
software on your system. To remove the installed software at a later
time use the 'make uninstall' command.
])
