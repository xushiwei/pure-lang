/*..
	
=================================== 
Fast Fibonacci and Lucas Algorithms
===================================
	
:Source:
:http://code.google.com/p/pure-lang/source/browse/pure/examples/fibonacci.pure 
:Author: Libor Spacek (C) <libors@gmail.com\> 
:License: GPL V3
:Date: March 2011
	
*/

/* fibonacci: simplified Dijkstra's method. Computes nth member of
   Fibonacci sequence (0,1,1,2,3,..)  with correct initial definitions
   and extended to accept negative n */

fibonacci 0 = 0;
fibonacci n::int 
	    = if (n and 1) 
	      then fibonacci (-n) else (-(fibonacci (-n))) if n<0; 
	    = fibs (pred n) ! 1
              with
		fibs 0 = 0L,1L; 
		fibs 1 = 1L,1L;
		fibs n::int = if n and 1
	           then b2+a2,((\x::bigint -> x*x)(a+b))-a2 
	           else b2-((\x::bigint -> x*x)(b-a)),b2+a2
		when a,b = fibs (n>>1); a2 = a*a; b2 = b*b end
	      end;

/* luc: two succesive terms of positive Lucas sequence (2,1,3,4,..) */

luc 0 = 2L,1L;
luc n::int = if (1 and n) then a*b+pm1,b*b+pm2 else a*a-pm2,a*b+pm1
     when 
       a,b = lucas (n>>1); 
       pm1,pm2 = if (2 and n) then 1,-2 else -1,2; 
     end; 

/* fastluc: faster than luc above, computes only squares and divides n
   by 4 at each step */

fastluc 0 = 2L,1L;
fastluc n::int = 
       case n and 3 of
	 0 = a4, ((b4-(a4<<1)) div 3);
	 1 = ((b4-(a4<<1)) div 3), ((b4+a4) div 3);
	 2 = ((b4+a4) div 3), (((b4<<1)-a4) div 3);
	 3 = (((b4<<1)-a4) div 3), b4; end
       when
	 pm2 = if (4 and n) then 2 else -2;
	 a,b = fastluc (n>>2); 
	 a2 = a*a+pm2; b2 = b*b-pm2; 
	 a4 = a2*a2-2; b4 = b2*b2-2;
       end;

// lucas: computes nth member of Lucas sequence, accepts negative n 

lucas 0 = 2L;
lucas n::int 
	= if (n and 1) then (-(fastluc (pred (-n)) ! 1)) 
	  else fastluc (pred (-n)) ! 1 if n<0;
	= fastluc (pred n) ! 1;
 
/* fastfib: the fastest way to compute Fn - using fastluc and
   Fn=(4L(n-4)+7L(n-3))/5, where L(m) is in Lucas sequence. Use this
   in preference to fibonacci above */

fastfib 0=0; fastfib 1=1; fastfib 2=1; fastfib 3=2; 
fastfib n::int  
	= if (n and 1) then fastfib (-n) else (-(fastfib (-n))) if n<0; 
	= ((a<<2)+7*b) div 5 when a,b = fastluc (n-4) end;
