
INSTALLING PURE (AND LLVM)
========== ==== ==== =====

These instructions (mostly by courtesy of Eddie Rucker, thanks Eddie!) explain
how to compile and install LLVM (which is the compiler backend required by
Pure) and the Pure interpreter itself. The instructions are somewhat biased
towards Linux and other Unix-like systems; the SYSTEM NOTES section at the end
of this file details the tweaks necessary to make Pure compile and run on
various other platforms. More information about installing LLVM and the
required LLVM source packages can be found at http://llvm.org.

Pure is known to work on Linux, FreeBSD, NetBSD, Mac OSX and MS Windows, and
should compile (with the usual amount of tweaking) on all recent UNIX/POSIX-
based platforms. We recommend using version 4.x of the GNU C++ compiler; it
should be available almost everywhere (in fact, since you'll need LLVM anyway,
you can also use the gcc frontend available for LLVM). You'll also need a
Bourne-compatible shell and GNU make, which are also readily available on
most platforms.

A binary package in msi format is provided for Windows users in the download
area of the pure-lang.googlecode.com project page. Ports and packages for
other systems are also available; see the SYSTEM NOTES section below for
details.


BASIC INSTALLATION
===== ============

The basic installation process is as follows. Note that steps 1-3 are only
required once. Steps 2-3 can be avoided if binary LLVM packages are available
for your system (but see the caveats about broken LLVM packages on some
systems below). Additional instructions for compiling Pure from SVN sources
can be found in the INSTALLING FROM SVN SOURCES section below. Moreover, you
can refer to the OTHER BUILD AND INSTALLATION OPTIONS section below for
details about various options available when building and installing Pure.

STEP 1. Make sure you have all the necessary dependencies installed (-dev
denotes corresponding development packages):

- GNU make, GNU C/C++ and the corresponding libraries;

- the GNU multiprecision library (libgmp, -dev);

In addition, the following will be required to compile the svn version (see
the INSTALLING FROM SVN SOURCES section below):

- autoconf;

- flex and bison;

- subversion (needed to fetch the SVN sources).

The following may be required to build some LLVM versions:

- GNU ltdl library (libltdl, -dev).

E.g., at the time of this writing the required packages for Ubuntu are:
autoconf, make, g++, g++ 4.0 multilib, flex, bison, libgmp3c2, libgmp3-dev,
libltdl3, libldtl3-dev, subversion. (To get command line editing in the
interactive interpreter, you also might wish to install the readline5-dev
package; see the comments on readline support below.)

All dependencies are available as free software. Here are some links if you
need or want to install the dependencies from source:

- Autoconf: http://www.gnu.org/software/autoconf

- GNU C/C++: http://gcc.gnu.org

- GNU make: http://www.gnu.org/software/make

- Flex: http://flex.sourceforge.net

- Bison: http://www.gnu.org/software/bison

- GMP: http://www.gnu.org/software/gmp

- GNU ltdl (part of the libtool software): http://www.gnu.org/software/libtool

- Subversion: http://subversion.tigris.org (There's also a very nice Windows
  frontend, TortoiseSVN, see http://tortoisesvn.tigris.org.)

NOTE: To make command line editing work in the interactive interpreter, you'll
also need GNU readline or some compatible replacement such as BSD editline/
libedit:

- GNU readline: http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html

- BSD editline/libedit: http://www.thrysoee.dk/editline

We recommend GNU readline because it's easier to use and has full UTF-8
support, but in some situations BSD editline/libedit may be preferable for
license reasons or because it's what the operating system provides. Pure's
configuration script automatically detects the presence of both packages and
also lets you disable readline and/or editline support using the
--without-readline and --without-editline options.

STEP 2. Get and unpack the latest LLVM sources at:
http://llvm.org/releases/download.html

You only need the llvm-2.x tarball which contains the LLVM library as well as
most of the LLVM toolchain. LLVM 2.6 is the latest stable release at the time
of this writing. LLVM versions 2.5, 2.6 and 2.7 have all been tested
extensively and are known to work with Pure. LLVM 2.3 and 2.4 might still
work, too, but you'll probably have to fiddle with the sources. We really
recommend using LLVM 2.5 or later, however, because there have been
substantial improvements in the LLVM JIT in recent releases. (Also note that
there are some x86-64 specific quirks with LLVM 2.3, see the notes on 64 bit
support in the SYSTEM NOTES section for details.)

LLVM from svn might work as well, but we don't guarantee this. While we're
committed to make Pure work with new LLVM versions as they become available,
we're not able to track LLVM development in the trunk very closely. So you
might run into intermittent compilation problems, bugs and other
incompatibilities when going with the svn version.

NOTE: Some (older) Linux and *BSD distributions provide LLVM packages and
ports which are compiled with wrong configure options and are thus broken. If
the Pure interpreter segfaults on startup or fails its test suite ('make
check') then you should check whether there's a newer LLVM package available
for your system, or compile LLVM yourself.

STEP 3. Configure, build and install LLVM as follows:

$ cd llvm-2.6
$ ./configure --enable-optimized --disable-assertions --disable-expensive-checks --enable-targets=host-only
$ make
$ sudo make install

*IMPORTANT:* With LLVM 2.5 and earlier, on x86-64 systems you have to add
--enable-pic to the configure command, so that the static LLVM libraries can
be linked into the Pure runtime library. (Do *not* add this option when
compiling on a 32 bit system, it's broken there.) With LLVM 2.6 and later this
option isn't needed anymore. See the comments on 32/64 bit support in the
SYSTEM NOTES section below for details.

Note that the configure flags are for an optimized (non-debug) build and
disable all compilation targets but the one for your system. You might wish to
play with the configure options, but note that some options (especially
--enable-expensive-checks) make LLVM very slow and may even break the Pure
interpreter on some systems.

STEP 4. Get and unpack the Pure sources at: http://pure-lang.googlecode.com

The source tarballs can always be found on Pure's Google Code project page.
See "Featured Downloads" for a quick link to the latest release.

STEP 5. Configure, build and install Pure as follows (x.y denotes the current
Pure version number):

$ cd pure-x.y
$ ./configure --enable-release
$ make
$ sudo make install

The --enable-release option configures Pure for a release build. This is
recommended for maximum performance. If you leave away this option then you'll
get a default build which includes debugging information and runtime checks
useful for the Pure maintainers, but also runs considerably slower.

To find out about other build options, you can invoke configure as
'./configure --help'.

The 'sudo make install' command installs the pure program, the runtime.h
header file, the runtime library libpure.so and the library scripts in the
appropriate subdirectories of /usr/local; the installation prefix can be
changed with the --prefix configure option, see OTHER BUILD AND INSTALLATION
OPTIONS for details. (The runtime.h header file is not needed for normal
operation, but can be used to write C/C++ extensions modules, if you need to
access and manipulate Pure expressions from C/C++.)

On some systems you have to tell the dynamic linker to update its cache so
that it finds the Pure runtime library. E.g., on Linux this is done as
follows:

$ sudo /sbin/ldconfig

After the build is complete, you can (and should) also run a few tests to
check that Pure is working correctly on your computer:

$ make check

If all is well, all tests should pass. If not, the test directory will contain
some *.diff files containing further information about the failed tests. In
that case please zip up the entire test directory and mail it to the author,
post it on the Pure mailing list, or enter a bug report at
http://code.google.com/p/pure-lang/issues/list. Also please include precise
information about your platform (operating system and cpu architecture) and
the Pure and LLVM versions or svn revision numbers you're running.

Note that 'make check' executes the 'run-tests' script which is generated at
configure time. If necessary, you can also run individual tests by running
run-tests directly (e.g., './run-tests test/test020.pure test/test047.pure')
or rerun only the tests that failed on the previous invocation ('./run-tests
-f' or, equivalently, 'make recheck').

Also note that MSYS 1.0.11 (or at least the diffutils package from that
version) is required to make 'make check' work on Windows. Also, under MS
Windows this step is expected to fail on some math tests in test020.pure; this
is nothing to worry about, it just indicates that some math routines in
Microsoft's C library aren't fully POSIX-compatible. The same applies to *BSD
systems.

If Pure appears to be broken on your system ('make check' reports a lot of
failures), it's often because of a miscompiled LLVM. Please review the
instructions under step 3, and check the SYSTEM NOTES section to see whether
your platform is known to have issues and which workarounds may be needed. If
all that doesn't help then you might be running into LLVM bugs and limitations
on not-so-well supported platforms; in that case please also report the
results of 'make check' as described above, so that we can try to figure out
what is going on and whether there's a fix or workaround for the problem.

STEP 6. The Pure interpreter should be ready to go now.

Run Pure interactively as:

$ pure
Pure 1.0 (x86_64-unknown-linux-gnu) Copyright (c) 2008-2010 by Albert Graef
This program is free software, and you are welcome to redistribute it under
certain conditions. There is ABSOLUTELY NO WARRANTY. (Type 'help copying'
for more information.)
Loaded prelude from /usr/local/lib/pure/prelude.pure.

Check that it works:

> 6*7;
42

Read the online documentation:

> help

This invokes the Pure manual; you need to have a html browser installed to
make this work. By default, the interpreter assumes w3m (a text-based
browser), you can change this by setting the BROWSER or the PURE_HELP variable
accordingly. For instance:

$ export BROWSER=firefox

The manual is also available in a number of other formats (you can find these
at the Pure website), and the Windows package includes a html help version of
the manual which can be read with the Windows help reader.

Exit the interpreter (you can also just type the end-of-file character at the
beginning of a line, i.e., Ctrl-D on Unix):

> quit

You can also run the interpreter from GNU Emacs (after running 'make', check
the etc subdirectory in the sources for pure-mode.el), and for Windows there
is a nice GUI application named "PurePad" which makes it easy to edit and run
your Pure scripts.


INSTALLING FROM SVN SOURCES
========== ==== === =======

The latest development version of Pure is available in its subversion (SVN)
source code repository. You can browse the repository at:

http://code.google.com/p/pure-lang/source/browse/

(See the trunk/pure subdirectory for the latest Pure sources.)

Note that if you're going with the development sources, you'll also need
fairly recent versions of autoconf, flex and bison (autoconf 2.63, flex 2.5.31
and bison 2.3 should be ok).

To compile from the development sources, replace steps 4 and 5 above with:

STEP 4': Fetch the SVN sources.

$ svn co http://pure-lang.googlecode.com/svn/trunk/pure pure

This fetches the latest development sources (the "trunk") from svn and puts it
into the 'pure' subdirectory in the current directory. This step needs to be
done only once; once you've checked out your working copy, you can update it
to the latest revision at any time by running 'svn up'.

(The above command is for an anonymous, read-only copy. Project members please
use https: instead of http: if you're planning to commit any changes. Also,
you might want to check out the entire trunk instead of just the trunk/pure
directory if you plan to also compile some of the addon modules, or the
complete svn tree if you want the whole shebang including all documentation
and wiki files.)

STEP 5': Configure, build and install Pure:

$ cd pure
$ autoreconf
$ ./configure --enable-release
$ make
$ sudo make install

Don't forget to also run 'make check' to make sure that the interpreter is in
good working condition.

Note that 'autoreconf' needs to be rerun any time you check out a new revision
of Pure which modifies configure.ac or acinclude.m4.


OTHER BUILD AND INSTALLATION OPTIONS
===== ===== === ============ =======

The Pure configure script takes a few options which enable you to change the
installation path and control a number of other build options. Moreover, there
are some environment variables which also affect compilation and installation.

Use './configure --help' to print a summary of the provided options.

INSTALLATION PATH
------------ ----

By default, the pure program, the runtime.h header file, the runtime library
and the library scripts are installed in /usr/local/bin,
/usr/local/include/pure, /usr/local/lib and /usr/local/lib/pure,
respectively. This can be changed by specifying the desired installation
prefix with the --prefix option, e.g.:

$ ./configure --enable-release --prefix=/usr

Note that if you install Pure into a non-standard location, you may have to
set LD_LIBRARY_PATH or a similar variable so that the dynamic linker finds the
Pure runtime library, libpure.so. Also, when compiling and linking addon
modules you might have to set C_INCLUDE_PATH and LIBRARY_PATH (or similar) so
that the header and library of the runtime library is found. On some systems
(notably, *BSD) this is even necessary with the default prefix, because
/usr/local is not in the default search paths.

In addition, the DESTDIR variable enables package maintainers to install Pure
into a special "staging" directory, so that installed files can be packaged
more easily. If set at installation time, DESTDIR will be used as an
additional prefix to all installation paths. For instance, the following
command will put all installed files into the tmp-root subdirectory of the
current directory:

$ make install DESTDIR=tmp-root

VERSIONED INSTALLATIONS
--------- -------------

Beginning with version 0.4, Pure fully supports parallel installations of
different versions of the interpreter. As of Pure 0.21, to enable this you
have to specify --enable-versioned when running configure:

$ ./configure --enable-release --enable-versioned

When this option is enabled, bin/pure, include/pure, lib/pure and
man/man1/pure.1 are actually symbolic links to the current version
(bin/pure-x.y, include/pure-x.y etc., where x.y is the version number). If you
install a new version of the interpreter, the old version remains available as
pure-x.y.

Note that versioned and unversioned installations don't mix very well, it's
either one or the other. If you already have an unversioned install of Pure,
you must first remove it before switching to the versioned scheme.

It *is* possible, however, to have versioned and unversioned installations
under different installation prefixes. For instance, having an unversioned
install under /usr and several versioned installations under /usr/local is ok.

SEPARATE BUILD DIRECTORY
-------- ----- ---------

It is possible to build Pure in a separate directory, in order to keep your
source tree tidy and clean, or to build multiple versions of the interpreter
with different compilation flags from the same source tree.

To these ends, just cd to the build directory and run configure and make
there, e.g. (this assumes that you start from the source directory):

$ mkdir BUILD
$ cd BUILD
$ ../configure --enable-release
$ make

COMPILER AND LINKER OPTIONS
-------- --- ------ -------

There are a number of environment variables you can set on the 'configure'
command line if you need special compiler or linker options:

- CPPFLAGS: preprocessor options (-I, -D, etc.)
- CXXFLAGS: C++ compilation options (-g, -O, etc.)
- CFLAGS:   C compilation options (-g, -O, etc.)
- LDFLAGS:  linker flags (-s, -L, etc.)
- LIBS:     additional objects and libraries (-lfoo, bar.o, etc.)

(The CFLAGS variable is only used to build the pure_main.o module which is
linked into batch-compiled executables, see "Batch Compilation" in the manual
for details.)

For instance, the following 'configure' command changes the default
compilation options to '-g' and adds '/opt/include' and '/opt/lib' to the
include and library search paths, respectively:

$ ./configure CPPFLAGS=-I/opt/include CXXFLAGS=-g LDFLAGS=-L/opt/lib

More details on the build and installation process and other available targets
and options can be found in the Makefile.

PREDEFINED BUILD TYPES
---------- ----- -----

For convenience, 'configure' provides some options to set up CPPFLAGS and
CXXFLAGS for various build types. Please note that most of these options
assume gcc right now, so if you use another compiler you'll probably have to
set up compilation flags manually by using the variables described in the
previous section instead.

The default build includes debugging information and additional runtime checks
which provide diagnostics useful for maintainers if anything is wrong with the
interpreter. It is also noticeably slower than the "release" build. If you
want to enjoy maximum performance, you should configure Pure for a release
build as follows:

$ ./configure --enable-release

This disables all runtime checks and debugging information in the interpreter,
and uses a higher optimization level (-O3), making the interpreter go
substantially faster on most systems.

To get smaller executables with either the default or the release build, add
'LDFLAGS=-s' to the 'configure' command (gcc only, other compilers may provide
a similar flag or a separate command to strip compiled executables and
libraries).

You can also do a "debug" build as follows:

$ ./configure --enable-debug

This is like the default build, but disables all optimizations, so compilation
is faster but the compiled interpreter is *much* slower than even the default
build. Hence this build is only recommended for debugging purposes.

You can combine all build types with the --enable-warnings option to enable
compiler warnings (-Wall):

$ ./configure --enable-release --enable-warnings

This option is useful to check the interpreter sources for questionable
constructs which might actually be bugs. However, for some older gcc versions
it spits out lots of bogus warnings, so it is not enabled by default.

In addition, there is an option to build a "monolithic" interpreter which is
linked statically against the LLVM libraries, instead of producing a separate
runtime library:

$ ./configure --enable-release --disable-shared

We strongly discourage from using this option, since it drastically increases
the size of the executable and thereby the memory footprint of the interpreter
if several interpreter processes are running simultaneously. It also makes it
impossible to use batch compilation and addon modules which require the
runtime library. We only provide this as a workaround for systems on which
LLVM refuses to be linked into shared libraries.

In general, the build options can be combined freely with the variables
described in the previous section, but note that --enable-release and
--enable-debug will always overwrite the value of CXXFLAGS. If this is a
problem then it is best to just set up the required flags manually using the
variables described in the previous section.

RUNNING PURE FROM THE SOURCE DIRECTORY
------- ---- ---- --- ------ ---------

After your build is done, you should also run 'make check' to verify that your
Pure interpreter works correctly. This can be done without installing the
software. In fact, there's no need to install the interpreter at all if you
just want to take it for a test drive, you can simply run it from the source
directory, if you set up the following environment variables (this assumes
that you built Pure in the source directory; when using a separate build
directory, you'll have to change the paths accordingly):

- LD_LIBRARY_PATH=. This is required on Linux systems so that libpure.so
  is found. Other systems may require an analogous setting, or none at all.

- PURELIB=./lib This is required on all systems so that the interpreter finds
  the prelude and other library scripts.

After that you should be able to run the Pure interpreter from the source
directory, by typing './pure'.

OTHER TARGETS
----- -------

The Makefile supports the usual 'clean' and 'distclean' targets, and
'realclean' will remove all files created by the maintainer, including test
logs and C++ source files generated from Flex and Bison grammars. (Only use
the latter if you know what you are doing, since it will remove files which
require special tools to be regenerated.)

There also are a number of targets like 'html' and 'pdf' which generate the
documentation in a variety of formats. These require the pure-doc program and
the docutils tools; see the Makefile for details.

Maintainers can roll distribution tarballs with 'make dist' and 'make
distcheck' (the latter is like 'make dist', but also does a test build and
installation to verify that your tarball contains all needed bits and pieces).

Last but not least, if you modify configure.ac for some reason then you can
regenerate the configure script and config.h.in with 'make config'. This needs
autoconf, of course. (The distribution was prepared using autoconf 2.63.)


SYSTEM NOTES
====== =====

Pure is known to work on recent Linux, Mac OSX and *BSD versions under x86,
x86-64 (AMD/Intel x86, 32 and 64 bit) and ppc (PowerPC), as well as on MS
Windows (AMD/Intel x86, 32 bit). There are a few known system-specific quirks
and corresponding workarounds which are discussed below.

ALL PLATFORMS
--- ---------

Compiling the default and release versions using gcc with all warnings turned
on (-Wall) might give you the warning "dereferencing type-punned pointer will
break strict-aliasing rules" at some point in util.cc with some gcc versions.
This is harmless and can be ignored.

If your Pure program runs out of stack space, the interpreter will segfault.
This is *not* a bug, it happens because runtime stack checks are disabled by
default for performance reasons. You can enable stack checks by setting the
PURE_STACK environment variable accordingly; see the Pure manual for details.
The interpreter will then generate orderly "stack fault" exceptions in case of
a stack overflow.

32 BIT SYSTEMS
-- --- -------

With LLVM 2.5 and earlier, the JIT is broken on x86-32 if it is built with
--enable-pic, so make sure you do *not* use this option when compiling LLVM
<=2.5 on 32 bit systems.

Some older LLVM 2.5 packages for Linux are broken on x86-32 for this reason
(this has been reported for Ubuntu 9.04 and Fedora Core 10), the symptom being
that the Pure interpreter fails a lot of checks and/or segfaults right at
startup. In that case you'll have to find a newer, corrected package or build
your own LLVM from source instead.

64 BIT SYSTEMS
-- --- -------

64 bit systems are fully supported by Pure (as far as LLVM supports them).

With LLVM 2.5 and earlier, building the Pure runtime library (libpure)
requires that you configure LLVM with --enable-pic so that the static LLVM
libraries can be linked into the runtime library. With LLVM 2.6 and later,
this option isn't needed anymore.

If you still use LLVM 2.3 on x86-64, there is a patch by Cyrille Berger which
you need to apply in the llvm-2.3 source directory to make that version link
properly with the Pure runtime library. The patch is available at:
http://pure-lang.googlecode.com/svn/wiki/X86JITInfo.cpp.pic.2.3.patch. After
applying the patch, configure LLVM with --enable-pic and build it as usual.

POWERPC
-------

You'll need Pure >= 0.35 and LLVM >= 2.6. Also make sure that you always
configure LLVM with --disable-expensive-checks and Pure with --disable-fastcc.
With these settings Pure should work fine on ppc (tested on ppc32 running
Fedora Core 11 and 12), but note that tail call optimization doesn't work on
this platform right now because of LLVM limitations.

LINUX
-----

Linux is the primary development platform for this software, and the sources
should build out of the box on all recent Linux distributions.

Binary packages for all recent openSUSE versions are maintained by Toni Graffy
as part of the Packman project, see: http://packman.links2linux.de. As a
convenience, Packman also provides a "pure-complete" package which installs
both the Pure interpreter and most addon modules in one go.

Michel Salim has kindly provided packages for all recent Fedora releases, see
http://koji.fedoraproject.org/koji/packageinfo?packageID=9272

Alvaro Castro Castilla has contributed a Gentoo ebuild, which is currently
available at http://bugs.gentoo.org/show_bug.cgi?id=231966. (This is rather
outdated, however, so you're probably better off building Pure from the latest
source.)

We're still looking for people who can maintain Debian packages, please let us
know if you want to help with that.

MAC OSX
--- ---

Pure should build fine on recent OSX versions, and a port by Ryan Schmidt
exists in the MacPorts collection, see http://www.macports.org/.

* PowerPC: Pure works fine when built with --disable-fastcc, see the POWERPC
  section above.

* Intel: The 32 bit version works fine. Unfortunately, the 64 bit version
  (Intel Core 2) causes problems, at least with some LLVM versions, apparently
  because of LLVM bugs in code generation. If you're running into this, for
  the time being you'll have to stick to the 32 bit version.

Also note that with at least some versions of the Apple gcc compiler, with all
warnings turned on you may get the (bogus) warning "control reaches end of
non-void function" a couple of times in interpreter.cc. These are due to a bug
in older gcc versions (see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16558),
but they are harmless and can be ignored. These warnings should also go away
once Apple upgrades its SDK to a newer gcc version.

*BSD
----

Recent NetBSD and FreeBSD versions have been tested and should work fine.
FreeBSD requires Pure 0.33 or later, if you have an earlier Pure version you
need to add -lpthread to the linker options by modifying the LIBS variable,
see the COMPILER AND LINKER OPTIONS section for details.

Note that, at the time of this writing, the LLVM port in the FreeBSD ports
collection is built with all assertions and checks enabled, so it's strongly
recommended that you compile LLVM yourself (in particular, make sure that LLVM
is built with --disable-expensive-checks).

Also note that building Pure requires GNU make, thus you will have to use
'gmake' instead of 'make'. In addition to gmake, you'll need recent versions
of the following packages: perl5, flex, bison, gmp, and readline (or
editline). Depending on your system, you might also have to set up some
compiler and linker paths. E.g., the following does the trick on NetBSD:

export C_INCLUDE_PATH=/usr/local/include:/usr/pkg/include
export LIBRARY_PATH=/usr/local/lib:/usr/pkg/lib
export LD_LIBRARY_PATH=/usr/pkg/lib:/usr/local/lib

MS WINDOWS
-- -------

Thanks to Jiri Spitz' perseverance, tireless testing and bug reports, the
sources compile and run fine on Windows, using the Mingw port of the GNU C++
compiler and the MSYS environment from http://www.mingw.org/. Just do the
usual './configure && make && make install'. You'll need LLVM, of course
(which builds with Mingw just fine), and a few additional libraries for which
headers and precompiled binaries are available from the Pure website
(http://pure-lang.googlecode.com).

However, the easiest way is to just go with the Pure MSI package available on
the Pure website. This includes all required libraries and some shortcuts to
run the Pure interpreter and read online documentation in html help format, as
well as "PurePad", an alternative GUI frontend for editing and running Pure
scripts on Windows.

After installing the MSI, you might also want to go to the LLVM website and
grab the LLVM toolchain for mingw32/x86. As of Pure 0.34, it is sufficient to
install the "LLVM binaries" package on your system to make the Pure batch
compiler work. Just unzip these into some convenient location on your
harddrive and set up PATH so that it points to the llvm-x.y directory.


March 2010
Albert Graef <Dr.Graef at t-online.de>
Eddie Rucker <erucker at bmc.edu>
