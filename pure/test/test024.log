upcase s/*0:1*/::string = s/*0:1*/-32 if s/*0:1*/!0>="a"&&s/*0:1*/!0<="z";
upcase s/*0:1*/::string = s/*0:1*/;
{
  rule #0: upcase s::string = s-32 if s!0>="a"&&s!0<="z"
  rule #1: upcase s::string = s
  state 0: #0 #1
	<var>::string state 1
  state 1: #0 #1
}
catmap upcase "ainsworth";
["A","I","N","S","W","O","R","T","H"]
single x/*0:1*/ = [x/*0:1*/];
{
  rule #0: single x = [x]
  state 0: #0
	<var> state 1
  state 1: #0
}
catmap (single.succ) (1..10);
[2,3,4,5,6,7,8,9,10,11]
listmap (\c/*0:*/ -> upcase c/*0:*/ {
  rule #0: c = upcase c
  state 0: #0
	<var> state 1
  state 1: #0
}) "ainsworth";
["A","I","N","S","W","O","R","T","H"]
listmap (\x/*0:*/ -> succ x/*0:*/ {
  rule #0: x = succ x
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10);
[2,3,4,5,6,7,8,9,10,11]
list (take 20 (listmap (\x/*0:*/ -> succ x/*0:*/ {
  rule #0: x = succ x
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..inf)));
[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
ones = 1:ones&;
ints = 1:zipwith (+) ints ones&;
{
  rule #0: ones = 1:ones&
  state 0: #0
}
{
  rule #0: ints = 1:zipwith (+) ints ones&
  state 0: #0
}
list (take 20 ints);
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
{
  rule #0: rats = catmap (\n -> catmap (\m -> if gcd m (n-m)==1 then [(m,n-m)] else []) (1..n-1)) (2..inf)
  state 0: #0
	<var> state 1
  state 1: #0
}
let rats = catmap (\n/*0:*/ -> catmap (\m/*0:*/ -> if gcd m/*0:*/ (n/*1:*/-m/*0:*/)==1 then [(m/*0:*/,n/*1:*/-m/*0:*/)] else [] {
  rule #0: m = if gcd m (n-m)==1 then [(m,n-m)] else []
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..n/*0:*/-1) {
  rule #0: n = catmap (\m -> if gcd m (n-m)==1 then [(m,n-m)] else []) (1..n-1)
  state 0: #0
	<var> state 1
  state 1: #0
}) (2..inf);
list (take 20 rats);
[(1,1),(1,2),(2,1),(1,3),(3,1),(1,4),(2,3),(3,2),(4,1),(1,5),(5,1),(1,6),(2,5),(3,4),(4,3),(5,2),(6,1),(1,7),(3,5),(5,3)]
list (take 20 (catmap (\i/*0:*/ -> listmap (\j/*0:*/ -> i/*1:*/,j/*0:*/ {
  rule #0: j = i,j
  state 0: #0
	<var> state 1
  state 1: #0
}) (i/*0:*/..inf) {
  rule #0: i = listmap (\j -> i,j) (i..inf)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..inf)));
[(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(1,11),(1,12),(1,13),(1,14),(1,15),(1,16),(1,17),(1,18),(1,19),(1,20)]
