
// Namespace brackets (Pure 0.56+).

// Abridged Faust DSL example.

outfix « »;
namespace faust («»);

// BDA operations

infixr 1110 <: :> ;	// merge/split composition
infixr 1120 : ;		// sequential composition
infixr 1130 , ;		// parallel composition
infixl 1140 ~ ;		// recursive composition

// other primitives

public sin cos tan;

namespace;

// For cosmetic purposes, remove the faust:: qualifiers on output.
__show__ x = strcat $ split "faust::" $ str x;

// Some examples.
dsp «(a,b,c) : (sin,cos,tan)»;

// Different pairs of (Unicode) outfix symbols.
outfix 〈 〉 〚 〛;
namespace faust (〈 〉);
namespace faust (〚 〛);
namespace;

dsp 〈(a,b,c) : (sin,cos,tan)〉;
dsp 〚(a,b,c) : (sin,cos,tan)〛;

// Qualified outfix symbols.
namespace faust with
outfix faust::begin faust::end;
end;
namespace faust (faust::begin faust::end);
namespace;

dsp faust::begin (a,b,c) : (sin,cos,tan) faust::end;

// Turn off the special processing of a namespace bracket.
namespace («»);
dsp «(a,b,c) : (sin,cos,tan)»;

// And turn it back on again.
namespace faust («»);
namespace;
dsp «(a,b,c) : (sin,cos,tan)»;

// Declare a namespace bracket for the default namespace.
outfix (: :);
namespace "" ((: :));

// Nesting namespace brackets.
dsp «(:a,b,c:) : (:sin,cos,tan:)»;

// Check proper resolution of local variables inside namespace brackets which
// happen to be symbols in the namespace (fixed in rev. 1f43a166cb56).
foo «sin:cos» = sin;
foo «0:sin»;
