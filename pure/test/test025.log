let x = {1,2,3;4,5,6};
x;
{1,2,3;4,5,6}
transpose x;
{1,4;2,5;3,6}
reverse x;
{6,5,4;3,2,1}
#x;
6
dim x;
2,3
redim (3,2) x;
{1,2;3,4;5,6}
x!(1,1);
5
x!!(0,0..2);
{1,2,3}
x!!(0..1,0..1);
{1,2;4,5}
diag x;
{1,5}
supdiag x 1;
{2}
subdiag x 1;
{4}
supdiag x 1===subdiag x (-1);
1
let x = {1.0,2.0,3.0;4.0,5.0,6.0};
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
transpose x;
{1.0,4.0;2.0,5.0;3.0,6.0}
reverse x;
{6.0,5.0,4.0;3.0,2.0,1.0}
#x;
6
dim x;
2,3
redim (3,2) x;
{1.0,2.0;3.0,4.0;5.0,6.0}
x!(1,1);
5.0
x!!(0,0..2);
{1.0,2.0,3.0}
x!!(0..1,0..1);
{1.0,2.0;4.0,5.0}
diag x;
{1.0,5.0}
supdiag x 1;
{2.0}
subdiag x 1;
{4.0}
supdiag x 1===subdiag x (-1);
1
let x = {1.0+:-2.0,2.0+:-4.0,3.0+:-6.0;4.0+:1.0,5.0+:2.0,6.0+:3.0};
x;
{1.0+:-2.0,2.0+:-4.0,3.0+:-6.0;4.0+:1.0,5.0+:2.0,6.0+:3.0}
transpose x;
{1.0+:-2.0,4.0+:1.0;2.0+:-4.0,5.0+:2.0;3.0+:-6.0,6.0+:3.0}
reverse x;
{6.0+:3.0,5.0+:2.0,4.0+:1.0;3.0+:-6.0,2.0+:-4.0,1.0+:-2.0}
#x;
6
dim x;
2,3
redim (3,2) x;
{1.0+:-2.0,2.0+:-4.0;3.0+:-6.0,4.0+:1.0;5.0+:2.0,6.0+:3.0}
x!(1,1);
5.0+:2.0
x!!(0,0..2);
{1.0+:-2.0,2.0+:-4.0,3.0+:-6.0}
x!!(0..1,0..1);
{1.0+:-2.0,2.0+:-4.0;4.0+:1.0,5.0+:2.0}
diag x;
{1.0+:-2.0,5.0+:2.0}
supdiag x 1;
{2.0+:-4.0}
subdiag x 1;
{4.0+:1.0}
supdiag x 1===subdiag x (-1);
1
let x = {1,2,3;4,5,6};
{
  rule #0: y = dmatrix x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = dmatrix x;
{
  rule #0: z = cmatrix y
  state 0: #0
	<var> state 1
  state 1: #0
}
let z = cmatrix y;
x;
{1,2,3;4,5,6}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
z;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
imatrix x===x;
1
dmatrix y===y;
1
cmatrix z===z;
1
imatrix y===x;
1
re z===y;
1
im z===dmatrix (dim x);
1
imatrix z;
{1,0,2,0,3,0;4,0,5,0,6,0}
dmatrix z;
{1.0,0.0,2.0,0.0,3.0,0.0;4.0,0.0,5.0,0.0,6.0,0.0}
{
  rule #0: dx = dmatrix 3
  state 0: #0
	<var> state 1
  state 1: #0
}
let dx = dmatrix 3;
{
  rule #0: ix = imatrix 3
  state 0: #0
	<var> state 1
  state 1: #0
}
let ix = imatrix 3;
{
  rule #0: cx = cmatrix 3
  state 0: #0
	<var> state 1
  state 1: #0
}
let cx = cmatrix 3;
smatrix dx;
{0.0,0.0,0.0}
smatrix ix;
{0,0,0}
smatrix cx;
{0.0+:0.0,0.0+:0.0,0.0+:0.0}
smatrixp (smatrix dx);
1
smatrixp (smatrix ix);
1
smatrixp (smatrix cx);
1
dmatrix {0.0,0};
{0.0,0.0}
imatrix {0.0,0};
{0,0}
cmatrix {0.0+:0.0,0};
{0.0+:0.0,0.0+:0.0}
dmatrix (smatrix dx);
{0.0,0.0,0.0}
imatrix (smatrix ix);
{0,0,0}
cmatrix (smatrix cx);
{0.0+:0.0,0.0+:0.0,0.0+:0.0}
let sx = {a,b,0.0};
smatrix sx;
{a,b,0.0}
smatrixp (smatrix sx);
1
dmatrix (0.0..10.0);
{0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0}
imatrix (0..10);
{0,1,2,3,4,5,6,7,8,9,10}
cmatrix (listmap (\x/*0:1*/ -> x/*0:1*/+:0 {
  rule #0: _ x = x+:0
  state 0: #0
	<var> state 1
  state 1: #0
}) (0..10));
{0.0+:0.0,1.0+:0.0,2.0+:0.0,3.0+:0.0,4.0+:0.0,5.0+:0.0,6.0+:0.0,7.0+:0.0,8.0+:0.0,9.0+:0.0,10.0+:0.0}
smatrix (0..10);
{0,1,2,3,4,5,6,7,8,9,10}
dmatrixp (dmatrix (0.0..10.0));
1
imatrixp (imatrix (0..10));
1
cmatrixp (cmatrix (listmap (\x/*0:1*/ -> x/*0:1*/+:0 {
  rule #0: _ x = x+:0
  state 0: #0
	<var> state 1
  state 1: #0
}) (0..10)));
1
smatrixp (smatrix (0..10));
1
dmatrix [];
{}
imatrix [];
{}
cmatrix [];
{}
smatrix [];
{}
dmatrixp (dmatrix []);
1
imatrixp (imatrix []);
1
cmatrixp (cmatrix []);
1
smatrixp (smatrix []);
1
let x = {1,2,3;4,5,6};
{
  rule #0: y = int_matrix_view (3,2) (pointer x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = int_matrix_view (3,2) (pointer x);
x;
{1,2,3;4,5,6}
y;
{1,2;3,4;5,6}
list x==list y;
1
dim x==reverse (dim y);
1
{
  rule #0: y = double_matrix (2,3) (double_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = double_matrix (2,3) (double_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
x==y;
1
{
  rule #0: y = float_matrix (2,3) (float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = float_matrix (2,3) (float_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
x==y;
1
{
  rule #0: y = complex_matrix (2,3) (complex_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_matrix (2,3) (complex_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = int_matrix (2,3) (int_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = int_matrix (2,3) (int_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: y = short_matrix (2,3) (short_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = short_matrix (2,3) (short_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: y = byte_matrix (2,3) (byte_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = byte_matrix (2,3) (byte_pointer #<pointer 0> x);
x;
{1,2,3;4,5,6}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: x = dmatrix {1,2,3;4,5,6}
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = dmatrix {1,2,3;4,5,6};
{
  rule #0: y = double_matrix_view (3,2) (pointer x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = double_matrix_view (3,2) (pointer x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,2.0;3.0,4.0;5.0,6.0}
list x==list y;
1
dim x==reverse (dim y);
1
{
  rule #0: y = double_matrix (2,3) (double_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = double_matrix (2,3) (double_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
x==y;
1
{
  rule #0: y = float_matrix (2,3) (float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = float_matrix (2,3) (float_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
x==y;
1
{
  rule #0: y = complex_matrix (2,3) (complex_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_matrix (2,3) (complex_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = int_matrix (2,3) (int_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = int_matrix (2,3) (int_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: y = short_matrix (2,3) (short_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = short_matrix (2,3) (short_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: y = byte_matrix (2,3) (byte_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = byte_matrix (2,3) (byte_pointer #<pointer 0> x);
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1,2,3;4,5,6}
x==y;
1
{
  rule #0: x = cmatrix {1,2,3;4,5,6}
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = cmatrix {1,2,3;4,5,6};
{
  rule #0: y = complex_matrix_view (3,2) (pointer x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_matrix_view (3,2) (pointer x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1.0+:0.0,2.0+:0.0;3.0+:0.0,4.0+:0.0;5.0+:0.0,6.0+:0.0}
list x==list y;
1
dim x==reverse (dim y);
1
{
  rule #0: z = double_matrix_view (2,6) (pointer x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let z = double_matrix_view (2,6) (pointer x);
z;
{1.0,0.0,2.0,0.0,3.0,0.0;4.0,0.0,5.0,0.0,6.0,0.0}
cat (listmap (\(a/*0:101*/+:b/*0:11*/) -> [a/*0:101*/,b/*0:11*/] {
  rule #0: _ (a+:b) = [a,b]
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	+: state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
}) x)==list z;
1
{
  rule #0: y = double_matrix (2,6) (double_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = double_matrix (2,6) (double_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1.0,0.0,2.0,0.0,3.0,0.0;4.0,0.0,5.0,0.0,6.0,0.0}
y==z;
1
{
  rule #0: y = float_matrix (2,6) (float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = float_matrix (2,6) (float_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1.0,0.0,2.0,0.0,3.0,0.0;4.0,0.0,5.0,0.0,6.0,0.0}
y==z;
1
{
  rule #0: y = complex_matrix (2,3) (complex_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_matrix (2,3) (complex_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = complex_float_matrix (2,3) (complex_float_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
x==y;
1
{
  rule #0: y = int_matrix (2,6) (int_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = int_matrix (2,6) (int_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1,0,2,0,3,0;4,0,5,0,6,0}
y==z;
1
{
  rule #0: y = short_matrix (2,6) (short_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = short_matrix (2,6) (short_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1,0,2,0,3,0;4,0,5,0,6,0}
y==z;
1
{
  rule #0: y = byte_matrix (2,6) (byte_pointer #<pointer 0> x)
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = byte_matrix (2,6) (byte_pointer #<pointer 0> x);
x;
{1.0+:0.0,2.0+:0.0,3.0+:0.0;4.0+:0.0,5.0+:0.0,6.0+:0.0}
y;
{1,0,2,0,3,0;4,0,5,0,6,0}
y==z;
1
{
  rule #0: x = dmatrix {1,2,3;4,5,6}
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = dmatrix {1,2,3;4,5,6};
{
  rule #0: f = \a -> a
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> a/*0:1*/ {
  rule #0: _ a = a
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
list y==map f (list x)&&dmatrixp y;
1
{
  rule #0: f = \a -> int a
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> int a/*0:1*/ {
  rule #0: _ a = int a
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1,2,3;4,5,6}
list y==map f (list x)&&imatrixp y;
1
{
  rule #0: f = \a -> if a<2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> if a/*0:1*/<2 then a/*0:1*/ else "a" {
  rule #0: _ a = if a<2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,"a","a";"a","a","a"}
list y==map f (list x)&&smatrixp y;
1
{
  rule #0: f = \a -> if a>2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> if a/*0:1*/>2 then a/*0:1*/ else "a" {
  rule #0: _ a = if a>2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{"a","a",3.0;4.0,5.0,6.0}
list y==map f (list x)&&smatrixp y;
1
{
  rule #0: y = foldl (+) 0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldl (+) 0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
21.0
y==foldl (+) 0 (list x);
1
{
  rule #0: y = foldl1 (+) x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldl1 (+) x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
21.0
y==foldl1 (+) (list x);
1
{
  rule #0: y = foldr (+) 0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldr (+) 0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
21.0
y==foldr (+) 0 (list x);
1
{
  rule #0: y = foldr1 (+) x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldr1 (+) x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
21.0
y==foldr1 (+) (list x);
1
{
  rule #0: f = \a -> a<4
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> a/*0:1*/<4 {
  rule #0: _ a = a<4
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = filter f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = filter f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,2.0,3.0}
list y==filter f (list x);
1
{
  rule #0: f = \i j -> i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1.0 {
  rule #0: _ i j = i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl f 0.0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl f 0.0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{0.0,2.0,5.0,9.0,14.0,20.0,27.0}
list y==scanl f 0.0 (list x);
1
{
  rule #0: f = \i j -> if doublep i then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> if doublep i/*0:01*/ then str (i/*0:01*/+j/*0:1*/) else 1.0 {
  rule #0: _ i j = if doublep i then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl f 0.0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl f 0.0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{0.0,"1.0",1.0,"4.0",1.0,"6.0",1.0}
list y==scanl f 0.0 (list x);
1
{
  rule #0: f = \i j -> i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1.0 {
  rule #0: _ i j = i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl1 f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl1 f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,4.0,8.0,13.0,19.0,26.0}
list y==scanl1 f (list x);
1
{
  rule #0: f = \i j -> if doublep i then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> if doublep i/*0:01*/ then str (i/*0:01*/+j/*0:1*/) else 1.0 {
  rule #0: _ i j = if doublep i then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl1 f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl1 f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,"3.0",1.0,"5.0",1.0,"7.0"}
list y==scanl1 f (list x);
1
{
  rule #0: f = \i j -> i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1.0 {
  rule #0: _ i j = i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanr f 0.0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr f 0.0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{27.0,25.0,22.0,18.0,13.0,7.0,0.0}
list y==scanr f 0.0 (list x);
1
{
  rule #0: f = \i j -> if doublep j then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> if doublep j/*0:1*/ then str (i/*0:01*/+j/*0:1*/) else 1.0 {
  rule #0: _ i j = if doublep j then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanr f 0.0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr f 0.0 x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{1.0,"3.0",1.0,"5.0",1.0,"6.0",0.0}
list y==scanr f 0.0 (list x);
1
{
  rule #0: f = \i j -> i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1.0 {
  rule #0: _ i j = i+j+1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanr1 f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr1 f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{26.0,24.0,21.0,17.0,12.0,6.0}
list y==scanr1 f (list x);
1
{
  rule #0: f = \i j -> if doublep j then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> if doublep j/*0:1*/ then str (i/*0:01*/+j/*0:1*/) else 1.0 {
  rule #0: _ i j = if doublep j then str (i+j) else 1.0
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanr1 f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr1 f x;
x;
{1.0,2.0,3.0;4.0,5.0,6.0}
y;
{"2.0",1.0,"4.0",1.0,"11.0",6.0}
list y==scanr1 f (list x);
1
{
  rule #0: x = imatrix {1,2,3;4,5,6}
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = imatrix {1,2,3;4,5,6};
{
  rule #0: f = \a -> a
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> a/*0:1*/ {
  rule #0: _ a = a
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1,2,3;4,5,6}
y;
{1,2,3;4,5,6}
list y==map f (list x)&&imatrixp y;
1
{
  rule #0: f = \a -> double a
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> double a/*0:1*/ {
  rule #0: _ a = double a
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1,2,3;4,5,6}
y;
{1.0,2.0,3.0;4.0,5.0,6.0}
list y==map f (list x)&&dmatrixp y;
1
{
  rule #0: f = \a -> if a<2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> if a/*0:1*/<2 then a/*0:1*/ else "a" {
  rule #0: _ a = if a<2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1,2,3;4,5,6}
y;
{1,"a","a";"a","a","a"}
list y==map f (list x)&&smatrixp y;
1
{
  rule #0: f = \a -> if a>2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> if a/*0:1*/>2 then a/*0:1*/ else "a" {
  rule #0: _ a = if a>2 then a else "a"
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{1,2,3;4,5,6}
y;
{"a","a",3;4,5,6}
list y==map f (list x)&&smatrixp y;
1
{
  rule #0: y = foldl (:) [] x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldl (:) [] x;
x;
{1,2,3;4,5,6}
y;
((((([]:1):2):3):4):5):6
y==foldl (:) [] (list x);
1
{
  rule #0: y = foldr (:) [] x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldr (:) [] x;
x;
{1,2,3;4,5,6}
y;
[1,2,3,4,5,6]
y==foldr (:) [] (list x);
1
{
  rule #0: f = \a -> a<4
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> a/*0:1*/<4 {
  rule #0: _ a = a<4
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = filter f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = filter f x;
x;
{1,2,3;4,5,6}
y;
{1,2,3}
list y==filter f (list x);
1
{
  rule #0: f = \i j -> i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1 {
  rule #0: _ i j = i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl f 0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl f 0 x;
x;
{1,2,3;4,5,6}
y;
{0,2,5,9,14,20,27}
list y==scanl f 0 (list x);
1
{
  rule #0: f = \i j -> i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1 {
  rule #0: _ i j = i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanl f 0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl f 0 x;
x;
{1,2,3;4,5,6}
y;
{0,2,5,9,14,20,27}
list y==scanl f 0 (list x);
1
{
  rule #0: f = \i j -> i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \i/*0:01*/ j/*0:1*/ -> i/*0:01*/+j/*0:1*/+1 {
  rule #0: _ i j = i+j+1
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: y = scanr f 0 x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr f 0 x;
x;
{1,2,3;4,5,6}
y;
{27,25,22,18,13,7,0}
list y==scanr f 0 (list x);
1
let x = {"1","2","3";"aa","bb","cc"};
{
  rule #0: f = \_ -> 1.0
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \_/*0:1*/ -> 1.0 {
  rule #0: _ _ = 1.0
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{1.0,1.0,1.0;1.0,1.0,1.0}
list y==map f (list x)&&dmatrixp y;
1
{
  rule #0: f = \_ -> 1
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \_/*0:1*/ -> 1 {
  rule #0: _ _ = 1
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{1,1,1;1,1,1}
list y==map f (list x)&&imatrixp y;
1
{
  rule #0: f = \a -> a
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> a/*0:1*/ {
  rule #0: _ a = a
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = map f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = map f x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{"1","2","3";"aa","bb","cc"}
list y==map f (list x)&&smatrixp y;
1
{
  rule #0: y = foldl (+) "0" x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldl (+) "0" x;
x;
{"1","2","3";"aa","bb","cc"}
y;
"0123aabbcc"
y==foldl (+) "0" (list x);
1
{
  rule #0: y = foldr (+) "0" x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = foldr (+) "0" x;
x;
{"1","2","3";"aa","bb","cc"}
y;
"123aabbcc0"
y==foldr (+) "0" (list x);
1
{
  rule #0: f = \a -> #a==1
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = \a/*0:1*/ -> #a/*0:1*/==1 {
  rule #0: _ a = #a==1
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: y = filter f x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = filter f x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{"1","2","3"}
list y==filter f (list x);
1
{
  rule #0: y = scanl (+) "" x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanl (+) "" x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{"","1","12","123","123aa","123aabb","123aabbcc"}
list y==scanl (+) "" (list x);
1
{
  rule #0: y = scanr (+) "" x
  state 0: #0
	<var> state 1
  state 1: #0
}
let y = scanr (+) "" x;
x;
{"1","2","3";"aa","bb","cc"}
y;
{"123aabbcc","23aabbcc","3aabbcc","aabbcc","bbcc","cc",""}
list y==scanr (+) "" (list x);
1
all (\x/*0:1*/ -> x/*0:1*/>0 {
  rule #0: _ x = x>0
  state 0: #0
	<var> state 1
  state 1: #0
}) {};
1
any (\x/*0:1*/ -> x/*0:1*/>0 {
  rule #0: _ x = x>0
  state 0: #0
	<var> state 1
  state 1: #0
}) {};
0
do foo {};
()
map succ {};
{}
zipwith (+) {} {};
{}
zipwith (+) {a,b} {};
{}
zipwith (+) {} {a,b};
{}
zipwith (+) {a;b} {};
{}
zipwith (+) {} {a;b};
{}
zip3 {} {} {};
{}
zip3 {a,b} {A,B} {};
{}
zip3 {a,b} {} {A,B};
{}
zip3 {} {a,b} {A,B};
{}
zip3 {a;b} {A;B} {};
{}
zip3 {a;b} {} {A;B};
{}
zip3 {} {a;b} {A;B};
{}
foldl (+) 0 {};
0
foldl1 (+) {};
foldl1 (+) {}
foldr (+) 0 {};
0
foldr1 (+) {};
foldr1 (+) {}
scanl (+) 0 {};
{0}
scanl1 (+) {};
{}
scanr (+) 0 {};
{0}
scanr1 (+) {};
{}
dim (zipwith (+) {a,b} (redim (0,2) {}));
0,2
dim (zipwith (+) (redim (0,2) {}) {a,b});
0,2
rowcatmap (\x/*0:1*/ -> colmap (\y/*0:1*/ -> x/*1:1*/,y/*0:1*/ {
  rule #0: _ y = x,y
  state 0: #0
	<var> state 1
  state 1: #0
}) [a,b] {
  rule #0: _ x = colmap (\y -> x,y) [a,b]
  state 0: #0
	<var> state 1
  state 1: #0
}) [1,2];
{(1,a),(1,b);(2,a),(2,b)}
rowcatmap (\x/*0:1*/ -> colmap (\y/*0:1*/ -> x/*1:1*/,y/*0:1*/ {
  rule #0: _ y = x,y
  state 0: #0
	<var> state 1
  state 1: #0
}) {a,b} {
  rule #0: _ x = colmap (\y -> x,y) {a,b}
  state 0: #0
	<var> state 1
  state 1: #0
}) {1;2};
{(1,a),(1,b);(2,a),(2,b)}
rowcatmap (\x/*0:1*/ -> colmap (\y/*0:1*/ -> x/*1:1*/,y/*0:1*/ {
  rule #0: _ y = x,y
  state 0: #0
	<var> state 1
  state 1: #0
}) {a,b} {
  rule #0: _ x = colmap (\y -> x,y) {a,b}
  state 0: #0
	<var> state 1
  state 1: #0
}) {1;2}===rowcatmap (\x/*0:1*/ -> colmap (\y/*0:1*/ -> x/*1:1*/,y/*0:1*/ {
  rule #0: _ y = x,y
  state 0: #0
	<var> state 1
  state 1: #0
}) [a,b] {
  rule #0: _ x = colmap (\y -> x,y) [a,b]
  state 0: #0
	<var> state 1
  state 1: #0
}) [1,2];
1
rowcatmap (\x/*0:1*/ -> colmap (\y/*0:1*/ -> x/*1:1*/,y/*0:1*/ {
  rule #0: _ y = x,y
  state 0: #0
	<var> state 1
  state 1: #0
}) {a,b;c,d} {
  rule #0: _ x = colmap (\y -> x,y) {a,b;c,d}
  state 0: #0
	<var> state 1
  state 1: #0
}) {1,2;3,4};
{(1,a),(1,b),(2,a),(2,b);(1,c),(1,d),(2,c),(2,d);(3,a),(3,b),(4,a),(4,b);(3,c),(3,d),(4,c),(4,d)}
