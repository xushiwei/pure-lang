'__lambda__ [x] (x+1);
__lambda__ [x] (x+1)
foo = '__lambda__ [x] (x+1);
{
  rule #0: foo = '__lambda__ [x] (x+1)
  state 0: #0
}
foo;
__lambda__ [x] (x+1)
bar (__lambda__ [x/*0:10101*/,y/*0:101101*/] z/*0:11*/) = '__lambda__ [y/*0:101101*/,x/*0:10101*/] z/*0:11*/;
{
  rule #0: bar (__lambda__ [x,y] z) = '__lambda__ [y,x] z
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	__lambda__ state 3
  state 3: #0
	<app> state 4
  state 4: #0
	<app> state 5
  state 5: #0
	: state 6
  state 6: #0
	<var> state 7
  state 7: #0
	<app> state 8
  state 8: #0
	<app> state 9
  state 9: #0
	: state 10
  state 10: #0
	<var> state 11
  state 11: #0
	[] state 12
  state 12: #0
	<var> state 13
  state 13: #0
}
bar ('__lambda__ [a,b] (a-b));
__lambda__ [b,a] (a-b)
baz x/*0:1*/ = '__lambda__ [x/*0:1*/] (x/*0:1*/+1);
{
  rule #0: baz x = '__lambda__ [x] (x+1)
  state 0: #0
	<var> state 1
  state 1: #0
}
baz y;
__lambda__ [y] (y+1)
let h = '__case__ 99 [x __ttag__ int __eq__ (x+1 __if__ x>0)];
h;
__case__ 99 [x __ttag__ int __eq__ (x+1 __if__ x>0)]
eval h;
100
let h = '(x+1 __when__ [x __ttag__ int __eq__ 99]);
h;
x+1 __when__ [x __ttag__ int __eq__ 99]
eval h;
100
let h = '(f 99 __with__ [f (x __ttag__ int) __eq__ x+1]);
h;
f 99 __with__ [f (x __ttag__ int) __eq__ x+1]
eval h;
100
