foo x/*0:1*/ = x/*0:1*/ if x/*0:1*/>=0;
bar = bar/*0*/ with bar x/*0:1*/ = x/*0:1*/ if x/*0:1*/>=0 {
  rule #0: bar x = x if x>=0
  state 0: #0
	<var> state 1
  state 1: #0
} end;
{
  rule #0: foo x = x if x>=0
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: bar = bar with bar x = x if x>=0 end
  state 0: #0
}
let f = foo;
{
  rule #0: g = bar
  state 0: #0
	<var> state 1
  state 1: #0
}
let g = bar;
f 12;
12
g 12;
12
foo x/*0:1*/ = -x/*0:1*/ if x/*0:1*/<0;
{
  rule #0: foo x = x if x>=0
  rule #1: foo x = -x if x<0
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
}
evalcmd "clear bar";
""
bar = bar/*0*/ with bar x/*0:1*/ = x/*0:1*/ if x/*0:1*/>=0; bar x/*0:1*/ = -x/*0:1*/ if x/*0:1*/<0 {
  rule #0: bar x = x if x>=0
  rule #1: bar x = -x if x<0
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end;
{
  rule #0: bar = bar with bar x = x if x>=0; bar x = -x if x<0 end
  state 0: #0
}
f 12;
12
g 12;
12
let f = foo;
{
  rule #0: g = bar
  state 0: #0
	<var> state 1
  state 1: #0
}
let g = bar;
f 12;
12
g 12;
12
f (-12);
12
g (-12);
12
