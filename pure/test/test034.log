quasiquote::qq (quote (foo 1 2 (unquote (3/4)) (5/6)));
foo 1 2 0.75 (5/6)
quasiquote::qq (quote (foo 1 2 (splice (quote [2/3,3/4])) (5/6)));
foo 1 2 (2/3) (3/4) (5/6)
quasiquote::qq (quote (foo 1 2 (splice (quote x/*0:*/)) (5/6))) when x/*0:*/ = quote [2/3,3/4] {
  rule #0: x = quote [2/3,3/4]
  state 0: #0
	<var> state 1
  state 1: #0
} end;
foo 1 2 (2/3) (3/4) (5/6)
quasiquote::qq (quote (splice (quote [foo,2/3,3/4]) (5/6)));
foo (2/3) (3/4) (5/6)
{
  rule #0: x = quasiquote::qq (quote (a (quasiquote::qq (quote (b (unquote (1+2)) (unquote (foo (unquote (1+3)) d)) e))) f))
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = quasiquote::qq (quote (a (quasiquote::qq (quote (b (unquote (1+2)) (unquote (foo (unquote (1+3)) d)) e))) f));
x;
a (quasiquote (b (unquote (1+2)) (unquote (foo 4 d)) e)) f
eval x;
a (b 3 (foo 4 d) e) f
