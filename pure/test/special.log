publicp x/*0:1*/ :: symbol = symbolp (val (str x/*0:1*/));
{
  rule #0: publicp x::symbol = symbolp (val (str x))
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: syms = catmap (\sym -> if publicp sym&&~null (get_fundef sym) then [sym] else []) (globsym "*" 0)
  state 0: #0
	<var> state 1
  state 1: #0
}
let syms = catmap (\sym/*0:1*/ -> if publicp sym/*0:1*/&&~null (get_fundef sym/*0:1*/) then [sym/*0:1*/] else [] {
  rule #0: _ sym = if publicp sym&&~null (get_fundef sym) then [sym] else []
  state 0: #0
	<var> state 1
  state 1: #0
}) (globsym "*" 0);
{
  rule #0: R = listmap (\sym -> sym __with__ get_fundef sym) syms
  state 0: #0
	<var> state 1
  state 1: #0
}
let R = listmap (\sym/*0:1*/ -> sym/*0:1*/ __with__ get_fundef sym/*0:1*/ {
  rule #0: _ sym = sym __with__ get_fundef sym
  state 0: #0
	<var> state 1
  state 1: #0
}) syms;
{
  rule #0: R2 = catmap (\x -> if (stringp s&&index s "#<"<0&&(eval (sprintf "'(%s)" (__str__ x))$$null lasterr) when s = __str__ x end) then [x] else []) R
  state 0: #0
	<var> state 1
  state 1: #0
}
'((!!) __with__ [(x!!ns __type__ matrix-->x!!list ns),(x!!(ns __type__ matrix,ms)-->x!!(list ns,ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ matrix)-->x!!(ns,list ms)),(x!!(ns __type__ int,ms)-->x!!([ns],ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ int)-->x!!(ns,[ms])),(x __type__ matrix!!(ns,ms)-->__case__ (ns,ms) [(ns __as__ (n:_),ms __as__ (m:_)-->submat x (n,m) (#ns,#ms) __if__ cont ns&&cont ms),(_-->colcatmap (mth (rowcatmap (nth x) ns)) ms)] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(mth x m-->catch (cst {}) (col x m)),(nth x n-->catch (cst {}) (row x n))]),(x __type__ matrix!!ns-->__ifelse__ (all intp ns&&packed x) (rowvector x!!([0],ns)) (colcatmap (nth x) ns) __with__ [nth x n-->catch (cst {}) {x!n}]),(s __type__ string!!ns-->__case__ ns [(ns __as__ (n:_)-->substr s n (count ns) __if__ cont ns),(_-->string (chars s!!ns))] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns)]),(xs __as__ ()!!ns-->tuple (list xs!!ns)),(xs __as__ (_,_)!!ns-->tuple (list xs!!ns)),(xs!!ns-->ys __if__ ok ys __when__ [ys-->__case__ ns [(ns __as__ (n __type__ int:_)-->list (take (count ns) (drop n xs)) __if__ listp xs&&cont ns),(_-->catmap (nth xs) ns)]] __with__ [(cont (n __type__ int:ns)-->~thunkp ns&&__case__ ns [([]-->1),(m __type__ int:_-->cont ns __if__ m==n+1),(_-->0)]),(nth xs n-->catch (cst []) [xs!n]),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns),(ok (catmap (nth _) _)-->0),(ok _-->1)]),(x __as__ Array _!!(is,js)-->listmap (__lambda__ [i] (cat (listmap (__lambda__ [j] (catch (cst []) [x!i!j])) js))) is)]);
'(($) __with__ [f$x-->f x]);
'(($$) __with__ [x$$y-->y]);
'((%) __with__ [(x __type__ bigint%0L-->x div 0L),(x __type__ bigint%y __type__ bigint-->(-x)%(-y) __if__ y<0),(x __type__ bigint%y __type__ bigint-->x div d%(y div d) __if__ d>1 __when__ [d-->gcd x y]),(x __type__ int%y __type__ bigint-->bigint x%y),(x __type__ bigint%y __type__ int-->x%bigint y),(x __type__ int%y __type__ int-->bigint x%bigint y),(x1%y1%(x2%y2)-->x1*y2%(y1*x2)),(x1%y1%x2 __type__ int-->x1%(y1*x2)),(x1%y1%x2 __type__ bigint-->x1%(y1*x2)),(x1 __type__ int%(x2%y2)-->x1*y2%x2),(x1 __type__ bigint%(x2%y2)-->x1*y2%x2),(z1 __as__ (_+:_)%z2 __as__ (_<:_)-->z1/z2),(z1 __as__ (_<:_)%z2 __as__ (_+:_)-->z1/z2),((x1+:y1)%(x2+:y2)-->(x1*x2+y1*y2)%d+:(y1*x2-x1*y2)%d __when__ [d-->x2*x2+y2*y2]),((r1<:t1)%(r2<:t2)-->r1%r2<:t1-t2),((x1+:y1)%x2-->x1*x2%d+:y1*x2%d __when__ [d-->x2*x2] __if__ realp x2),(x1%(x2+:y2)-->x1*x2%d+:(-x1*y2)%d __when__ [d-->x2*x2+y2*y2] __if__ realp x1),((r1<:t1)%x2-->r1%x2<:t1 __if__ realp x2),(x1%(r2<:t2)-->x1%r2<:-t2 __if__ realp x1),(x __type__ double%y-->x/y __if__ numberp y),(x%y __type__ double-->x/y __if__ numberp x)]);
'((&) __with__ [x&-->x]);
'((&&) __with__ [(x __type__ int&&y-->__ifelse__ x y x),(y&&x __type__ int-->__ifelse__ x y x)]);
'((') __with__ ['x-->x]);
'((*) __with__ [(x __type__ int*y __type__ int-->x*y),(x __type__ double*y __type__ double-->x*y),(x __type__ int*y __type__ double-->x*y),(x __type__ double*y __type__ int-->x*y),(x __type__ bigint*y __type__ bigint-->__C::bigint_mul x y),(x __type__ int*y __type__ bigint-->bigint x*y),(x __type__ bigint*y __type__ int-->x*bigint y),(x __type__ bigint*y __type__ double-->double x*y),(x __type__ double*y __type__ bigint-->x*double y),((x1+:y1)*(x2+:y2)-->x1*x2-y1*y2+:x1*y2+y1*x2),((r1<:t1)*(r2<:t2)-->r1*r2<:t1+t2),(z1 __as__ (x1+:y1)*z2 __as__ (r2<:t2)-->z1*rect z2),(z1 __as__ (r1<:t1)*z2 __as__ (x2+:y2)-->rect z1*z2),(z1 __as__ (x1+:y1)*x2-->z1*rect x2 __if__ realp x2),(x1*z2 __as__ (x2+:y2)-->rect x1*z2 __if__ realp x1),((r1<:t1)*x2-->r1*x2<:t1 __if__ realp x2),(x1*(r2<:t2)-->x1*r2<:t2 __if__ realp x1),(x1%y1*(x2%y2)-->x1*x2%(y1*y2)),(x1%y1*x2 __type__ int-->x1*x2%y1),(x1%y1*x2 __type__ bigint-->x1*x2%y1),(x1 __type__ int*(x2%y2)-->x1*x2%y2),(x1 __type__ bigint*(x2%y2)-->x1*x2%y2),(x1%y1*x2-->x1/y1*x2 __if__ numberp x2),(x1*(x2%y2)-->x1*(x2/y2) __if__ numberp x1),(d1 __as__ Dict _*d2 __as__ Dict _-->d1-(d1-d2)),(d1 __as__ MDict _*d2 __as__ MDict _-->d1-(d1-d2)),(d1 __as__ HDict _*d2 __as__ HDict _-->d1-(d1-d2)),(d1 __as__ HMDict _*d2 __as__ HMDict _-->d1-(d1-d2)),(m1 __as__ HMDict _*m2-->m1*hmdict m2 __if__ xdictp m2),(m1*m2 __as__ HMDict _-->hmdict m1*m2 __if__ xdictp m1),(m1 __as__ HDict _*m2-->__case__ m2 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->m1*hdict m2)] __if__ xdictp m2),(m1*m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->hdict m1*m2)] __if__ xdictp m2),(m1 __as__ MDict _*m2 __as__ Dict _-->m1*mdict m2),(m1 __as__ Dict _*m2 __as__ MDict _-->mdict m1*m2),(m1 __as__ Set _*m2 __as__ Set _-->m1-(m1-m2)),(m1 __as__ Bag _*m2 __as__ Bag _-->m1-(m1-m2)),(m1 __as__ HSet _*m2 __as__ HSet _-->m1-(m1-m2)),(m1 __as__ HBag _*m2 __as__ HBag _-->m1-(m1-m2)),(m1 __as__ HBag _*m2-->m1*hbag m2 __if__ xsetp m2),(m1*m2 __as__ HBag _-->hbag m1*m2 __if__ xsetp m1),(m1 __as__ HSet _*m2-->__case__ m2 [(Bag _-->hbag m1*hbag m2),(Set _-->m1*hset m2)] __if__ xsetp m2),(m1*m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1*hbag m2),(Set _-->hset m1*m2)] __if__ xsetp m2),(m1 __as__ Bag _*m2 __as__ Set _-->m1*bag m2),(m1 __as__ Set _*m2 __as__ Bag _-->bag m1*m2)]);
'((+) __with__ [(x __type__ int+y __type__ int-->x+y),(x __type__ double+y __type__ double-->x+y),(x __type__ int+y __type__ double-->x+y),(x __type__ double+y __type__ int-->x+y),(x __type__ bigint+y __type__ bigint-->__C::bigint_add x y),(x __type__ int+y __type__ bigint-->bigint x+y),(x __type__ bigint+y __type__ int-->x+bigint y),(x __type__ bigint+y __type__ double-->double x+y),(x __type__ double+y __type__ bigint-->x+double y),(s __type__ string+n __type__ int-->chr (ord s+n) __if__ #s==1),(s __type__ string+t __type__ string-->__C::string_concat s t),(s __type__ string+[]-->chars s),(s __type__ string+xs __as__ (_:_)-->chars s+xs),([]+s __type__ string-->chars s),(xs __as__ (_:_)+s __type__ string-->xs+chars s),([]+ys-->ys),(xs __as__ (_:_)+ys-->tick [] xs ys __with__ [(tick zs (x:xs) ys-->tack (x:zs) ((xs+ys)&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),((x1+:y1)+(x2+:y2)-->x1+x2+:y1+y2),(z1 __as__ (r1<:t1)+z2 __as__ (r2<:t2)-->polar (rect z1+rect z2)),(z1 __as__ (x1+:y1)+z2 __as__ (r2<:t2)-->z1+rect z2),(z1 __as__ (r1<:t1)+z2 __as__ (x2+:y2)-->rect z1+z2),((x1+:y1)+x2-->x1+x2+:y1 __if__ realp x2),(x1+(x2+:y2)-->x1+x2+:y2 __if__ realp x1),(z1 __as__ (r1<:t1)+x2-->z1+polar x2 __if__ realp x2),(x1+z2 __as__ (r2<:t2)-->polar x1+z2 __if__ realp x1),(x1%y1+x2%y2-->(x1*y2+x2*y1)%(y1*y2)),(x1%y1+x2 __type__ int-->(x1+x2*y1)%y1),(x1%y1+x2 __type__ bigint-->(x1+x2*y1)%y1),(x1 __type__ int+x2%y2-->(x1*y2+x2)%y2),(x1 __type__ bigint+x2%y2-->(x1*y2+x2)%y2),(x1%y1+x2-->x1/y1+x2 __if__ numberp x2),(x1+x2%y2-->x1+x2/y2 __if__ numberp x1),(d1 __as__ Dict _+d2 __as__ Dict _-->foldl insert d1 (members d2)),(d1 __as__ MDict _+d2 __as__ MDict _-->foldl insert d1 (members d2)),(d1 __as__ HDict _+d2 __as__ HDict _-->foldl insert d1 (members d2)),(d1 __as__ HMDict _+d2 __as__ HMDict _-->foldl insert d1 (members d2)),(m1 __as__ HMDict _+m2-->m1+hmdict m2 __if__ xdictp m2),(m1+m2 __as__ HMDict _-->hmdict m1+m2 __if__ xdictp m1),(m1 __as__ HDict _+m2-->__case__ m2 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->m1+hdict m2)] __if__ xdictp m2),(m1+m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->hdict m1+m2)] __if__ xdictp m2),(m1 __as__ MDict _+m2 __as__ Dict _-->m1+mdict m2),(m1 __as__ Dict _+m2 __as__ MDict _-->mdict m1+m2),(m1 __as__ Set _+m2 __as__ Set _-->foldl insert m1 (members m2)),(m1 __as__ Bag _+m2 __as__ Bag _-->foldl insert m1 (members m2)),(m1 __as__ HSet _+m2 __as__ HSet _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2 __as__ HBag _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2-->m1+hbag m2 __if__ xsetp m2),(m1+m2 __as__ HBag _-->hbag m1+m2 __if__ xsetp m1),(m1 __as__ HSet _+m2-->__case__ m2 [(Bag _-->hbag m1+hbag m2),(Set _-->m1+hset m2)] __if__ xsetp m2),(m1+m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1+hbag m2),(Set _-->hset m1+m2)] __if__ xsetp m2),(m1 __as__ Bag _+m2 __as__ Set _-->m1+bag m2),(m1 __as__ Set _+m2 __as__ Bag _-->bag m1+m2)]);
'((,) __with__ [(x,()-->x),((),y-->y),((x,y),z-->x,y,z)]);
'((-) __with__ [(x __type__ int-y __type__ int-->x-y),(x __type__ double-y __type__ double-->x-y),(x __type__ int-y __type__ double-->x-y),(x __type__ double-y __type__ int-->x-y),(x __type__ bigint-y __type__ bigint-->__C::bigint_sub x y),(x __type__ int-y __type__ bigint-->bigint x-y),(x __type__ bigint-y __type__ int-->x-bigint y),(x __type__ bigint-y __type__ double-->double x-y),(x __type__ double-y __type__ bigint-->x-double y),(s __type__ string-n __type__ int-->chr (ord s-n) __if__ #s==1&&ord s>=n),(s __type__ string-t __type__ string-->ord s-ord t __if__ #s==1&&#t==1),((x1+:y1)-(x2+:y2)-->x1-x2+:y1-y2),(z1 __as__ (r1<:t1)-z2 __as__ (r2<:t2)-->polar (rect z1-rect z2)),(z1 __as__ (x1+:y1)-z2 __as__ (r2<:t2)-->z1-rect z2),(z1 __as__ (r1<:t1)-z2 __as__ (x2+:y2)-->rect z1-z2),((x1+:y1)-x2-->x1-x2+:y1 __if__ realp x2),(x1-(x2+:y2)-->x1-x2+:-y2 __if__ realp x1),(z1 __as__ (r1<:t1)-x2-->z1-polar x2 __if__ realp x2),(x1-z2 __as__ (r2<:t2)-->polar x1-z2 __if__ realp x1),(x1%y1-x2%y2-->(x1*y2-x2*y1)%(y1*y2)),(x1%y1-x2 __type__ int-->(x1-x2*y1)%y1),(x1%y1-x2 __type__ bigint-->(x1-x2*y1)%y1),(x1 __type__ int-x2%y2-->(x1*y2-x2)%y2),(x1 __type__ bigint-x2%y2-->(x1*y2-x2)%y2),(x1%y1-x2-->x1/y1-x2 __if__ numberp x2),(x1-x2%y2-->x1-x2/y2 __if__ numberp x1),(d1 __as__ Dict _-d2 __as__ Dict _-->foldl delete_val d1 (members d2)),(d1 __as__ MDict _-d2 __as__ MDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HDict _-d2 __as__ HDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HMDict _-d2 __as__ HMDict _-->foldl delete_val d1 (members d2)),(m1 __as__ HMDict _-m2-->m1-hmdict m2 __if__ xdictp m2),(m1-m2 __as__ HMDict _-->hmdict m1-m2 __if__ xdictp m1),(m1 __as__ HDict _-m2-->__case__ m2 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->m1-hdict m2)] __if__ xdictp m2),(m1-m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->hdict m1-m2)] __if__ xdictp m2),(m1 __as__ MDict _-m2 __as__ Dict _-->m1-mdict m2),(m1 __as__ Dict _-m2 __as__ MDict _-->mdict m1-m2),(m1 __as__ Set _-m2 __as__ Set _-->foldl delete m1 (members m2)),(m1 __as__ Bag _-m2 __as__ Bag _-->foldl delete m1 (members m2)),(m1 __as__ HSet _-m2 __as__ HSet _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2 __as__ HBag _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2-->m1-hbag m2 __if__ xsetp m2),(m1-m2 __as__ HBag _-->hbag m1-m2 __if__ xsetp m1),(m1 __as__ HSet _-m2-->__case__ m2 [(Bag _-->hbag m1-hbag m2),(Set _-->m1-hset m2)] __if__ xsetp m2),(m1-m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1-hbag m2),(Set _-->hset m1-m2)] __if__ xsetp m2),(m1 __as__ Bag _-m2 __as__ Set _-->m1-bag m2),(m1 __as__ Set _-m2 __as__ Bag _-->bag m1-m2)]);
'((.) __with__ [(f.g) x-->f (g x)]);
'((..) __with__ [(n __type__ int..m __type__ int-->__C::pure_int_seq n m 1),(n1 __type__ int:n2 __type__ int..m __type__ int-->__C::pure_int_seq n1 m (n2-n1) __if__ n1~=n2),(n __type__ double..m __type__ double-->__C::pure_double_seq n m 1.0 __if__ ~infp n&&~infp m),(n __type__ int..m __type__ double-->__C::pure_double_seq (double n) m 1.0 __if__ ~infp m),(n __type__ double..m __type__ int-->__C::pure_double_seq n (double m) 1.0 __if__ ~infp n),(n1 __type__ double:n2 __type__ double..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ double-->__C::pure_double_seq (double n1) m (n2-n1) __if__ ~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ double..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(n1 __type__ int:n2 __type__ int..m __type__ double-->__C::pure_double_seq (double n1) m (double (n2-n1)) __if__ ~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ int-->__C::pure_double_seq (double n1) (double m) (n2-n1) __if__ n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(a __type__ string..b __type__ string-->map chr (ord a..ord b) __if__ charp a&&charp b),(a __type__ string:b __type__ string..c __type__ string-->map chr (ord a:ord b..ord c) __if__ charp a&&charp b&&charp c),(n1:n2..m-->__ifelse__ (nanp n1||nanp m||double m===-s) [] (__ifelse__ (double m===s) (iterate (flip (+) k) n1) (iterwhile (p u) (flip (+) k) n1)) __when__ [(s,p-->__ifelse__ (k>0) (inf,cmp (>=)) (-inf,cmp (<=)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]]),(u-->__ifelse__ (doublep k||doublep m) (m+0.5*k) m)] __if__ realp k&&k~=0&&~infp n1&&~infp n2 __when__ [k-->n2-n1]),(n..m-->__ifelse__ (nanp n||nanp m||double m===-inf) [] (__ifelse__ (double m===inf) (iterate (flip (+) 1) n) (iterwhile (cmp (>=) m) (flip (+) 1) n)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]] __if__ realp (m-n)&&~listp n&&~infp n)]);
'((<) __with__ [(x __type__ int<y __type__ int-->x<y),(x __type__ double<y __type__ double-->x<y),(x __type__ int<y __type__ double-->x<y),(x __type__ double<y __type__ int-->x<y),(x __type__ bigint<y __type__ bigint-->__C::bigint_cmp x y<0),(x __type__ int<y __type__ bigint-->bigint x<y),(x __type__ bigint<y __type__ int-->x<bigint y),(x __type__ bigint<y __type__ double-->double x<y),(x __type__ double<y __type__ bigint-->x<double y),(x __type__ string<y __type__ string-->__C::strcmp x y<0),(x1%y1<x2%y2-->x1*y2<x2*y1),(x1%y1<x2-->x1<x2*y1 __if__ realp x2),(x1<x2%y2-->x1*y2<x2 __if__ realp x2),(d1 __as__ Dict _<d2 __as__ Dict _-->d1<=d2&&~d1>=d2),(d1 __as__ MDict _<d2 __as__ MDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HDict _<d2 __as__ HDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HMDict _<d2 __as__ HMDict _-->d1<=d2&&~d1>=d2),(m1 __as__ HMDict _<m2-->m1<hmdict m2 __if__ xdictp m2),(m1<m2 __as__ HMDict _-->hmdict m1<m2 __if__ xdictp m1),(m1 __as__ HDict _<m2-->__case__ m2 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->m1<hdict m2)] __if__ xdictp m2),(m1<m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->hdict m1<m2)] __if__ xdictp m2),(m1 __as__ MDict _<m2 __as__ Dict _-->m1<mdict m2),(m1 __as__ Dict _<m2 __as__ MDict _-->mdict m1<m2),(m1 __as__ Set _<m2 __as__ Set _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ Bag _<m2 __as__ Bag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HSet _<m2 __as__ HSet _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2 __as__ HBag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2-->m1<hbag m2 __if__ xsetp m2),(m1<m2 __as__ HBag _-->hbag m1<m2 __if__ xsetp m1),(m1 __as__ HSet _<m2-->__case__ m2 [(Bag _-->hbag m1<hbag m2),(Set _-->m1<hset m2)] __if__ xsetp m2),(m1<m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<hbag m2),(Set _-->hset m1<m2)] __if__ xsetp m2),(m1 __as__ Bag _<m2 __as__ Set _-->m1<bag m2),(m1 __as__ Set _<m2 __as__ Bag _-->bag m1<m2)]);
'((<:) __with__ [(r __type__ int<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ bigint<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ double<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __type__ int-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ bigint-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ double-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ int-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ bigint-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ double-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r __as__ (_%_)<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __as__ (_%_)-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __as__ (_%_)-->r<:3.14159265358979 __if__ t==-3.14159265358979)]);
'((<<) __with__ [(x __type__ int<<y __type__ int-->x<<y),(x __type__ bigint<<y __type__ int-->__C::bigint_shl x y __if__ y>=0),(x __type__ bigint<<y __type__ int-->__C::bigint_shr x (-y))]);
'((<=) __with__ [(x __type__ int<=y __type__ int-->x<=y),(x __type__ double<=y __type__ double-->x<=y),(x __type__ int<=y __type__ double-->x<=y),(x __type__ double<=y __type__ int-->x<=y),(x __type__ bigint<=y __type__ bigint-->__C::bigint_cmp x y<=0),(x __type__ int<=y __type__ bigint-->bigint x<=y),(x __type__ bigint<=y __type__ int-->x<=bigint y),(x __type__ bigint<=y __type__ double-->double x<=y),(x __type__ double<=y __type__ bigint-->x<=double y),(x __type__ string<=y __type__ string-->__C::strcmp x y<=0),(x1%y1<=x2%y2-->x1*y2<=x2*y1),(x1%y1<=x2-->x1<=x2*y1 __if__ realp x2),(x1<=x2%y2-->x1*y2<=x2 __if__ realp x2),(d1 __as__ Dict _<=d2 __as__ Dict _-->cmp (members d1) (members d2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->0 __if__ xk<yk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->cmp xs1 ys __if__ yk<xk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->eq xv yv&&cmp xs ys),(eq u v-->__case__ (u==v) [(res __type__ int-->res),(_-->u===v)])]),(d1 __as__ MDict _<=d2 __as__ MDict _-->null (d1-d2)),(d1 __as__ HDict _<=d2 __as__ HDict _-->null (d1-d2)),(d1 __as__ HMDict _<=d2 __as__ HMDict _-->null (d1-d2)),(m1 __as__ HMDict _<=m2-->m1<=hmdict m2 __if__ xdictp m2),(m1<=m2 __as__ HMDict _-->hmdict m1<=m2 __if__ xdictp m1),(m1 __as__ HDict _<=m2-->__case__ m2 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->m1<=hdict m2)] __if__ xdictp m2),(m1<=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->hdict m1<=m2)] __if__ xdictp m2),(m1 __as__ MDict _<=m2 __as__ Dict _-->m1<=mdict m2),(m1 __as__ Dict _<=m2 __as__ MDict _-->mdict m1<=m2),(m1 __as__ Set _<=m2 __as__ Set _-->cmp (members m1) (members m2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ (x:xs)) (y:ys)-->0 __if__ x<y),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs1 ys __if__ y<x),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs ys)]),(m1 __as__ HSet _<=m2 __as__ HSet _-->all (member m2) (members m1)),(m1 __as__ Bag _<=m2 __as__ Bag _-->null (m1-m2)),(m1 __as__ HBag _<=m2 __as__ HBag _-->null (m1-m2)),(m1 __as__ HBag _<=m2-->m1<=hbag m2 __if__ xsetp m2),(m1<=m2 __as__ HBag _-->hbag m1<=m2 __if__ xsetp m1),(m1 __as__ HSet _<=m2-->__case__ m2 [(Bag _-->hbag m1<=hbag m2),(Set _-->m1<=hset m2)] __if__ xsetp m2),(m1<=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<=hbag m2),(Set _-->hset m1<=m2)] __if__ xsetp m2),(m1 __as__ Bag _<=m2 __as__ Set _-->m1<=bag m2),(m1 __as__ Set _<=m2 __as__ Bag _-->bag m1<=m2)]);
'((===) __with__ [x===y-->same x y]);
'((>) __with__ [(x __type__ int>y __type__ int-->x>y),(x __type__ double>y __type__ double-->x>y),(x __type__ int>y __type__ double-->x>y),(x __type__ double>y __type__ int-->x>y),(x __type__ bigint>y __type__ bigint-->__C::bigint_cmp x y>0),(x __type__ int>y __type__ bigint-->bigint x>y),(x __type__ bigint>y __type__ int-->x>bigint y),(x __type__ bigint>y __type__ double-->double x>y),(x __type__ double>y __type__ bigint-->x>double y),(x __type__ string>y __type__ string-->__C::strcmp x y>0),(x1%y1>x2%y2-->x1*y2>x2*y1),(x1%y1>x2-->x1>x2*y1 __if__ realp x2),(x1>x2%y2-->x1*y2>x2 __if__ realp x2),(d1 __as__ Dict _>d2 __as__ Dict _-->d1>=d2&&~d1<=d2),(d1 __as__ MDict _>d2 __as__ MDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HDict _>d2 __as__ HDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HMDict _>d2 __as__ HMDict _-->d1>=d2&&~d1<=d2),(m1 __as__ HMDict _>m2-->m1>hmdict m2 __if__ xdictp m2),(m1>m2 __as__ HMDict _-->hmdict m1>m2 __if__ xdictp m1),(m1 __as__ HDict _>m2-->__case__ m2 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->m1>hdict m2)] __if__ xdictp m2),(m1>m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->hdict m1>m2)] __if__ xdictp m2),(m1 __as__ MDict _>m2 __as__ Dict _-->m1>mdict m2),(m1 __as__ Dict _>m2 __as__ MDict _-->mdict m1>m2),(m1 __as__ Set _>m2 __as__ Set _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ Bag _>m2 __as__ Bag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HSet _>m2 __as__ HSet _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2 __as__ HBag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2-->m1>hbag m2 __if__ xsetp m2),(m1>m2 __as__ HBag _-->hbag m1>m2 __if__ xsetp m1),(m1 __as__ HSet _>m2-->__case__ m2 [(Bag _-->hbag m1>hbag m2),(Set _-->m1>hset m2)] __if__ xsetp m2),(m1>m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>hbag m2),(Set _-->hset m1>m2)] __if__ xsetp m2),(m1 __as__ Bag _>m2 __as__ Set _-->m1>bag m2),(m1 __as__ Set _>m2 __as__ Bag _-->bag m1>m2)]);
'((>=) __with__ [(x __type__ int>=y __type__ int-->x>=y),(x __type__ double>=y __type__ double-->x>=y),(x __type__ int>=y __type__ double-->x>=y),(x __type__ double>=y __type__ int-->x>=y),(x __type__ bigint>=y __type__ bigint-->__C::bigint_cmp x y>=0),(x __type__ int>=y __type__ bigint-->bigint x>=y),(x __type__ bigint>=y __type__ int-->x>=bigint y),(x __type__ bigint>=y __type__ double-->double x>=y),(x __type__ double>=y __type__ bigint-->x>=double y),(x __type__ string>=y __type__ string-->__C::strcmp x y>=0),(x1%y1>=x2%y2-->x1*y2>=x2*y1),(x1%y1>=x2-->x1>=x2*y1 __if__ realp x2),(x1>=x2%y2-->x1*y2>=x2 __if__ realp x2),(d1 __as__ Dict _>=d2 __as__ Dict _-->d2<=d1),(d1 __as__ MDict _>=d2 __as__ MDict _-->null (d2-d1)),(d1 __as__ HDict _>=d2 __as__ HDict _-->null (d2-d1)),(d1 __as__ HMDict _>=d2 __as__ HMDict _-->null (d2-d1)),(m1 __as__ HMDict _>=m2-->m1>=hmdict m2 __if__ xdictp m2),(m1>=m2 __as__ HMDict _-->hmdict m1>=m2 __if__ xdictp m1),(m1 __as__ HDict _>=m2-->__case__ m2 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->m1>=hdict m2)] __if__ xdictp m2),(m1>=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->hdict m1>=m2)] __if__ xdictp m2),(m1 __as__ MDict _>=m2 __as__ Dict _-->m1>=mdict m2),(m1 __as__ Dict _>=m2 __as__ MDict _-->mdict m1>=m2),(m1 __as__ Set _>=m2 __as__ Set _-->m2<=m1),(m1 __as__ HSet _>=m2 __as__ HSet _-->all (member m1) (members m2)),(m1 __as__ Bag _>=m2 __as__ Bag _-->null (m2-m1)),(m1 __as__ HBag _>=m2 __as__ HBag _-->null (m2-m1)),(m1 __as__ HBag _>=m2-->m1>=hbag m2 __if__ xsetp m2),(m1>=m2 __as__ HBag _-->hbag m1>=m2 __if__ xsetp m1),(m1 __as__ HSet _>=m2-->__case__ m2 [(Bag _-->hbag m1>=hbag m2),(Set _-->m1>=hset m2)] __if__ xsetp m2),(m1>=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>=hbag m2),(Set _-->hset m1>=m2)] __if__ xsetp m2),(m1 __as__ Bag _>=m2 __as__ Set _-->m1>=bag m2),(m1 __as__ Set _>=m2 __as__ Bag _-->bag m1>=m2)]);
'((>>) __with__ [(x __type__ int>>y __type__ int-->x>>y),(x __type__ bigint>>y __type__ int-->__C::bigint_shr x y __if__ y>=0),(x __type__ bigint>>y __type__ int-->__C::bigint_shl x (-y))]);
'((^) __with__ [(1.0^y __type__ double-->1.0),((-1.0)^y __type__ double-->1.0 __if__ infp y),(x __type__ double^y __type__ double-->__C::pow x y),(x __type__ int^y __type__ int-->double x^double y),(x __type__ bigint^y __type__ bigint-->double x^double y),(x __type__ int^y __type__ bigint-->double x^double y),(x __type__ bigint^y __type__ int-->double x^double y),(x __type__ double^y __type__ int-->x^double y),(x __type__ double^y __type__ bigint-->x^double y),(x __type__ int^y __type__ double-->double x^y),(x __type__ bigint^y __type__ double-->double x^y),(z1 __as__ (_+:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(z1 __as__ (_<:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(x1^z2 __as__ (_+:_)-->exp (ln (rect x1)*z2) __if__ realp x1),(x1^z2 __as__ (_<:_)-->exp (ln (polar x1)*z2) __if__ realp x1),((x1%y1)^(x2%y2)-->(x1/y1)^(x2/y2)),((x1%y1)^x2-->(x1/y1)^x2 __if__ numberp x2),(x1^(x2%y2)-->x1^(x2/y2) __if__ numberp x1)]);
'(pure_quoted_symbol __with__ [pure_quoted_symbol (s __type__ string)-->pure_quoted_symbol id __if__ id>0 __when__ [id __type__ int-->__C::pure_getsym s]]);
'(record_elem_at __with__ [record_elem_at x y-->throw out_of_bounds]);
'(abs __with__ [(abs (x __type__ int)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ bigint)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ double)-->__ifelse__ (x>0) x (-x)),(abs (x+:y)-->sqrt (x*x+y*y)),(abs (r<:t)-->r),(abs (x%y)-->abs x%y)]);
'(acos __with__ [(acos (x __type__ int)-->acos (double x)),(acos (x __type__ bigint)-->acos (double x)),(acos (z __as__ (x+:y))-->-i*ln (z+i*sqrt (1-z*z))),(acos (z __as__ (r<:t))-->-i*ln (z+i*sqrt (1-z*z))),(acos (x%y)-->acos (x/y))]);
'(acosh __with__ [(acosh (x __type__ int)-->acosh (double x)),(acosh (x __type__ bigint)-->acosh (double x)),(acosh (z __as__ (x+:y))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (z __as__ (r<:t))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (x%y)-->acosh (x/y))]);
'(all __with__ [(all p (x __type__ matrix)-->__C::matrix_all p x),(all p (s __type__ string)-->all p (chars s)),(all p []-->1),(all p (x:xs)-->__ifelse__ (p x) (all p xs) 0)]);
'((and) __with__ [(x __type__ int and y __type__ int-->x and y),(x __type__ bigint and y __type__ bigint-->__C::bigint_and x y),(x __type__ int and y __type__ bigint-->bigint x and y),(x __type__ bigint and y __type__ int-->x and bigint y)]);
'(any __with__ [(any p (x __type__ matrix)-->__C::matrix_any p x),(any p (s __type__ string)-->any p (chars s)),(any p []-->0),(any p (x:xs)-->__ifelse__ (p x) 1 (any p xs))]);
'(applp __with__ [applp x-->typep ('appl) x]);
'(arg __with__ [(arg (x+:y)-->atan2 y x),(arg (r<:t)-->t),(arg (x __type__ int)-->atan2 0 x),(arg (x __type__ bigint)-->atan2 0 x),(arg (x __type__ double)-->atan2 0 x),(arg (x%y)-->atan2 0 (x/y))]);
'(array __with__ [array (xs __type__ rlist)-->foldl append emptyarray xs]);
'(array2 __with__ [array2 xs-->array (map array xs)]);
'(arrayp __with__ [arrayp x-->typep array x]);
'(asin __with__ [(asin (x __type__ int)-->asin (double x)),(asin (x __type__ bigint)-->asin (double x)),(asin (z __as__ (x+:y))-->-i*ln (i*z+sqrt (1-z*z))),(asin (z __as__ (r<:t))-->-i*ln (i*z+sqrt (1-z*z))),(asin (x%y)-->asin (x/y))]);
'(asinh __with__ [(asinh (x __type__ int)-->asinh (double x)),(asinh (x __type__ bigint)-->asinh (double x)),(asinh (z __as__ (x+:y))-->ln (z+sqrt (z*z+1))),(asinh (z __as__ (r<:t))-->ln (z+sqrt (z*z+1))),(asinh (x%y)-->asinh (x/y))]);
'(atan __with__ [(atan (x __type__ int)-->atan (double x)),(atan (x __type__ bigint)-->atan (double x)),(atan (z __as__ (x+:y))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (z __as__ (r<:t))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (x%y)-->atan (x/y))]);
'(atan2 __with__ [(atan2 (x __type__ int) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ bigint) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ double) (y __type__ int)-->atan2 x (double y)),(atan2 (x __type__ double) (y __type__ bigint)-->atan2 x (double y)),(atan2 (x%y) z-->atan2 (x/y) z __if__ realp z),(atan2 x (y%z)-->atan2 x (y/z) __if__ realp x)]);
'(atanh __with__ [(atanh (x __type__ int)-->atanh (double x)),(atanh (x __type__ bigint)-->atanh (double x)),(atanh (z __as__ (x+:y))-->(ln (1+z)-ln (1-z))/2),(atanh (z __as__ (r<:t))-->(ln (1+z)-ln (1-z))/2),(atanh (x%y)-->atanh (x/y))]);
'(hfirst __with__ [hfirst t-->avl::mfirst t]);
'(hkeys __with__ [hkeys t-->avl::mkeys t]);
'(hlast __with__ [hlast t-->avl::mlast t]);
'(hmembers __with__ [hmembers t-->avl::mmembers t]);
'(hrmfirst __with__ [hrmfirst t-->avl::mrmfirst t]);
'(hrmlast __with__ [hrmlast t-->avl::mrmlast t]);
'(hsize __with__ [hsize t-->avl::msize t]);
'(hvals __with__ [hvals t-->avl::mvals t]);
'(mdeletek __with__ [mdeletek t y-->avl::mdelete t y]);
'(mdeleteka __with__ [mdeleteka t y-->avl::mdeletea t y]);
'(mhdelete __with__ [mhdelete t y-->avl::hdelete t y]);
'(mhdeletek __with__ [mhdeletek t y-->avl::hdeletek t y]);
'(mhdeletekv __with__ [mhdeletekv t y-->avl::hdeletekv t y]);
'(bag __with__ [(bag (m __as__ Bag _)-->m),(bag (m __type__ xset)-->bag (members m)),(bag (xs __type__ rlist)-->foldl insert emptybag xs)]);
'(bagp __with__ [bagp x-->typep bag x]);
'(bigint __with__ [(bigint (x __type__ bigint)-->x),(bigint (x __type__ int)-->__C::pure_bigintval x),(bigint (x __type__ double)-->__C::pure_bigintval x),(bigint (x __as__ (_%_))-->trunc x)]);
'(bigintp __with__ [bigintp x-->__case__ x [(_ __type__ bigint-->1),(_-->0)]]);
'(bigintvalp __with__ [bigintvalp x-->ratvalp x&&frac (re x)==0]);
'(blobp __with__ [blobp _-->0]);
'(bool __with__ [bool (x __type__ int)-->~(~x)]);
'(boolp __with__ [boolp x-->typep ('bool) x]);
'(byte_cstring __with__ [byte_cstring (s __type__ string)-->ptrtag 1$__C::pure_byte_cstring s]);
'(byte_cstring_pointer __with__ [byte_cstring_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_cstring xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(byte_matrix __with__ [(byte_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_byte_array n m p),(byte_matrix (n __type__ int) (p __type__ pointer)-->byte_matrix (1,n) p)]);
'(byte_pointer __with__ [byte_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_byte_array p x __if__ nmatrixp x]);
'(byte_string __with__ [byte_string (s __type__ string)-->ptrtag 1$__C::pure_byte_string s]);
'(byte_string_pointer __with__ [byte_string_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_string xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(cat __with__ [(cat []-->[]),(cat (xs __as__ (_:_))-->foldr (tick []) [] xs __with__ [(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)]),(foldr (tick _) [] x-->cat x),(tick zs (x:xs) ys-->tack (x:zs) (tick [] xs ys&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(catmap __with__ [(catmap f (x __type__ matrix)-->cat (list (map f x))),(catmap f (s __type__ string)-->catmap f (chars s)),(catmap f []-->[]),(catmap f (xs __as__ (_:_))-->cat (map f xs))]);
'(ceil __with__ [(ceil (x __type__ int)-->x),(ceil (x __type__ bigint)-->x),(ceil (x __as__ (_%_))-->-floor (-x))]);
'(charp __with__ [charp x-->typep ('char) x]);
'(chars __with__ [(chars (s __type__ string)-->__C::string_chars s __if__ ~funp (:)),(chars (s __type__ string)-->list (__C::string_chars s))]);
'(chr __with__ [chr (n __type__ int)-->c __if__ stringp c __when__ [c-->__C::string_chr n]]);
'(cis __with__ [(cis (t __type__ int)-->rect (1<:t)),(cis (t __type__ bigint)-->rect (1<:t)),(cis (t __type__ double)-->rect (1<:t)),(cis (x%y)-->rect (1<:x/y))]);
'(clearsym __with__ [(clearsym (sym __type__ string) (level __type__ int)-->() __when__ [(res-->evalcmd ("clear -t"+str level+" "+sym)),(_-->stringp res||throw evalcmd)]),(clearsym (sym __type__ symbol) (level __type__ int)-->clearsym sym level __when__ [(sym-->str sym),(sym-->__ifelse__ (sym!0=="(") (substr sym 2 (#sym-2)) sym)])]);
'(closurep __with__ [closurep x-->funp x||lambdap x]);
'(cmatrixp __with__ [cmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==2),(_-->0)]]);
'(col __with__ [col (x __type__ matrix) (j __type__ int)-->__ifelse__ (j>=0&&j<m) (__C::matrix_slice x 0 j (n-1) j) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(colcatmap __with__ [(colcatmap f []-->{}),(colcatmap f (xs __as__ (_:_))-->colcat (map f xs)),(colcatmap f (x __type__ matrix)-->matcat (map f x)),(colcatmap f (s __type__ string)-->colcatmap f (chars s))]);
'(colmap __with__ [(colmap f []-->{}),(colmap f (xs __as__ (_:_))-->colcat (map f xs)),(colmap f (x __type__ matrix)-->map f x),(colmap f (s __type__ string)-->colmap f (chars s))]);
'(colrev __with__ [colrev (x __type__ matrix)-->colcat (reverse (cols x))]);
'(cols __with__ [cols (x __type__ matrix)-->map (col x) (0..m-1) __when__ [_,m __type__ int-->dim x]]);
'(colvector __with__ [(colvector (x __type__ matrix)-->redim (#x,1) x),(colvector ()-->redim (0,1) {}),(colvector (xs __as__ (_,_))-->colvector (list xs)),(colvector xs-->redim (#x,1) x __if__ matrixp x __when__ [x-->rowvector xs])]);
'(colvectorp __with__ [colvectorp x-->matrixp x&&dim x!1==1]);
'(colvectorseq __with__ [(colvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_colvect n m s),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect n m s),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq n m s-->x __if__ matrixp x __when__ [x-->colvector (n:n+s..m)])]);
'(complex __with__ [(complex (z __as__ (x+:y))-->z),(complex (z __as__ (r<:t))-->z),(complex (x __type__ int)-->x+:0),(complex (x __type__ bigint)-->x+:0),(complex (x __type__ double)-->x+:0.0),(complex (x%y)-->x%y+:0L%1L)]);
'(complex_float_matrix __with__ [(complex_float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_float_array n m p),(complex_float_matrix (n __type__ int) (p __type__ pointer)-->complex_float_matrix (1,n) p)]);
'(complex_float_pointer __with__ [complex_float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_float_array p x __if__ nmatrixp x]);
'(complex_matrix __with__ [(complex_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array n m p),(complex_matrix (n __type__ int) (p __type__ pointer)-->complex_matrix (1,n) p)]);
'(complex_matrix_view __with__ [(complex_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array_nodup n m p),(complex_matrix_view (n __type__ int) (p __type__ pointer)-->complex_matrix_view (1,n) p)]);
'(complex_pointer __with__ [complex_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_array p x __if__ nmatrixp x]);
'(complexp __with__ [complexp x-->typep ('complex) x]);
'(compvalp __with__ [compvalp x-->numberp x]);
'(conj __with__ [(conj (x __type__ matrix)-->__C::matrix_conj x __if__ nmatrixp x),(conj (x+:y)-->x+:-y),(conj (r<:t)-->r<:-t),(conj (x __type__ int)-->x),(conj (x __type__ bigint)-->x),(conj (x __type__ double)-->x),(conj (x __as__ (_%_))-->x)]);
'(cooked __with__ [cooked (p __type__ pointer)-->sentry free p]);
'(cos __with__ [(cos (x __type__ int)-->cos (double x)),(cos (x __type__ bigint)-->cos (double x)),(cos (x+:y)-->cos x*cosh y+:-sin x*sinh y),(cos (z __as__ (r<:t))-->polar (cos (rect z))),(cos (x%y)-->cos (x/y))]);
'(cosh __with__ [(cosh (x __type__ int)-->cosh (double x)),(cosh (x __type__ bigint)-->cosh (double x)),(cosh (x+:y)-->cosh x*cos y+:sinh x*sin y),(cosh (z __as__ (r<:t))-->polar (cosh (rect z))),(cosh (x%y)-->cosh (x/y))]);
'(cst __with__ [cst x y-->x]);
'(cstring __with__ [cstring (s __type__ pointer)-->__C::pure_cstring s]);
'(cstring_dup __with__ [cstring_dup (s __type__ pointer)-->__C::pure_cstring_dup s]);
'(cstring_list __with__ [cstring_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (cstring_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(cstring_vector __with__ [cstring_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->cstring_list n p]]);
'(curry __with__ [curry f x y-->f (x,y)]);
'(curry3 __with__ [curry3 f x y z-->f (x,y,z)]);
'(cycle __with__ [(cycle (x __type__ matrix)-->cycle (list x)),(cycle (s __type__ string)-->cycle (chars s)),(cycle (ys __as__ (x:xs))-->x:(xs+cycle ys)&)]);
'(cyclen __with__ [(cyclen (n __type__ int) (x __type__ matrix)-->cyclen n (list x) __if__ ~null x),(cyclen (n __type__ int) (s __type__ string)-->cyclen n (chars s) __if__ ~null s),(cyclen (n __type__ int) (x:xs)-->[] __if__ n<=0),(cyclen (n __type__ int) (x:xs)-->accum [] n __with__ [(accum ys (n __type__ int)-->cat ys+take n xs __if__ n<=m),(accum ys (n __type__ int)-->accum (xs:ys) (n-m))] __when__ [(xs-->x:xs),(m __type__ int-->#xs)] __if__ rlistp xs)]);
'(delete __with__ [(delete (x __type__ matrix) y-->__C::record_delete x y __if__ recordp x),(delete (Dict d) x-->Dict (avl::deletek d x)),(delete (HDict d) x-->HDict (avl::hdeletek d x)),(delete (MDict d) x-->MDict (avl::mdeletek d x)),(delete (HMDict d) x-->HMDict (avl::mhdeletek d x)),(delete (Set m) y-->Set (avl::delete m y)),(delete (Bag m) y-->Bag (avl::mdelete m y)),(delete (HSet m) y-->HSet (avl::hdelete m y)),(delete (HBag m) y-->HBag (avl::mhdelete m y))]);
'(delete_all __with__ [(delete_all (Dict d) x-->Dict (avl::deletek d x)),(delete_all (HDict d) x-->HDict (avl::hdeletek d x)),(delete_all (MDict d) x-->MDict (avl::mdeleteka d x)),(delete_all (HMDict d) x-->HMDict (avl::mhdeleteka d x)),(delete_all (Set m) y-->Set (avl::delete m y)),(delete_all (Bag m) y-->Bag (avl::mdeletea m y)),(delete_all (HSet m) y-->HSet (avl::hdelete m y)),(delete_all (HBag m) y-->HBag (avl::mhdeletea m y))]);
'(delete_val __with__ [(delete_val (Dict d) (el __as__ (x=>y))-->Dict (avl::deletekv d el)),(delete_val (HDict d) (el __as__ (x=>y))-->HDict (avl::hdeletekv d el)),(delete_val (MDict d) (el __as__ (x=>y))-->MDict (avl::mdeletekv d el)),(delete_val (HMDict d) (el __as__ (x=>y))-->HMDict (avl::mhdeletekv d el))]);
'(den __with__ [(den (x%y)-->y),(den (x __type__ int)-->1L),(den (x __type__ bigint)-->1L),(den (x __type__ double)-->__ifelse__ (frac x==0.0) 1L (den (rational x)))]);
'(dict __with__ [(dict (d __as__ Dict _)-->d),(dict (d __type__ xdict)-->dict (members d)),(dict (xys __type__ rlist)-->foldl insert emptydict xys)]);
'(dictp __with__ [dictp x-->typep dict x]);
'(dim __with__ [dim (x __type__ matrix)-->__C::matrix_dim x]);
'((div) __with__ [(x __type__ int div y __type__ int-->x div y),(x __type__ bigint div y __type__ bigint-->__C::bigint_div x y),(x __type__ int div y __type__ bigint-->bigint x div y),(x __type__ bigint div y __type__ int-->x div bigint y)]);
'(dmatrixp __with__ [dmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==1),(_-->0)]]);
'(do __with__ [(do f (x __type__ matrix)-->__C::matrix_do f x),(do f (s __type__ string)-->do f (chars s)),(do f []-->()),(do f (x:xs)-->f x$$do f xs)]);
'(double __with__ [(double (x __type__ double)-->x),(double (x __type__ int)-->__C::pure_dblval x),(double (x __type__ bigint)-->__C::pure_dblval x),(double (x%y)-->x/y)]);
'(double_matrix __with__ [(double_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array n m p),(double_matrix (n __type__ int) (p __type__ pointer)-->double_matrix (1,n) p)]);
'(double_matrix_view __with__ [(double_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array_nodup n m p),(double_matrix_view (n __type__ int) (p __type__ pointer)-->double_matrix_view (1,n) p)]);
'(double_pointer __with__ [double_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_double_array p x __if__ nmatrixp x]);
'(doublep __with__ [doublep x-->__case__ x [(_ __type__ double-->1),(_-->0)]]);
'(dowith __with__ [(dowith f (x __type__ matrix) (y __type__ matrix)-->do (uncurry f) (zip x y)),(dowith f (s __type__ string) (t __type__ string)-->dowith f (chars s) (chars t)),(dowith f (x:xs) (y:ys)-->f x y$$dowith f xs ys),(dowith f _ _-->())]);
'(dowith3 __with__ [(dowith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->do (uncurry3 f) (zip3 x y z)),(dowith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->dowith3 f (chars s) (chars t) (chars u)),(dowith3 f (x:xs) (y:ys) (z:zs)-->f x y z$$dowith3 f xs ys zs),(dowith3 f _ _ _-->())]);
'(drop __with__ [(drop (k __type__ int) (x __type__ matrix)-->x!!(k..#x-1)),(drop (n __type__ int) (s __type__ string)-->substr s n (#s-n)),(drop (n __type__ int) []-->[]),(drop (n __type__ int) (ys __as__ (x:xs))-->drop (n-1) xs __if__ n>1),(drop (n __type__ int) (ys __as__ (x:xs))-->xs __if__ n==1),(drop (n __type__ int) (ys __as__ (x:xs))-->ys)]);
'(dropwhile __with__ [(dropwhile p (x __type__ matrix)-->__C::matrix_dropwhile p x),(dropwhile p (s __type__ string)-->strcat (dropwhile p (chars s))),(dropwhile p []-->[]),(dropwhile p (ys __as__ (x:xs))-->dropwhile p xs __if__ p x),(dropwhile p (ys __as__ (x:xs))-->ys)]);
'(emptybag __with__ [emptybag-->Bag avl::emptytree]);
'(emptydict __with__ [emptydict-->Dict avl::emptytree]);
'(emptyhbag __with__ [emptyhbag-->HBag avl::emptytree]);
'(emptyhdict __with__ [emptyhdict-->HDict avl::emptytree]);
'(emptyhmdict __with__ [emptyhmdict-->HMDict avl::emptytree]);
'(emptyhset __with__ [emptyhset-->HSet avl::emptytree]);
'(emptymdict __with__ [emptymdict-->MDict avl::emptytree]);
'(emptyset __with__ [emptyset-->Set avl::emptytree]);
'(exactp __with__ [exactp x-->__case__ x [(x+:y-->~doublep x&&~doublep y),(x<:y-->~doublep x&&~doublep y),(x%y-->~doublep x&&~doublep y),(_-->~doublep x)] __if__ numberp x]);
'(execv __with__ [execv (prog __type__ string) (argv __type__ rlist)-->execv prog (smatrix argv)]);
'(execve __with__ [execve (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->execve prog (smatrix argv) (smatrix envp)]);
'(execvp __with__ [execvp (prog __type__ string) (argv __type__ rlist)-->execvp prog (smatrix argv)]);
'(exp __with__ [(exp (x __type__ int)-->exp (double x)),(exp (x __type__ bigint)-->exp (double x)),(exp (x+:y)-->exp x*(cos y+:sin y)),(exp (r<:t)-->exp (r*cos t)<:r*sin t),(exp (x%y)-->exp (x/y))]);
'(fclose __with__ [fclose (fp __type__ pointer)-->clear_sentry fp$$__C::fclose fp __if__ get_sentry fp===__C::fclose]);
'(fdopen __with__ [fdopen (fd __type__ int) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fdopen fd mode]]);
'(fget __with__ [fget (f __type__ pointer)-->read_a_file f buf [] __when__ [buf-->malloc 65536] __with__ [read_a_file f buf t-->check s __when__ [s-->__C::fgets buf 65536 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ feof f||ferror f),(check (s __type__ string)-->read_a_file f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x))]]]);
'(fgets __with__ [fgets (f __type__ pointer)-->read_a_line f buf [] __when__ [buf-->malloc 1024] __with__ [read_a_line f buf t-->check s __when__ [s-->__C::fgets buf 1024 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ done s),(check (s __type__ string)-->read_a_line f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x)),(done (s __type__ string)-->feof f||ferror f||~null s&&last s=="\n")]]]);
'(filter __with__ [(filter p (x __type__ matrix)-->__C::matrix_filter p x),(filter p (s __type__ string)-->strcat (filter p (chars s))),(filter p []-->[]),(filter p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (add p x zs) (filter p xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (add p x zs) xs),(tick zs []-->tack zs []),(tick _ xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys),(add p x xs-->__ifelse__ (p x) (x:xs) xs)])]);
'(fix __with__ [fix f-->f (fix f&)]);
'(flip __with__ [flip f x y-->f y x]);
'(float_matrix __with__ [(float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_float_array n m p),(float_matrix (n __type__ int) (p __type__ pointer)-->float_matrix (1,n) p)]);
'(float_pointer __with__ [float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_float_array p x __if__ nmatrixp x]);
'(floor __with__ [(floor (x __type__ int)-->x),(floor (x __type__ bigint)-->x),(floor (x __as__ (_%_))-->__ifelse__ (n<=x) n (n-1) __when__ [n __type__ bigint-->trunc x])]);
'(fnmatch __with__ [fnmatch (pat __type__ string) (s __type__ string) (flags __type__ int)-->__C::fnmatch pat s flags==0]);
'(foldl __with__ [(foldl f a (x __type__ matrix)-->__C::matrix_foldl f a x),(foldl f a (s __type__ string)-->foldl f a (chars s)),(foldl f a []-->a),(foldl f a (x:xs)-->foldl f (f a x) xs)]);
'(foldl1 __with__ [(foldl1 f (x __type__ matrix)-->__C::matrix_foldl1 f x __if__ ~null x),(foldl1 f (s __type__ string)-->foldl1 f (chars s)),(foldl1 f (x:xs)-->foldl f x xs)]);
'(foldr __with__ [(foldr f a (x __type__ matrix)-->__C::matrix_foldr f a x),(foldr f a (s __type__ string)-->foldr f a (chars s)),(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(foldr1 __with__ [(foldr1 f (x __type__ matrix)-->__C::matrix_foldr1 f x __if__ ~null x),(foldr1 f (s __type__ string)-->foldr1 f (chars s)),(foldr1 f [x]-->x),(foldr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (foldr1 f ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs x),(x:xs-->tick (x:zs) xs),(_-->tack zs (foldr1 f xs))]),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(fopen __with__ [fopen (name __type__ string) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fopen name mode]]);
'(fprintf __with__ [fprintf (fp __type__ pointer) (format __type__ string) args-->catch error (do_printf 0 formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count (format:formats) args-->do_printf count formats args __when__ [(res-->__C::pure_fprintf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))] __if__ literal format),(do_printf count (format:formats) (arg:args)-->do_printf count formats args __when__ [(res-->__case__ (format_type (last format) format,arg) [("c",x __type__ int-->__C::pure_fprintf_int fp format x),("c",x __type__ bigint-->__C::pure_fprintf_int fp format x),("d",x __type__ int-->__C::pure_fprintf_int fp format x),("d",x __type__ bigint-->__C::pure_fprintf_int fp format x),("g",x __type__ double-->__C::pure_fprintf_double fp format x),("s",x __type__ string-->__C::pure_fprintf_string fp format x),("p",x __type__ string-->__C::pure_fprintf_pointer fp format x),("p",x __type__ pointer-->__C::pure_fprintf_pointer fp format x),("Z",x __type__ bigint-->__C::pure_fprintf_mpz fp format x),("R",x __type__ mpfr-->__C::pure_fprintf_mpfr fp format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))]),(do_printf count [] _-->count),(do_printf count _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(frac __with__ [(frac (x __type__ int)-->x-trunc x),(frac (x __type__ bigint)-->x-trunc x),(frac (x __type__ double)-->x-trunc x),(frac (x __as__ (_%_))-->x-trunc x)]);
'(fscanf __with__ [fscanf (fp __type__ pointer) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(res-->__C::pure_fscanf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(res-->__case__ t [("n"-->__C::pure_fscanf_int fp format buf),("d"-->__C::pure_fscanf_int fp format buf),("g"-->__C::pure_fscanf_double fp format buf),("s"-->__C::pure_fscanf_string fp format buf),("p"-->__C::pure_fscanf_pointer fp format buf),("Z"-->__C::pure_fscanf_mpz fp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format)]]);
'(functionp __with__ [functionp x-->nargs x>0 __with__ [(nargs ((x __as__ _) _)-->nargs x-1),(nargs x-->nargs x)]]);
'(gcd __with__ [(gcd (x __type__ bigint) (y __type__ bigint)-->__C::bigint_gcd x y),(gcd (x __type__ int) (y __type__ bigint)-->__C::bigint_gcd (bigint x) y),(gcd (x __type__ bigint) (y __type__ int)-->__C::bigint_gcd x (bigint y)),(gcd (x __type__ int) (y __type__ int)-->int (__C::bigint_gcd (bigint x) (bigint y)))]);
'(get __with__ [get (r __type__ ref)-->__C::pointer_get_expr r]);
'(get_byte __with__ [get_byte (x __type__ pointer)-->__C::pointer_get_byte x]);
'(get_double __with__ [get_double (x __type__ pointer)-->__C::pointer_get_double x]);
'(get_float __with__ [get_float (x __type__ pointer)-->__C::pointer_get_float x]);
'(get_int __with__ [get_int (x __type__ pointer)-->__C::pointer_get_int x]);
'(get_int64 __with__ [get_int64 (x __type__ pointer)-->__C::pointer_get_int64 x]);
'(get_long __with__ [get_long (x __type__ pointer)-->__C::pointer_get_long x]);
'(get_pointer __with__ [get_pointer (x __type__ pointer)-->__C::pointer_get_pointer x]);
'(get_short __with__ [get_short (x __type__ pointer)-->__C::pointer_get_short x]);
'(get_string __with__ [get_string (x __type__ pointer)-->__C::pointer_get_string x]);
'(getopt __with__ [getopt opts args-->opt opts ([],[]) args __with__ [(opt opts (o,a) []-->o,a),(opt opts (o,a) ("--":args)-->o,a+args),(opt opts (o,a) (arg:args)-->opt opts (o,a+[arg]) args __if__ ~stringp arg||arg=="-"||arg!![0]~="-"),(opt opts (o,a) (arg:args)-->opt opts (o+vals,a) args __when__ [vals,args-->catch (__lambda__ [_] (catch (__lambda__ [_] (throw arg)) (ret __when__ [ret __as__ (_,_)-->shortopt opts arg args]))) (ret __when__ [ret __as__ (_,_)-->longopt opts arg args])]),(longopt opts arg args-->catch (__lambda__ [_] ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)$" 1 arg 0),(_,opt-->reg 1 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt () args)])) ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)=(.*)$" 1 arg 0),(_,opt,_,val-->reg 1 info,reg 2 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt val args)])),(shortopt opts arg args-->catmap (__lambda__ [__v3__] (__case__ __v3__ [(opt,_-->[mkopt opt ()]),(_-->[])])) opt1+[mkopt opt val],args __when__ [(long_opt,short_opt,flag-->opt2),(opt=>val,args-->checkopt flag long_opt val args)] __if__ all (flip (==) 0.flip (!) 2) opt1 __when__ [("-":chs-->chars arg),(opt __as__ (_:_)-->scanopt (listmap (__lambda__ [ch] (catch (__lambda__ [_] ()) (find_shortopt opts ch))) chs)),(opt1-->init opt),(opt2-->last opt),(val-->subseq arg (#opt+1) (#arg-1)),(val-->__ifelse__ (null val) () val)]),(mkopt opt val-->opt=>val),(find_longopt opts opt-->long_opt,short_opt,flag __when__ [[(long_opt,short_opt,flag)]-->catmap (__lambda__ [__v4__] (__case__ __v4__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (prefixp ("--"+opt) long_opt) [opt1] []),(_-->[])])) opts]),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==0&&null val),(checkopt flag long_opt val args-->long_opt=>val,args __if__ flag~=0&&val~==()),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==2),(checkopt flag long_opt val (arg:args)-->long_opt=>arg,args __if__ flag==1),(scanopt ((long_opt,short_opt,flag):opt)-->[(long_opt,short_opt,flag)] __if__ flag~=0),(scanopt ((long_opt,short_opt,flag):opt)-->(long_opt,short_opt,flag):scanopt opt),(scanopt _-->[]),(find_shortopt opts opt-->long_opt,short_opt,flag __when__ [(long_opt,short_opt,flag):_-->catmap (__lambda__ [__v5__] (__case__ __v5__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (short_opt==="-"+opt) [opt1] []),(_-->[])])) opts]),(prefixp (x __type__ string) (y __type__ string)-->n<=m&&x==substr y 0 n __when__ [(n-->#x),(m-->#y)]),(prefixp _ _-->0)]]);
'(gets __with__ [gets-->__ifelse__ (null s) s (__ifelse__ (last s=="\n") (init s) s) __when__ [s-->fgets stdin]]);
'(glob __with__ [glob (pat __type__ string) (flags __type__ int)-->result __when__ [(globptr-->calloc 1 72),(result-->__C::glob pat flags (pointer 0) globptr),(result-->__ifelse__ (result==0) (__C::globlist globptr) result),(_-->__C::globfree globptr),(_-->free globptr)]]);
'(globsym __with__ [globsym (pat __type__ string) (level __type__ int)-->uniq (catmap descr info) __when__ [(res-->evalcmd ("show -gst"+str level+" "+pat)),(_-->stringp res||throw evalcmd),(info-->init (init (split "\n" res)))] __with__ [(uniq (x:xs __as__ (y:_))-->__ifelse__ (x===y) (uniq xs) (x:uniq xs)),(uniq xs-->xs),(descr (s __type__ string)-->__case__ (filter (flip (~=) "") (split " " s)) [(sym:_-->__ifelse__ (any (flip (==) sym) ["extern","private","infix","infixl","infixr","prefix","postfix","outfix","nonfix"]) [] (catmap (__lambda__ [x] (__ifelse__ (symbolp x) [x] [])) [__C::pure_quoted_symbol sym])),(_-->[])])]]);
'(hbag __with__ [(hbag (m __as__ HBag _)-->m),(hbag (m __type__ xset)-->hbag (members m)),(hbag (xs __type__ rlist)-->foldl insert emptyhbag xs)]);
'(hbagp __with__ [hbagp x-->typep hbag x]);
'(hdict __with__ [(hdict (d __as__ HDict _)-->d),(hdict (d __type__ xdict)-->hdict (members d)),(hdict (xys __type__ rlist)-->foldl insert emptyhdict xys)]);
'(hdictp __with__ [hdictp x-->typep hdict x]);
'(head __with__ [(head (x __type__ matrix)-->x!0 __if__ ~null x),(head (s __type__ string)-->s!0 __if__ ~null s),(head (x:xs)-->x)]);
'(heap __with__ [heap (xs __type__ rlist)-->foldl insert emptyheap xs]);
'(heapp __with__ [heapp x-->typep heap x]);
'(hmdict __with__ [(hmdict (d __as__ HMDict _)-->d),(hmdict (d __type__ xdict)-->hmdict (members d)),(hmdict (xys __type__ rlist)-->foldl insert emptyhmdict xys)]);
'(hmdictp __with__ [hmdictp x-->typep hmdict x]);
'(hset __with__ [(hset (m __as__ HSet _)-->m),(hset (m __type__ xset)-->hset (members m)),(hset (xs __type__ rlist)-->foldl insert emptyhset xs)]);
'(hsetp __with__ [hsetp x-->typep hset x]);
'(id __with__ [id x-->x]);
'(im __with__ [(im (x __type__ matrix)-->__C::matrix_im x __if__ nmatrixp x),(im (x+:y)-->y),(im (r<:t)-->r*sin t),(im (x __type__ int)-->0),(im (x __type__ bigint)-->0L),(im (x __type__ double)-->0.0),(im (_%_)-->0L%1L)]);
'(imatrixp __with__ [imatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==3),(_-->0)]]);
'(index __with__ [(index (s __type__ string) (u __type__ string)-->__C::string_index s u),(index [] _-->-1),(index (x:xs) y-->search 0 (x:xs) __with__ [(search _ []-->-1),(search (n __type__ int) (x:xs)-->n __if__ x==y),(search (n __type__ int) (x:xs)-->search (n+1) xs),(search _ xs-->index xs y)])]);
'(inexactp __with__ [inexactp x-->__case__ x [(x+:y-->doublep x||doublep y),(x<:y-->doublep x||doublep y),(x%y-->doublep x||doublep y),(_-->doublep x)] __if__ numberp x]);
'(infp __with__ [infp x-->__case__ x [(x __type__ double-->x==inf||x==-inf),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->infp x),(_-->0)]),(_-->0)]]);
'(init __with__ [(init (x __type__ matrix)-->x!!(0..#x-2) __if__ ~null x),(init (s __type__ string)-->substr s 0 (#s-1) __if__ ~null s),(init [x]-->[]),(init (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (init ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs []),(x:xs-->tick (x:zs) xs),(_-->tack zs (init xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(int __with__ [(int (x __type__ int)-->x),(int (x __type__ bigint)-->__C::pure_intval x),(int (x __type__ double)-->__C::pure_intval x),(int (x __as__ (_%_))-->int (bigint x))]);
'(int_matrix __with__ [(int_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array n m p),(int_matrix (n __type__ int) (p __type__ pointer)-->int_matrix (1,n) p)]);
'(int_matrix_view __with__ [(int_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array_nodup n m p),(int_matrix_view (n __type__ int) (p __type__ pointer)-->int_matrix_view (1,n) p)]);
'(int_pointer __with__ [int_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_int_array p x __if__ nmatrixp x]);
'(integerp __with__ [integerp x-->typep ('integer) x]);
'(intp __with__ [intp x-->__case__ x [(_ __type__ int-->1),(_-->0)]]);
'(intvalp __with__ [intvalp x-->bigintvalp x&&int (re x)==x]);
'(iterate __with__ [iterate f x-->x:iterate f (f x)&]);
'(iteraten __with__ [(iteraten (n __type__ int) f x-->[] __if__ n<=0),(iteraten (n __type__ int) f x-->accum [] n f x __with__ [(accum xs (n __type__ int) f x-->reverse (x:xs) __if__ n==1),(accum xs (n __type__ int) f x-->accum (x:xs) (n-1) f (f x))])]);
'(iterwhile __with__ [iterwhile p f x-->accum [] p f x __with__ [(accum xs p f x-->accum (x:xs) p f (f x) __if__ p x),(accum xs p f x-->reverse xs)]]);
'(join __with__ [join (delim __type__ string) xs-->s __if__ stringp s __when__ [s-->__C::string_join delim xs]]);
'(key __with__ [key (x=>v)-->x]);
'(keys __with__ [(keys (x __type__ matrix)-->colcatmap (__lambda__ [__v1__] (__case__ __v1__ [(u=>v-->{u}),(_-->{})])) x __if__ recordp x),(keys (Dict d)-->avl::keys d),(keys (MDict d)-->avl::mkeys d),(keys (HDict d)-->avl::hkeys d),(keys (HMDict d)-->avl::hkeys d)]);
'(lcm __with__ [(lcm (x __type__ bigint) (y __type__ bigint)-->__C::bigint_lcm x y),(lcm (x __type__ int) (y __type__ bigint)-->__C::bigint_lcm (bigint x) y),(lcm (x __type__ bigint) (y __type__ int)-->__C::bigint_lcm x (bigint y)),(lcm (x __type__ int) (y __type__ int)-->int (__C::bigint_lcm (bigint x) (bigint y)))]);
'(list __with__ [(list (x __type__ matrix)-->listmap (__lambda__ [i] (x!i)) (0..#x-1)),(list (s __type__ string)-->chars s),(list ()-->[]),(list (x,xs)-->accum [x] xs __with__ [(accum ys (x,xs)-->accum (x:ys) xs),(accum ys x-->reverse (x:ys))]),(list []-->[]),(list (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->reverse ys),(accum ys xs-->throw (bad_list_value xs))]),(list (x __as__ Array _)-->members x),(list (h __as__ Heap _)-->members h),(list (d __type__ xdict)-->members d),(list (m __type__ xset)-->members m)]);
'(list2 __with__ [(list2 (x __type__ matrix)-->listmap (__lambda__ [i] (listmap (__lambda__ [j] (x!(i,j))) (0..m-1))) (0..n-1) __when__ [n __type__ int,m __type__ int-->dim x]),(list2 (x __as__ Array _)-->members2 x)]);
'(listmap __with__ [(listmap f (x __type__ matrix)-->list (map f x)),(listmap f (s __type__ string)-->map f (chars s)),(listmap f []-->[]),(listmap f (xs __as__ (_:_))-->map f xs)]);
'(listp __with__ [listp x-->typep ('list) x]);
'(ln __with__ [(ln (x __type__ double)-->__C::log x),(ln (x __type__ int)-->ln (double x)),(ln (x __type__ bigint)-->ln (double x)),(ln (z __as__ (x+:y))-->ln (abs z)+:arg z),(ln (r<:t)-->polar (ln r+:t)),(ln (x%y)-->ln (x/y))]);
'(log __with__ [(log (x __type__ double)-->__C::log x/__C::log 10.0),(log (x __type__ int)-->log (double x)),(log (x __type__ bigint)-->log (double x)),(log (z __as__ (x+:y))-->ln z/ln 10),(log (z __as__ (r<:t))-->ln z/ln 10),(log (x%y)-->log (x/y))]);
'(map __with__ [(map f (x __type__ matrix)-->__C::matrix_map f x),(map f (s __type__ string)-->map f (chars s)),(map f []-->[]),(map f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (f x:zs) (map f xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (f x:zs) xs),(tick zs []-->tack zs []),(tick zs xs-->tack zs (map f xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(matrix __with__ [(matrix []-->{}),(matrix (xs __as__ (_:_))-->throw (bad_list_value xs) __if__ ~rlistp xs),(matrix (xs __as__ (_:_))-->rowcatmap colcat xs __if__ all rlistp xs),(matrix (xs __as__ (_:_))-->rowcat xs __if__ any matrixp xs),(matrix (xs __as__ (_:_))-->colcat xs),(matrix ()-->{}),(matrix (xs __as__ (_,_))-->matrix (list xs)),(matrix (x __type__ matrix)-->x),(matrix (s __type__ string)-->matrix (chars s))]);
'(matrixp __with__ [matrixp x-->__case__ x [(_ __type__ matrix-->1),(_-->0)]]);
'(max __with__ [max x y-->__ifelse__ (x>=y) x y]);
'(mdict __with__ [(mdict (d __as__ MDict _)-->d),(mdict (d __type__ xdict)-->mdict (members d)),(mdict (xys __type__ rlist)-->foldl insert emptymdict xys)]);
'(mdictp __with__ [mdictp x-->typep mdict x]);
'(member __with__ [(member (x __type__ matrix) y-->__C::record_member x y __if__ recordp x),(member (Dict d) k-->avl::memberk d k),(member (MDict d) k-->avl::memberk d k),(member (HDict d) k-->avl::hmemberk d k),(member (HMDict d) k-->avl::hmemberk d k),(member (Set m) y-->avl::member m y),(member (Bag m) y-->avl::memberk m y),(member (HSet m) y-->avl::hmember m y),(member (HBag m) y-->avl::hmember m y)]);
'(members2 __with__ [members2 (x __as__ Array _)-->map members (members x)]);
'(min __with__ [min x y-->__ifelse__ (x<=y) x y]);
'(mkarray2 __with__ [mkarray2 x (n __type__ int,m __type__ int)-->mkarray (mkarray x m) n]);
'(mkdict __with__ [mkdict y (xs __type__ rlist)-->dict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhdict __with__ [mkhdict y (xs __type__ rlist)-->hdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhmdict __with__ [mkhmdict y (xs __type__ rlist)-->hmdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkmdict __with__ [mkmdict y (xs __type__ rlist)-->mdict (zipwith (=>) xs (repeatn (#xs) y))]);
'((mod) __with__ [(x __type__ int mod y __type__ int-->x mod y),(x __type__ bigint mod y __type__ bigint-->__C::bigint_mod x y),(x __type__ int mod y __type__ bigint-->bigint x mod y),(x __type__ bigint mod y __type__ int-->x mod bigint y)]);
'(nanosleep __with__ [(nanosleep (t __type__ int)-->nanosleep (double t)),(nanosleep (t __type__ bigint)-->nanosleep (double t))]);
'(nanp __with__ [nanp x-->__case__ x [(x __type__ double-->~x==x),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->nanp x),(_-->0)]),(_-->0)]]);
'(neg __with__ [(-x __type__ int-->-x),(-x __type__ double-->-x),(-x __type__ bigint-->__C::bigint_neg x),(-(x+:y)-->-x+:-y),(-(r<:t)-->r<:t+3.14159265358979),(-x%y-->(-x)%y)]);
'(nmatrixp __with__ [nmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x>=1),(_-->0)]]);
'((not) __with__ [(not x __type__ int-->not x),(not x __type__ bigint-->__C::bigint_not x)]);
'(num __with__ [(num (x%y)-->x),(num (x __type__ int)-->bigint x),(num (x __type__ bigint)-->bigint x),(num (x __type__ double)-->__ifelse__ (frac x==0.0) (bigint x) (num (rational x)))]);
'(numberp __with__ [numberp x-->typep ('number) x]);
'((or) __with__ [(x __type__ int or y __type__ int-->x or y),(x __type__ bigint or y __type__ bigint-->__C::bigint_or x y),(x __type__ int or y __type__ bigint-->bigint x or y),(x __type__ bigint or y __type__ int-->x or bigint y)]);
'(ord __with__ [ord (s __type__ string)-->n __if__ intp n __when__ [n-->__C::string_ord s]]);
'(pack __with__ [pack (x __type__ matrix)-->colcat [x,{}]]);
'(packed __with__ [packed (x __type__ matrix)-->stride x==dim x!1]);
'(pclose __with__ [pclose (fp __type__ pointer)-->clear_sentry fp$$__C::pclose fp __if__ get_sentry fp===__C::pclose]);
'(pointer __with__ [(pointer (x __type__ pointer)-->x),(pointer (x __type__ int)-->__C::pure_pointerval x),(pointer (x __type__ bigint)-->__C::pure_pointerval x),(pointer (x __type__ string)-->__C::pure_pointerval x),(pointer (x __type__ matrix)-->__C::pure_pointerval x)]);
'(pointer_cast __with__ [pointer_cast (ty __type__ string) (x __type__ pointer)-->pointer_cast (pointer_tag ty) x]);
'(pointer_tag __with__ [(pointer_tag (x __type__ string)-->__C::pure_pointer_tag x),(pointer_tag (x __type__ pointer)-->get_ptrtag x)]);
'(pointer_type __with__ [pointer_type (x __type__ pointer)-->pointer_type (get_ptrtag x)]);
'(pointerp __with__ [pointerp x-->__case__ x [(_ __type__ pointer-->1),(_-->0)]]);
'(polar __with__ [(polar (x+:y)-->sqrt (x*x+y*y)<:atan2 y x),(polar (z __as__ (_<:_))-->z),(polar (x __type__ int)-->x<:0),(polar (x __type__ bigint)-->x<:0),(polar (x __type__ double)-->x<:0.0),(polar (x%y)-->x%y<:0L%1L)]);
'(popen __with__ [popen (name __type__ string) (mode __type__ string)-->sentry __C::pclose fp __if__ ~null fp __when__ [fp-->__C::popen name mode]]);
'(pow __with__ [(pow (x __type__ int) (y __type__ int)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ bigint)-->__C::bigint_pow x y __if__ y>=0),(pow (x __type__ int) (y __type__ bigint)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ int)-->__C::bigint_pow x y __if__ y>=0),(pow (x%y) (n __type__ int)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ bigint)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ int)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ bigint)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ int)-->1L%1L),(pow (x%y) (n __type__ bigint)-->1L%1L),(pow (x __type__ int) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ int) (n __type__ bigint)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ bigint)-->1%pow x (-n) __if__ n<0)]);
'(pred __with__ [pred x-->x-1]);
'(printf __with__ [printf (format __type__ string) args-->fprintf stdout format args]);
'(publicp __with__ [publicp (x __type__ symbol)-->symbolp (val (str x))]);
'(put __with__ [put (r __type__ ref) x-->__C::pure_free (__C::pointer_get_expr r)$$__C::pointer_put_expr r (__C::pure_new x)$$x]);
'(put_byte __with__ [put_byte (x __type__ pointer) (y __type__ int)-->__C::pointer_put_byte x y]);
'(put_double __with__ [put_double (x __type__ pointer) (y __type__ double)-->__C::pointer_put_double x y]);
'(put_float __with__ [put_float (x __type__ pointer) (y __type__ double)-->__C::pointer_put_float x y]);
'(put_int __with__ [put_int (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int x y]);
'(put_int64 __with__ [(put_int64 (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int64 x y),(put_int64 (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_int64 x y)]);
'(put_long __with__ [(put_long (x __type__ pointer) (y __type__ int)-->__C::pointer_put_long x y),(put_long (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_long x y)]);
'(put_pointer __with__ [(put_pointer (x __type__ pointer) (y __type__ string)-->__C::pointer_put_pointer x y),(put_pointer (x __type__ pointer) (y __type__ pointer)-->__C::pointer_put_pointer x y)]);
'(put_short __with__ [put_short (x __type__ pointer) (y __type__ int)-->__C::pointer_put_short x y]);
'(put_string __with__ [put_string (x __type__ pointer) (y __type__ string)-->__C::pointer_put_string x y]);
'(quote __with__ [quote x-->x]);
'(rational __with__ [(rational (x __as__ (_%_))-->x),(rational (x __type__ int)-->x%1),(rational (x __type__ bigint)-->x%1),(rational (x __type__ double)-->n%d __when__ [n,d-->__C::pure_rational x]),(rational (x+:y)-->rational x+:rational y),(rational (x<:y)-->rational x<:rational y)]);
'(rationalp __with__ [rationalp x-->typep ('rational) x]);
'(ratvalp __with__ [ratvalp x-->realvalp x&&re (x-x)~==nan]);
'(re __with__ [(re (x __type__ matrix)-->__C::matrix_re x __if__ nmatrixp x),(re (x+:y)-->x),(re (r<:t)-->r*cos t),(re (x __type__ int)-->x),(re (x __type__ bigint)-->x),(re (x __type__ double)-->x),(re (x __as__ (_%_))-->x)]);
'(realp __with__ [realp x-->typep ('real) x]);
'(realvalp __with__ [realvalp x-->compvalp x&&im x==0]);
'(record __with__ [(record x-->__C::record_pack x __if__ recordp x),(record x-->record x __if__ recordp x __when__ [x-->matrix x])]);
'(recordp __with__ [recordp x-->__C::record_check x]);
'(rect __with__ [(rect (r<:t)-->r*cos t+:r*sin t),(rect (z __as__ (_+:_))-->z),(rect (x __type__ int)-->x+:0),(rect (x __type__ bigint)-->x+:0),(rect (x __type__ double)-->x+:0.0),(rect (x%y)-->x%y+:0L%1L)]);
'(redim __with__ [(redim (n __type__ int,m __type__ int) (x __type__ matrix)-->__C::matrix_redim x n m __if__ n>=0&&m>=0&&n*m==#x),(redim (m __type__ int) (x __type__ matrix)-->redim (#x div m,m) x __if__ m>0&&#x mod m==0),(redim (m __type__ int) (x __type__ matrix)-->x __if__ m==0&&#x==0)]);
'(ref __with__ [ref x-->__C::pointer_put_expr r (__C::pure_new x)$$sentry unref r __when__ [r __type__ pointer-->__C::pure_expr_pointer]]);
'(refp __with__ [refp r-->__case__ r [(_ __type__ pointer-->get_sentry r===unref),(_-->0)]]);
'(reg __with__ [(reg 0 (p,s,_)-->p,s),(reg 0 (p,s)-->p,s),(reg (n __type__ int) (_,_,infos)-->reg (n-1) infos __if__ n>0)]);
'(reg_info __with__ [(reg_info (_ __type__ int,info)-->info),(reg_info _-->())]);
'(reg_result __with__ [(reg_result (regerr code msg)-->regerr code msg),(reg_result (b __type__ int)-->b),(reg_result (b __type__ int,_)-->b)]);
'(regex __with__ [regex (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (__C::regexec re s eflags) 0 (1,__C::regmatch re)) __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)]]);
'(regexg __with__ [regexg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgg __with__ [regexgg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexggs __with__ [regexggs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgs __with__ [regexgs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regs __with__ [regs info-->myregs 0 info __with__ [(myregs n (p,s,infos)-->(n,p,s):myregs (n+1) infos __if__ p>=0),(myregs n (p,s,infos)-->myregs (n+1) infos),(myregs n (p,s)-->[(n,p,s)] __if__ p>=0),(myregs n (p,s)-->[])]]);
'(regsplit __with__ [regsplit (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (iterwhile check next first+[__C::regskip re])) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsplits __with__ [regsplits (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (takewhile check (iterate next first)+[__C::regskip re]&)) __with__ [([]+ys-->ys),((x:xs)+ys-->x:(xs+ys)&),(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsub __with__ [regsub f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (strcat (iterwhile check next first)+__C::regskip re) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re+h (f (__C::regmatch re)))),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re+h (f (__C::regmatch re)))),(h (x __type__ string)-->x),(h x-->throw (bad_string_value x))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(repeat __with__ [repeat x-->x:repeat x&]);
'(repeatn __with__ [repeatn (n __type__ int) x-->accum [] n x __with__ [(accum xs (n __type__ int) x-->xs __if__ n<=0),(accum xs (n __type__ int) x-->accum (x:xs) (n-1) x)]]);
'(reverse __with__ [(reverse (x __type__ matrix)-->rowrev (colrev x)),(reverse (s __type__ string)-->strcat (reverse (chars s))),(reverse ()-->()),(reverse (x,xs)-->accum x xs __with__ [(accum ys (x,xs)-->accum (x,ys) xs),(accum ys x-->x,ys)]),(reverse []-->[]),(reverse (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->ys),(accum ys xs-->throw (bad_list_value xs))])]);
'(rlistp __with__ [rlistp x-->typep ('rlist) x]);
'(round __with__ [(round (x __type__ int)-->x),(round (x __type__ bigint)-->x),(round (x%y)-->-round ((-x)%y) __if__ x<0),(round (x%y)-->x div 2+1 __if__ y==2),(round (x%y)-->(2*x+y) div (2*y))]);
'(row __with__ [row (x __type__ matrix) (i __type__ int)-->__ifelse__ (i>=0&&i<n) (__C::matrix_slice x i 0 i (m-1)) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(rowcatmap __with__ [(rowcatmap f []-->{}),(rowcatmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowcatmap f (x __type__ matrix)-->matcat (map f x)),(rowcatmap f (s __type__ string)-->rowcatmap f (chars s))]);
'(rowmap __with__ [(rowmap f []-->{}),(rowmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowmap f (x __type__ matrix)-->map f x),(rowmap f (s __type__ string)-->rowmap f (chars s))]);
'(rowrev __with__ [rowrev (x __type__ matrix)-->rowcat (reverse (rows x))]);
'(rows __with__ [rows (x __type__ matrix)-->map (row x) (0..n-1) __when__ [n __type__ int,_-->dim x]]);
'(rowvector __with__ [(rowvector (x __type__ matrix)-->redim (1,#x) x),(rowvector ()-->redim (1,0) {}),(rowvector (xs __as__ (_,_))-->rowvector (list xs)),(rowvector []-->redim (1,0) {}),(rowvector (xs __type__ rlist)-->__case__ (cmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (dmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (imatrix xs) [(x __type__ matrix-->x),(_-->smatrix xs)])])])]);
'(rowvectorp __with__ [rowvectorp x-->matrixp x&&dim x!0==1]);
'(rowvectorseq __with__ [(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_rowvect n m s),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect n m s),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvector (n:n+s..m)])]);
'(scanf __with__ [scanf (format __type__ string)-->fscanf stdin format]);
'(scanl __with__ [(scanl f a (x __type__ matrix)-->__C::matrix_scanl f a x),(scanl f a (s __type__ string)-->scanl f a (chars s)),(scanl f a []-->[a]),(scanl f a (xs __as__ (_:_))-->tick a [] xs __with__ [(tick a zs (x:xs)-->tack (a:zs) (scanl f (f a x) xs&) __if__ thunkp xs),(tick a zs (x:xs)-->tick (f a x) (a:zs) xs),(tick a zs []-->tack zs [a]),(tick a zs xs-->tack zs (scanl f a xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(scanl1 __with__ [(scanl1 f (x __type__ matrix)-->__C::matrix_scanl1 f x),(scanl1 f (s __type__ string)-->scanl1 f (chars s)),(scanl1 f []-->[]),(scanl1 f (x:xs)-->scanl f x xs)]);
'(scanr __with__ [(scanr f a (x __type__ matrix)-->__C::matrix_scanr f a x),(scanr f a (s __type__ string)-->scanr f a (chars s)),(scanr f a []-->[a]),(scanr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr f a xs&),(y-->__case__ ys [(y:_-->y),(scanr _ _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs (x:xs)-->tack zs (f x (y __when__ [y:_-->ys])&:ys __when__ [ys-->scanr f a xs&]) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs [a]),(tick zs xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(scanr1 __with__ [(scanr1 f (x __type__ matrix)-->__C::matrix_scanr1 f x),(scanr1 f (s __type__ string)-->scanr1 f (chars s)),(scanr1 f []-->[]),(scanr1 f [x]-->[x]),(scanr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr1 f xs&),(y-->__case__ ys [(y:_-->y),(scanr1 _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs [x]),(x:xs-->tick (x:zs) xs),(_-->throw (bad_list_value xs))]),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(set __with__ [(set (m __as__ Set _)-->m),(set (m __type__ xset)-->set (members m)),(set (xs __type__ rlist)-->foldl insert emptyset xs)]);
'(setp __with__ [setp x-->typep set x]);
'(sgn __with__ [(sgn (x __type__ int)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ bigint)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ double)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x%y)-->sgn x)]);
'(short_matrix __with__ [(short_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_short_array n m p),(short_matrix (n __type__ int) (p __type__ pointer)-->short_matrix (1,n) p)]);
'(short_pointer __with__ [short_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_short_array p x __if__ nmatrixp x]);
'(sin __with__ [(sin (x __type__ int)-->sin (double x)),(sin (x __type__ bigint)-->sin (double x)),(sin (x+:y)-->sin x*cosh y+:cos x*sinh y),(sin (z __as__ (r<:t))-->polar (sin (rect z))),(sin (x%y)-->sin (x/y))]);
'(sinh __with__ [(sinh (x __type__ int)-->sinh (double x)),(sinh (x __type__ bigint)-->sinh (double x)),(sinh (x+:y)-->sinh x*cos y+:cosh x*sin y),(sinh (z __as__ (r<:t))-->polar (sinh (rect z))),(sinh (x%y)-->sinh (x/y))]);
'(slice __with__ [slice x y-->x!!y]);
'(smatrix __with__ [smatrix x-->y __if__ matrixp y __when__ [y-->__C::matrix_symbolic x]]);
'(smatrixp __with__ [smatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==0),(_-->0)]]);
'(sort __with__ [sort p (x __type__ matrix)-->__case__ (sort p (smatrix x)) [(y __type__ matrix-->imatrix y __if__ imatrixp x),(y __type__ matrix-->dmatrix y __if__ dmatrixp x),(y __type__ matrix-->cmatrix y __if__ cmatrixp x),(y-->y)]]);
'(spawnv __with__ [spawnv (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnv mode prog (smatrix argv)]);
'(spawnve __with__ [spawnve (mode __type__ int) (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->spawnve mode prog (smatrix argv) (smatrix envp)]);
'(spawnvp __with__ [spawnvp (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnvp mode prog (smatrix argv)]);
'(split __with__ [(split (delim __type__ string) (s __type__ string)-->__C::string_split delim s __if__ ~funp (:)),(split (delim __type__ string) (s __type__ string)-->list (__C::string_split delim s))]);
'(sprintf __with__ [sprintf (format __type__ string) args-->catch error (do_printf 0 [] formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count s (format:formats) args-->do_printf count (cstring buf:s) formats args __when__ [(size-->#s+1000),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__C::pure_snprintf buf size format),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))] __if__ literal format),(do_printf count s (format:formats) (arg:args)-->do_printf count (cstring buf:s) formats args __when__ [(t-->format_type (last format) format),(size-->__case__ (t,arg) [("s",x __type__ string-->#s+#x),("Z",x __type__ bigint-->int (__C::mpz_sizeinbase x 10)),("R",x __type__ mpfr-->1+int (ceil (__C::mpfr_get_prec x*__C::log10 2))),(_-->64)]),(size-->size+1024),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__case__ (t,arg) [("c",x __type__ int-->__C::pure_snprintf_int buf size format x),("c",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("d",x __type__ int-->__C::pure_snprintf_int buf size format x),("d",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("g",x __type__ double-->__C::pure_snprintf_double buf size format x),("s",x __type__ string-->__C::pure_snprintf_string buf size format x),("p",x __type__ string-->__C::pure_snprintf_pointer buf size format x),("p",x __type__ pointer-->__C::pure_snprintf_pointer buf size format x),("Z",x __type__ bigint-->__C::pure_snprintf_mpz buf size format x),("R",x __type__ mpfr-->__C::pure_snprintf_mpfr buf size format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))]),(do_printf count s [] _-->strcat (reverse s)),(do_printf count s _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(sqrt __with__ [(sqrt (x __type__ int)-->sqrt (double x)),(sqrt (x __type__ bigint)-->sqrt (double x)),(sqrt (x+:y)-->sqrt r*(cos t+:sin t) __when__ [(r-->sqrt (x*x+y*y)),(t-->atan2 y x/2)]),(sqrt (r<:t)-->sqrt r<:t/2),(sqrt (x%y)-->sqrt (x/y))]);
'(srandom __with__ [srandom (x __type__ matrix)-->srandom_array x (#x) __if__ imatrixp x&&dim x!0==1]);
'(sscanf __with__ [sscanf (s __type__ string) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(sp-->pointer_cast 1 (shift sbuf count)),(res-->__C::pure_sscanf sp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(sp-->pointer_cast 1 (shift sbuf count)),(res-->__case__ t [("n"-->__C::pure_sscanf_int sp format buf),("d"-->__C::pure_sscanf_int sp format buf),("g"-->__C::pure_sscanf_double sp format buf),("s"-->__C::pure_sscanf_string sp format buf),("p"-->__C::pure_sscanf_pointer sp format buf),("Z"-->__C::pure_sscanf_mpz sp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format),(shift p i-->pointer (__C::pure_bigintval p+i))] __when__ [sbuf-->sentry free (byte_cstring s)]]);
'(strcat __with__ [strcat xs-->s __if__ stringp s __when__ [s-->__C::string_concat_list xs]]);
'(stream __with__ [(stream (s __type__ string)-->stream (chars s)),(stream []-->[]),(stream (x:xs)-->x:xs __if__ thunkp xs),(stream (x:xs)-->x:stream xs&),(stream ()-->[]),(stream (xs __as__ (_,_))-->stream (list xs))]);
'(stride __with__ [stride (x __type__ matrix)-->__C::matrix_stride x]);
'(string __with__ [(string (s __type__ pointer)-->__C::pure_string s),(string []-->""),(string (xs __as__ (_ __type__ string:_))-->strcat xs __if__ all stringp xs),(string ()-->""),(string (xs __as__ (_ __type__ string,_))-->strcat xs __if__ all stringp xs __when__ [xs-->list xs]),(string (s __type__ string)-->s),(string (x __type__ matrix)-->string (list x) __if__ all stringp x)]);
'(string_dup __with__ [string_dup (s __type__ pointer)-->__C::pure_string_dup s]);
'(string_list __with__ [string_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (string_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(string_vector __with__ [string_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->string_list n p]]);
'(stringp __with__ [stringp x-->__case__ x [(_ __type__ string-->1),(_-->0)]]);
'(submat __with__ [submat (x __type__ matrix) (i __type__ int,j __type__ int) (n __type__ int,m __type__ int)-->__C::matrix_slice x i j (i+n-1) (j+m-1)]);
'(subseq __with__ [(subseq (x __type__ matrix) (a __type__ int) (b __type__ int)-->__C::matrix_slice (rowvector x) 0 a 0 b),(subseq (s __type__ string) (a __type__ int) (b __type__ int)-->substr s a (b-a+1)),(subseq [] (a __type__ int) (b __type__ int)-->[]),(subseq (xs __as__ (_:_)) (a __type__ int) (b __type__ int)-->take (b-a+1) (drop a xs) __with__ [(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs),(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),(subseq x a b-->slice x (a..b))]);
'(subseq2 __with__ [(subseq2 (x __type__ matrix) (a1 __type__ int) (b1 __type__ int) (a2 __type__ int) (b2 __type__ int)-->__C::matrix_slice x a1 a2 b1 b2),(subseq2 x a1 a1 a2 b2-->slice x (a1,a2..b2)),(subseq2 x a1 b1 a2 a2-->slice x (a1..b1,a2)),(subseq2 x a1 b1 a2 b2-->slice x (a1..b1,a2..b2))]);
'(substr __with__ [substr (s __type__ string) (pos __type__ int) (size __type__ int)-->__C::string_substr s (max 0 pos) (max 0 size) __with__ [max x y-->__ifelse__ (x>=y) x y]]);
'(succ __with__ [succ x-->x+1]);
'(tail __with__ [(tail (x __type__ matrix)-->x!!(1..#x-1) __if__ ~null x),(tail (s __type__ string)-->substr s 1 (#s-1) __if__ ~null s),(tail (x:xs)-->xs)]);
'(take __with__ [(take (k __type__ int) (x __type__ matrix)-->x!!(0..k-1)),(take (n __type__ int) (s __type__ string)-->substr s 0 n),(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs __with__ [(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->tack zs (take n xs&) __if__ thunkp xs),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(takewhile __with__ [(takewhile p (x __type__ matrix)-->__C::matrix_takewhile p x),(takewhile p (s __type__ string)-->strcat (takewhile p (chars s))),(takewhile p []-->[]),(takewhile p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs xs-->tack zs (takewhile p xs&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (x:zs) xs __if__ p x),(x:xs-->tack zs []),(_-->tack zs (takewhile p xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(tan __with__ [(tan (x __type__ int)-->tan (double x)),(tan (x __type__ bigint)-->tan (double x)),(tan (x+:y)-->(sin (2*x)+:sinh (2*y))/(cos (2*x)+cosh (2*y))),(tan (z __as__ (r<:t))-->polar (tan (rect z))),(tan (x%y)-->tan (x/y))]);
'(tanh __with__ [(tanh (x __type__ int)-->tanh (double x)),(tanh (x __type__ bigint)-->tanh (double x)),(tanh (x+:y)-->(sinh (2*x)+:sin (2*y))/(cosh (2*x)+cos (2*y))),(tanh (z __as__ (r<:t))-->polar (tanh (rect z))),(tanh (x%y)-->tanh (x/y))]);
'(transpose __with__ [transpose (x __type__ matrix)-->__C::matrix_transpose x]);
'(trunc __with__ [(trunc (x __type__ int)-->x),(trunc (x __type__ bigint)-->x),(trunc (x%y)-->x div y)]);
'(tuple __with__ [(tuple (x __type__ matrix)-->tuple (list x)),(tuple (s __type__ string)-->tuple (chars s)),(tuple []-->()),(tuple (x:xs)-->accum (t x) xs __with__ [(t (x __as__ (_,_))-->reverse x),(t x-->x),(accum ys (x:xs)-->accum (t x,ys) xs),(accum ys []-->t ys),(accum ys xs-->throw (bad_list_value xs))]),(tuple (x __as__ ())-->x),(tuple (x __as__ (_,_))-->x)]);
'(tuplep __with__ [tuplep x-->typep ('tuple) x]);
'(ubyte __with__ [ubyte (x __type__ int)-->__ifelse__ (x>=0) x (x+256)]);
'(uint __with__ [uint (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+4294967296L)]);
'(uint64 __with__ [(uint64 (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L)),(uint64 (x __type__ bigint)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L))]);
'(ulong __with__ [ulong-->uint64]);
'(uncurry __with__ [uncurry f (x,y)-->f x y]);
'(uncurry3 __with__ [uncurry3 f (x,y,z)-->f x y z]);
'(unref __with__ [unref (r __type__ ref)-->__C::pure_free (__C::pointer_get_expr r)$$clear_sentry r]);
'(unzip __with__ [(unzip (x __type__ matrix)-->map fst x,map snd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())])]),(unzip []-->[],[]),(unzip (us __as__ (_:_))-->foldr accum ([],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_-->check us])&,snd u:(ys __when__ [_,ys-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys __when__ [xs,ys-->check us]),(check (us __as__ (_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(unzip3 __with__ [(unzip3 (x __type__ matrix)-->map fst x,map snd x,map trd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())])]),(unzip3 []-->[],[],[]),(unzip3 (us __as__ (_:_))-->foldr accum ([],[],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_,_-->check us])&,snd u:(ys __when__ [_,ys,_-->check us])&,trd u:(zs __when__ [_,_,zs-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys,trd u:zs __when__ [xs,ys,zs-->check us]),(check (us __as__ (_,_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(update2 __with__ [update2 (x __as__ Array a) (i __type__ int,j __type__ int) y-->update x i (update (x!i) j y)]);
'(ushort __with__ [ushort (x __type__ int)-->__ifelse__ (x>=0) x (x+65536)]);
'(val __with__ [val (x=>v)-->v]);
'(vals __with__ [(vals (x __type__ matrix)-->colcatmap (__lambda__ [__v2__] (__case__ __v2__ [(u=>v-->{v}),(_-->{})])) x __if__ recordp x),(vals (Dict d)-->avl::vals d),(vals (MDict d)-->avl::mvals d),(vals (HDict d)-->avl::hvals d),(vals (HMDict d)-->avl::hvals d)]);
'(vector __with__ [vector xs-->x __if__ matrixp x __when__ [x-->rowvector xs]]);
'(vectorp __with__ [vectorp x-->matrixp x&&(n==1||m==1 __when__ [n __type__ int,m __type__ int-->dim x])]);
'(vectorseq __with__ [vectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvectorseq n m s]]);
'(void __with__ [void _-->()]);
'(xdictp __with__ [xdictp x-->typep xdict x]);
'(xsetp __with__ [xsetp x-->typep xset x]);
'(zip __with__ [(zip (x __type__ matrix) (y __type__ matrix)-->zipwith (,) x y),(zip (s __type__ string) (t __type__ string)-->zip (chars s) (chars t)),(zip [] _-->[]),(zip _ []-->[]),(zip (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack ((x,y):us) (zip xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick ((x,y):us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zip xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zip3 __with__ [(zip3 (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->zipwith3 (__lambda__ [x,y,z] (x,y,z)) x y z),(zip3 (s __type__ string) (t __type__ string) (u __type__ string)-->zip3 (chars s) (chars t) (chars u)),(zip3 [] _ _-->[]),(zip3 _ [] _-->[]),(zip3 _ _ []-->[]),(zip3 (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack ((x,y,z):us) (zip3 xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick ((x,y,z):us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zip3 xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith __with__ [(zipwith f (x __type__ matrix) (y __type__ matrix)-->__C::matrix_zipwith f x y),(zipwith f (s __type__ string) (t __type__ string)-->zipwith f (chars s) (chars t)),(zipwith f [] _-->[]),(zipwith f _ []-->[]),(zipwith f (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack (f x y:us) (zipwith f xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick (f x y:us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zipwith f xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith3 __with__ [(zipwith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->__C::matrix_zipwith3 f x y z),(zipwith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->zipwith3 f (chars s) (chars t) (chars u)),(zipwith3 f [] _ _-->[]),(zipwith3 f _ [] _-->[]),(zipwith3 f _ _ []-->[]),(zipwith3 f (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack (f x y z:us) (zipwith3 f xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick (f x y z:us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zipwith3 f xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'((||) __with__ [(x __type__ int||y-->__ifelse__ x x y),(y||x __type__ int-->__ifelse__ x x y)]);
'((~) __with__ [~x __type__ int-->~x]);
'((~==) __with__ [x~==y-->~same x y]);
let R2 = catmap (\x/*0:1*/ -> if (stringp s/*0:*/&&index s/*0:*/ "#<"<0&&(eval (sprintf "'(%s)" (__str__ x/*1:1*/))$$null lasterr) when s/*0:*/ = __str__ x/*0:1*/ {
  rule #0: s = __str__ x
  state 0: #0
	<var> state 1
  state 1: #0
} end) then [x/*0:1*/] else [] {
  rule #0: _ x = if (stringp s&&index s "#<"<0&&(eval (sprintf "'(%s)" (__str__ x))$$null lasterr) when s = __str__ x end) then [x] else []
  state 0: #0
	<var> state 1
  state 1: #0
}) R;
{
  rule #0: R2 = listmap (\x -> eval (sprintf "'(%s)" (__str__ x))) R2
  state 0: #0
	<var> state 1
  state 1: #0
}
'((!!) __with__ [(x!!ns __type__ matrix-->x!!list ns),(x!!(ns __type__ matrix,ms)-->x!!(list ns,ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ matrix)-->x!!(ns,list ms)),(x!!(ns __type__ int,ms)-->x!!([ns],ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ int)-->x!!(ns,[ms])),(x __type__ matrix!!(ns,ms)-->__case__ (ns,ms) [(ns __as__ (n:_),ms __as__ (m:_)-->submat x (n,m) (#ns,#ms) __if__ cont ns&&cont ms),(_-->colcatmap (mth (rowcatmap (nth x) ns)) ms)] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(mth x m-->catch (cst {}) (col x m)),(nth x n-->catch (cst {}) (row x n))]),(x __type__ matrix!!ns-->__ifelse__ (all intp ns&&packed x) (rowvector x!!([0],ns)) (colcatmap (nth x) ns) __with__ [nth x n-->catch (cst {}) {x!n}]),(s __type__ string!!ns-->__case__ ns [(ns __as__ (n:_)-->substr s n (count ns) __if__ cont ns),(_-->string (chars s!!ns))] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns)]),(xs __as__ ()!!ns-->tuple (list xs!!ns)),(xs __as__ (_,_)!!ns-->tuple (list xs!!ns)),(xs!!ns-->ys __if__ ok ys __when__ [ys-->__case__ ns [(ns __as__ (n __type__ int:_)-->list (take (count ns) (drop n xs)) __if__ listp xs&&cont ns),(_-->catmap (nth xs) ns)]] __with__ [(cont (n __type__ int:ns)-->~thunkp ns&&__case__ ns [([]-->1),(m __type__ int:_-->cont ns __if__ m==n+1),(_-->0)]),(nth xs n-->catch (cst []) [xs!n]),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns),(ok (catmap (nth _) _)-->0),(ok _-->1)]),(x __as__ Array _!!(is,js)-->listmap (__lambda__ [i] (cat (listmap (__lambda__ [j] (catch (cst []) [x!i!j])) js))) is)]);
'(($) __with__ [f$x-->f x]);
'(($$) __with__ [x$$y-->y]);
'((%) __with__ [(x __type__ bigint%0L-->x div 0L),(x __type__ bigint%y __type__ bigint-->(-x)%(-y) __if__ y<0),(x __type__ bigint%y __type__ bigint-->x div d%(y div d) __if__ d>1 __when__ [d-->gcd x y]),(x __type__ int%y __type__ bigint-->bigint x%y),(x __type__ bigint%y __type__ int-->x%bigint y),(x __type__ int%y __type__ int-->bigint x%bigint y),(x1%y1%(x2%y2)-->x1*y2%(y1*x2)),(x1%y1%x2 __type__ int-->x1%(y1*x2)),(x1%y1%x2 __type__ bigint-->x1%(y1*x2)),(x1 __type__ int%(x2%y2)-->x1*y2%x2),(x1 __type__ bigint%(x2%y2)-->x1*y2%x2),(z1 __as__ (_+:_)%z2 __as__ (_<:_)-->z1/z2),(z1 __as__ (_<:_)%z2 __as__ (_+:_)-->z1/z2),((x1+:y1)%(x2+:y2)-->(x1*x2+y1*y2)%d+:(y1*x2-x1*y2)%d __when__ [d-->x2*x2+y2*y2]),((r1<:t1)%(r2<:t2)-->r1%r2<:t1-t2),((x1+:y1)%x2-->x1*x2%d+:y1*x2%d __when__ [d-->x2*x2] __if__ realp x2),(x1%(x2+:y2)-->x1*x2%d+:(-x1*y2)%d __when__ [d-->x2*x2+y2*y2] __if__ realp x1),((r1<:t1)%x2-->r1%x2<:t1 __if__ realp x2),(x1%(r2<:t2)-->x1%r2<:-t2 __if__ realp x1),(x __type__ double%y-->x/y __if__ numberp y),(x%y __type__ double-->x/y __if__ numberp x)]);
'((&) __with__ [x&-->x]);
'((&&) __with__ [(x __type__ int&&y-->__ifelse__ x y x),(y&&x __type__ int-->__ifelse__ x y x)]);
'((') __with__ ['x-->x]);
'((*) __with__ [(x __type__ int*y __type__ int-->x*y),(x __type__ double*y __type__ double-->x*y),(x __type__ int*y __type__ double-->x*y),(x __type__ double*y __type__ int-->x*y),(x __type__ bigint*y __type__ bigint-->__C::bigint_mul x y),(x __type__ int*y __type__ bigint-->bigint x*y),(x __type__ bigint*y __type__ int-->x*bigint y),(x __type__ bigint*y __type__ double-->double x*y),(x __type__ double*y __type__ bigint-->x*double y),((x1+:y1)*(x2+:y2)-->x1*x2-y1*y2+:x1*y2+y1*x2),((r1<:t1)*(r2<:t2)-->r1*r2<:t1+t2),(z1 __as__ (x1+:y1)*z2 __as__ (r2<:t2)-->z1*rect z2),(z1 __as__ (r1<:t1)*z2 __as__ (x2+:y2)-->rect z1*z2),(z1 __as__ (x1+:y1)*x2-->z1*rect x2 __if__ realp x2),(x1*z2 __as__ (x2+:y2)-->rect x1*z2 __if__ realp x1),((r1<:t1)*x2-->r1*x2<:t1 __if__ realp x2),(x1*(r2<:t2)-->x1*r2<:t2 __if__ realp x1),(x1%y1*(x2%y2)-->x1*x2%(y1*y2)),(x1%y1*x2 __type__ int-->x1*x2%y1),(x1%y1*x2 __type__ bigint-->x1*x2%y1),(x1 __type__ int*(x2%y2)-->x1*x2%y2),(x1 __type__ bigint*(x2%y2)-->x1*x2%y2),(x1%y1*x2-->x1/y1*x2 __if__ numberp x2),(x1*(x2%y2)-->x1*(x2/y2) __if__ numberp x1),(d1 __as__ Dict _*d2 __as__ Dict _-->d1-(d1-d2)),(d1 __as__ MDict _*d2 __as__ MDict _-->d1-(d1-d2)),(d1 __as__ HDict _*d2 __as__ HDict _-->d1-(d1-d2)),(d1 __as__ HMDict _*d2 __as__ HMDict _-->d1-(d1-d2)),(m1 __as__ HMDict _*m2-->m1*hmdict m2 __if__ xdictp m2),(m1*m2 __as__ HMDict _-->hmdict m1*m2 __if__ xdictp m1),(m1 __as__ HDict _*m2-->__case__ m2 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->m1*hdict m2)] __if__ xdictp m2),(m1*m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->hdict m1*m2)] __if__ xdictp m2),(m1 __as__ MDict _*m2 __as__ Dict _-->m1*mdict m2),(m1 __as__ Dict _*m2 __as__ MDict _-->mdict m1*m2),(m1 __as__ Set _*m2 __as__ Set _-->m1-(m1-m2)),(m1 __as__ Bag _*m2 __as__ Bag _-->m1-(m1-m2)),(m1 __as__ HSet _*m2 __as__ HSet _-->m1-(m1-m2)),(m1 __as__ HBag _*m2 __as__ HBag _-->m1-(m1-m2)),(m1 __as__ HBag _*m2-->m1*hbag m2 __if__ xsetp m2),(m1*m2 __as__ HBag _-->hbag m1*m2 __if__ xsetp m1),(m1 __as__ HSet _*m2-->__case__ m2 [(Bag _-->hbag m1*hbag m2),(Set _-->m1*hset m2)] __if__ xsetp m2),(m1*m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1*hbag m2),(Set _-->hset m1*m2)] __if__ xsetp m2),(m1 __as__ Bag _*m2 __as__ Set _-->m1*bag m2),(m1 __as__ Set _*m2 __as__ Bag _-->bag m1*m2)]);
'((+) __with__ [(x __type__ int+y __type__ int-->x+y),(x __type__ double+y __type__ double-->x+y),(x __type__ int+y __type__ double-->x+y),(x __type__ double+y __type__ int-->x+y),(x __type__ bigint+y __type__ bigint-->__C::bigint_add x y),(x __type__ int+y __type__ bigint-->bigint x+y),(x __type__ bigint+y __type__ int-->x+bigint y),(x __type__ bigint+y __type__ double-->double x+y),(x __type__ double+y __type__ bigint-->x+double y),(s __type__ string+n __type__ int-->chr (ord s+n) __if__ #s==1),(s __type__ string+t __type__ string-->__C::string_concat s t),(s __type__ string+[]-->chars s),(s __type__ string+xs __as__ (_:_)-->chars s+xs),([]+s __type__ string-->chars s),(xs __as__ (_:_)+s __type__ string-->xs+chars s),([]+ys-->ys),(xs __as__ (_:_)+ys-->tick [] xs ys __with__ [(tick zs (x:xs) ys-->tack (x:zs) ((xs+ys)&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),((x1+:y1)+(x2+:y2)-->x1+x2+:y1+y2),(z1 __as__ (r1<:t1)+z2 __as__ (r2<:t2)-->polar (rect z1+rect z2)),(z1 __as__ (x1+:y1)+z2 __as__ (r2<:t2)-->z1+rect z2),(z1 __as__ (r1<:t1)+z2 __as__ (x2+:y2)-->rect z1+z2),((x1+:y1)+x2-->x1+x2+:y1 __if__ realp x2),(x1+(x2+:y2)-->x1+x2+:y2 __if__ realp x1),(z1 __as__ (r1<:t1)+x2-->z1+polar x2 __if__ realp x2),(x1+z2 __as__ (r2<:t2)-->polar x1+z2 __if__ realp x1),(x1%y1+x2%y2-->(x1*y2+x2*y1)%(y1*y2)),(x1%y1+x2 __type__ int-->(x1+x2*y1)%y1),(x1%y1+x2 __type__ bigint-->(x1+x2*y1)%y1),(x1 __type__ int+x2%y2-->(x1*y2+x2)%y2),(x1 __type__ bigint+x2%y2-->(x1*y2+x2)%y2),(x1%y1+x2-->x1/y1+x2 __if__ numberp x2),(x1+x2%y2-->x1+x2/y2 __if__ numberp x1),(d1 __as__ Dict _+d2 __as__ Dict _-->foldl insert d1 (members d2)),(d1 __as__ MDict _+d2 __as__ MDict _-->foldl insert d1 (members d2)),(d1 __as__ HDict _+d2 __as__ HDict _-->foldl insert d1 (members d2)),(d1 __as__ HMDict _+d2 __as__ HMDict _-->foldl insert d1 (members d2)),(m1 __as__ HMDict _+m2-->m1+hmdict m2 __if__ xdictp m2),(m1+m2 __as__ HMDict _-->hmdict m1+m2 __if__ xdictp m1),(m1 __as__ HDict _+m2-->__case__ m2 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->m1+hdict m2)] __if__ xdictp m2),(m1+m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->hdict m1+m2)] __if__ xdictp m2),(m1 __as__ MDict _+m2 __as__ Dict _-->m1+mdict m2),(m1 __as__ Dict _+m2 __as__ MDict _-->mdict m1+m2),(m1 __as__ Set _+m2 __as__ Set _-->foldl insert m1 (members m2)),(m1 __as__ Bag _+m2 __as__ Bag _-->foldl insert m1 (members m2)),(m1 __as__ HSet _+m2 __as__ HSet _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2 __as__ HBag _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2-->m1+hbag m2 __if__ xsetp m2),(m1+m2 __as__ HBag _-->hbag m1+m2 __if__ xsetp m1),(m1 __as__ HSet _+m2-->__case__ m2 [(Bag _-->hbag m1+hbag m2),(Set _-->m1+hset m2)] __if__ xsetp m2),(m1+m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1+hbag m2),(Set _-->hset m1+m2)] __if__ xsetp m2),(m1 __as__ Bag _+m2 __as__ Set _-->m1+bag m2),(m1 __as__ Set _+m2 __as__ Bag _-->bag m1+m2)]);
'((,) __with__ [(x,()-->x),((),y-->y),((x,y),z-->x,y,z)]);
'((-) __with__ [(x __type__ int-y __type__ int-->x-y),(x __type__ double-y __type__ double-->x-y),(x __type__ int-y __type__ double-->x-y),(x __type__ double-y __type__ int-->x-y),(x __type__ bigint-y __type__ bigint-->__C::bigint_sub x y),(x __type__ int-y __type__ bigint-->bigint x-y),(x __type__ bigint-y __type__ int-->x-bigint y),(x __type__ bigint-y __type__ double-->double x-y),(x __type__ double-y __type__ bigint-->x-double y),(s __type__ string-n __type__ int-->chr (ord s-n) __if__ #s==1&&ord s>=n),(s __type__ string-t __type__ string-->ord s-ord t __if__ #s==1&&#t==1),((x1+:y1)-(x2+:y2)-->x1-x2+:y1-y2),(z1 __as__ (r1<:t1)-z2 __as__ (r2<:t2)-->polar (rect z1-rect z2)),(z1 __as__ (x1+:y1)-z2 __as__ (r2<:t2)-->z1-rect z2),(z1 __as__ (r1<:t1)-z2 __as__ (x2+:y2)-->rect z1-z2),((x1+:y1)-x2-->x1-x2+:y1 __if__ realp x2),(x1-(x2+:y2)-->x1-x2+:-y2 __if__ realp x1),(z1 __as__ (r1<:t1)-x2-->z1-polar x2 __if__ realp x2),(x1-z2 __as__ (r2<:t2)-->polar x1-z2 __if__ realp x1),(x1%y1-x2%y2-->(x1*y2-x2*y1)%(y1*y2)),(x1%y1-x2 __type__ int-->(x1-x2*y1)%y1),(x1%y1-x2 __type__ bigint-->(x1-x2*y1)%y1),(x1 __type__ int-x2%y2-->(x1*y2-x2)%y2),(x1 __type__ bigint-x2%y2-->(x1*y2-x2)%y2),(x1%y1-x2-->x1/y1-x2 __if__ numberp x2),(x1-x2%y2-->x1-x2/y2 __if__ numberp x1),(d1 __as__ Dict _-d2 __as__ Dict _-->foldl delete_val d1 (members d2)),(d1 __as__ MDict _-d2 __as__ MDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HDict _-d2 __as__ HDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HMDict _-d2 __as__ HMDict _-->foldl delete_val d1 (members d2)),(m1 __as__ HMDict _-m2-->m1-hmdict m2 __if__ xdictp m2),(m1-m2 __as__ HMDict _-->hmdict m1-m2 __if__ xdictp m1),(m1 __as__ HDict _-m2-->__case__ m2 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->m1-hdict m2)] __if__ xdictp m2),(m1-m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->hdict m1-m2)] __if__ xdictp m2),(m1 __as__ MDict _-m2 __as__ Dict _-->m1-mdict m2),(m1 __as__ Dict _-m2 __as__ MDict _-->mdict m1-m2),(m1 __as__ Set _-m2 __as__ Set _-->foldl delete m1 (members m2)),(m1 __as__ Bag _-m2 __as__ Bag _-->foldl delete m1 (members m2)),(m1 __as__ HSet _-m2 __as__ HSet _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2 __as__ HBag _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2-->m1-hbag m2 __if__ xsetp m2),(m1-m2 __as__ HBag _-->hbag m1-m2 __if__ xsetp m1),(m1 __as__ HSet _-m2-->__case__ m2 [(Bag _-->hbag m1-hbag m2),(Set _-->m1-hset m2)] __if__ xsetp m2),(m1-m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1-hbag m2),(Set _-->hset m1-m2)] __if__ xsetp m2),(m1 __as__ Bag _-m2 __as__ Set _-->m1-bag m2),(m1 __as__ Set _-m2 __as__ Bag _-->bag m1-m2)]);
'((.) __with__ [(f.g) x-->f (g x)]);
'((..) __with__ [(n __type__ int..m __type__ int-->__C::pure_int_seq n m 1),(n1 __type__ int:n2 __type__ int..m __type__ int-->__C::pure_int_seq n1 m (n2-n1) __if__ n1~=n2),(n __type__ double..m __type__ double-->__C::pure_double_seq n m 1.0 __if__ ~infp n&&~infp m),(n __type__ int..m __type__ double-->__C::pure_double_seq (double n) m 1.0 __if__ ~infp m),(n __type__ double..m __type__ int-->__C::pure_double_seq n (double m) 1.0 __if__ ~infp n),(n1 __type__ double:n2 __type__ double..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ double-->__C::pure_double_seq (double n1) m (n2-n1) __if__ ~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ double..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(n1 __type__ int:n2 __type__ int..m __type__ double-->__C::pure_double_seq (double n1) m (double (n2-n1)) __if__ ~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ int-->__C::pure_double_seq (double n1) (double m) (n2-n1) __if__ n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(a __type__ string..b __type__ string-->map chr (ord a..ord b) __if__ charp a&&charp b),(a __type__ string:b __type__ string..c __type__ string-->map chr (ord a:ord b..ord c) __if__ charp a&&charp b&&charp c),(n1:n2..m-->__ifelse__ (nanp n1||nanp m||double m===-s) [] (__ifelse__ (double m===s) (iterate (flip (+) k) n1) (iterwhile (p u) (flip (+) k) n1)) __when__ [(s,p-->__ifelse__ (k>0) (inf,cmp (>=)) (-inf,cmp (<=)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]]),(u-->__ifelse__ (doublep k||doublep m) (m+0.5*k) m)] __if__ realp k&&k~=0&&~infp n1&&~infp n2 __when__ [k-->n2-n1]),(n..m-->__ifelse__ (nanp n||nanp m||double m===-inf) [] (__ifelse__ (double m===inf) (iterate (flip (+) 1) n) (iterwhile (cmp (>=) m) (flip (+) 1) n)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]] __if__ realp (m-n)&&~listp n&&~infp n)]);
'((<) __with__ [(x __type__ int<y __type__ int-->x<y),(x __type__ double<y __type__ double-->x<y),(x __type__ int<y __type__ double-->x<y),(x __type__ double<y __type__ int-->x<y),(x __type__ bigint<y __type__ bigint-->__C::bigint_cmp x y<0),(x __type__ int<y __type__ bigint-->bigint x<y),(x __type__ bigint<y __type__ int-->x<bigint y),(x __type__ bigint<y __type__ double-->double x<y),(x __type__ double<y __type__ bigint-->x<double y),(x __type__ string<y __type__ string-->__C::strcmp x y<0),(x1%y1<x2%y2-->x1*y2<x2*y1),(x1%y1<x2-->x1<x2*y1 __if__ realp x2),(x1<x2%y2-->x1*y2<x2 __if__ realp x2),(d1 __as__ Dict _<d2 __as__ Dict _-->d1<=d2&&~d1>=d2),(d1 __as__ MDict _<d2 __as__ MDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HDict _<d2 __as__ HDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HMDict _<d2 __as__ HMDict _-->d1<=d2&&~d1>=d2),(m1 __as__ HMDict _<m2-->m1<hmdict m2 __if__ xdictp m2),(m1<m2 __as__ HMDict _-->hmdict m1<m2 __if__ xdictp m1),(m1 __as__ HDict _<m2-->__case__ m2 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->m1<hdict m2)] __if__ xdictp m2),(m1<m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->hdict m1<m2)] __if__ xdictp m2),(m1 __as__ MDict _<m2 __as__ Dict _-->m1<mdict m2),(m1 __as__ Dict _<m2 __as__ MDict _-->mdict m1<m2),(m1 __as__ Set _<m2 __as__ Set _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ Bag _<m2 __as__ Bag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HSet _<m2 __as__ HSet _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2 __as__ HBag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2-->m1<hbag m2 __if__ xsetp m2),(m1<m2 __as__ HBag _-->hbag m1<m2 __if__ xsetp m1),(m1 __as__ HSet _<m2-->__case__ m2 [(Bag _-->hbag m1<hbag m2),(Set _-->m1<hset m2)] __if__ xsetp m2),(m1<m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<hbag m2),(Set _-->hset m1<m2)] __if__ xsetp m2),(m1 __as__ Bag _<m2 __as__ Set _-->m1<bag m2),(m1 __as__ Set _<m2 __as__ Bag _-->bag m1<m2)]);
'((<:) __with__ [(r __type__ int<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ bigint<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ double<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __type__ int-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ bigint-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ double-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ int-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ bigint-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ double-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r __as__ (_%_)<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __as__ (_%_)-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __as__ (_%_)-->r<:3.14159265358979 __if__ t==-3.14159265358979)]);
'((<<) __with__ [(x __type__ int<<y __type__ int-->x<<y),(x __type__ bigint<<y __type__ int-->__C::bigint_shl x y __if__ y>=0),(x __type__ bigint<<y __type__ int-->__C::bigint_shr x (-y))]);
'((<=) __with__ [(x __type__ int<=y __type__ int-->x<=y),(x __type__ double<=y __type__ double-->x<=y),(x __type__ int<=y __type__ double-->x<=y),(x __type__ double<=y __type__ int-->x<=y),(x __type__ bigint<=y __type__ bigint-->__C::bigint_cmp x y<=0),(x __type__ int<=y __type__ bigint-->bigint x<=y),(x __type__ bigint<=y __type__ int-->x<=bigint y),(x __type__ bigint<=y __type__ double-->double x<=y),(x __type__ double<=y __type__ bigint-->x<=double y),(x __type__ string<=y __type__ string-->__C::strcmp x y<=0),(x1%y1<=x2%y2-->x1*y2<=x2*y1),(x1%y1<=x2-->x1<=x2*y1 __if__ realp x2),(x1<=x2%y2-->x1*y2<=x2 __if__ realp x2),(d1 __as__ Dict _<=d2 __as__ Dict _-->cmp (members d1) (members d2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->0 __if__ xk<yk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->cmp xs1 ys __if__ yk<xk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->eq xv yv&&cmp xs ys),(eq u v-->__case__ (u==v) [(res __type__ int-->res),(_-->u===v)])]),(d1 __as__ MDict _<=d2 __as__ MDict _-->null (d1-d2)),(d1 __as__ HDict _<=d2 __as__ HDict _-->null (d1-d2)),(d1 __as__ HMDict _<=d2 __as__ HMDict _-->null (d1-d2)),(m1 __as__ HMDict _<=m2-->m1<=hmdict m2 __if__ xdictp m2),(m1<=m2 __as__ HMDict _-->hmdict m1<=m2 __if__ xdictp m1),(m1 __as__ HDict _<=m2-->__case__ m2 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->m1<=hdict m2)] __if__ xdictp m2),(m1<=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->hdict m1<=m2)] __if__ xdictp m2),(m1 __as__ MDict _<=m2 __as__ Dict _-->m1<=mdict m2),(m1 __as__ Dict _<=m2 __as__ MDict _-->mdict m1<=m2),(m1 __as__ Set _<=m2 __as__ Set _-->cmp (members m1) (members m2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ (x:xs)) (y:ys)-->0 __if__ x<y),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs1 ys __if__ y<x),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs ys)]),(m1 __as__ HSet _<=m2 __as__ HSet _-->all (member m2) (members m1)),(m1 __as__ Bag _<=m2 __as__ Bag _-->null (m1-m2)),(m1 __as__ HBag _<=m2 __as__ HBag _-->null (m1-m2)),(m1 __as__ HBag _<=m2-->m1<=hbag m2 __if__ xsetp m2),(m1<=m2 __as__ HBag _-->hbag m1<=m2 __if__ xsetp m1),(m1 __as__ HSet _<=m2-->__case__ m2 [(Bag _-->hbag m1<=hbag m2),(Set _-->m1<=hset m2)] __if__ xsetp m2),(m1<=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<=hbag m2),(Set _-->hset m1<=m2)] __if__ xsetp m2),(m1 __as__ Bag _<=m2 __as__ Set _-->m1<=bag m2),(m1 __as__ Set _<=m2 __as__ Bag _-->bag m1<=m2)]);
'((===) __with__ [x===y-->same x y]);
'((>) __with__ [(x __type__ int>y __type__ int-->x>y),(x __type__ double>y __type__ double-->x>y),(x __type__ int>y __type__ double-->x>y),(x __type__ double>y __type__ int-->x>y),(x __type__ bigint>y __type__ bigint-->__C::bigint_cmp x y>0),(x __type__ int>y __type__ bigint-->bigint x>y),(x __type__ bigint>y __type__ int-->x>bigint y),(x __type__ bigint>y __type__ double-->double x>y),(x __type__ double>y __type__ bigint-->x>double y),(x __type__ string>y __type__ string-->__C::strcmp x y>0),(x1%y1>x2%y2-->x1*y2>x2*y1),(x1%y1>x2-->x1>x2*y1 __if__ realp x2),(x1>x2%y2-->x1*y2>x2 __if__ realp x2),(d1 __as__ Dict _>d2 __as__ Dict _-->d1>=d2&&~d1<=d2),(d1 __as__ MDict _>d2 __as__ MDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HDict _>d2 __as__ HDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HMDict _>d2 __as__ HMDict _-->d1>=d2&&~d1<=d2),(m1 __as__ HMDict _>m2-->m1>hmdict m2 __if__ xdictp m2),(m1>m2 __as__ HMDict _-->hmdict m1>m2 __if__ xdictp m1),(m1 __as__ HDict _>m2-->__case__ m2 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->m1>hdict m2)] __if__ xdictp m2),(m1>m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->hdict m1>m2)] __if__ xdictp m2),(m1 __as__ MDict _>m2 __as__ Dict _-->m1>mdict m2),(m1 __as__ Dict _>m2 __as__ MDict _-->mdict m1>m2),(m1 __as__ Set _>m2 __as__ Set _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ Bag _>m2 __as__ Bag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HSet _>m2 __as__ HSet _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2 __as__ HBag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2-->m1>hbag m2 __if__ xsetp m2),(m1>m2 __as__ HBag _-->hbag m1>m2 __if__ xsetp m1),(m1 __as__ HSet _>m2-->__case__ m2 [(Bag _-->hbag m1>hbag m2),(Set _-->m1>hset m2)] __if__ xsetp m2),(m1>m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>hbag m2),(Set _-->hset m1>m2)] __if__ xsetp m2),(m1 __as__ Bag _>m2 __as__ Set _-->m1>bag m2),(m1 __as__ Set _>m2 __as__ Bag _-->bag m1>m2)]);
'((>=) __with__ [(x __type__ int>=y __type__ int-->x>=y),(x __type__ double>=y __type__ double-->x>=y),(x __type__ int>=y __type__ double-->x>=y),(x __type__ double>=y __type__ int-->x>=y),(x __type__ bigint>=y __type__ bigint-->__C::bigint_cmp x y>=0),(x __type__ int>=y __type__ bigint-->bigint x>=y),(x __type__ bigint>=y __type__ int-->x>=bigint y),(x __type__ bigint>=y __type__ double-->double x>=y),(x __type__ double>=y __type__ bigint-->x>=double y),(x __type__ string>=y __type__ string-->__C::strcmp x y>=0),(x1%y1>=x2%y2-->x1*y2>=x2*y1),(x1%y1>=x2-->x1>=x2*y1 __if__ realp x2),(x1>=x2%y2-->x1*y2>=x2 __if__ realp x2),(d1 __as__ Dict _>=d2 __as__ Dict _-->d2<=d1),(d1 __as__ MDict _>=d2 __as__ MDict _-->null (d2-d1)),(d1 __as__ HDict _>=d2 __as__ HDict _-->null (d2-d1)),(d1 __as__ HMDict _>=d2 __as__ HMDict _-->null (d2-d1)),(m1 __as__ HMDict _>=m2-->m1>=hmdict m2 __if__ xdictp m2),(m1>=m2 __as__ HMDict _-->hmdict m1>=m2 __if__ xdictp m1),(m1 __as__ HDict _>=m2-->__case__ m2 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->m1>=hdict m2)] __if__ xdictp m2),(m1>=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->hdict m1>=m2)] __if__ xdictp m2),(m1 __as__ MDict _>=m2 __as__ Dict _-->m1>=mdict m2),(m1 __as__ Dict _>=m2 __as__ MDict _-->mdict m1>=m2),(m1 __as__ Set _>=m2 __as__ Set _-->m2<=m1),(m1 __as__ HSet _>=m2 __as__ HSet _-->all (member m1) (members m2)),(m1 __as__ Bag _>=m2 __as__ Bag _-->null (m2-m1)),(m1 __as__ HBag _>=m2 __as__ HBag _-->null (m2-m1)),(m1 __as__ HBag _>=m2-->m1>=hbag m2 __if__ xsetp m2),(m1>=m2 __as__ HBag _-->hbag m1>=m2 __if__ xsetp m1),(m1 __as__ HSet _>=m2-->__case__ m2 [(Bag _-->hbag m1>=hbag m2),(Set _-->m1>=hset m2)] __if__ xsetp m2),(m1>=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>=hbag m2),(Set _-->hset m1>=m2)] __if__ xsetp m2),(m1 __as__ Bag _>=m2 __as__ Set _-->m1>=bag m2),(m1 __as__ Set _>=m2 __as__ Bag _-->bag m1>=m2)]);
'((>>) __with__ [(x __type__ int>>y __type__ int-->x>>y),(x __type__ bigint>>y __type__ int-->__C::bigint_shr x y __if__ y>=0),(x __type__ bigint>>y __type__ int-->__C::bigint_shl x (-y))]);
'((^) __with__ [(1.0^y __type__ double-->1.0),((-1.0)^y __type__ double-->1.0 __if__ infp y),(x __type__ double^y __type__ double-->__C::pow x y),(x __type__ int^y __type__ int-->double x^double y),(x __type__ bigint^y __type__ bigint-->double x^double y),(x __type__ int^y __type__ bigint-->double x^double y),(x __type__ bigint^y __type__ int-->double x^double y),(x __type__ double^y __type__ int-->x^double y),(x __type__ double^y __type__ bigint-->x^double y),(x __type__ int^y __type__ double-->double x^y),(x __type__ bigint^y __type__ double-->double x^y),(z1 __as__ (_+:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(z1 __as__ (_<:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(x1^z2 __as__ (_+:_)-->exp (ln (rect x1)*z2) __if__ realp x1),(x1^z2 __as__ (_<:_)-->exp (ln (polar x1)*z2) __if__ realp x1),((x1%y1)^(x2%y2)-->(x1/y1)^(x2/y2)),((x1%y1)^x2-->(x1/y1)^x2 __if__ numberp x2),(x1^(x2%y2)-->x1^(x2/y2) __if__ numberp x1)]);
'(pure_quoted_symbol __with__ [pure_quoted_symbol (s __type__ string)-->pure_quoted_symbol id __if__ id>0 __when__ [id __type__ int-->__C::pure_getsym s]]);
'(record_elem_at __with__ [record_elem_at x y-->throw out_of_bounds]);
'(abs __with__ [(abs (x __type__ int)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ bigint)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ double)-->__ifelse__ (x>0) x (-x)),(abs (x+:y)-->sqrt (x*x+y*y)),(abs (r<:t)-->r),(abs (x%y)-->abs x%y)]);
'(acos __with__ [(acos (x __type__ int)-->acos (double x)),(acos (x __type__ bigint)-->acos (double x)),(acos (z __as__ (x+:y))-->-i*ln (z+i*sqrt (1-z*z))),(acos (z __as__ (r<:t))-->-i*ln (z+i*sqrt (1-z*z))),(acos (x%y)-->acos (x/y))]);
'(acosh __with__ [(acosh (x __type__ int)-->acosh (double x)),(acosh (x __type__ bigint)-->acosh (double x)),(acosh (z __as__ (x+:y))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (z __as__ (r<:t))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (x%y)-->acosh (x/y))]);
'(all __with__ [(all p (x __type__ matrix)-->__C::matrix_all p x),(all p (s __type__ string)-->all p (chars s)),(all p []-->1),(all p (x:xs)-->__ifelse__ (p x) (all p xs) 0)]);
'((and) __with__ [(x __type__ int and y __type__ int-->x and y),(x __type__ bigint and y __type__ bigint-->__C::bigint_and x y),(x __type__ int and y __type__ bigint-->bigint x and y),(x __type__ bigint and y __type__ int-->x and bigint y)]);
'(any __with__ [(any p (x __type__ matrix)-->__C::matrix_any p x),(any p (s __type__ string)-->any p (chars s)),(any p []-->0),(any p (x:xs)-->__ifelse__ (p x) 1 (any p xs))]);
'(applp __with__ [applp x-->typep ('appl) x]);
'(arg __with__ [(arg (x+:y)-->atan2 y x),(arg (r<:t)-->t),(arg (x __type__ int)-->atan2 0 x),(arg (x __type__ bigint)-->atan2 0 x),(arg (x __type__ double)-->atan2 0 x),(arg (x%y)-->atan2 0 (x/y))]);
'(array __with__ [array (xs __type__ rlist)-->foldl append emptyarray xs]);
'(array2 __with__ [array2 xs-->array (map array xs)]);
'(arrayp __with__ [arrayp x-->typep array x]);
'(asin __with__ [(asin (x __type__ int)-->asin (double x)),(asin (x __type__ bigint)-->asin (double x)),(asin (z __as__ (x+:y))-->-i*ln (i*z+sqrt (1-z*z))),(asin (z __as__ (r<:t))-->-i*ln (i*z+sqrt (1-z*z))),(asin (x%y)-->asin (x/y))]);
'(asinh __with__ [(asinh (x __type__ int)-->asinh (double x)),(asinh (x __type__ bigint)-->asinh (double x)),(asinh (z __as__ (x+:y))-->ln (z+sqrt (z*z+1))),(asinh (z __as__ (r<:t))-->ln (z+sqrt (z*z+1))),(asinh (x%y)-->asinh (x/y))]);
'(atan __with__ [(atan (x __type__ int)-->atan (double x)),(atan (x __type__ bigint)-->atan (double x)),(atan (z __as__ (x+:y))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (z __as__ (r<:t))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (x%y)-->atan (x/y))]);
'(atan2 __with__ [(atan2 (x __type__ int) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ bigint) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ double) (y __type__ int)-->atan2 x (double y)),(atan2 (x __type__ double) (y __type__ bigint)-->atan2 x (double y)),(atan2 (x%y) z-->atan2 (x/y) z __if__ realp z),(atan2 x (y%z)-->atan2 x (y/z) __if__ realp x)]);
'(atanh __with__ [(atanh (x __type__ int)-->atanh (double x)),(atanh (x __type__ bigint)-->atanh (double x)),(atanh (z __as__ (x+:y))-->(ln (1+z)-ln (1-z))/2),(atanh (z __as__ (r<:t))-->(ln (1+z)-ln (1-z))/2),(atanh (x%y)-->atanh (x/y))]);
'(hfirst __with__ [hfirst t-->avl::mfirst t]);
'(hkeys __with__ [hkeys t-->avl::mkeys t]);
'(hlast __with__ [hlast t-->avl::mlast t]);
'(hmembers __with__ [hmembers t-->avl::mmembers t]);
'(hrmfirst __with__ [hrmfirst t-->avl::mrmfirst t]);
'(hrmlast __with__ [hrmlast t-->avl::mrmlast t]);
'(hsize __with__ [hsize t-->avl::msize t]);
'(hvals __with__ [hvals t-->avl::mvals t]);
'(mdeletek __with__ [mdeletek t y-->avl::mdelete t y]);
'(mdeleteka __with__ [mdeleteka t y-->avl::mdeletea t y]);
'(mhdelete __with__ [mhdelete t y-->avl::hdelete t y]);
'(mhdeletek __with__ [mhdeletek t y-->avl::hdeletek t y]);
'(mhdeletekv __with__ [mhdeletekv t y-->avl::hdeletekv t y]);
'(bag __with__ [(bag (m __as__ Bag _)-->m),(bag (m __type__ xset)-->bag (members m)),(bag (xs __type__ rlist)-->foldl insert emptybag xs)]);
'(bagp __with__ [bagp x-->typep bag x]);
'(bigint __with__ [(bigint (x __type__ bigint)-->x),(bigint (x __type__ int)-->__C::pure_bigintval x),(bigint (x __type__ double)-->__C::pure_bigintval x),(bigint (x __as__ (_%_))-->trunc x)]);
'(bigintp __with__ [bigintp x-->__case__ x [(_ __type__ bigint-->1),(_-->0)]]);
'(bigintvalp __with__ [bigintvalp x-->ratvalp x&&frac (re x)==0]);
'(blobp __with__ [blobp _-->0]);
'(bool __with__ [bool (x __type__ int)-->~(~x)]);
'(boolp __with__ [boolp x-->typep ('bool) x]);
'(byte_cstring __with__ [byte_cstring (s __type__ string)-->ptrtag 1$__C::pure_byte_cstring s]);
'(byte_cstring_pointer __with__ [byte_cstring_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_cstring xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(byte_matrix __with__ [(byte_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_byte_array n m p),(byte_matrix (n __type__ int) (p __type__ pointer)-->byte_matrix (1,n) p)]);
'(byte_pointer __with__ [byte_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_byte_array p x __if__ nmatrixp x]);
'(byte_string __with__ [byte_string (s __type__ string)-->ptrtag 1$__C::pure_byte_string s]);
'(byte_string_pointer __with__ [byte_string_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_string xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(cat __with__ [(cat []-->[]),(cat (xs __as__ (_:_))-->foldr (tick []) [] xs __with__ [(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)]),(foldr (tick _) [] x-->cat x),(tick zs (x:xs) ys-->tack (x:zs) (tick [] xs ys&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(catmap __with__ [(catmap f (x __type__ matrix)-->cat (list (map f x))),(catmap f (s __type__ string)-->catmap f (chars s)),(catmap f []-->[]),(catmap f (xs __as__ (_:_))-->cat (map f xs))]);
'(ceil __with__ [(ceil (x __type__ int)-->x),(ceil (x __type__ bigint)-->x),(ceil (x __as__ (_%_))-->-floor (-x))]);
'(charp __with__ [charp x-->typep ('char) x]);
'(chars __with__ [(chars (s __type__ string)-->__C::string_chars s __if__ ~funp (:)),(chars (s __type__ string)-->list (__C::string_chars s))]);
'(chr __with__ [chr (n __type__ int)-->c __if__ stringp c __when__ [c-->__C::string_chr n]]);
'(cis __with__ [(cis (t __type__ int)-->rect (1<:t)),(cis (t __type__ bigint)-->rect (1<:t)),(cis (t __type__ double)-->rect (1<:t)),(cis (x%y)-->rect (1<:x/y))]);
'(clearsym __with__ [(clearsym (sym __type__ string) (level __type__ int)-->() __when__ [(res-->evalcmd ("clear -t"+str level+" "+sym)),(_-->stringp res||throw evalcmd)]),(clearsym (sym __type__ symbol) (level __type__ int)-->clearsym sym level __when__ [(sym-->str sym),(sym-->__ifelse__ (sym!0=="(") (substr sym 2 (#sym-2)) sym)])]);
'(closurep __with__ [closurep x-->funp x||lambdap x]);
'(cmatrixp __with__ [cmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==2),(_-->0)]]);
'(col __with__ [col (x __type__ matrix) (j __type__ int)-->__ifelse__ (j>=0&&j<m) (__C::matrix_slice x 0 j (n-1) j) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(colcatmap __with__ [(colcatmap f []-->{}),(colcatmap f (xs __as__ (_:_))-->colcat (map f xs)),(colcatmap f (x __type__ matrix)-->matcat (map f x)),(colcatmap f (s __type__ string)-->colcatmap f (chars s))]);
'(colmap __with__ [(colmap f []-->{}),(colmap f (xs __as__ (_:_))-->colcat (map f xs)),(colmap f (x __type__ matrix)-->map f x),(colmap f (s __type__ string)-->colmap f (chars s))]);
'(colrev __with__ [colrev (x __type__ matrix)-->colcat (reverse (cols x))]);
'(cols __with__ [cols (x __type__ matrix)-->map (col x) (0..m-1) __when__ [_,m __type__ int-->dim x]]);
'(colvector __with__ [(colvector (x __type__ matrix)-->redim (#x,1) x),(colvector ()-->redim (0,1) {}),(colvector (xs __as__ (_,_))-->colvector (list xs)),(colvector xs-->redim (#x,1) x __if__ matrixp x __when__ [x-->rowvector xs])]);
'(colvectorp __with__ [colvectorp x-->matrixp x&&dim x!1==1]);
'(colvectorseq __with__ [(colvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_colvect n m s),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect n m s),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq n m s-->x __if__ matrixp x __when__ [x-->colvector (n:n+s..m)])]);
'(complex __with__ [(complex (z __as__ (x+:y))-->z),(complex (z __as__ (r<:t))-->z),(complex (x __type__ int)-->x+:0),(complex (x __type__ bigint)-->x+:0),(complex (x __type__ double)-->x+:0.0),(complex (x%y)-->x%y+:0L%1L)]);
'(complex_float_matrix __with__ [(complex_float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_float_array n m p),(complex_float_matrix (n __type__ int) (p __type__ pointer)-->complex_float_matrix (1,n) p)]);
'(complex_float_pointer __with__ [complex_float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_float_array p x __if__ nmatrixp x]);
'(complex_matrix __with__ [(complex_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array n m p),(complex_matrix (n __type__ int) (p __type__ pointer)-->complex_matrix (1,n) p)]);
'(complex_matrix_view __with__ [(complex_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array_nodup n m p),(complex_matrix_view (n __type__ int) (p __type__ pointer)-->complex_matrix_view (1,n) p)]);
'(complex_pointer __with__ [complex_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_array p x __if__ nmatrixp x]);
'(complexp __with__ [complexp x-->typep ('complex) x]);
'(compvalp __with__ [compvalp x-->numberp x]);
'(conj __with__ [(conj (x __type__ matrix)-->__C::matrix_conj x __if__ nmatrixp x),(conj (x+:y)-->x+:-y),(conj (r<:t)-->r<:-t),(conj (x __type__ int)-->x),(conj (x __type__ bigint)-->x),(conj (x __type__ double)-->x),(conj (x __as__ (_%_))-->x)]);
'(cooked __with__ [cooked (p __type__ pointer)-->sentry free p]);
'(cos __with__ [(cos (x __type__ int)-->cos (double x)),(cos (x __type__ bigint)-->cos (double x)),(cos (x+:y)-->cos x*cosh y+:-sin x*sinh y),(cos (z __as__ (r<:t))-->polar (cos (rect z))),(cos (x%y)-->cos (x/y))]);
'(cosh __with__ [(cosh (x __type__ int)-->cosh (double x)),(cosh (x __type__ bigint)-->cosh (double x)),(cosh (x+:y)-->cosh x*cos y+:sinh x*sin y),(cosh (z __as__ (r<:t))-->polar (cosh (rect z))),(cosh (x%y)-->cosh (x/y))]);
'(cst __with__ [cst x y-->x]);
'(cstring __with__ [cstring (s __type__ pointer)-->__C::pure_cstring s]);
'(cstring_dup __with__ [cstring_dup (s __type__ pointer)-->__C::pure_cstring_dup s]);
'(cstring_list __with__ [cstring_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (cstring_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(cstring_vector __with__ [cstring_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->cstring_list n p]]);
'(curry __with__ [curry f x y-->f (x,y)]);
'(curry3 __with__ [curry3 f x y z-->f (x,y,z)]);
'(cycle __with__ [(cycle (x __type__ matrix)-->cycle (list x)),(cycle (s __type__ string)-->cycle (chars s)),(cycle (ys __as__ (x:xs))-->x:(xs+cycle ys)&)]);
'(cyclen __with__ [(cyclen (n __type__ int) (x __type__ matrix)-->cyclen n (list x) __if__ ~null x),(cyclen (n __type__ int) (s __type__ string)-->cyclen n (chars s) __if__ ~null s),(cyclen (n __type__ int) (x:xs)-->[] __if__ n<=0),(cyclen (n __type__ int) (x:xs)-->accum [] n __with__ [(accum ys (n __type__ int)-->cat ys+take n xs __if__ n<=m),(accum ys (n __type__ int)-->accum (xs:ys) (n-m))] __when__ [(xs-->x:xs),(m __type__ int-->#xs)] __if__ rlistp xs)]);
'(delete __with__ [(delete (x __type__ matrix) y-->__C::record_delete x y __if__ recordp x),(delete (Dict d) x-->Dict (avl::deletek d x)),(delete (HDict d) x-->HDict (avl::hdeletek d x)),(delete (MDict d) x-->MDict (avl::mdeletek d x)),(delete (HMDict d) x-->HMDict (avl::mhdeletek d x)),(delete (Set m) y-->Set (avl::delete m y)),(delete (Bag m) y-->Bag (avl::mdelete m y)),(delete (HSet m) y-->HSet (avl::hdelete m y)),(delete (HBag m) y-->HBag (avl::mhdelete m y))]);
'(delete_all __with__ [(delete_all (Dict d) x-->Dict (avl::deletek d x)),(delete_all (HDict d) x-->HDict (avl::hdeletek d x)),(delete_all (MDict d) x-->MDict (avl::mdeleteka d x)),(delete_all (HMDict d) x-->HMDict (avl::mhdeleteka d x)),(delete_all (Set m) y-->Set (avl::delete m y)),(delete_all (Bag m) y-->Bag (avl::mdeletea m y)),(delete_all (HSet m) y-->HSet (avl::hdelete m y)),(delete_all (HBag m) y-->HBag (avl::mhdeletea m y))]);
'(delete_val __with__ [(delete_val (Dict d) (el __as__ (x=>y))-->Dict (avl::deletekv d el)),(delete_val (HDict d) (el __as__ (x=>y))-->HDict (avl::hdeletekv d el)),(delete_val (MDict d) (el __as__ (x=>y))-->MDict (avl::mdeletekv d el)),(delete_val (HMDict d) (el __as__ (x=>y))-->HMDict (avl::mhdeletekv d el))]);
'(den __with__ [(den (x%y)-->y),(den (x __type__ int)-->1L),(den (x __type__ bigint)-->1L),(den (x __type__ double)-->__ifelse__ (frac x==0.0) 1L (den (rational x)))]);
'(dict __with__ [(dict (d __as__ Dict _)-->d),(dict (d __type__ xdict)-->dict (members d)),(dict (xys __type__ rlist)-->foldl insert emptydict xys)]);
'(dictp __with__ [dictp x-->typep dict x]);
'(dim __with__ [dim (x __type__ matrix)-->__C::matrix_dim x]);
'((div) __with__ [(x __type__ int div y __type__ int-->x div y),(x __type__ bigint div y __type__ bigint-->__C::bigint_div x y),(x __type__ int div y __type__ bigint-->bigint x div y),(x __type__ bigint div y __type__ int-->x div bigint y)]);
'(dmatrixp __with__ [dmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==1),(_-->0)]]);
'(do __with__ [(do f (x __type__ matrix)-->__C::matrix_do f x),(do f (s __type__ string)-->do f (chars s)),(do f []-->()),(do f (x:xs)-->f x$$do f xs)]);
'(double __with__ [(double (x __type__ double)-->x),(double (x __type__ int)-->__C::pure_dblval x),(double (x __type__ bigint)-->__C::pure_dblval x),(double (x%y)-->x/y)]);
'(double_matrix __with__ [(double_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array n m p),(double_matrix (n __type__ int) (p __type__ pointer)-->double_matrix (1,n) p)]);
'(double_matrix_view __with__ [(double_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array_nodup n m p),(double_matrix_view (n __type__ int) (p __type__ pointer)-->double_matrix_view (1,n) p)]);
'(double_pointer __with__ [double_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_double_array p x __if__ nmatrixp x]);
'(doublep __with__ [doublep x-->__case__ x [(_ __type__ double-->1),(_-->0)]]);
'(dowith __with__ [(dowith f (x __type__ matrix) (y __type__ matrix)-->do (uncurry f) (zip x y)),(dowith f (s __type__ string) (t __type__ string)-->dowith f (chars s) (chars t)),(dowith f (x:xs) (y:ys)-->f x y$$dowith f xs ys),(dowith f _ _-->())]);
'(dowith3 __with__ [(dowith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->do (uncurry3 f) (zip3 x y z)),(dowith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->dowith3 f (chars s) (chars t) (chars u)),(dowith3 f (x:xs) (y:ys) (z:zs)-->f x y z$$dowith3 f xs ys zs),(dowith3 f _ _ _-->())]);
'(drop __with__ [(drop (k __type__ int) (x __type__ matrix)-->x!!(k..#x-1)),(drop (n __type__ int) (s __type__ string)-->substr s n (#s-n)),(drop (n __type__ int) []-->[]),(drop (n __type__ int) (ys __as__ (x:xs))-->drop (n-1) xs __if__ n>1),(drop (n __type__ int) (ys __as__ (x:xs))-->xs __if__ n==1),(drop (n __type__ int) (ys __as__ (x:xs))-->ys)]);
'(dropwhile __with__ [(dropwhile p (x __type__ matrix)-->__C::matrix_dropwhile p x),(dropwhile p (s __type__ string)-->strcat (dropwhile p (chars s))),(dropwhile p []-->[]),(dropwhile p (ys __as__ (x:xs))-->dropwhile p xs __if__ p x),(dropwhile p (ys __as__ (x:xs))-->ys)]);
'(emptybag __with__ [emptybag-->Bag avl::emptytree]);
'(emptydict __with__ [emptydict-->Dict avl::emptytree]);
'(emptyhbag __with__ [emptyhbag-->HBag avl::emptytree]);
'(emptyhdict __with__ [emptyhdict-->HDict avl::emptytree]);
'(emptyhmdict __with__ [emptyhmdict-->HMDict avl::emptytree]);
'(emptyhset __with__ [emptyhset-->HSet avl::emptytree]);
'(emptymdict __with__ [emptymdict-->MDict avl::emptytree]);
'(emptyset __with__ [emptyset-->Set avl::emptytree]);
'(exactp __with__ [exactp x-->__case__ x [(x+:y-->~doublep x&&~doublep y),(x<:y-->~doublep x&&~doublep y),(x%y-->~doublep x&&~doublep y),(_-->~doublep x)] __if__ numberp x]);
'(execv __with__ [execv (prog __type__ string) (argv __type__ rlist)-->execv prog (smatrix argv)]);
'(execve __with__ [execve (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->execve prog (smatrix argv) (smatrix envp)]);
'(execvp __with__ [execvp (prog __type__ string) (argv __type__ rlist)-->execvp prog (smatrix argv)]);
'(exp __with__ [(exp (x __type__ int)-->exp (double x)),(exp (x __type__ bigint)-->exp (double x)),(exp (x+:y)-->exp x*(cos y+:sin y)),(exp (r<:t)-->exp (r*cos t)<:r*sin t),(exp (x%y)-->exp (x/y))]);
'(fclose __with__ [fclose (fp __type__ pointer)-->clear_sentry fp$$__C::fclose fp __if__ get_sentry fp===__C::fclose]);
'(fdopen __with__ [fdopen (fd __type__ int) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fdopen fd mode]]);
'(fget __with__ [fget (f __type__ pointer)-->read_a_file f buf [] __when__ [buf-->malloc 65536] __with__ [read_a_file f buf t-->check s __when__ [s-->__C::fgets buf 65536 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ feof f||ferror f),(check (s __type__ string)-->read_a_file f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x))]]]);
'(fgets __with__ [fgets (f __type__ pointer)-->read_a_line f buf [] __when__ [buf-->malloc 1024] __with__ [read_a_line f buf t-->check s __when__ [s-->__C::fgets buf 1024 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ done s),(check (s __type__ string)-->read_a_line f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x)),(done (s __type__ string)-->feof f||ferror f||~null s&&last s=="\n")]]]);
'(filter __with__ [(filter p (x __type__ matrix)-->__C::matrix_filter p x),(filter p (s __type__ string)-->strcat (filter p (chars s))),(filter p []-->[]),(filter p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (add p x zs) (filter p xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (add p x zs) xs),(tick zs []-->tack zs []),(tick _ xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys),(add p x xs-->__ifelse__ (p x) (x:xs) xs)])]);
'(fix __with__ [fix f-->f (fix f&)]);
'(flip __with__ [flip f x y-->f y x]);
'(float_matrix __with__ [(float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_float_array n m p),(float_matrix (n __type__ int) (p __type__ pointer)-->float_matrix (1,n) p)]);
'(float_pointer __with__ [float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_float_array p x __if__ nmatrixp x]);
'(floor __with__ [(floor (x __type__ int)-->x),(floor (x __type__ bigint)-->x),(floor (x __as__ (_%_))-->__ifelse__ (n<=x) n (n-1) __when__ [n __type__ bigint-->trunc x])]);
'(fnmatch __with__ [fnmatch (pat __type__ string) (s __type__ string) (flags __type__ int)-->__C::fnmatch pat s flags==0]);
'(foldl __with__ [(foldl f a (x __type__ matrix)-->__C::matrix_foldl f a x),(foldl f a (s __type__ string)-->foldl f a (chars s)),(foldl f a []-->a),(foldl f a (x:xs)-->foldl f (f a x) xs)]);
'(foldl1 __with__ [(foldl1 f (x __type__ matrix)-->__C::matrix_foldl1 f x __if__ ~null x),(foldl1 f (s __type__ string)-->foldl1 f (chars s)),(foldl1 f (x:xs)-->foldl f x xs)]);
'(foldr __with__ [(foldr f a (x __type__ matrix)-->__C::matrix_foldr f a x),(foldr f a (s __type__ string)-->foldr f a (chars s)),(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(foldr1 __with__ [(foldr1 f (x __type__ matrix)-->__C::matrix_foldr1 f x __if__ ~null x),(foldr1 f (s __type__ string)-->foldr1 f (chars s)),(foldr1 f [x]-->x),(foldr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (foldr1 f ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs x),(x:xs-->tick (x:zs) xs),(_-->tack zs (foldr1 f xs))]),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(fopen __with__ [fopen (name __type__ string) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fopen name mode]]);
'(fprintf __with__ [fprintf (fp __type__ pointer) (format __type__ string) args-->catch error (do_printf 0 formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count (format:formats) args-->do_printf count formats args __when__ [(res-->__C::pure_fprintf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))] __if__ literal format),(do_printf count (format:formats) (arg:args)-->do_printf count formats args __when__ [(res-->__case__ (format_type (last format) format,arg) [("c",x __type__ int-->__C::pure_fprintf_int fp format x),("c",x __type__ bigint-->__C::pure_fprintf_int fp format x),("d",x __type__ int-->__C::pure_fprintf_int fp format x),("d",x __type__ bigint-->__C::pure_fprintf_int fp format x),("g",x __type__ double-->__C::pure_fprintf_double fp format x),("s",x __type__ string-->__C::pure_fprintf_string fp format x),("p",x __type__ string-->__C::pure_fprintf_pointer fp format x),("p",x __type__ pointer-->__C::pure_fprintf_pointer fp format x),("Z",x __type__ bigint-->__C::pure_fprintf_mpz fp format x),("R",x __type__ mpfr-->__C::pure_fprintf_mpfr fp format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))]),(do_printf count [] _-->count),(do_printf count _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(frac __with__ [(frac (x __type__ int)-->x-trunc x),(frac (x __type__ bigint)-->x-trunc x),(frac (x __type__ double)-->x-trunc x),(frac (x __as__ (_%_))-->x-trunc x)]);
'(fscanf __with__ [fscanf (fp __type__ pointer) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(res-->__C::pure_fscanf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(res-->__case__ t [("n"-->__C::pure_fscanf_int fp format buf),("d"-->__C::pure_fscanf_int fp format buf),("g"-->__C::pure_fscanf_double fp format buf),("s"-->__C::pure_fscanf_string fp format buf),("p"-->__C::pure_fscanf_pointer fp format buf),("Z"-->__C::pure_fscanf_mpz fp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format)]]);
'(functionp __with__ [functionp x-->nargs x>0 __with__ [(nargs ((x __as__ _) _)-->nargs x-1),(nargs x-->nargs x)]]);
'(gcd __with__ [(gcd (x __type__ bigint) (y __type__ bigint)-->__C::bigint_gcd x y),(gcd (x __type__ int) (y __type__ bigint)-->__C::bigint_gcd (bigint x) y),(gcd (x __type__ bigint) (y __type__ int)-->__C::bigint_gcd x (bigint y)),(gcd (x __type__ int) (y __type__ int)-->int (__C::bigint_gcd (bigint x) (bigint y)))]);
'(get __with__ [get (r __type__ ref)-->__C::pointer_get_expr r]);
'(get_byte __with__ [get_byte (x __type__ pointer)-->__C::pointer_get_byte x]);
'(get_double __with__ [get_double (x __type__ pointer)-->__C::pointer_get_double x]);
'(get_float __with__ [get_float (x __type__ pointer)-->__C::pointer_get_float x]);
'(get_int __with__ [get_int (x __type__ pointer)-->__C::pointer_get_int x]);
'(get_int64 __with__ [get_int64 (x __type__ pointer)-->__C::pointer_get_int64 x]);
'(get_long __with__ [get_long (x __type__ pointer)-->__C::pointer_get_long x]);
'(get_pointer __with__ [get_pointer (x __type__ pointer)-->__C::pointer_get_pointer x]);
'(get_short __with__ [get_short (x __type__ pointer)-->__C::pointer_get_short x]);
'(get_string __with__ [get_string (x __type__ pointer)-->__C::pointer_get_string x]);
'(getopt __with__ [getopt opts args-->opt opts ([],[]) args __with__ [(opt opts (o,a) []-->o,a),(opt opts (o,a) ("--":args)-->o,a+args),(opt opts (o,a) (arg:args)-->opt opts (o,a+[arg]) args __if__ ~stringp arg||arg=="-"||arg!![0]~="-"),(opt opts (o,a) (arg:args)-->opt opts (o+vals,a) args __when__ [vals,args-->catch (__lambda__ [_] (catch (__lambda__ [_] (throw arg)) (ret __when__ [ret __as__ (_,_)-->shortopt opts arg args]))) (ret __when__ [ret __as__ (_,_)-->longopt opts arg args])]),(longopt opts arg args-->catch (__lambda__ [_] ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)$" 1 arg 0),(_,opt-->reg 1 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt () args)])) ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)=(.*)$" 1 arg 0),(_,opt,_,val-->reg 1 info,reg 2 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt val args)])),(shortopt opts arg args-->catmap (__lambda__ [__v3__] (__case__ __v3__ [(opt,_-->[mkopt opt ()]),(_-->[])])) opt1+[mkopt opt val],args __when__ [(long_opt,short_opt,flag-->opt2),(opt=>val,args-->checkopt flag long_opt val args)] __if__ all (flip (==) 0.flip (!) 2) opt1 __when__ [("-":chs-->chars arg),(opt __as__ (_:_)-->scanopt (listmap (__lambda__ [ch] (catch (__lambda__ [_] ()) (find_shortopt opts ch))) chs)),(opt1-->init opt),(opt2-->last opt),(val-->subseq arg (#opt+1) (#arg-1)),(val-->__ifelse__ (null val) () val)]),(mkopt opt val-->opt=>val),(find_longopt opts opt-->long_opt,short_opt,flag __when__ [[(long_opt,short_opt,flag)]-->catmap (__lambda__ [__v4__] (__case__ __v4__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (prefixp ("--"+opt) long_opt) [opt1] []),(_-->[])])) opts]),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==0&&null val),(checkopt flag long_opt val args-->long_opt=>val,args __if__ flag~=0&&val~==()),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==2),(checkopt flag long_opt val (arg:args)-->long_opt=>arg,args __if__ flag==1),(scanopt ((long_opt,short_opt,flag):opt)-->[(long_opt,short_opt,flag)] __if__ flag~=0),(scanopt ((long_opt,short_opt,flag):opt)-->(long_opt,short_opt,flag):scanopt opt),(scanopt _-->[]),(find_shortopt opts opt-->long_opt,short_opt,flag __when__ [(long_opt,short_opt,flag):_-->catmap (__lambda__ [__v5__] (__case__ __v5__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (short_opt==="-"+opt) [opt1] []),(_-->[])])) opts]),(prefixp (x __type__ string) (y __type__ string)-->n<=m&&x==substr y 0 n __when__ [(n-->#x),(m-->#y)]),(prefixp _ _-->0)]]);
'(gets __with__ [gets-->__ifelse__ (null s) s (__ifelse__ (last s=="\n") (init s) s) __when__ [s-->fgets stdin]]);
'(glob __with__ [glob (pat __type__ string) (flags __type__ int)-->result __when__ [(globptr-->calloc 1 72),(result-->__C::glob pat flags (pointer 0) globptr),(result-->__ifelse__ (result==0) (__C::globlist globptr) result),(_-->__C::globfree globptr),(_-->free globptr)]]);
'(globsym __with__ [globsym (pat __type__ string) (level __type__ int)-->uniq (catmap descr info) __when__ [(res-->evalcmd ("show -gst"+str level+" "+pat)),(_-->stringp res||throw evalcmd),(info-->init (init (split "\n" res)))] __with__ [(uniq (x:xs __as__ (y:_))-->__ifelse__ (x===y) (uniq xs) (x:uniq xs)),(uniq xs-->xs),(descr (s __type__ string)-->__case__ (filter (flip (~=) "") (split " " s)) [(sym:_-->__ifelse__ (any (flip (==) sym) ["extern","private","infix","infixl","infixr","prefix","postfix","outfix","nonfix"]) [] (catmap (__lambda__ [x] (__ifelse__ (symbolp x) [x] [])) [__C::pure_quoted_symbol sym])),(_-->[])])]]);
'(hbag __with__ [(hbag (m __as__ HBag _)-->m),(hbag (m __type__ xset)-->hbag (members m)),(hbag (xs __type__ rlist)-->foldl insert emptyhbag xs)]);
'(hbagp __with__ [hbagp x-->typep hbag x]);
'(hdict __with__ [(hdict (d __as__ HDict _)-->d),(hdict (d __type__ xdict)-->hdict (members d)),(hdict (xys __type__ rlist)-->foldl insert emptyhdict xys)]);
'(hdictp __with__ [hdictp x-->typep hdict x]);
'(head __with__ [(head (x __type__ matrix)-->x!0 __if__ ~null x),(head (s __type__ string)-->s!0 __if__ ~null s),(head (x:xs)-->x)]);
'(heap __with__ [heap (xs __type__ rlist)-->foldl insert emptyheap xs]);
'(heapp __with__ [heapp x-->typep heap x]);
'(hmdict __with__ [(hmdict (d __as__ HMDict _)-->d),(hmdict (d __type__ xdict)-->hmdict (members d)),(hmdict (xys __type__ rlist)-->foldl insert emptyhmdict xys)]);
'(hmdictp __with__ [hmdictp x-->typep hmdict x]);
'(hset __with__ [(hset (m __as__ HSet _)-->m),(hset (m __type__ xset)-->hset (members m)),(hset (xs __type__ rlist)-->foldl insert emptyhset xs)]);
'(hsetp __with__ [hsetp x-->typep hset x]);
'(id __with__ [id x-->x]);
'(im __with__ [(im (x __type__ matrix)-->__C::matrix_im x __if__ nmatrixp x),(im (x+:y)-->y),(im (r<:t)-->r*sin t),(im (x __type__ int)-->0),(im (x __type__ bigint)-->0L),(im (x __type__ double)-->0.0),(im (_%_)-->0L%1L)]);
'(imatrixp __with__ [imatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==3),(_-->0)]]);
'(index __with__ [(index (s __type__ string) (u __type__ string)-->__C::string_index s u),(index [] _-->-1),(index (x:xs) y-->search 0 (x:xs) __with__ [(search _ []-->-1),(search (n __type__ int) (x:xs)-->n __if__ x==y),(search (n __type__ int) (x:xs)-->search (n+1) xs),(search _ xs-->index xs y)])]);
'(inexactp __with__ [inexactp x-->__case__ x [(x+:y-->doublep x||doublep y),(x<:y-->doublep x||doublep y),(x%y-->doublep x||doublep y),(_-->doublep x)] __if__ numberp x]);
'(infp __with__ [infp x-->__case__ x [(x __type__ double-->x==inf||x==-inf),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->infp x),(_-->0)]),(_-->0)]]);
'(init __with__ [(init (x __type__ matrix)-->x!!(0..#x-2) __if__ ~null x),(init (s __type__ string)-->substr s 0 (#s-1) __if__ ~null s),(init [x]-->[]),(init (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (init ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs []),(x:xs-->tick (x:zs) xs),(_-->tack zs (init xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(int __with__ [(int (x __type__ int)-->x),(int (x __type__ bigint)-->__C::pure_intval x),(int (x __type__ double)-->__C::pure_intval x),(int (x __as__ (_%_))-->int (bigint x))]);
'(int_matrix __with__ [(int_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array n m p),(int_matrix (n __type__ int) (p __type__ pointer)-->int_matrix (1,n) p)]);
'(int_matrix_view __with__ [(int_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array_nodup n m p),(int_matrix_view (n __type__ int) (p __type__ pointer)-->int_matrix_view (1,n) p)]);
'(int_pointer __with__ [int_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_int_array p x __if__ nmatrixp x]);
'(integerp __with__ [integerp x-->typep ('integer) x]);
'(intp __with__ [intp x-->__case__ x [(_ __type__ int-->1),(_-->0)]]);
'(intvalp __with__ [intvalp x-->bigintvalp x&&int (re x)==x]);
'(iterate __with__ [iterate f x-->x:iterate f (f x)&]);
'(iteraten __with__ [(iteraten (n __type__ int) f x-->[] __if__ n<=0),(iteraten (n __type__ int) f x-->accum [] n f x __with__ [(accum xs (n __type__ int) f x-->reverse (x:xs) __if__ n==1),(accum xs (n __type__ int) f x-->accum (x:xs) (n-1) f (f x))])]);
'(iterwhile __with__ [iterwhile p f x-->accum [] p f x __with__ [(accum xs p f x-->accum (x:xs) p f (f x) __if__ p x),(accum xs p f x-->reverse xs)]]);
'(join __with__ [join (delim __type__ string) xs-->s __if__ stringp s __when__ [s-->__C::string_join delim xs]]);
'(key __with__ [key (x=>v)-->x]);
'(keys __with__ [(keys (x __type__ matrix)-->colcatmap (__lambda__ [__v1__] (__case__ __v1__ [(u=>v-->{u}),(_-->{})])) x __if__ recordp x),(keys (Dict d)-->avl::keys d),(keys (MDict d)-->avl::mkeys d),(keys (HDict d)-->avl::hkeys d),(keys (HMDict d)-->avl::hkeys d)]);
'(lcm __with__ [(lcm (x __type__ bigint) (y __type__ bigint)-->__C::bigint_lcm x y),(lcm (x __type__ int) (y __type__ bigint)-->__C::bigint_lcm (bigint x) y),(lcm (x __type__ bigint) (y __type__ int)-->__C::bigint_lcm x (bigint y)),(lcm (x __type__ int) (y __type__ int)-->int (__C::bigint_lcm (bigint x) (bigint y)))]);
'(list __with__ [(list (x __type__ matrix)-->listmap (__lambda__ [i] (x!i)) (0..#x-1)),(list (s __type__ string)-->chars s),(list ()-->[]),(list (x,xs)-->accum [x] xs __with__ [(accum ys (x,xs)-->accum (x:ys) xs),(accum ys x-->reverse (x:ys))]),(list []-->[]),(list (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->reverse ys),(accum ys xs-->throw (bad_list_value xs))]),(list (x __as__ Array _)-->members x),(list (h __as__ Heap _)-->members h),(list (d __type__ xdict)-->members d),(list (m __type__ xset)-->members m)]);
'(list2 __with__ [(list2 (x __type__ matrix)-->listmap (__lambda__ [i] (listmap (__lambda__ [j] (x!(i,j))) (0..m-1))) (0..n-1) __when__ [n __type__ int,m __type__ int-->dim x]),(list2 (x __as__ Array _)-->members2 x)]);
'(listmap __with__ [(listmap f (x __type__ matrix)-->list (map f x)),(listmap f (s __type__ string)-->map f (chars s)),(listmap f []-->[]),(listmap f (xs __as__ (_:_))-->map f xs)]);
'(listp __with__ [listp x-->typep ('list) x]);
'(ln __with__ [(ln (x __type__ double)-->__C::log x),(ln (x __type__ int)-->ln (double x)),(ln (x __type__ bigint)-->ln (double x)),(ln (z __as__ (x+:y))-->ln (abs z)+:arg z),(ln (r<:t)-->polar (ln r+:t)),(ln (x%y)-->ln (x/y))]);
'(log __with__ [(log (x __type__ double)-->__C::log x/__C::log 10.0),(log (x __type__ int)-->log (double x)),(log (x __type__ bigint)-->log (double x)),(log (z __as__ (x+:y))-->ln z/ln 10),(log (z __as__ (r<:t))-->ln z/ln 10),(log (x%y)-->log (x/y))]);
'(map __with__ [(map f (x __type__ matrix)-->__C::matrix_map f x),(map f (s __type__ string)-->map f (chars s)),(map f []-->[]),(map f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (f x:zs) (map f xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (f x:zs) xs),(tick zs []-->tack zs []),(tick zs xs-->tack zs (map f xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(matrix __with__ [(matrix []-->{}),(matrix (xs __as__ (_:_))-->throw (bad_list_value xs) __if__ ~rlistp xs),(matrix (xs __as__ (_:_))-->rowcatmap colcat xs __if__ all rlistp xs),(matrix (xs __as__ (_:_))-->rowcat xs __if__ any matrixp xs),(matrix (xs __as__ (_:_))-->colcat xs),(matrix ()-->{}),(matrix (xs __as__ (_,_))-->matrix (list xs)),(matrix (x __type__ matrix)-->x),(matrix (s __type__ string)-->matrix (chars s))]);
'(matrixp __with__ [matrixp x-->__case__ x [(_ __type__ matrix-->1),(_-->0)]]);
'(max __with__ [max x y-->__ifelse__ (x>=y) x y]);
'(mdict __with__ [(mdict (d __as__ MDict _)-->d),(mdict (d __type__ xdict)-->mdict (members d)),(mdict (xys __type__ rlist)-->foldl insert emptymdict xys)]);
'(mdictp __with__ [mdictp x-->typep mdict x]);
'(member __with__ [(member (x __type__ matrix) y-->__C::record_member x y __if__ recordp x),(member (Dict d) k-->avl::memberk d k),(member (MDict d) k-->avl::memberk d k),(member (HDict d) k-->avl::hmemberk d k),(member (HMDict d) k-->avl::hmemberk d k),(member (Set m) y-->avl::member m y),(member (Bag m) y-->avl::memberk m y),(member (HSet m) y-->avl::hmember m y),(member (HBag m) y-->avl::hmember m y)]);
'(members2 __with__ [members2 (x __as__ Array _)-->map members (members x)]);
'(min __with__ [min x y-->__ifelse__ (x<=y) x y]);
'(mkarray2 __with__ [mkarray2 x (n __type__ int,m __type__ int)-->mkarray (mkarray x m) n]);
'(mkdict __with__ [mkdict y (xs __type__ rlist)-->dict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhdict __with__ [mkhdict y (xs __type__ rlist)-->hdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhmdict __with__ [mkhmdict y (xs __type__ rlist)-->hmdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkmdict __with__ [mkmdict y (xs __type__ rlist)-->mdict (zipwith (=>) xs (repeatn (#xs) y))]);
'((mod) __with__ [(x __type__ int mod y __type__ int-->x mod y),(x __type__ bigint mod y __type__ bigint-->__C::bigint_mod x y),(x __type__ int mod y __type__ bigint-->bigint x mod y),(x __type__ bigint mod y __type__ int-->x mod bigint y)]);
'(nanosleep __with__ [(nanosleep (t __type__ int)-->nanosleep (double t)),(nanosleep (t __type__ bigint)-->nanosleep (double t))]);
'(nanp __with__ [nanp x-->__case__ x [(x __type__ double-->~x==x),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->nanp x),(_-->0)]),(_-->0)]]);
'(neg __with__ [(-x __type__ int-->-x),(-x __type__ double-->-x),(-x __type__ bigint-->__C::bigint_neg x),(-(x+:y)-->-x+:-y),(-(r<:t)-->r<:t+3.14159265358979),(-x%y-->(-x)%y)]);
'(nmatrixp __with__ [nmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x>=1),(_-->0)]]);
'((not) __with__ [(not x __type__ int-->not x),(not x __type__ bigint-->__C::bigint_not x)]);
'(num __with__ [(num (x%y)-->x),(num (x __type__ int)-->bigint x),(num (x __type__ bigint)-->bigint x),(num (x __type__ double)-->__ifelse__ (frac x==0.0) (bigint x) (num (rational x)))]);
'(numberp __with__ [numberp x-->typep ('number) x]);
'((or) __with__ [(x __type__ int or y __type__ int-->x or y),(x __type__ bigint or y __type__ bigint-->__C::bigint_or x y),(x __type__ int or y __type__ bigint-->bigint x or y),(x __type__ bigint or y __type__ int-->x or bigint y)]);
'(ord __with__ [ord (s __type__ string)-->n __if__ intp n __when__ [n-->__C::string_ord s]]);
'(pack __with__ [pack (x __type__ matrix)-->colcat [x,{}]]);
'(packed __with__ [packed (x __type__ matrix)-->stride x==dim x!1]);
'(pclose __with__ [pclose (fp __type__ pointer)-->clear_sentry fp$$__C::pclose fp __if__ get_sentry fp===__C::pclose]);
'(pointer __with__ [(pointer (x __type__ pointer)-->x),(pointer (x __type__ int)-->__C::pure_pointerval x),(pointer (x __type__ bigint)-->__C::pure_pointerval x),(pointer (x __type__ string)-->__C::pure_pointerval x),(pointer (x __type__ matrix)-->__C::pure_pointerval x)]);
'(pointer_cast __with__ [pointer_cast (ty __type__ string) (x __type__ pointer)-->pointer_cast (pointer_tag ty) x]);
'(pointer_tag __with__ [(pointer_tag (x __type__ string)-->__C::pure_pointer_tag x),(pointer_tag (x __type__ pointer)-->get_ptrtag x)]);
'(pointer_type __with__ [pointer_type (x __type__ pointer)-->pointer_type (get_ptrtag x)]);
'(pointerp __with__ [pointerp x-->__case__ x [(_ __type__ pointer-->1),(_-->0)]]);
'(polar __with__ [(polar (x+:y)-->sqrt (x*x+y*y)<:atan2 y x),(polar (z __as__ (_<:_))-->z),(polar (x __type__ int)-->x<:0),(polar (x __type__ bigint)-->x<:0),(polar (x __type__ double)-->x<:0.0),(polar (x%y)-->x%y<:0L%1L)]);
'(popen __with__ [popen (name __type__ string) (mode __type__ string)-->sentry __C::pclose fp __if__ ~null fp __when__ [fp-->__C::popen name mode]]);
'(pow __with__ [(pow (x __type__ int) (y __type__ int)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ bigint)-->__C::bigint_pow x y __if__ y>=0),(pow (x __type__ int) (y __type__ bigint)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ int)-->__C::bigint_pow x y __if__ y>=0),(pow (x%y) (n __type__ int)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ bigint)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ int)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ bigint)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ int)-->1L%1L),(pow (x%y) (n __type__ bigint)-->1L%1L),(pow (x __type__ int) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ int) (n __type__ bigint)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ bigint)-->1%pow x (-n) __if__ n<0)]);
'(pred __with__ [pred x-->x-1]);
'(printf __with__ [printf (format __type__ string) args-->fprintf stdout format args]);
'(publicp __with__ [publicp (x __type__ symbol)-->symbolp (val (str x))]);
'(put __with__ [put (r __type__ ref) x-->__C::pure_free (__C::pointer_get_expr r)$$__C::pointer_put_expr r (__C::pure_new x)$$x]);
'(put_byte __with__ [put_byte (x __type__ pointer) (y __type__ int)-->__C::pointer_put_byte x y]);
'(put_double __with__ [put_double (x __type__ pointer) (y __type__ double)-->__C::pointer_put_double x y]);
'(put_float __with__ [put_float (x __type__ pointer) (y __type__ double)-->__C::pointer_put_float x y]);
'(put_int __with__ [put_int (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int x y]);
'(put_int64 __with__ [(put_int64 (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int64 x y),(put_int64 (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_int64 x y)]);
'(put_long __with__ [(put_long (x __type__ pointer) (y __type__ int)-->__C::pointer_put_long x y),(put_long (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_long x y)]);
'(put_pointer __with__ [(put_pointer (x __type__ pointer) (y __type__ string)-->__C::pointer_put_pointer x y),(put_pointer (x __type__ pointer) (y __type__ pointer)-->__C::pointer_put_pointer x y)]);
'(put_short __with__ [put_short (x __type__ pointer) (y __type__ int)-->__C::pointer_put_short x y]);
'(put_string __with__ [put_string (x __type__ pointer) (y __type__ string)-->__C::pointer_put_string x y]);
'(quote __with__ [quote x-->x]);
'(rational __with__ [(rational (x __as__ (_%_))-->x),(rational (x __type__ int)-->x%1),(rational (x __type__ bigint)-->x%1),(rational (x __type__ double)-->n%d __when__ [n,d-->__C::pure_rational x]),(rational (x+:y)-->rational x+:rational y),(rational (x<:y)-->rational x<:rational y)]);
'(rationalp __with__ [rationalp x-->typep ('rational) x]);
'(ratvalp __with__ [ratvalp x-->realvalp x&&re (x-x)~==nan]);
'(re __with__ [(re (x __type__ matrix)-->__C::matrix_re x __if__ nmatrixp x),(re (x+:y)-->x),(re (r<:t)-->r*cos t),(re (x __type__ int)-->x),(re (x __type__ bigint)-->x),(re (x __type__ double)-->x),(re (x __as__ (_%_))-->x)]);
'(realp __with__ [realp x-->typep ('real) x]);
'(realvalp __with__ [realvalp x-->compvalp x&&im x==0]);
'(record __with__ [(record x-->__C::record_pack x __if__ recordp x),(record x-->record x __if__ recordp x __when__ [x-->matrix x])]);
'(recordp __with__ [recordp x-->__C::record_check x]);
'(rect __with__ [(rect (r<:t)-->r*cos t+:r*sin t),(rect (z __as__ (_+:_))-->z),(rect (x __type__ int)-->x+:0),(rect (x __type__ bigint)-->x+:0),(rect (x __type__ double)-->x+:0.0),(rect (x%y)-->x%y+:0L%1L)]);
'(redim __with__ [(redim (n __type__ int,m __type__ int) (x __type__ matrix)-->__C::matrix_redim x n m __if__ n>=0&&m>=0&&n*m==#x),(redim (m __type__ int) (x __type__ matrix)-->redim (#x div m,m) x __if__ m>0&&#x mod m==0),(redim (m __type__ int) (x __type__ matrix)-->x __if__ m==0&&#x==0)]);
'(ref __with__ [ref x-->__C::pointer_put_expr r (__C::pure_new x)$$sentry unref r __when__ [r __type__ pointer-->__C::pure_expr_pointer]]);
'(refp __with__ [refp r-->__case__ r [(_ __type__ pointer-->get_sentry r===unref),(_-->0)]]);
'(reg __with__ [(reg 0 (p,s,_)-->p,s),(reg 0 (p,s)-->p,s),(reg (n __type__ int) (_,_,infos)-->reg (n-1) infos __if__ n>0)]);
'(reg_info __with__ [(reg_info (_ __type__ int,info)-->info),(reg_info _-->())]);
'(reg_result __with__ [(reg_result (regerr code msg)-->regerr code msg),(reg_result (b __type__ int)-->b),(reg_result (b __type__ int,_)-->b)]);
'(regex __with__ [regex (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (__C::regexec re s eflags) 0 (1,__C::regmatch re)) __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)]]);
'(regexg __with__ [regexg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgg __with__ [regexgg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexggs __with__ [regexggs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgs __with__ [regexgs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regs __with__ [regs info-->myregs 0 info __with__ [(myregs n (p,s,infos)-->(n,p,s):myregs (n+1) infos __if__ p>=0),(myregs n (p,s,infos)-->myregs (n+1) infos),(myregs n (p,s)-->[(n,p,s)] __if__ p>=0),(myregs n (p,s)-->[])]]);
'(regsplit __with__ [regsplit (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (iterwhile check next first+[__C::regskip re])) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsplits __with__ [regsplits (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (takewhile check (iterate next first)+[__C::regskip re]&)) __with__ [([]+ys-->ys),((x:xs)+ys-->x:(xs+ys)&),(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsub __with__ [regsub f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (strcat (iterwhile check next first)+__C::regskip re) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re+h (f (__C::regmatch re)))),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re+h (f (__C::regmatch re)))),(h (x __type__ string)-->x),(h x-->throw (bad_string_value x))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(repeat __with__ [repeat x-->x:repeat x&]);
'(repeatn __with__ [repeatn (n __type__ int) x-->accum [] n x __with__ [(accum xs (n __type__ int) x-->xs __if__ n<=0),(accum xs (n __type__ int) x-->accum (x:xs) (n-1) x)]]);
'(reverse __with__ [(reverse (x __type__ matrix)-->rowrev (colrev x)),(reverse (s __type__ string)-->strcat (reverse (chars s))),(reverse ()-->()),(reverse (x,xs)-->accum x xs __with__ [(accum ys (x,xs)-->accum (x,ys) xs),(accum ys x-->x,ys)]),(reverse []-->[]),(reverse (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->ys),(accum ys xs-->throw (bad_list_value xs))])]);
'(rlistp __with__ [rlistp x-->typep ('rlist) x]);
'(round __with__ [(round (x __type__ int)-->x),(round (x __type__ bigint)-->x),(round (x%y)-->-round ((-x)%y) __if__ x<0),(round (x%y)-->x div 2+1 __if__ y==2),(round (x%y)-->(2*x+y) div (2*y))]);
'(row __with__ [row (x __type__ matrix) (i __type__ int)-->__ifelse__ (i>=0&&i<n) (__C::matrix_slice x i 0 i (m-1)) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(rowcatmap __with__ [(rowcatmap f []-->{}),(rowcatmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowcatmap f (x __type__ matrix)-->matcat (map f x)),(rowcatmap f (s __type__ string)-->rowcatmap f (chars s))]);
'(rowmap __with__ [(rowmap f []-->{}),(rowmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowmap f (x __type__ matrix)-->map f x),(rowmap f (s __type__ string)-->rowmap f (chars s))]);
'(rowrev __with__ [rowrev (x __type__ matrix)-->rowcat (reverse (rows x))]);
'(rows __with__ [rows (x __type__ matrix)-->map (row x) (0..n-1) __when__ [n __type__ int,_-->dim x]]);
'(rowvector __with__ [(rowvector (x __type__ matrix)-->redim (1,#x) x),(rowvector ()-->redim (1,0) {}),(rowvector (xs __as__ (_,_))-->rowvector (list xs)),(rowvector []-->redim (1,0) {}),(rowvector (xs __type__ rlist)-->__case__ (cmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (dmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (imatrix xs) [(x __type__ matrix-->x),(_-->smatrix xs)])])])]);
'(rowvectorp __with__ [rowvectorp x-->matrixp x&&dim x!0==1]);
'(rowvectorseq __with__ [(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_rowvect n m s),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect n m s),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvector (n:n+s..m)])]);
'(scanf __with__ [scanf (format __type__ string)-->fscanf stdin format]);
'(scanl __with__ [(scanl f a (x __type__ matrix)-->__C::matrix_scanl f a x),(scanl f a (s __type__ string)-->scanl f a (chars s)),(scanl f a []-->[a]),(scanl f a (xs __as__ (_:_))-->tick a [] xs __with__ [(tick a zs (x:xs)-->tack (a:zs) (scanl f (f a x) xs&) __if__ thunkp xs),(tick a zs (x:xs)-->tick (f a x) (a:zs) xs),(tick a zs []-->tack zs [a]),(tick a zs xs-->tack zs (scanl f a xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(scanl1 __with__ [(scanl1 f (x __type__ matrix)-->__C::matrix_scanl1 f x),(scanl1 f (s __type__ string)-->scanl1 f (chars s)),(scanl1 f []-->[]),(scanl1 f (x:xs)-->scanl f x xs)]);
'(scanr __with__ [(scanr f a (x __type__ matrix)-->__C::matrix_scanr f a x),(scanr f a (s __type__ string)-->scanr f a (chars s)),(scanr f a []-->[a]),(scanr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr f a xs&),(y-->__case__ ys [(y:_-->y),(scanr _ _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs (x:xs)-->tack zs (f x (y __when__ [y:_-->ys])&:ys __when__ [ys-->scanr f a xs&]) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs [a]),(tick zs xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(scanr1 __with__ [(scanr1 f (x __type__ matrix)-->__C::matrix_scanr1 f x),(scanr1 f (s __type__ string)-->scanr1 f (chars s)),(scanr1 f []-->[]),(scanr1 f [x]-->[x]),(scanr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr1 f xs&),(y-->__case__ ys [(y:_-->y),(scanr1 _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs [x]),(x:xs-->tick (x:zs) xs),(_-->throw (bad_list_value xs))]),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(set __with__ [(set (m __as__ Set _)-->m),(set (m __type__ xset)-->set (members m)),(set (xs __type__ rlist)-->foldl insert emptyset xs)]);
'(setp __with__ [setp x-->typep set x]);
'(sgn __with__ [(sgn (x __type__ int)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ bigint)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ double)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x%y)-->sgn x)]);
'(short_matrix __with__ [(short_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_short_array n m p),(short_matrix (n __type__ int) (p __type__ pointer)-->short_matrix (1,n) p)]);
'(short_pointer __with__ [short_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_short_array p x __if__ nmatrixp x]);
'(sin __with__ [(sin (x __type__ int)-->sin (double x)),(sin (x __type__ bigint)-->sin (double x)),(sin (x+:y)-->sin x*cosh y+:cos x*sinh y),(sin (z __as__ (r<:t))-->polar (sin (rect z))),(sin (x%y)-->sin (x/y))]);
'(sinh __with__ [(sinh (x __type__ int)-->sinh (double x)),(sinh (x __type__ bigint)-->sinh (double x)),(sinh (x+:y)-->sinh x*cos y+:cosh x*sin y),(sinh (z __as__ (r<:t))-->polar (sinh (rect z))),(sinh (x%y)-->sinh (x/y))]);
'(slice __with__ [slice x y-->x!!y]);
'(smatrix __with__ [smatrix x-->y __if__ matrixp y __when__ [y-->__C::matrix_symbolic x]]);
'(smatrixp __with__ [smatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==0),(_-->0)]]);
'(sort __with__ [sort p (x __type__ matrix)-->__case__ (sort p (smatrix x)) [(y __type__ matrix-->imatrix y __if__ imatrixp x),(y __type__ matrix-->dmatrix y __if__ dmatrixp x),(y __type__ matrix-->cmatrix y __if__ cmatrixp x),(y-->y)]]);
'(spawnv __with__ [spawnv (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnv mode prog (smatrix argv)]);
'(spawnve __with__ [spawnve (mode __type__ int) (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->spawnve mode prog (smatrix argv) (smatrix envp)]);
'(spawnvp __with__ [spawnvp (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnvp mode prog (smatrix argv)]);
'(split __with__ [(split (delim __type__ string) (s __type__ string)-->__C::string_split delim s __if__ ~funp (:)),(split (delim __type__ string) (s __type__ string)-->list (__C::string_split delim s))]);
'(sprintf __with__ [sprintf (format __type__ string) args-->catch error (do_printf 0 [] formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count s (format:formats) args-->do_printf count (cstring buf:s) formats args __when__ [(size-->#s+1000),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__C::pure_snprintf buf size format),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))] __if__ literal format),(do_printf count s (format:formats) (arg:args)-->do_printf count (cstring buf:s) formats args __when__ [(t-->format_type (last format) format),(size-->__case__ (t,arg) [("s",x __type__ string-->#s+#x),("Z",x __type__ bigint-->int (__C::mpz_sizeinbase x 10)),("R",x __type__ mpfr-->1+int (ceil (__C::mpfr_get_prec x*__C::log10 2))),(_-->64)]),(size-->size+1024),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__case__ (t,arg) [("c",x __type__ int-->__C::pure_snprintf_int buf size format x),("c",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("d",x __type__ int-->__C::pure_snprintf_int buf size format x),("d",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("g",x __type__ double-->__C::pure_snprintf_double buf size format x),("s",x __type__ string-->__C::pure_snprintf_string buf size format x),("p",x __type__ string-->__C::pure_snprintf_pointer buf size format x),("p",x __type__ pointer-->__C::pure_snprintf_pointer buf size format x),("Z",x __type__ bigint-->__C::pure_snprintf_mpz buf size format x),("R",x __type__ mpfr-->__C::pure_snprintf_mpfr buf size format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))]),(do_printf count s [] _-->strcat (reverse s)),(do_printf count s _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(sqrt __with__ [(sqrt (x __type__ int)-->sqrt (double x)),(sqrt (x __type__ bigint)-->sqrt (double x)),(sqrt (x+:y)-->sqrt r*(cos t+:sin t) __when__ [(r-->sqrt (x*x+y*y)),(t-->atan2 y x/2)]),(sqrt (r<:t)-->sqrt r<:t/2),(sqrt (x%y)-->sqrt (x/y))]);
'(srandom __with__ [srandom (x __type__ matrix)-->srandom_array x (#x) __if__ imatrixp x&&dim x!0==1]);
'(sscanf __with__ [sscanf (s __type__ string) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(sp-->pointer_cast 1 (shift sbuf count)),(res-->__C::pure_sscanf sp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(sp-->pointer_cast 1 (shift sbuf count)),(res-->__case__ t [("n"-->__C::pure_sscanf_int sp format buf),("d"-->__C::pure_sscanf_int sp format buf),("g"-->__C::pure_sscanf_double sp format buf),("s"-->__C::pure_sscanf_string sp format buf),("p"-->__C::pure_sscanf_pointer sp format buf),("Z"-->__C::pure_sscanf_mpz sp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format),(shift p i-->pointer (__C::pure_bigintval p+i))] __when__ [sbuf-->sentry free (byte_cstring s)]]);
'(strcat __with__ [strcat xs-->s __if__ stringp s __when__ [s-->__C::string_concat_list xs]]);
'(stream __with__ [(stream (s __type__ string)-->stream (chars s)),(stream []-->[]),(stream (x:xs)-->x:xs __if__ thunkp xs),(stream (x:xs)-->x:stream xs&),(stream ()-->[]),(stream (xs __as__ (_,_))-->stream (list xs))]);
'(stride __with__ [stride (x __type__ matrix)-->__C::matrix_stride x]);
'(string __with__ [(string (s __type__ pointer)-->__C::pure_string s),(string []-->""),(string (xs __as__ (_ __type__ string:_))-->strcat xs __if__ all stringp xs),(string ()-->""),(string (xs __as__ (_ __type__ string,_))-->strcat xs __if__ all stringp xs __when__ [xs-->list xs]),(string (s __type__ string)-->s),(string (x __type__ matrix)-->string (list x) __if__ all stringp x)]);
'(string_dup __with__ [string_dup (s __type__ pointer)-->__C::pure_string_dup s]);
'(string_list __with__ [string_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (string_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(string_vector __with__ [string_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->string_list n p]]);
'(stringp __with__ [stringp x-->__case__ x [(_ __type__ string-->1),(_-->0)]]);
'(submat __with__ [submat (x __type__ matrix) (i __type__ int,j __type__ int) (n __type__ int,m __type__ int)-->__C::matrix_slice x i j (i+n-1) (j+m-1)]);
'(subseq __with__ [(subseq (x __type__ matrix) (a __type__ int) (b __type__ int)-->__C::matrix_slice (rowvector x) 0 a 0 b),(subseq (s __type__ string) (a __type__ int) (b __type__ int)-->substr s a (b-a+1)),(subseq [] (a __type__ int) (b __type__ int)-->[]),(subseq (xs __as__ (_:_)) (a __type__ int) (b __type__ int)-->take (b-a+1) (drop a xs) __with__ [(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs),(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),(subseq x a b-->slice x (a..b))]);
'(subseq2 __with__ [(subseq2 (x __type__ matrix) (a1 __type__ int) (b1 __type__ int) (a2 __type__ int) (b2 __type__ int)-->__C::matrix_slice x a1 a2 b1 b2),(subseq2 x a1 a1 a2 b2-->slice x (a1,a2..b2)),(subseq2 x a1 b1 a2 a2-->slice x (a1..b1,a2)),(subseq2 x a1 b1 a2 b2-->slice x (a1..b1,a2..b2))]);
'(substr __with__ [substr (s __type__ string) (pos __type__ int) (size __type__ int)-->__C::string_substr s (max 0 pos) (max 0 size) __with__ [max x y-->__ifelse__ (x>=y) x y]]);
'(succ __with__ [succ x-->x+1]);
'(tail __with__ [(tail (x __type__ matrix)-->x!!(1..#x-1) __if__ ~null x),(tail (s __type__ string)-->substr s 1 (#s-1) __if__ ~null s),(tail (x:xs)-->xs)]);
'(take __with__ [(take (k __type__ int) (x __type__ matrix)-->x!!(0..k-1)),(take (n __type__ int) (s __type__ string)-->substr s 0 n),(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs __with__ [(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->tack zs (take n xs&) __if__ thunkp xs),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(takewhile __with__ [(takewhile p (x __type__ matrix)-->__C::matrix_takewhile p x),(takewhile p (s __type__ string)-->strcat (takewhile p (chars s))),(takewhile p []-->[]),(takewhile p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs xs-->tack zs (takewhile p xs&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (x:zs) xs __if__ p x),(x:xs-->tack zs []),(_-->tack zs (takewhile p xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(tan __with__ [(tan (x __type__ int)-->tan (double x)),(tan (x __type__ bigint)-->tan (double x)),(tan (x+:y)-->(sin (2*x)+:sinh (2*y))/(cos (2*x)+cosh (2*y))),(tan (z __as__ (r<:t))-->polar (tan (rect z))),(tan (x%y)-->tan (x/y))]);
'(tanh __with__ [(tanh (x __type__ int)-->tanh (double x)),(tanh (x __type__ bigint)-->tanh (double x)),(tanh (x+:y)-->(sinh (2*x)+:sin (2*y))/(cosh (2*x)+cos (2*y))),(tanh (z __as__ (r<:t))-->polar (tanh (rect z))),(tanh (x%y)-->tanh (x/y))]);
'(transpose __with__ [transpose (x __type__ matrix)-->__C::matrix_transpose x]);
'(trunc __with__ [(trunc (x __type__ int)-->x),(trunc (x __type__ bigint)-->x),(trunc (x%y)-->x div y)]);
'(tuple __with__ [(tuple (x __type__ matrix)-->tuple (list x)),(tuple (s __type__ string)-->tuple (chars s)),(tuple []-->()),(tuple (x:xs)-->accum (t x) xs __with__ [(t (x __as__ (_,_))-->reverse x),(t x-->x),(accum ys (x:xs)-->accum (t x,ys) xs),(accum ys []-->t ys),(accum ys xs-->throw (bad_list_value xs))]),(tuple (x __as__ ())-->x),(tuple (x __as__ (_,_))-->x)]);
'(tuplep __with__ [tuplep x-->typep ('tuple) x]);
'(ubyte __with__ [ubyte (x __type__ int)-->__ifelse__ (x>=0) x (x+256)]);
'(uint __with__ [uint (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+4294967296L)]);
'(uint64 __with__ [(uint64 (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L)),(uint64 (x __type__ bigint)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L))]);
'(ulong __with__ [ulong-->uint64]);
'(uncurry __with__ [uncurry f (x,y)-->f x y]);
'(uncurry3 __with__ [uncurry3 f (x,y,z)-->f x y z]);
'(unref __with__ [unref (r __type__ ref)-->__C::pure_free (__C::pointer_get_expr r)$$clear_sentry r]);
'(unzip __with__ [(unzip (x __type__ matrix)-->map fst x,map snd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())])]),(unzip []-->[],[]),(unzip (us __as__ (_:_))-->foldr accum ([],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_-->check us])&,snd u:(ys __when__ [_,ys-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys __when__ [xs,ys-->check us]),(check (us __as__ (_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(unzip3 __with__ [(unzip3 (x __type__ matrix)-->map fst x,map snd x,map trd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())])]),(unzip3 []-->[],[],[]),(unzip3 (us __as__ (_:_))-->foldr accum ([],[],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_,_-->check us])&,snd u:(ys __when__ [_,ys,_-->check us])&,trd u:(zs __when__ [_,_,zs-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys,trd u:zs __when__ [xs,ys,zs-->check us]),(check (us __as__ (_,_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(update2 __with__ [update2 (x __as__ Array a) (i __type__ int,j __type__ int) y-->update x i (update (x!i) j y)]);
'(ushort __with__ [ushort (x __type__ int)-->__ifelse__ (x>=0) x (x+65536)]);
'(val __with__ [val (x=>v)-->v]);
'(vals __with__ [(vals (x __type__ matrix)-->colcatmap (__lambda__ [__v2__] (__case__ __v2__ [(u=>v-->{v}),(_-->{})])) x __if__ recordp x),(vals (Dict d)-->avl::vals d),(vals (MDict d)-->avl::mvals d),(vals (HDict d)-->avl::hvals d),(vals (HMDict d)-->avl::hvals d)]);
'(vector __with__ [vector xs-->x __if__ matrixp x __when__ [x-->rowvector xs]]);
'(vectorp __with__ [vectorp x-->matrixp x&&(n==1||m==1 __when__ [n __type__ int,m __type__ int-->dim x])]);
'(vectorseq __with__ [vectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvectorseq n m s]]);
'(void __with__ [void _-->()]);
'(xdictp __with__ [xdictp x-->typep xdict x]);
'(xsetp __with__ [xsetp x-->typep xset x]);
'(zip __with__ [(zip (x __type__ matrix) (y __type__ matrix)-->zipwith (,) x y),(zip (s __type__ string) (t __type__ string)-->zip (chars s) (chars t)),(zip [] _-->[]),(zip _ []-->[]),(zip (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack ((x,y):us) (zip xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick ((x,y):us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zip xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zip3 __with__ [(zip3 (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->zipwith3 (__lambda__ [x,y,z] (x,y,z)) x y z),(zip3 (s __type__ string) (t __type__ string) (u __type__ string)-->zip3 (chars s) (chars t) (chars u)),(zip3 [] _ _-->[]),(zip3 _ [] _-->[]),(zip3 _ _ []-->[]),(zip3 (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack ((x,y,z):us) (zip3 xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick ((x,y,z):us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zip3 xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith __with__ [(zipwith f (x __type__ matrix) (y __type__ matrix)-->__C::matrix_zipwith f x y),(zipwith f (s __type__ string) (t __type__ string)-->zipwith f (chars s) (chars t)),(zipwith f [] _-->[]),(zipwith f _ []-->[]),(zipwith f (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack (f x y:us) (zipwith f xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick (f x y:us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zipwith f xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith3 __with__ [(zipwith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->__C::matrix_zipwith3 f x y z),(zipwith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->zipwith3 f (chars s) (chars t) (chars u)),(zipwith3 f [] _ _-->[]),(zipwith3 f _ [] _-->[]),(zipwith3 f _ _ []-->[]),(zipwith3 f (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack (f x y z:us) (zipwith3 f xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick (f x y z:us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zipwith3 f xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'((||) __with__ [(x __type__ int||y-->__ifelse__ x x y),(y||x __type__ int-->__ifelse__ x x y)]);
'((~) __with__ [~x __type__ int-->~x]);
'((~==) __with__ [x~==y-->~same x y]);
let R2 = listmap (\x/*0:1*/ -> eval (sprintf "'(%s)" (__str__ x/*0:1*/)) {
  rule #0: _ x = eval (sprintf "'(%s)" (__str__ x))
  state 0: #0
	<var> state 1
  state 1: #0
}) R2;
{
  rule #0: R3 = listmap (\x -> eval (sprintf "'(%s)" (__str__ x))) R2
  state 0: #0
	<var> state 1
  state 1: #0
}
'((!!) __with__ [(x!!ns __type__ matrix-->x!!list ns),(x!!(ns __type__ matrix,ms)-->x!!(list ns,ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ matrix)-->x!!(ns,list ms)),(x!!(ns __type__ int,ms)-->x!!([ns],ms) __if__ ~tuplep ms),(x!!(ns,ms __type__ int)-->x!!(ns,[ms])),(x __type__ matrix!!(ns,ms)-->__case__ (ns,ms) [(ns __as__ (n:_),ms __as__ (m:_)-->submat x (n,m) (#ns,#ms) __if__ cont ns&&cont ms),(_-->colcatmap (mth (rowcatmap (nth x) ns)) ms)] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(mth x m-->catch (cst {}) (col x m)),(nth x n-->catch (cst {}) (row x n))]),(x __type__ matrix!!ns-->__ifelse__ (all intp ns&&packed x) (rowvector x!!([0],ns)) (colcatmap (nth x) ns) __with__ [nth x n-->catch (cst {}) {x!n}]),(s __type__ string!!ns-->__case__ ns [(ns __as__ (n:_)-->substr s n (count ns) __if__ cont ns),(_-->string (chars s!!ns))] __with__ [(cont [n __type__ int]-->1),(cont (n __type__ int:ns __as__ (m __type__ int:_))-->cont ns __if__ m==n+1),(cont _-->0),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns)]),(xs __as__ ()!!ns-->tuple (list xs!!ns)),(xs __as__ (_,_)!!ns-->tuple (list xs!!ns)),(xs!!ns-->ys __if__ ok ys __when__ [ys-->__case__ ns [(ns __as__ (n __type__ int:_)-->list (take (count ns) (drop n xs)) __if__ listp xs&&cont ns),(_-->catmap (nth xs) ns)]] __with__ [(cont (n __type__ int:ns)-->~thunkp ns&&__case__ ns [([]-->1),(m __type__ int:_-->cont ns __if__ m==n+1),(_-->0)]),(nth xs n-->catch (cst []) [xs!n]),(count ns-->#dropwhile (__lambda__ [n __type__ int] (n<0)) ns),(ok (catmap (nth _) _)-->0),(ok _-->1)]),(x __as__ Array _!!(is,js)-->listmap (__lambda__ [i] (cat (listmap (__lambda__ [j] (catch (cst []) [x!i!j])) js))) is)]);
'(($) __with__ [f$x-->f x]);
'(($$) __with__ [x$$y-->y]);
'((%) __with__ [(x __type__ bigint%0L-->x div 0L),(x __type__ bigint%y __type__ bigint-->(-x)%(-y) __if__ y<0),(x __type__ bigint%y __type__ bigint-->x div d%(y div d) __if__ d>1 __when__ [d-->gcd x y]),(x __type__ int%y __type__ bigint-->bigint x%y),(x __type__ bigint%y __type__ int-->x%bigint y),(x __type__ int%y __type__ int-->bigint x%bigint y),(x1%y1%(x2%y2)-->x1*y2%(y1*x2)),(x1%y1%x2 __type__ int-->x1%(y1*x2)),(x1%y1%x2 __type__ bigint-->x1%(y1*x2)),(x1 __type__ int%(x2%y2)-->x1*y2%x2),(x1 __type__ bigint%(x2%y2)-->x1*y2%x2),(z1 __as__ (_+:_)%z2 __as__ (_<:_)-->z1/z2),(z1 __as__ (_<:_)%z2 __as__ (_+:_)-->z1/z2),((x1+:y1)%(x2+:y2)-->(x1*x2+y1*y2)%d+:(y1*x2-x1*y2)%d __when__ [d-->x2*x2+y2*y2]),((r1<:t1)%(r2<:t2)-->r1%r2<:t1-t2),((x1+:y1)%x2-->x1*x2%d+:y1*x2%d __when__ [d-->x2*x2] __if__ realp x2),(x1%(x2+:y2)-->x1*x2%d+:(-x1*y2)%d __when__ [d-->x2*x2+y2*y2] __if__ realp x1),((r1<:t1)%x2-->r1%x2<:t1 __if__ realp x2),(x1%(r2<:t2)-->x1%r2<:-t2 __if__ realp x1),(x __type__ double%y-->x/y __if__ numberp y),(x%y __type__ double-->x/y __if__ numberp x)]);
'((&) __with__ [x&-->x]);
'((&&) __with__ [(x __type__ int&&y-->__ifelse__ x y x),(y&&x __type__ int-->__ifelse__ x y x)]);
'((') __with__ ['x-->x]);
'((*) __with__ [(x __type__ int*y __type__ int-->x*y),(x __type__ double*y __type__ double-->x*y),(x __type__ int*y __type__ double-->x*y),(x __type__ double*y __type__ int-->x*y),(x __type__ bigint*y __type__ bigint-->__C::bigint_mul x y),(x __type__ int*y __type__ bigint-->bigint x*y),(x __type__ bigint*y __type__ int-->x*bigint y),(x __type__ bigint*y __type__ double-->double x*y),(x __type__ double*y __type__ bigint-->x*double y),((x1+:y1)*(x2+:y2)-->x1*x2-y1*y2+:x1*y2+y1*x2),((r1<:t1)*(r2<:t2)-->r1*r2<:t1+t2),(z1 __as__ (x1+:y1)*z2 __as__ (r2<:t2)-->z1*rect z2),(z1 __as__ (r1<:t1)*z2 __as__ (x2+:y2)-->rect z1*z2),(z1 __as__ (x1+:y1)*x2-->z1*rect x2 __if__ realp x2),(x1*z2 __as__ (x2+:y2)-->rect x1*z2 __if__ realp x1),((r1<:t1)*x2-->r1*x2<:t1 __if__ realp x2),(x1*(r2<:t2)-->x1*r2<:t2 __if__ realp x1),(x1%y1*(x2%y2)-->x1*x2%(y1*y2)),(x1%y1*x2 __type__ int-->x1*x2%y1),(x1%y1*x2 __type__ bigint-->x1*x2%y1),(x1 __type__ int*(x2%y2)-->x1*x2%y2),(x1 __type__ bigint*(x2%y2)-->x1*x2%y2),(x1%y1*x2-->x1/y1*x2 __if__ numberp x2),(x1*(x2%y2)-->x1*(x2/y2) __if__ numberp x1),(d1 __as__ Dict _*d2 __as__ Dict _-->d1-(d1-d2)),(d1 __as__ MDict _*d2 __as__ MDict _-->d1-(d1-d2)),(d1 __as__ HDict _*d2 __as__ HDict _-->d1-(d1-d2)),(d1 __as__ HMDict _*d2 __as__ HMDict _-->d1-(d1-d2)),(m1 __as__ HMDict _*m2-->m1*hmdict m2 __if__ xdictp m2),(m1*m2 __as__ HMDict _-->hmdict m1*m2 __if__ xdictp m1),(m1 __as__ HDict _*m2-->__case__ m2 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->m1*hdict m2)] __if__ xdictp m2),(m1*m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1*hmdict m2),(Dict _-->hdict m1*m2)] __if__ xdictp m2),(m1 __as__ MDict _*m2 __as__ Dict _-->m1*mdict m2),(m1 __as__ Dict _*m2 __as__ MDict _-->mdict m1*m2),(m1 __as__ Set _*m2 __as__ Set _-->m1-(m1-m2)),(m1 __as__ Bag _*m2 __as__ Bag _-->m1-(m1-m2)),(m1 __as__ HSet _*m2 __as__ HSet _-->m1-(m1-m2)),(m1 __as__ HBag _*m2 __as__ HBag _-->m1-(m1-m2)),(m1 __as__ HBag _*m2-->m1*hbag m2 __if__ xsetp m2),(m1*m2 __as__ HBag _-->hbag m1*m2 __if__ xsetp m1),(m1 __as__ HSet _*m2-->__case__ m2 [(Bag _-->hbag m1*hbag m2),(Set _-->m1*hset m2)] __if__ xsetp m2),(m1*m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1*hbag m2),(Set _-->hset m1*m2)] __if__ xsetp m2),(m1 __as__ Bag _*m2 __as__ Set _-->m1*bag m2),(m1 __as__ Set _*m2 __as__ Bag _-->bag m1*m2)]);
'((+) __with__ [(x __type__ int+y __type__ int-->x+y),(x __type__ double+y __type__ double-->x+y),(x __type__ int+y __type__ double-->x+y),(x __type__ double+y __type__ int-->x+y),(x __type__ bigint+y __type__ bigint-->__C::bigint_add x y),(x __type__ int+y __type__ bigint-->bigint x+y),(x __type__ bigint+y __type__ int-->x+bigint y),(x __type__ bigint+y __type__ double-->double x+y),(x __type__ double+y __type__ bigint-->x+double y),(s __type__ string+n __type__ int-->chr (ord s+n) __if__ #s==1),(s __type__ string+t __type__ string-->__C::string_concat s t),(s __type__ string+[]-->chars s),(s __type__ string+xs __as__ (_:_)-->chars s+xs),([]+s __type__ string-->chars s),(xs __as__ (_:_)+s __type__ string-->xs+chars s),([]+ys-->ys),(xs __as__ (_:_)+ys-->tick [] xs ys __with__ [(tick zs (x:xs) ys-->tack (x:zs) ((xs+ys)&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),((x1+:y1)+(x2+:y2)-->x1+x2+:y1+y2),(z1 __as__ (r1<:t1)+z2 __as__ (r2<:t2)-->polar (rect z1+rect z2)),(z1 __as__ (x1+:y1)+z2 __as__ (r2<:t2)-->z1+rect z2),(z1 __as__ (r1<:t1)+z2 __as__ (x2+:y2)-->rect z1+z2),((x1+:y1)+x2-->x1+x2+:y1 __if__ realp x2),(x1+(x2+:y2)-->x1+x2+:y2 __if__ realp x1),(z1 __as__ (r1<:t1)+x2-->z1+polar x2 __if__ realp x2),(x1+z2 __as__ (r2<:t2)-->polar x1+z2 __if__ realp x1),(x1%y1+x2%y2-->(x1*y2+x2*y1)%(y1*y2)),(x1%y1+x2 __type__ int-->(x1+x2*y1)%y1),(x1%y1+x2 __type__ bigint-->(x1+x2*y1)%y1),(x1 __type__ int+x2%y2-->(x1*y2+x2)%y2),(x1 __type__ bigint+x2%y2-->(x1*y2+x2)%y2),(x1%y1+x2-->x1/y1+x2 __if__ numberp x2),(x1+x2%y2-->x1+x2/y2 __if__ numberp x1),(d1 __as__ Dict _+d2 __as__ Dict _-->foldl insert d1 (members d2)),(d1 __as__ MDict _+d2 __as__ MDict _-->foldl insert d1 (members d2)),(d1 __as__ HDict _+d2 __as__ HDict _-->foldl insert d1 (members d2)),(d1 __as__ HMDict _+d2 __as__ HMDict _-->foldl insert d1 (members d2)),(m1 __as__ HMDict _+m2-->m1+hmdict m2 __if__ xdictp m2),(m1+m2 __as__ HMDict _-->hmdict m1+m2 __if__ xdictp m1),(m1 __as__ HDict _+m2-->__case__ m2 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->m1+hdict m2)] __if__ xdictp m2),(m1+m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1+hmdict m2),(Dict _-->hdict m1+m2)] __if__ xdictp m2),(m1 __as__ MDict _+m2 __as__ Dict _-->m1+mdict m2),(m1 __as__ Dict _+m2 __as__ MDict _-->mdict m1+m2),(m1 __as__ Set _+m2 __as__ Set _-->foldl insert m1 (members m2)),(m1 __as__ Bag _+m2 __as__ Bag _-->foldl insert m1 (members m2)),(m1 __as__ HSet _+m2 __as__ HSet _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2 __as__ HBag _-->foldl insert m1 (members m2)),(m1 __as__ HBag _+m2-->m1+hbag m2 __if__ xsetp m2),(m1+m2 __as__ HBag _-->hbag m1+m2 __if__ xsetp m1),(m1 __as__ HSet _+m2-->__case__ m2 [(Bag _-->hbag m1+hbag m2),(Set _-->m1+hset m2)] __if__ xsetp m2),(m1+m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1+hbag m2),(Set _-->hset m1+m2)] __if__ xsetp m2),(m1 __as__ Bag _+m2 __as__ Set _-->m1+bag m2),(m1 __as__ Set _+m2 __as__ Bag _-->bag m1+m2)]);
'((,) __with__ [(x,()-->x),((),y-->y),((x,y),z-->x,y,z)]);
'((-) __with__ [(x __type__ int-y __type__ int-->x-y),(x __type__ double-y __type__ double-->x-y),(x __type__ int-y __type__ double-->x-y),(x __type__ double-y __type__ int-->x-y),(x __type__ bigint-y __type__ bigint-->__C::bigint_sub x y),(x __type__ int-y __type__ bigint-->bigint x-y),(x __type__ bigint-y __type__ int-->x-bigint y),(x __type__ bigint-y __type__ double-->double x-y),(x __type__ double-y __type__ bigint-->x-double y),(s __type__ string-n __type__ int-->chr (ord s-n) __if__ #s==1&&ord s>=n),(s __type__ string-t __type__ string-->ord s-ord t __if__ #s==1&&#t==1),((x1+:y1)-(x2+:y2)-->x1-x2+:y1-y2),(z1 __as__ (r1<:t1)-z2 __as__ (r2<:t2)-->polar (rect z1-rect z2)),(z1 __as__ (x1+:y1)-z2 __as__ (r2<:t2)-->z1-rect z2),(z1 __as__ (r1<:t1)-z2 __as__ (x2+:y2)-->rect z1-z2),((x1+:y1)-x2-->x1-x2+:y1 __if__ realp x2),(x1-(x2+:y2)-->x1-x2+:-y2 __if__ realp x1),(z1 __as__ (r1<:t1)-x2-->z1-polar x2 __if__ realp x2),(x1-z2 __as__ (r2<:t2)-->polar x1-z2 __if__ realp x1),(x1%y1-x2%y2-->(x1*y2-x2*y1)%(y1*y2)),(x1%y1-x2 __type__ int-->(x1-x2*y1)%y1),(x1%y1-x2 __type__ bigint-->(x1-x2*y1)%y1),(x1 __type__ int-x2%y2-->(x1*y2-x2)%y2),(x1 __type__ bigint-x2%y2-->(x1*y2-x2)%y2),(x1%y1-x2-->x1/y1-x2 __if__ numberp x2),(x1-x2%y2-->x1-x2/y2 __if__ numberp x1),(d1 __as__ Dict _-d2 __as__ Dict _-->foldl delete_val d1 (members d2)),(d1 __as__ MDict _-d2 __as__ MDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HDict _-d2 __as__ HDict _-->foldl delete_val d1 (members d2)),(d1 __as__ HMDict _-d2 __as__ HMDict _-->foldl delete_val d1 (members d2)),(m1 __as__ HMDict _-m2-->m1-hmdict m2 __if__ xdictp m2),(m1-m2 __as__ HMDict _-->hmdict m1-m2 __if__ xdictp m1),(m1 __as__ HDict _-m2-->__case__ m2 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->m1-hdict m2)] __if__ xdictp m2),(m1-m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1-hmdict m2),(Dict _-->hdict m1-m2)] __if__ xdictp m2),(m1 __as__ MDict _-m2 __as__ Dict _-->m1-mdict m2),(m1 __as__ Dict _-m2 __as__ MDict _-->mdict m1-m2),(m1 __as__ Set _-m2 __as__ Set _-->foldl delete m1 (members m2)),(m1 __as__ Bag _-m2 __as__ Bag _-->foldl delete m1 (members m2)),(m1 __as__ HSet _-m2 __as__ HSet _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2 __as__ HBag _-->foldl delete m1 (members m2)),(m1 __as__ HBag _-m2-->m1-hbag m2 __if__ xsetp m2),(m1-m2 __as__ HBag _-->hbag m1-m2 __if__ xsetp m1),(m1 __as__ HSet _-m2-->__case__ m2 [(Bag _-->hbag m1-hbag m2),(Set _-->m1-hset m2)] __if__ xsetp m2),(m1-m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1-hbag m2),(Set _-->hset m1-m2)] __if__ xsetp m2),(m1 __as__ Bag _-m2 __as__ Set _-->m1-bag m2),(m1 __as__ Set _-m2 __as__ Bag _-->bag m1-m2)]);
'((.) __with__ [(f.g) x-->f (g x)]);
'((..) __with__ [(n __type__ int..m __type__ int-->__C::pure_int_seq n m 1),(n1 __type__ int:n2 __type__ int..m __type__ int-->__C::pure_int_seq n1 m (n2-n1) __if__ n1~=n2),(n __type__ double..m __type__ double-->__C::pure_double_seq n m 1.0 __if__ ~infp n&&~infp m),(n __type__ int..m __type__ double-->__C::pure_double_seq (double n) m 1.0 __if__ ~infp m),(n __type__ double..m __type__ int-->__C::pure_double_seq n (double m) 1.0 __if__ ~infp n),(n1 __type__ double:n2 __type__ double..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ double-->__C::pure_double_seq (double n1) m (n2-n1) __if__ ~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ double-->__C::pure_double_seq n1 m (n2-n1) __if__ ~infp n1&&~infp m&&n1~=n2),(n1 __type__ double:n2 __type__ double..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(n1 __type__ int:n2 __type__ int..m __type__ double-->__C::pure_double_seq (double n1) m (double (n2-n1)) __if__ ~infp m&&n1~=n2),(n1 __type__ int:n2 __type__ double..m __type__ int-->__C::pure_double_seq (double n1) (double m) (n2-n1) __if__ n1~=n2),(n1 __type__ double:n2 __type__ int..m __type__ int-->__C::pure_double_seq n1 (double m) (n2-n1) __if__ ~infp n1&&n1~=n2),(a __type__ string..b __type__ string-->map chr (ord a..ord b) __if__ charp a&&charp b),(a __type__ string:b __type__ string..c __type__ string-->map chr (ord a:ord b..ord c) __if__ charp a&&charp b&&charp c),(n1:n2..m-->__ifelse__ (nanp n1||nanp m||double m===-s) [] (__ifelse__ (double m===s) (iterate (flip (+) k) n1) (iterwhile (p u) (flip (+) k) n1)) __when__ [(s,p-->__ifelse__ (k>0) (inf,cmp (>=)) (-inf,cmp (<=)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]]),(u-->__ifelse__ (doublep k||doublep m) (m+0.5*k) m)] __if__ realp k&&k~=0&&~infp n1&&~infp n2 __when__ [k-->n2-n1]),(n..m-->__ifelse__ (nanp n||nanp m||double m===-inf) [] (__ifelse__ (double m===inf) (iterate (flip (+) 1) n) (iterwhile (cmp (>=) m) (flip (+) 1) n)) __with__ [cmp p x y-->__case__ (p x y) [(res __type__ int-->res),(_-->0)]] __if__ realp (m-n)&&~listp n&&~infp n)]);
'((<) __with__ [(x __type__ int<y __type__ int-->x<y),(x __type__ double<y __type__ double-->x<y),(x __type__ int<y __type__ double-->x<y),(x __type__ double<y __type__ int-->x<y),(x __type__ bigint<y __type__ bigint-->__C::bigint_cmp x y<0),(x __type__ int<y __type__ bigint-->bigint x<y),(x __type__ bigint<y __type__ int-->x<bigint y),(x __type__ bigint<y __type__ double-->double x<y),(x __type__ double<y __type__ bigint-->x<double y),(x __type__ string<y __type__ string-->__C::strcmp x y<0),(x1%y1<x2%y2-->x1*y2<x2*y1),(x1%y1<x2-->x1<x2*y1 __if__ realp x2),(x1<x2%y2-->x1*y2<x2 __if__ realp x2),(d1 __as__ Dict _<d2 __as__ Dict _-->d1<=d2&&~d1>=d2),(d1 __as__ MDict _<d2 __as__ MDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HDict _<d2 __as__ HDict _-->d1<=d2&&~d1>=d2),(d1 __as__ HMDict _<d2 __as__ HMDict _-->d1<=d2&&~d1>=d2),(m1 __as__ HMDict _<m2-->m1<hmdict m2 __if__ xdictp m2),(m1<m2 __as__ HMDict _-->hmdict m1<m2 __if__ xdictp m1),(m1 __as__ HDict _<m2-->__case__ m2 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->m1<hdict m2)] __if__ xdictp m2),(m1<m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<hmdict m2),(Dict _-->hdict m1<m2)] __if__ xdictp m2),(m1 __as__ MDict _<m2 __as__ Dict _-->m1<mdict m2),(m1 __as__ Dict _<m2 __as__ MDict _-->mdict m1<m2),(m1 __as__ Set _<m2 __as__ Set _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ Bag _<m2 __as__ Bag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HSet _<m2 __as__ HSet _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2 __as__ HBag _-->__ifelse__ (m1<=m2) (~m1>=m2) 0),(m1 __as__ HBag _<m2-->m1<hbag m2 __if__ xsetp m2),(m1<m2 __as__ HBag _-->hbag m1<m2 __if__ xsetp m1),(m1 __as__ HSet _<m2-->__case__ m2 [(Bag _-->hbag m1<hbag m2),(Set _-->m1<hset m2)] __if__ xsetp m2),(m1<m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<hbag m2),(Set _-->hset m1<m2)] __if__ xsetp m2),(m1 __as__ Bag _<m2 __as__ Set _-->m1<bag m2),(m1 __as__ Set _<m2 __as__ Bag _-->bag m1<m2)]);
'((<:) __with__ [(r __type__ int<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ bigint<:t-->-r<:t+3.14159265358979 __if__ r<0),(r __type__ double<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __type__ int-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ bigint-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ double-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __type__ int-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ bigint-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r<:t __type__ double-->r<:3.14159265358979 __if__ t==-3.14159265358979),(r __as__ (_%_)<:t-->-r<:t+3.14159265358979 __if__ r<0),(r<:t __as__ (_%_)-->r<:atan2 (sin t) (cos t) __if__ t<-3.14159265358979||t>3.14159265358979),(r<:t __as__ (_%_)-->r<:3.14159265358979 __if__ t==-3.14159265358979)]);
'((<<) __with__ [(x __type__ int<<y __type__ int-->x<<y),(x __type__ bigint<<y __type__ int-->__C::bigint_shl x y __if__ y>=0),(x __type__ bigint<<y __type__ int-->__C::bigint_shr x (-y))]);
'((<=) __with__ [(x __type__ int<=y __type__ int-->x<=y),(x __type__ double<=y __type__ double-->x<=y),(x __type__ int<=y __type__ double-->x<=y),(x __type__ double<=y __type__ int-->x<=y),(x __type__ bigint<=y __type__ bigint-->__C::bigint_cmp x y<=0),(x __type__ int<=y __type__ bigint-->bigint x<=y),(x __type__ bigint<=y __type__ int-->x<=bigint y),(x __type__ bigint<=y __type__ double-->double x<=y),(x __type__ double<=y __type__ bigint-->x<=double y),(x __type__ string<=y __type__ string-->__C::strcmp x y<=0),(x1%y1<=x2%y2-->x1*y2<=x2*y1),(x1%y1<=x2-->x1<=x2*y1 __if__ realp x2),(x1<=x2%y2-->x1*y2<=x2 __if__ realp x2),(d1 __as__ Dict _<=d2 __as__ Dict _-->cmp (members d1) (members d2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->0 __if__ xk<yk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->cmp xs1 ys __if__ yk<xk),(cmp (xs1 __as__ ((xk=>xv):xs)) ((yk=>yv):ys)-->eq xv yv&&cmp xs ys),(eq u v-->__case__ (u==v) [(res __type__ int-->res),(_-->u===v)])]),(d1 __as__ MDict _<=d2 __as__ MDict _-->null (d1-d2)),(d1 __as__ HDict _<=d2 __as__ HDict _-->null (d1-d2)),(d1 __as__ HMDict _<=d2 __as__ HMDict _-->null (d1-d2)),(m1 __as__ HMDict _<=m2-->m1<=hmdict m2 __if__ xdictp m2),(m1<=m2 __as__ HMDict _-->hmdict m1<=m2 __if__ xdictp m1),(m1 __as__ HDict _<=m2-->__case__ m2 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->m1<=hdict m2)] __if__ xdictp m2),(m1<=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1<=hmdict m2),(Dict _-->hdict m1<=m2)] __if__ xdictp m2),(m1 __as__ MDict _<=m2 __as__ Dict _-->m1<=mdict m2),(m1 __as__ Dict _<=m2 __as__ MDict _-->mdict m1<=m2),(m1 __as__ Set _<=m2 __as__ Set _-->cmp (members m1) (members m2) __with__ [(cmp [] []-->1),(cmp (x:xs) []-->0),(cmp [] (x:xs)-->1),(cmp (xs1 __as__ (x:xs)) (y:ys)-->0 __if__ x<y),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs1 ys __if__ y<x),(cmp (xs1 __as__ (x:xs)) (y:ys)-->cmp xs ys)]),(m1 __as__ HSet _<=m2 __as__ HSet _-->all (member m2) (members m1)),(m1 __as__ Bag _<=m2 __as__ Bag _-->null (m1-m2)),(m1 __as__ HBag _<=m2 __as__ HBag _-->null (m1-m2)),(m1 __as__ HBag _<=m2-->m1<=hbag m2 __if__ xsetp m2),(m1<=m2 __as__ HBag _-->hbag m1<=m2 __if__ xsetp m1),(m1 __as__ HSet _<=m2-->__case__ m2 [(Bag _-->hbag m1<=hbag m2),(Set _-->m1<=hset m2)] __if__ xsetp m2),(m1<=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1<=hbag m2),(Set _-->hset m1<=m2)] __if__ xsetp m2),(m1 __as__ Bag _<=m2 __as__ Set _-->m1<=bag m2),(m1 __as__ Set _<=m2 __as__ Bag _-->bag m1<=m2)]);
'((===) __with__ [x===y-->same x y]);
'((>) __with__ [(x __type__ int>y __type__ int-->x>y),(x __type__ double>y __type__ double-->x>y),(x __type__ int>y __type__ double-->x>y),(x __type__ double>y __type__ int-->x>y),(x __type__ bigint>y __type__ bigint-->__C::bigint_cmp x y>0),(x __type__ int>y __type__ bigint-->bigint x>y),(x __type__ bigint>y __type__ int-->x>bigint y),(x __type__ bigint>y __type__ double-->double x>y),(x __type__ double>y __type__ bigint-->x>double y),(x __type__ string>y __type__ string-->__C::strcmp x y>0),(x1%y1>x2%y2-->x1*y2>x2*y1),(x1%y1>x2-->x1>x2*y1 __if__ realp x2),(x1>x2%y2-->x1*y2>x2 __if__ realp x2),(d1 __as__ Dict _>d2 __as__ Dict _-->d1>=d2&&~d1<=d2),(d1 __as__ MDict _>d2 __as__ MDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HDict _>d2 __as__ HDict _-->d1>=d2&&~d1<=d2),(d1 __as__ HMDict _>d2 __as__ HMDict _-->d1>=d2&&~d1<=d2),(m1 __as__ HMDict _>m2-->m1>hmdict m2 __if__ xdictp m2),(m1>m2 __as__ HMDict _-->hmdict m1>m2 __if__ xdictp m1),(m1 __as__ HDict _>m2-->__case__ m2 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->m1>hdict m2)] __if__ xdictp m2),(m1>m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>hmdict m2),(Dict _-->hdict m1>m2)] __if__ xdictp m2),(m1 __as__ MDict _>m2 __as__ Dict _-->m1>mdict m2),(m1 __as__ Dict _>m2 __as__ MDict _-->mdict m1>m2),(m1 __as__ Set _>m2 __as__ Set _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ Bag _>m2 __as__ Bag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HSet _>m2 __as__ HSet _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2 __as__ HBag _-->__ifelse__ (m1>=m2) (~m1<=m2) 0),(m1 __as__ HBag _>m2-->m1>hbag m2 __if__ xsetp m2),(m1>m2 __as__ HBag _-->hbag m1>m2 __if__ xsetp m1),(m1 __as__ HSet _>m2-->__case__ m2 [(Bag _-->hbag m1>hbag m2),(Set _-->m1>hset m2)] __if__ xsetp m2),(m1>m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>hbag m2),(Set _-->hset m1>m2)] __if__ xsetp m2),(m1 __as__ Bag _>m2 __as__ Set _-->m1>bag m2),(m1 __as__ Set _>m2 __as__ Bag _-->bag m1>m2)]);
'((>=) __with__ [(x __type__ int>=y __type__ int-->x>=y),(x __type__ double>=y __type__ double-->x>=y),(x __type__ int>=y __type__ double-->x>=y),(x __type__ double>=y __type__ int-->x>=y),(x __type__ bigint>=y __type__ bigint-->__C::bigint_cmp x y>=0),(x __type__ int>=y __type__ bigint-->bigint x>=y),(x __type__ bigint>=y __type__ int-->x>=bigint y),(x __type__ bigint>=y __type__ double-->double x>=y),(x __type__ double>=y __type__ bigint-->x>=double y),(x __type__ string>=y __type__ string-->__C::strcmp x y>=0),(x1%y1>=x2%y2-->x1*y2>=x2*y1),(x1%y1>=x2-->x1>=x2*y1 __if__ realp x2),(x1>=x2%y2-->x1*y2>=x2 __if__ realp x2),(d1 __as__ Dict _>=d2 __as__ Dict _-->d2<=d1),(d1 __as__ MDict _>=d2 __as__ MDict _-->null (d2-d1)),(d1 __as__ HDict _>=d2 __as__ HDict _-->null (d2-d1)),(d1 __as__ HMDict _>=d2 __as__ HMDict _-->null (d2-d1)),(m1 __as__ HMDict _>=m2-->m1>=hmdict m2 __if__ xdictp m2),(m1>=m2 __as__ HMDict _-->hmdict m1>=m2 __if__ xdictp m1),(m1 __as__ HDict _>=m2-->__case__ m2 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->m1>=hdict m2)] __if__ xdictp m2),(m1>=m2 __as__ HDict _-->__case__ m1 [(MDict _-->hmdict m1>=hmdict m2),(Dict _-->hdict m1>=m2)] __if__ xdictp m2),(m1 __as__ MDict _>=m2 __as__ Dict _-->m1>=mdict m2),(m1 __as__ Dict _>=m2 __as__ MDict _-->mdict m1>=m2),(m1 __as__ Set _>=m2 __as__ Set _-->m2<=m1),(m1 __as__ HSet _>=m2 __as__ HSet _-->all (member m1) (members m2)),(m1 __as__ Bag _>=m2 __as__ Bag _-->null (m2-m1)),(m1 __as__ HBag _>=m2 __as__ HBag _-->null (m2-m1)),(m1 __as__ HBag _>=m2-->m1>=hbag m2 __if__ xsetp m2),(m1>=m2 __as__ HBag _-->hbag m1>=m2 __if__ xsetp m1),(m1 __as__ HSet _>=m2-->__case__ m2 [(Bag _-->hbag m1>=hbag m2),(Set _-->m1>=hset m2)] __if__ xsetp m2),(m1>=m2 __as__ HSet _-->__case__ m1 [(Bag _-->hbag m1>=hbag m2),(Set _-->hset m1>=m2)] __if__ xsetp m2),(m1 __as__ Bag _>=m2 __as__ Set _-->m1>=bag m2),(m1 __as__ Set _>=m2 __as__ Bag _-->bag m1>=m2)]);
'((>>) __with__ [(x __type__ int>>y __type__ int-->x>>y),(x __type__ bigint>>y __type__ int-->__C::bigint_shr x y __if__ y>=0),(x __type__ bigint>>y __type__ int-->__C::bigint_shl x (-y))]);
'((^) __with__ [(1.0^y __type__ double-->1.0),((-1.0)^y __type__ double-->1.0 __if__ infp y),(x __type__ double^y __type__ double-->__C::pow x y),(x __type__ int^y __type__ int-->double x^double y),(x __type__ bigint^y __type__ bigint-->double x^double y),(x __type__ int^y __type__ bigint-->double x^double y),(x __type__ bigint^y __type__ int-->double x^double y),(x __type__ double^y __type__ int-->x^double y),(x __type__ double^y __type__ bigint-->x^double y),(x __type__ int^y __type__ double-->double x^y),(x __type__ bigint^y __type__ double-->double x^y),(z1 __as__ (_+:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(z1 __as__ (_<:_)^x2-->exp (ln z1*x2) __if__ numberp x2),(x1^z2 __as__ (_+:_)-->exp (ln (rect x1)*z2) __if__ realp x1),(x1^z2 __as__ (_<:_)-->exp (ln (polar x1)*z2) __if__ realp x1),((x1%y1)^(x2%y2)-->(x1/y1)^(x2/y2)),((x1%y1)^x2-->(x1/y1)^x2 __if__ numberp x2),(x1^(x2%y2)-->x1^(x2/y2) __if__ numberp x1)]);
'(pure_quoted_symbol __with__ [pure_quoted_symbol (s __type__ string)-->pure_quoted_symbol id __if__ id>0 __when__ [id __type__ int-->__C::pure_getsym s]]);
'(record_elem_at __with__ [record_elem_at x y-->throw out_of_bounds]);
'(abs __with__ [(abs (x __type__ int)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ bigint)-->__ifelse__ (x>0) x (-x)),(abs (x __type__ double)-->__ifelse__ (x>0) x (-x)),(abs (x+:y)-->sqrt (x*x+y*y)),(abs (r<:t)-->r),(abs (x%y)-->abs x%y)]);
'(acos __with__ [(acos (x __type__ int)-->acos (double x)),(acos (x __type__ bigint)-->acos (double x)),(acos (z __as__ (x+:y))-->-i*ln (z+i*sqrt (1-z*z))),(acos (z __as__ (r<:t))-->-i*ln (z+i*sqrt (1-z*z))),(acos (x%y)-->acos (x/y))]);
'(acosh __with__ [(acosh (x __type__ int)-->acosh (double x)),(acosh (x __type__ bigint)-->acosh (double x)),(acosh (z __as__ (x+:y))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (z __as__ (r<:t))-->ln (z+sqrt (z-1)*sqrt (z+1))),(acosh (x%y)-->acosh (x/y))]);
'(all __with__ [(all p (x __type__ matrix)-->__C::matrix_all p x),(all p (s __type__ string)-->all p (chars s)),(all p []-->1),(all p (x:xs)-->__ifelse__ (p x) (all p xs) 0)]);
'((and) __with__ [(x __type__ int and y __type__ int-->x and y),(x __type__ bigint and y __type__ bigint-->__C::bigint_and x y),(x __type__ int and y __type__ bigint-->bigint x and y),(x __type__ bigint and y __type__ int-->x and bigint y)]);
'(any __with__ [(any p (x __type__ matrix)-->__C::matrix_any p x),(any p (s __type__ string)-->any p (chars s)),(any p []-->0),(any p (x:xs)-->__ifelse__ (p x) 1 (any p xs))]);
'(applp __with__ [applp x-->typep ('appl) x]);
'(arg __with__ [(arg (x+:y)-->atan2 y x),(arg (r<:t)-->t),(arg (x __type__ int)-->atan2 0 x),(arg (x __type__ bigint)-->atan2 0 x),(arg (x __type__ double)-->atan2 0 x),(arg (x%y)-->atan2 0 (x/y))]);
'(array __with__ [array (xs __type__ rlist)-->foldl append emptyarray xs]);
'(array2 __with__ [array2 xs-->array (map array xs)]);
'(arrayp __with__ [arrayp x-->typep array x]);
'(asin __with__ [(asin (x __type__ int)-->asin (double x)),(asin (x __type__ bigint)-->asin (double x)),(asin (z __as__ (x+:y))-->-i*ln (i*z+sqrt (1-z*z))),(asin (z __as__ (r<:t))-->-i*ln (i*z+sqrt (1-z*z))),(asin (x%y)-->asin (x/y))]);
'(asinh __with__ [(asinh (x __type__ int)-->asinh (double x)),(asinh (x __type__ bigint)-->asinh (double x)),(asinh (z __as__ (x+:y))-->ln (z+sqrt (z*z+1))),(asinh (z __as__ (r<:t))-->ln (z+sqrt (z*z+1))),(asinh (x%y)-->asinh (x/y))]);
'(atan __with__ [(atan (x __type__ int)-->atan (double x)),(atan (x __type__ bigint)-->atan (double x)),(atan (z __as__ (x+:y))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (z __as__ (r<:t))-->(ln (1+i*z)-ln (1-i*z))/(2*i)),(atan (x%y)-->atan (x/y))]);
'(atan2 __with__ [(atan2 (x __type__ int) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ bigint) (y __type__ int)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ bigint)-->atan2 (double x) (double y)),(atan2 (x __type__ int) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ bigint) (y __type__ double)-->atan2 (double x) y),(atan2 (x __type__ double) (y __type__ int)-->atan2 x (double y)),(atan2 (x __type__ double) (y __type__ bigint)-->atan2 x (double y)),(atan2 (x%y) z-->atan2 (x/y) z __if__ realp z),(atan2 x (y%z)-->atan2 x (y/z) __if__ realp x)]);
'(atanh __with__ [(atanh (x __type__ int)-->atanh (double x)),(atanh (x __type__ bigint)-->atanh (double x)),(atanh (z __as__ (x+:y))-->(ln (1+z)-ln (1-z))/2),(atanh (z __as__ (r<:t))-->(ln (1+z)-ln (1-z))/2),(atanh (x%y)-->atanh (x/y))]);
'(hfirst __with__ [hfirst t-->avl::mfirst t]);
'(hkeys __with__ [hkeys t-->avl::mkeys t]);
'(hlast __with__ [hlast t-->avl::mlast t]);
'(hmembers __with__ [hmembers t-->avl::mmembers t]);
'(hrmfirst __with__ [hrmfirst t-->avl::mrmfirst t]);
'(hrmlast __with__ [hrmlast t-->avl::mrmlast t]);
'(hsize __with__ [hsize t-->avl::msize t]);
'(hvals __with__ [hvals t-->avl::mvals t]);
'(mdeletek __with__ [mdeletek t y-->avl::mdelete t y]);
'(mdeleteka __with__ [mdeleteka t y-->avl::mdeletea t y]);
'(mhdelete __with__ [mhdelete t y-->avl::hdelete t y]);
'(mhdeletek __with__ [mhdeletek t y-->avl::hdeletek t y]);
'(mhdeletekv __with__ [mhdeletekv t y-->avl::hdeletekv t y]);
'(bag __with__ [(bag (m __as__ Bag _)-->m),(bag (m __type__ xset)-->bag (members m)),(bag (xs __type__ rlist)-->foldl insert emptybag xs)]);
'(bagp __with__ [bagp x-->typep bag x]);
'(bigint __with__ [(bigint (x __type__ bigint)-->x),(bigint (x __type__ int)-->__C::pure_bigintval x),(bigint (x __type__ double)-->__C::pure_bigintval x),(bigint (x __as__ (_%_))-->trunc x)]);
'(bigintp __with__ [bigintp x-->__case__ x [(_ __type__ bigint-->1),(_-->0)]]);
'(bigintvalp __with__ [bigintvalp x-->ratvalp x&&frac (re x)==0]);
'(blobp __with__ [blobp _-->0]);
'(bool __with__ [bool (x __type__ int)-->~(~x)]);
'(boolp __with__ [boolp x-->typep ('bool) x]);
'(byte_cstring __with__ [byte_cstring (s __type__ string)-->ptrtag 1$__C::pure_byte_cstring s]);
'(byte_cstring_pointer __with__ [byte_cstring_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_cstring xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(byte_matrix __with__ [(byte_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_byte_array n m p),(byte_matrix (n __type__ int) (p __type__ pointer)-->byte_matrix (1,n) p)]);
'(byte_pointer __with__ [byte_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_byte_array p x __if__ nmatrixp x]);
'(byte_string __with__ [byte_string (s __type__ string)-->ptrtag 1$__C::pure_byte_string s]);
'(byte_string_pointer __with__ [byte_string_pointer xs-->__ifelse__ (null p) (throw malloc_error) (make_pointer (map byte_string xs)) __with__ [(make_pointer xs-->ptrtag 3$sentry free_pointer p __when__ [_-->dowith (__lambda__ [i,x] (put_pointer (shift_pointer p i) x)) (0..n-1) xs]),(free_pointer p-->free p __when__ [_-->do (__lambda__ [i] (free (get_pointer (shift_pointer p i)))) (0..n-1)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __when__ [(n-->#xs),(p-->calloc (n+1) 8),(xs-->__ifelse__ (smatrixp xs) (list xs) xs)] __if__ (rlistp xs||smatrixp xs)&&all stringp xs]);
'(cat __with__ [(cat []-->[]),(cat (xs __as__ (_:_))-->foldr (tick []) [] xs __with__ [(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)]),(foldr (tick _) [] x-->cat x),(tick zs (x:xs) ys-->tack (x:zs) (tick [] xs ys&) __if__ thunkp xs),(tick zs (x:xs) ys-->tick (x:zs) xs ys),(tick zs [] ys-->tack zs ys),(tick zs xs ys-->tack zs (xs+ys)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(catmap __with__ [(catmap f (x __type__ matrix)-->cat (list (map f x))),(catmap f (s __type__ string)-->catmap f (chars s)),(catmap f []-->[]),(catmap f (xs __as__ (_:_))-->cat (map f xs))]);
'(ceil __with__ [(ceil (x __type__ int)-->x),(ceil (x __type__ bigint)-->x),(ceil (x __as__ (_%_))-->-floor (-x))]);
'(charp __with__ [charp x-->typep ('char) x]);
'(chars __with__ [(chars (s __type__ string)-->__C::string_chars s __if__ ~funp (:)),(chars (s __type__ string)-->list (__C::string_chars s))]);
'(chr __with__ [chr (n __type__ int)-->c __if__ stringp c __when__ [c-->__C::string_chr n]]);
'(cis __with__ [(cis (t __type__ int)-->rect (1<:t)),(cis (t __type__ bigint)-->rect (1<:t)),(cis (t __type__ double)-->rect (1<:t)),(cis (x%y)-->rect (1<:x/y))]);
'(clearsym __with__ [(clearsym (sym __type__ string) (level __type__ int)-->() __when__ [(res-->evalcmd ("clear -t"+str level+" "+sym)),(_-->stringp res||throw evalcmd)]),(clearsym (sym __type__ symbol) (level __type__ int)-->clearsym sym level __when__ [(sym-->str sym),(sym-->__ifelse__ (sym!0=="(") (substr sym 2 (#sym-2)) sym)])]);
'(closurep __with__ [closurep x-->funp x||lambdap x]);
'(cmatrixp __with__ [cmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==2),(_-->0)]]);
'(col __with__ [col (x __type__ matrix) (j __type__ int)-->__ifelse__ (j>=0&&j<m) (__C::matrix_slice x 0 j (n-1) j) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(colcatmap __with__ [(colcatmap f []-->{}),(colcatmap f (xs __as__ (_:_))-->colcat (map f xs)),(colcatmap f (x __type__ matrix)-->matcat (map f x)),(colcatmap f (s __type__ string)-->colcatmap f (chars s))]);
'(colmap __with__ [(colmap f []-->{}),(colmap f (xs __as__ (_:_))-->colcat (map f xs)),(colmap f (x __type__ matrix)-->map f x),(colmap f (s __type__ string)-->colmap f (chars s))]);
'(colrev __with__ [colrev (x __type__ matrix)-->colcat (reverse (cols x))]);
'(cols __with__ [cols (x __type__ matrix)-->map (col x) (0..m-1) __when__ [_,m __type__ int-->dim x]]);
'(colvector __with__ [(colvector (x __type__ matrix)-->redim (#x,1) x),(colvector ()-->redim (0,1) {}),(colvector (xs __as__ (_,_))-->colvector (list xs)),(colvector xs-->redim (#x,1) x __if__ matrixp x __when__ [x-->rowvector xs])]);
'(colvectorp __with__ [colvectorp x-->matrixp x&&dim x!1==1]);
'(colvectorseq __with__ [(colvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_colvect n m s),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect n m s),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_colvect (double n) (double m) (double s)),(colvectorseq n m s-->x __if__ matrixp x __when__ [x-->colvector (n:n+s..m)])]);
'(complex __with__ [(complex (z __as__ (x+:y))-->z),(complex (z __as__ (r<:t))-->z),(complex (x __type__ int)-->x+:0),(complex (x __type__ bigint)-->x+:0),(complex (x __type__ double)-->x+:0.0),(complex (x%y)-->x%y+:0L%1L)]);
'(complex_float_matrix __with__ [(complex_float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_float_array n m p),(complex_float_matrix (n __type__ int) (p __type__ pointer)-->complex_float_matrix (1,n) p)]);
'(complex_float_pointer __with__ [complex_float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_float_array p x __if__ nmatrixp x]);
'(complex_matrix __with__ [(complex_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array n m p),(complex_matrix (n __type__ int) (p __type__ pointer)-->complex_matrix (1,n) p)]);
'(complex_matrix_view __with__ [(complex_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_complex_array_nodup n m p),(complex_matrix_view (n __type__ int) (p __type__ pointer)-->complex_matrix_view (1,n) p)]);
'(complex_pointer __with__ [complex_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_complex_array p x __if__ nmatrixp x]);
'(complexp __with__ [complexp x-->typep ('complex) x]);
'(compvalp __with__ [compvalp x-->numberp x]);
'(conj __with__ [(conj (x __type__ matrix)-->__C::matrix_conj x __if__ nmatrixp x),(conj (x+:y)-->x+:-y),(conj (r<:t)-->r<:-t),(conj (x __type__ int)-->x),(conj (x __type__ bigint)-->x),(conj (x __type__ double)-->x),(conj (x __as__ (_%_))-->x)]);
'(cooked __with__ [cooked (p __type__ pointer)-->sentry free p]);
'(cos __with__ [(cos (x __type__ int)-->cos (double x)),(cos (x __type__ bigint)-->cos (double x)),(cos (x+:y)-->cos x*cosh y+:-sin x*sinh y),(cos (z __as__ (r<:t))-->polar (cos (rect z))),(cos (x%y)-->cos (x/y))]);
'(cosh __with__ [(cosh (x __type__ int)-->cosh (double x)),(cosh (x __type__ bigint)-->cosh (double x)),(cosh (x+:y)-->cosh x*cos y+:sinh x*sin y),(cosh (z __as__ (r<:t))-->polar (cosh (rect z))),(cosh (x%y)-->cosh (x/y))]);
'(cst __with__ [cst x y-->x]);
'(cstring __with__ [cstring (s __type__ pointer)-->__C::pure_cstring s]);
'(cstring_dup __with__ [cstring_dup (s __type__ pointer)-->__C::pure_cstring_dup s]);
'(cstring_list __with__ [cstring_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (cstring_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(cstring_vector __with__ [cstring_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->cstring_list n p]]);
'(curry __with__ [curry f x y-->f (x,y)]);
'(curry3 __with__ [curry3 f x y z-->f (x,y,z)]);
'(cycle __with__ [(cycle (x __type__ matrix)-->cycle (list x)),(cycle (s __type__ string)-->cycle (chars s)),(cycle (ys __as__ (x:xs))-->x:(xs+cycle ys)&)]);
'(cyclen __with__ [(cyclen (n __type__ int) (x __type__ matrix)-->cyclen n (list x) __if__ ~null x),(cyclen (n __type__ int) (s __type__ string)-->cyclen n (chars s) __if__ ~null s),(cyclen (n __type__ int) (x:xs)-->[] __if__ n<=0),(cyclen (n __type__ int) (x:xs)-->accum [] n __with__ [(accum ys (n __type__ int)-->cat ys+take n xs __if__ n<=m),(accum ys (n __type__ int)-->accum (xs:ys) (n-m))] __when__ [(xs-->x:xs),(m __type__ int-->#xs)] __if__ rlistp xs)]);
'(delete __with__ [(delete (x __type__ matrix) y-->__C::record_delete x y __if__ recordp x),(delete (Dict d) x-->Dict (avl::deletek d x)),(delete (HDict d) x-->HDict (avl::hdeletek d x)),(delete (MDict d) x-->MDict (avl::mdeletek d x)),(delete (HMDict d) x-->HMDict (avl::mhdeletek d x)),(delete (Set m) y-->Set (avl::delete m y)),(delete (Bag m) y-->Bag (avl::mdelete m y)),(delete (HSet m) y-->HSet (avl::hdelete m y)),(delete (HBag m) y-->HBag (avl::mhdelete m y))]);
'(delete_all __with__ [(delete_all (Dict d) x-->Dict (avl::deletek d x)),(delete_all (HDict d) x-->HDict (avl::hdeletek d x)),(delete_all (MDict d) x-->MDict (avl::mdeleteka d x)),(delete_all (HMDict d) x-->HMDict (avl::mhdeleteka d x)),(delete_all (Set m) y-->Set (avl::delete m y)),(delete_all (Bag m) y-->Bag (avl::mdeletea m y)),(delete_all (HSet m) y-->HSet (avl::hdelete m y)),(delete_all (HBag m) y-->HBag (avl::mhdeletea m y))]);
'(delete_val __with__ [(delete_val (Dict d) (el __as__ (x=>y))-->Dict (avl::deletekv d el)),(delete_val (HDict d) (el __as__ (x=>y))-->HDict (avl::hdeletekv d el)),(delete_val (MDict d) (el __as__ (x=>y))-->MDict (avl::mdeletekv d el)),(delete_val (HMDict d) (el __as__ (x=>y))-->HMDict (avl::mhdeletekv d el))]);
'(den __with__ [(den (x%y)-->y),(den (x __type__ int)-->1L),(den (x __type__ bigint)-->1L),(den (x __type__ double)-->__ifelse__ (frac x==0.0) 1L (den (rational x)))]);
'(dict __with__ [(dict (d __as__ Dict _)-->d),(dict (d __type__ xdict)-->dict (members d)),(dict (xys __type__ rlist)-->foldl insert emptydict xys)]);
'(dictp __with__ [dictp x-->typep dict x]);
'(dim __with__ [dim (x __type__ matrix)-->__C::matrix_dim x]);
'((div) __with__ [(x __type__ int div y __type__ int-->x div y),(x __type__ bigint div y __type__ bigint-->__C::bigint_div x y),(x __type__ int div y __type__ bigint-->bigint x div y),(x __type__ bigint div y __type__ int-->x div bigint y)]);
'(dmatrixp __with__ [dmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==1),(_-->0)]]);
'(do __with__ [(do f (x __type__ matrix)-->__C::matrix_do f x),(do f (s __type__ string)-->do f (chars s)),(do f []-->()),(do f (x:xs)-->f x$$do f xs)]);
'(double __with__ [(double (x __type__ double)-->x),(double (x __type__ int)-->__C::pure_dblval x),(double (x __type__ bigint)-->__C::pure_dblval x),(double (x%y)-->x/y)]);
'(double_matrix __with__ [(double_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array n m p),(double_matrix (n __type__ int) (p __type__ pointer)-->double_matrix (1,n) p)]);
'(double_matrix_view __with__ [(double_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_double_array_nodup n m p),(double_matrix_view (n __type__ int) (p __type__ pointer)-->double_matrix_view (1,n) p)]);
'(double_pointer __with__ [double_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_double_array p x __if__ nmatrixp x]);
'(doublep __with__ [doublep x-->__case__ x [(_ __type__ double-->1),(_-->0)]]);
'(dowith __with__ [(dowith f (x __type__ matrix) (y __type__ matrix)-->do (uncurry f) (zip x y)),(dowith f (s __type__ string) (t __type__ string)-->dowith f (chars s) (chars t)),(dowith f (x:xs) (y:ys)-->f x y$$dowith f xs ys),(dowith f _ _-->())]);
'(dowith3 __with__ [(dowith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->do (uncurry3 f) (zip3 x y z)),(dowith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->dowith3 f (chars s) (chars t) (chars u)),(dowith3 f (x:xs) (y:ys) (z:zs)-->f x y z$$dowith3 f xs ys zs),(dowith3 f _ _ _-->())]);
'(drop __with__ [(drop (k __type__ int) (x __type__ matrix)-->x!!(k..#x-1)),(drop (n __type__ int) (s __type__ string)-->substr s n (#s-n)),(drop (n __type__ int) []-->[]),(drop (n __type__ int) (ys __as__ (x:xs))-->drop (n-1) xs __if__ n>1),(drop (n __type__ int) (ys __as__ (x:xs))-->xs __if__ n==1),(drop (n __type__ int) (ys __as__ (x:xs))-->ys)]);
'(dropwhile __with__ [(dropwhile p (x __type__ matrix)-->__C::matrix_dropwhile p x),(dropwhile p (s __type__ string)-->strcat (dropwhile p (chars s))),(dropwhile p []-->[]),(dropwhile p (ys __as__ (x:xs))-->dropwhile p xs __if__ p x),(dropwhile p (ys __as__ (x:xs))-->ys)]);
'(emptybag __with__ [emptybag-->Bag avl::emptytree]);
'(emptydict __with__ [emptydict-->Dict avl::emptytree]);
'(emptyhbag __with__ [emptyhbag-->HBag avl::emptytree]);
'(emptyhdict __with__ [emptyhdict-->HDict avl::emptytree]);
'(emptyhmdict __with__ [emptyhmdict-->HMDict avl::emptytree]);
'(emptyhset __with__ [emptyhset-->HSet avl::emptytree]);
'(emptymdict __with__ [emptymdict-->MDict avl::emptytree]);
'(emptyset __with__ [emptyset-->Set avl::emptytree]);
'(exactp __with__ [exactp x-->__case__ x [(x+:y-->~doublep x&&~doublep y),(x<:y-->~doublep x&&~doublep y),(x%y-->~doublep x&&~doublep y),(_-->~doublep x)] __if__ numberp x]);
'(execv __with__ [execv (prog __type__ string) (argv __type__ rlist)-->execv prog (smatrix argv)]);
'(execve __with__ [execve (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->execve prog (smatrix argv) (smatrix envp)]);
'(execvp __with__ [execvp (prog __type__ string) (argv __type__ rlist)-->execvp prog (smatrix argv)]);
'(exp __with__ [(exp (x __type__ int)-->exp (double x)),(exp (x __type__ bigint)-->exp (double x)),(exp (x+:y)-->exp x*(cos y+:sin y)),(exp (r<:t)-->exp (r*cos t)<:r*sin t),(exp (x%y)-->exp (x/y))]);
'(fclose __with__ [fclose (fp __type__ pointer)-->clear_sentry fp$$__C::fclose fp __if__ get_sentry fp===__C::fclose]);
'(fdopen __with__ [fdopen (fd __type__ int) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fdopen fd mode]]);
'(fget __with__ [fget (f __type__ pointer)-->read_a_file f buf [] __when__ [buf-->malloc 65536] __with__ [read_a_file f buf t-->check s __when__ [s-->__C::fgets buf 65536 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ feof f||ferror f),(check (s __type__ string)-->read_a_file f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x))]]]);
'(fgets __with__ [fgets (f __type__ pointer)-->read_a_line f buf [] __when__ [buf-->malloc 1024] __with__ [read_a_line f buf t-->check s __when__ [s-->__C::fgets buf 1024 f] __with__ [(check (s __type__ string)-->return (s:t) __if__ done s),(check (s __type__ string)-->read_a_line f buf (s:t)),(check s-->return s __if__ null t),(check s-->return t),(return (x __type__ pointer)-->free buf$$x),(return x-->free buf$$strcat (reverse x)),(done (s __type__ string)-->feof f||ferror f||~null s&&last s=="\n")]]]);
'(filter __with__ [(filter p (x __type__ matrix)-->__C::matrix_filter p x),(filter p (s __type__ string)-->strcat (filter p (chars s))),(filter p []-->[]),(filter p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (add p x zs) (filter p xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (add p x zs) xs),(tick zs []-->tack zs []),(tick _ xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys),(add p x xs-->__ifelse__ (p x) (x:xs) xs)])]);
'(fix __with__ [fix f-->f (fix f&)]);
'(flip __with__ [flip f x y-->f y x]);
'(float_matrix __with__ [(float_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_float_array n m p),(float_matrix (n __type__ int) (p __type__ pointer)-->float_matrix (1,n) p)]);
'(float_pointer __with__ [float_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_float_array p x __if__ nmatrixp x]);
'(floor __with__ [(floor (x __type__ int)-->x),(floor (x __type__ bigint)-->x),(floor (x __as__ (_%_))-->__ifelse__ (n<=x) n (n-1) __when__ [n __type__ bigint-->trunc x])]);
'(fnmatch __with__ [fnmatch (pat __type__ string) (s __type__ string) (flags __type__ int)-->__C::fnmatch pat s flags==0]);
'(foldl __with__ [(foldl f a (x __type__ matrix)-->__C::matrix_foldl f a x),(foldl f a (s __type__ string)-->foldl f a (chars s)),(foldl f a []-->a),(foldl f a (x:xs)-->foldl f (f a x) xs)]);
'(foldl1 __with__ [(foldl1 f (x __type__ matrix)-->__C::matrix_foldl1 f x __if__ ~null x),(foldl1 f (s __type__ string)-->foldl1 f (chars s)),(foldl1 f (x:xs)-->foldl f x xs)]);
'(foldr __with__ [(foldr f a (x __type__ matrix)-->__C::matrix_foldr f a x),(foldr f a (s __type__ string)-->foldr f a (chars s)),(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (foldr f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (foldr f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(foldr1 __with__ [(foldr1 f (x __type__ matrix)-->__C::matrix_foldr1 f x __if__ ~null x),(foldr1 f (s __type__ string)-->foldr1 f (chars s)),(foldr1 f [x]-->x),(foldr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (foldr1 f ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs x),(x:xs-->tick (x:zs) xs),(_-->tack zs (foldr1 f xs))]),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
'(fopen __with__ [fopen (name __type__ string) (mode __type__ string)-->sentry __C::fclose fp __if__ ~null fp __when__ [fp-->__C::fopen name mode]]);
'(fprintf __with__ [fprintf (fp __type__ pointer) (format __type__ string) args-->catch error (do_printf 0 formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count (format:formats) args-->do_printf count formats args __when__ [(res-->__C::pure_fprintf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))] __if__ literal format),(do_printf count (format:formats) (arg:args)-->do_printf count formats args __when__ [(res-->__case__ (format_type (last format) format,arg) [("c",x __type__ int-->__C::pure_fprintf_int fp format x),("c",x __type__ bigint-->__C::pure_fprintf_int fp format x),("d",x __type__ int-->__C::pure_fprintf_int fp format x),("d",x __type__ bigint-->__C::pure_fprintf_int fp format x),("g",x __type__ double-->__C::pure_fprintf_double fp format x),("s",x __type__ string-->__C::pure_fprintf_string fp format x),("p",x __type__ string-->__C::pure_fprintf_pointer fp format x),("p",x __type__ pointer-->__C::pure_fprintf_pointer fp format x),("Z",x __type__ bigint-->__C::pure_fprintf_mpz fp format x),("R",x __type__ mpfr-->__C::pure_fprintf_mpfr fp format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (throw (printf_error res)))]),(do_printf count [] _-->count),(do_printf count _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(frac __with__ [(frac (x __type__ int)-->x-trunc x),(frac (x __type__ bigint)-->x-trunc x),(frac (x __type__ double)-->x-trunc x),(frac (x __as__ (_%_))-->x-trunc x)]);
'(fscanf __with__ [fscanf (fp __type__ pointer) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(res-->__C::pure_fscanf fp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(res-->__case__ t [("n"-->__C::pure_fscanf_int fp format buf),("d"-->__C::pure_fscanf_int fp format buf),("g"-->__C::pure_fscanf_double fp format buf),("s"-->__C::pure_fscanf_string fp format buf),("p"-->__C::pure_fscanf_pointer fp format buf),("Z"-->__C::pure_fscanf_mpz fp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format)]]);
'(functionp __with__ [functionp x-->nargs x>0 __with__ [(nargs ((x __as__ _) _)-->nargs x-1),(nargs x-->nargs x)]]);
'(gcd __with__ [(gcd (x __type__ bigint) (y __type__ bigint)-->__C::bigint_gcd x y),(gcd (x __type__ int) (y __type__ bigint)-->__C::bigint_gcd (bigint x) y),(gcd (x __type__ bigint) (y __type__ int)-->__C::bigint_gcd x (bigint y)),(gcd (x __type__ int) (y __type__ int)-->int (__C::bigint_gcd (bigint x) (bigint y)))]);
'(get __with__ [get (r __type__ ref)-->__C::pointer_get_expr r]);
'(get_byte __with__ [get_byte (x __type__ pointer)-->__C::pointer_get_byte x]);
'(get_double __with__ [get_double (x __type__ pointer)-->__C::pointer_get_double x]);
'(get_float __with__ [get_float (x __type__ pointer)-->__C::pointer_get_float x]);
'(get_int __with__ [get_int (x __type__ pointer)-->__C::pointer_get_int x]);
'(get_int64 __with__ [get_int64 (x __type__ pointer)-->__C::pointer_get_int64 x]);
'(get_long __with__ [get_long (x __type__ pointer)-->__C::pointer_get_long x]);
'(get_pointer __with__ [get_pointer (x __type__ pointer)-->__C::pointer_get_pointer x]);
'(get_short __with__ [get_short (x __type__ pointer)-->__C::pointer_get_short x]);
'(get_string __with__ [get_string (x __type__ pointer)-->__C::pointer_get_string x]);
'(getopt __with__ [getopt opts args-->opt opts ([],[]) args __with__ [(opt opts (o,a) []-->o,a),(opt opts (o,a) ("--":args)-->o,a+args),(opt opts (o,a) (arg:args)-->opt opts (o,a+[arg]) args __if__ ~stringp arg||arg=="-"||arg!![0]~="-"),(opt opts (o,a) (arg:args)-->opt opts (o+vals,a) args __when__ [vals,args-->catch (__lambda__ [_] (catch (__lambda__ [_] (throw arg)) (ret __when__ [ret __as__ (_,_)-->shortopt opts arg args]))) (ret __when__ [ret __as__ (_,_)-->longopt opts arg args])]),(longopt opts arg args-->catch (__lambda__ [_] ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)$" 1 arg 0),(_,opt-->reg 1 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt () args)])) ([mkopt opt val],args __when__ [(1,info-->regex "^--([^=]+)=(.*)$" 1 arg 0),(_,opt,_,val-->reg 1 info,reg 2 info),(long_opt,short_opt,flag-->find_longopt opts opt),(opt=>val,args-->checkopt flag long_opt val args)])),(shortopt opts arg args-->catmap (__lambda__ [__v3__] (__case__ __v3__ [(opt,_-->[mkopt opt ()]),(_-->[])])) opt1+[mkopt opt val],args __when__ [(long_opt,short_opt,flag-->opt2),(opt=>val,args-->checkopt flag long_opt val args)] __if__ all (flip (==) 0.flip (!) 2) opt1 __when__ [("-":chs-->chars arg),(opt __as__ (_:_)-->scanopt (listmap (__lambda__ [ch] (catch (__lambda__ [_] ()) (find_shortopt opts ch))) chs)),(opt1-->init opt),(opt2-->last opt),(val-->subseq arg (#opt+1) (#arg-1)),(val-->__ifelse__ (null val) () val)]),(mkopt opt val-->opt=>val),(find_longopt opts opt-->long_opt,short_opt,flag __when__ [[(long_opt,short_opt,flag)]-->catmap (__lambda__ [__v4__] (__case__ __v4__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (prefixp ("--"+opt) long_opt) [opt1] []),(_-->[])])) opts]),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==0&&null val),(checkopt flag long_opt val args-->long_opt=>val,args __if__ flag~=0&&val~==()),(checkopt flag long_opt val args-->long_opt=>(),args __if__ flag==2),(checkopt flag long_opt val (arg:args)-->long_opt=>arg,args __if__ flag==1),(scanopt ((long_opt,short_opt,flag):opt)-->[(long_opt,short_opt,flag)] __if__ flag~=0),(scanopt ((long_opt,short_opt,flag):opt)-->(long_opt,short_opt,flag):scanopt opt),(scanopt _-->[]),(find_shortopt opts opt-->long_opt,short_opt,flag __when__ [(long_opt,short_opt,flag):_-->catmap (__lambda__ [__v5__] (__case__ __v5__ [(opt1 __as__ (long_opt,short_opt,flag)-->__ifelse__ (short_opt==="-"+opt) [opt1] []),(_-->[])])) opts]),(prefixp (x __type__ string) (y __type__ string)-->n<=m&&x==substr y 0 n __when__ [(n-->#x),(m-->#y)]),(prefixp _ _-->0)]]);
'(gets __with__ [gets-->__ifelse__ (null s) s (__ifelse__ (last s=="\n") (init s) s) __when__ [s-->fgets stdin]]);
'(glob __with__ [glob (pat __type__ string) (flags __type__ int)-->result __when__ [(globptr-->calloc 1 72),(result-->__C::glob pat flags (pointer 0) globptr),(result-->__ifelse__ (result==0) (__C::globlist globptr) result),(_-->__C::globfree globptr),(_-->free globptr)]]);
'(globsym __with__ [globsym (pat __type__ string) (level __type__ int)-->uniq (catmap descr info) __when__ [(res-->evalcmd ("show -gst"+str level+" "+pat)),(_-->stringp res||throw evalcmd),(info-->init (init (split "\n" res)))] __with__ [(uniq (x:xs __as__ (y:_))-->__ifelse__ (x===y) (uniq xs) (x:uniq xs)),(uniq xs-->xs),(descr (s __type__ string)-->__case__ (filter (flip (~=) "") (split " " s)) [(sym:_-->__ifelse__ (any (flip (==) sym) ["extern","private","infix","infixl","infixr","prefix","postfix","outfix","nonfix"]) [] (catmap (__lambda__ [x] (__ifelse__ (symbolp x) [x] [])) [__C::pure_quoted_symbol sym])),(_-->[])])]]);
'(hbag __with__ [(hbag (m __as__ HBag _)-->m),(hbag (m __type__ xset)-->hbag (members m)),(hbag (xs __type__ rlist)-->foldl insert emptyhbag xs)]);
'(hbagp __with__ [hbagp x-->typep hbag x]);
'(hdict __with__ [(hdict (d __as__ HDict _)-->d),(hdict (d __type__ xdict)-->hdict (members d)),(hdict (xys __type__ rlist)-->foldl insert emptyhdict xys)]);
'(hdictp __with__ [hdictp x-->typep hdict x]);
'(head __with__ [(head (x __type__ matrix)-->x!0 __if__ ~null x),(head (s __type__ string)-->s!0 __if__ ~null s),(head (x:xs)-->x)]);
'(heap __with__ [heap (xs __type__ rlist)-->foldl insert emptyheap xs]);
'(heapp __with__ [heapp x-->typep heap x]);
'(hmdict __with__ [(hmdict (d __as__ HMDict _)-->d),(hmdict (d __type__ xdict)-->hmdict (members d)),(hmdict (xys __type__ rlist)-->foldl insert emptyhmdict xys)]);
'(hmdictp __with__ [hmdictp x-->typep hmdict x]);
'(hset __with__ [(hset (m __as__ HSet _)-->m),(hset (m __type__ xset)-->hset (members m)),(hset (xs __type__ rlist)-->foldl insert emptyhset xs)]);
'(hsetp __with__ [hsetp x-->typep hset x]);
'(id __with__ [id x-->x]);
'(im __with__ [(im (x __type__ matrix)-->__C::matrix_im x __if__ nmatrixp x),(im (x+:y)-->y),(im (r<:t)-->r*sin t),(im (x __type__ int)-->0),(im (x __type__ bigint)-->0L),(im (x __type__ double)-->0.0),(im (_%_)-->0L%1L)]);
'(imatrixp __with__ [imatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==3),(_-->0)]]);
'(index __with__ [(index (s __type__ string) (u __type__ string)-->__C::string_index s u),(index [] _-->-1),(index (x:xs) y-->search 0 (x:xs) __with__ [(search _ []-->-1),(search (n __type__ int) (x:xs)-->n __if__ x==y),(search (n __type__ int) (x:xs)-->search (n+1) xs),(search _ xs-->index xs y)])]);
'(inexactp __with__ [inexactp x-->__case__ x [(x+:y-->doublep x||doublep y),(x<:y-->doublep x||doublep y),(x%y-->doublep x||doublep y),(_-->doublep x)] __if__ numberp x]);
'(infp __with__ [infp x-->__case__ x [(x __type__ double-->x==inf||x==-inf),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->infp x),(_-->0)]),(_-->0)]]);
'(init __with__ [(init (x __type__ matrix)-->x!!(0..#x-2) __if__ ~null x),(init (s __type__ string)-->substr s 0 (#s-1) __if__ ~null s),(init [x]-->[]),(init (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (ys __as__ (_:xs))-->tack zs (init ys&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs []),(x:xs-->tick (x:zs) xs),(_-->tack zs (init xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(int __with__ [(int (x __type__ int)-->x),(int (x __type__ bigint)-->__C::pure_intval x),(int (x __type__ double)-->__C::pure_intval x),(int (x __as__ (_%_))-->int (bigint x))]);
'(int_matrix __with__ [(int_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array n m p),(int_matrix (n __type__ int) (p __type__ pointer)-->int_matrix (1,n) p)]);
'(int_matrix_view __with__ [(int_matrix_view (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_int_array_nodup n m p),(int_matrix_view (n __type__ int) (p __type__ pointer)-->int_matrix_view (1,n) p)]);
'(int_pointer __with__ [int_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_int_array p x __if__ nmatrixp x]);
'(integerp __with__ [integerp x-->typep ('integer) x]);
'(intp __with__ [intp x-->__case__ x [(_ __type__ int-->1),(_-->0)]]);
'(intvalp __with__ [intvalp x-->bigintvalp x&&int (re x)==x]);
'(iterate __with__ [iterate f x-->x:iterate f (f x)&]);
'(iteraten __with__ [(iteraten (n __type__ int) f x-->[] __if__ n<=0),(iteraten (n __type__ int) f x-->accum [] n f x __with__ [(accum xs (n __type__ int) f x-->reverse (x:xs) __if__ n==1),(accum xs (n __type__ int) f x-->accum (x:xs) (n-1) f (f x))])]);
'(iterwhile __with__ [iterwhile p f x-->accum [] p f x __with__ [(accum xs p f x-->accum (x:xs) p f (f x) __if__ p x),(accum xs p f x-->reverse xs)]]);
'(join __with__ [join (delim __type__ string) xs-->s __if__ stringp s __when__ [s-->__C::string_join delim xs]]);
'(key __with__ [key (x=>v)-->x]);
'(keys __with__ [(keys (x __type__ matrix)-->colcatmap (__lambda__ [__v1__] (__case__ __v1__ [(u=>v-->{u}),(_-->{})])) x __if__ recordp x),(keys (Dict d)-->avl::keys d),(keys (MDict d)-->avl::mkeys d),(keys (HDict d)-->avl::hkeys d),(keys (HMDict d)-->avl::hkeys d)]);
'(lcm __with__ [(lcm (x __type__ bigint) (y __type__ bigint)-->__C::bigint_lcm x y),(lcm (x __type__ int) (y __type__ bigint)-->__C::bigint_lcm (bigint x) y),(lcm (x __type__ bigint) (y __type__ int)-->__C::bigint_lcm x (bigint y)),(lcm (x __type__ int) (y __type__ int)-->int (__C::bigint_lcm (bigint x) (bigint y)))]);
'(list __with__ [(list (x __type__ matrix)-->listmap (__lambda__ [i] (x!i)) (0..#x-1)),(list (s __type__ string)-->chars s),(list ()-->[]),(list (x,xs)-->accum [x] xs __with__ [(accum ys (x,xs)-->accum (x:ys) xs),(accum ys x-->reverse (x:ys))]),(list []-->[]),(list (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->reverse ys),(accum ys xs-->throw (bad_list_value xs))]),(list (x __as__ Array _)-->members x),(list (h __as__ Heap _)-->members h),(list (d __type__ xdict)-->members d),(list (m __type__ xset)-->members m)]);
'(list2 __with__ [(list2 (x __type__ matrix)-->listmap (__lambda__ [i] (listmap (__lambda__ [j] (x!(i,j))) (0..m-1))) (0..n-1) __when__ [n __type__ int,m __type__ int-->dim x]),(list2 (x __as__ Array _)-->members2 x)]);
'(listmap __with__ [(listmap f (x __type__ matrix)-->list (map f x)),(listmap f (s __type__ string)-->map f (chars s)),(listmap f []-->[]),(listmap f (xs __as__ (_:_))-->map f xs)]);
'(listp __with__ [listp x-->typep ('list) x]);
'(ln __with__ [(ln (x __type__ double)-->__C::log x),(ln (x __type__ int)-->ln (double x)),(ln (x __type__ bigint)-->ln (double x)),(ln (z __as__ (x+:y))-->ln (abs z)+:arg z),(ln (r<:t)-->polar (ln r+:t)),(ln (x%y)-->ln (x/y))]);
'(log __with__ [(log (x __type__ double)-->__C::log x/__C::log 10.0),(log (x __type__ int)-->log (double x)),(log (x __type__ bigint)-->log (double x)),(log (z __as__ (x+:y))-->ln z/ln 10),(log (z __as__ (r<:t))-->ln z/ln 10),(log (x%y)-->log (x/y))]);
'(map __with__ [(map f (x __type__ matrix)-->__C::matrix_map f x),(map f (s __type__ string)-->map f (chars s)),(map f []-->[]),(map f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (f x:zs) (map f xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (f x:zs) xs),(tick zs []-->tack zs []),(tick zs xs-->tack zs (map f xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(matrix __with__ [(matrix []-->{}),(matrix (xs __as__ (_:_))-->throw (bad_list_value xs) __if__ ~rlistp xs),(matrix (xs __as__ (_:_))-->rowcatmap colcat xs __if__ all rlistp xs),(matrix (xs __as__ (_:_))-->rowcat xs __if__ any matrixp xs),(matrix (xs __as__ (_:_))-->colcat xs),(matrix ()-->{}),(matrix (xs __as__ (_,_))-->matrix (list xs)),(matrix (x __type__ matrix)-->x),(matrix (s __type__ string)-->matrix (chars s))]);
'(matrixp __with__ [matrixp x-->__case__ x [(_ __type__ matrix-->1),(_-->0)]]);
'(max __with__ [max x y-->__ifelse__ (x>=y) x y]);
'(mdict __with__ [(mdict (d __as__ MDict _)-->d),(mdict (d __type__ xdict)-->mdict (members d)),(mdict (xys __type__ rlist)-->foldl insert emptymdict xys)]);
'(mdictp __with__ [mdictp x-->typep mdict x]);
'(member __with__ [(member (x __type__ matrix) y-->__C::record_member x y __if__ recordp x),(member (Dict d) k-->avl::memberk d k),(member (MDict d) k-->avl::memberk d k),(member (HDict d) k-->avl::hmemberk d k),(member (HMDict d) k-->avl::hmemberk d k),(member (Set m) y-->avl::member m y),(member (Bag m) y-->avl::memberk m y),(member (HSet m) y-->avl::hmember m y),(member (HBag m) y-->avl::hmember m y)]);
'(members2 __with__ [members2 (x __as__ Array _)-->map members (members x)]);
'(min __with__ [min x y-->__ifelse__ (x<=y) x y]);
'(mkarray2 __with__ [mkarray2 x (n __type__ int,m __type__ int)-->mkarray (mkarray x m) n]);
'(mkdict __with__ [mkdict y (xs __type__ rlist)-->dict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhdict __with__ [mkhdict y (xs __type__ rlist)-->hdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkhmdict __with__ [mkhmdict y (xs __type__ rlist)-->hmdict (zipwith (=>) xs (repeatn (#xs) y))]);
'(mkmdict __with__ [mkmdict y (xs __type__ rlist)-->mdict (zipwith (=>) xs (repeatn (#xs) y))]);
'((mod) __with__ [(x __type__ int mod y __type__ int-->x mod y),(x __type__ bigint mod y __type__ bigint-->__C::bigint_mod x y),(x __type__ int mod y __type__ bigint-->bigint x mod y),(x __type__ bigint mod y __type__ int-->x mod bigint y)]);
'(nanosleep __with__ [(nanosleep (t __type__ int)-->nanosleep (double t)),(nanosleep (t __type__ bigint)-->nanosleep (double t))]);
'(nanp __with__ [nanp x-->__case__ x [(x __type__ double-->~x==x),(x __type__ int-->0),(x __type__ bigint-->0),(x __type__ real-->__case__ (double x) [(x __type__ double-->nanp x),(_-->0)]),(_-->0)]]);
'(neg __with__ [(-x __type__ int-->-x),(-x __type__ double-->-x),(-x __type__ bigint-->__C::bigint_neg x),(-(x+:y)-->-x+:-y),(-(r<:t)-->r<:t+3.14159265358979),(-x%y-->(-x)%y)]);
'(nmatrixp __with__ [nmatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x>=1),(_-->0)]]);
'((not) __with__ [(not x __type__ int-->not x),(not x __type__ bigint-->__C::bigint_not x)]);
'(num __with__ [(num (x%y)-->x),(num (x __type__ int)-->bigint x),(num (x __type__ bigint)-->bigint x),(num (x __type__ double)-->__ifelse__ (frac x==0.0) (bigint x) (num (rational x)))]);
'(numberp __with__ [numberp x-->typep ('number) x]);
'((or) __with__ [(x __type__ int or y __type__ int-->x or y),(x __type__ bigint or y __type__ bigint-->__C::bigint_or x y),(x __type__ int or y __type__ bigint-->bigint x or y),(x __type__ bigint or y __type__ int-->x or bigint y)]);
'(ord __with__ [ord (s __type__ string)-->n __if__ intp n __when__ [n-->__C::string_ord s]]);
'(pack __with__ [pack (x __type__ matrix)-->colcat [x,{}]]);
'(packed __with__ [packed (x __type__ matrix)-->stride x==dim x!1]);
'(pclose __with__ [pclose (fp __type__ pointer)-->clear_sentry fp$$__C::pclose fp __if__ get_sentry fp===__C::pclose]);
'(pointer __with__ [(pointer (x __type__ pointer)-->x),(pointer (x __type__ int)-->__C::pure_pointerval x),(pointer (x __type__ bigint)-->__C::pure_pointerval x),(pointer (x __type__ string)-->__C::pure_pointerval x),(pointer (x __type__ matrix)-->__C::pure_pointerval x)]);
'(pointer_cast __with__ [pointer_cast (ty __type__ string) (x __type__ pointer)-->pointer_cast (pointer_tag ty) x]);
'(pointer_tag __with__ [(pointer_tag (x __type__ string)-->__C::pure_pointer_tag x),(pointer_tag (x __type__ pointer)-->get_ptrtag x)]);
'(pointer_type __with__ [pointer_type (x __type__ pointer)-->pointer_type (get_ptrtag x)]);
'(pointerp __with__ [pointerp x-->__case__ x [(_ __type__ pointer-->1),(_-->0)]]);
'(polar __with__ [(polar (x+:y)-->sqrt (x*x+y*y)<:atan2 y x),(polar (z __as__ (_<:_))-->z),(polar (x __type__ int)-->x<:0),(polar (x __type__ bigint)-->x<:0),(polar (x __type__ double)-->x<:0.0),(polar (x%y)-->x%y<:0L%1L)]);
'(popen __with__ [popen (name __type__ string) (mode __type__ string)-->sentry __C::pclose fp __if__ ~null fp __when__ [fp-->__C::popen name mode]]);
'(pow __with__ [(pow (x __type__ int) (y __type__ int)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ bigint)-->__C::bigint_pow x y __if__ y>=0),(pow (x __type__ int) (y __type__ bigint)-->__C::bigint_pow (bigint x) y __if__ y>=0),(pow (x __type__ bigint) (y __type__ int)-->__C::bigint_pow x y __if__ y>=0),(pow (x%y) (n __type__ int)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ bigint)-->pow x n%pow y n __if__ n>0),(pow (x%y) (n __type__ int)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ bigint)-->pow y (-n)%pow x (-n) __if__ n<0),(pow (x%y) (n __type__ int)-->1L%1L),(pow (x%y) (n __type__ bigint)-->1L%1L),(pow (x __type__ int) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ int) (n __type__ bigint)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ int)-->1%pow x (-n) __if__ n<0),(pow (x __type__ bigint) (n __type__ bigint)-->1%pow x (-n) __if__ n<0)]);
'(pred __with__ [pred x-->x-1]);
'(printf __with__ [printf (format __type__ string) args-->fprintf stdout format args]);
'(publicp __with__ [publicp (x __type__ symbol)-->symbolp (val (str x))]);
'(put __with__ [put (r __type__ ref) x-->__C::pure_free (__C::pointer_get_expr r)$$__C::pointer_put_expr r (__C::pure_new x)$$x]);
'(put_byte __with__ [put_byte (x __type__ pointer) (y __type__ int)-->__C::pointer_put_byte x y]);
'(put_double __with__ [put_double (x __type__ pointer) (y __type__ double)-->__C::pointer_put_double x y]);
'(put_float __with__ [put_float (x __type__ pointer) (y __type__ double)-->__C::pointer_put_float x y]);
'(put_int __with__ [put_int (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int x y]);
'(put_int64 __with__ [(put_int64 (x __type__ pointer) (y __type__ int)-->__C::pointer_put_int64 x y),(put_int64 (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_int64 x y)]);
'(put_long __with__ [(put_long (x __type__ pointer) (y __type__ int)-->__C::pointer_put_long x y),(put_long (x __type__ pointer) (y __type__ bigint)-->__C::pointer_put_long x y)]);
'(put_pointer __with__ [(put_pointer (x __type__ pointer) (y __type__ string)-->__C::pointer_put_pointer x y),(put_pointer (x __type__ pointer) (y __type__ pointer)-->__C::pointer_put_pointer x y)]);
'(put_short __with__ [put_short (x __type__ pointer) (y __type__ int)-->__C::pointer_put_short x y]);
'(put_string __with__ [put_string (x __type__ pointer) (y __type__ string)-->__C::pointer_put_string x y]);
'(quote __with__ [quote x-->x]);
'(rational __with__ [(rational (x __as__ (_%_))-->x),(rational (x __type__ int)-->x%1),(rational (x __type__ bigint)-->x%1),(rational (x __type__ double)-->n%d __when__ [n,d-->__C::pure_rational x]),(rational (x+:y)-->rational x+:rational y),(rational (x<:y)-->rational x<:rational y)]);
'(rationalp __with__ [rationalp x-->typep ('rational) x]);
'(ratvalp __with__ [ratvalp x-->realvalp x&&re (x-x)~==nan]);
'(re __with__ [(re (x __type__ matrix)-->__C::matrix_re x __if__ nmatrixp x),(re (x+:y)-->x),(re (r<:t)-->r*cos t),(re (x __type__ int)-->x),(re (x __type__ bigint)-->x),(re (x __type__ double)-->x),(re (x __as__ (_%_))-->x)]);
'(realp __with__ [realp x-->typep ('real) x]);
'(realvalp __with__ [realvalp x-->compvalp x&&im x==0]);
'(record __with__ [(record x-->__C::record_pack x __if__ recordp x),(record x-->record x __if__ recordp x __when__ [x-->matrix x])]);
'(recordp __with__ [recordp x-->__C::record_check x]);
'(rect __with__ [(rect (r<:t)-->r*cos t+:r*sin t),(rect (z __as__ (_+:_))-->z),(rect (x __type__ int)-->x+:0),(rect (x __type__ bigint)-->x+:0),(rect (x __type__ double)-->x+:0.0),(rect (x%y)-->x%y+:0L%1L)]);
'(redim __with__ [(redim (n __type__ int,m __type__ int) (x __type__ matrix)-->__C::matrix_redim x n m __if__ n>=0&&m>=0&&n*m==#x),(redim (m __type__ int) (x __type__ matrix)-->redim (#x div m,m) x __if__ m>0&&#x mod m==0),(redim (m __type__ int) (x __type__ matrix)-->x __if__ m==0&&#x==0)]);
'(ref __with__ [ref x-->__C::pointer_put_expr r (__C::pure_new x)$$sentry unref r __when__ [r __type__ pointer-->__C::pure_expr_pointer]]);
'(refp __with__ [refp r-->__case__ r [(_ __type__ pointer-->get_sentry r===unref),(_-->0)]]);
'(reg __with__ [(reg 0 (p,s,_)-->p,s),(reg 0 (p,s)-->p,s),(reg (n __type__ int) (_,_,infos)-->reg (n-1) infos __if__ n>0)]);
'(reg_info __with__ [(reg_info (_ __type__ int,info)-->info),(reg_info _-->())]);
'(reg_result __with__ [(reg_result (regerr code msg)-->regerr code msg),(reg_result (b __type__ int)-->b),(reg_result (b __type__ int,_)-->b)]);
'(regex __with__ [regex (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (__C::regexec re s eflags) 0 (1,__C::regmatch re)) __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)]]);
'(regexg __with__ [regexg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgg __with__ [regexgg f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (iterwhile check next first) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexggs __with__ [regexggs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 1) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regexgs __with__ [regexgs f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (takewhile check (iterate next first)) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (f (__C::regmatch re))),(first-->__ifelse__ (__C::regexec re s eflags) () (f (__C::regmatch re)))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regs __with__ [regs info-->myregs 0 info __with__ [(myregs n (p,s,infos)-->(n,p,s):myregs (n+1) infos __if__ p>=0),(myregs n (p,s,infos)-->myregs (n+1) infos),(myregs n (p,s)-->[(n,p,s)] __if__ p>=0),(myregs n (p,s)-->[])]]);
'(regsplit __with__ [regsplit (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (iterwhile check next first+[__C::regskip re])) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsplits __with__ [regsplits (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (__ifelse__ (null s) [] (takewhile check (iterate next first)+[__C::regskip re]&)) __with__ [([]+ys-->ys),((x:xs)+ys-->x:(xs+ys)&),(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re)),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(regsub __with__ [regsub f (pat __type__ string) (cflags __type__ int) (s __type__ string) (eflags __type__ int)-->__ifelse__ (__C::regstatus re) (regerr (__C::regstatus re) (__C::regerror re)) (strcat (iterwhile check next first)+__C::regskip re) __with__ [(check _-->__C::regstatus re==0),(next _-->__ifelse__ (__C::regnext re 0) () (__C::regskip re+h (f (__C::regmatch re)))),(first-->__ifelse__ (__C::regexec re s eflags) () (__C::regskip re+h (f (__C::regmatch re)))),(h (x __type__ string)-->x),(h x-->throw (bad_string_value x))] __when__ [re-->sentry __C::regfree (__C::regcomp pat cflags)] __if__ ~cflags and 8]);
'(repeat __with__ [repeat x-->x:repeat x&]);
'(repeatn __with__ [repeatn (n __type__ int) x-->accum [] n x __with__ [(accum xs (n __type__ int) x-->xs __if__ n<=0),(accum xs (n __type__ int) x-->accum (x:xs) (n-1) x)]]);
'(reverse __with__ [(reverse (x __type__ matrix)-->rowrev (colrev x)),(reverse (s __type__ string)-->strcat (reverse (chars s))),(reverse ()-->()),(reverse (x,xs)-->accum x xs __with__ [(accum ys (x,xs)-->accum (x,ys) xs),(accum ys x-->x,ys)]),(reverse []-->[]),(reverse (x:xs)-->accum [x] xs __with__ [(accum ys (x:xs)-->accum (x:ys) xs),(accum ys []-->ys),(accum ys xs-->throw (bad_list_value xs))])]);
'(rlistp __with__ [rlistp x-->typep ('rlist) x]);
'(round __with__ [(round (x __type__ int)-->x),(round (x __type__ bigint)-->x),(round (x%y)-->-round ((-x)%y) __if__ x<0),(round (x%y)-->x div 2+1 __if__ y==2),(round (x%y)-->(2*x+y) div (2*y))]);
'(row __with__ [row (x __type__ matrix) (i __type__ int)-->__ifelse__ (i>=0&&i<n) (__C::matrix_slice x i 0 i (m-1)) (throw out_of_bounds) __when__ [n __type__ int,m __type__ int-->dim x]]);
'(rowcatmap __with__ [(rowcatmap f []-->{}),(rowcatmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowcatmap f (x __type__ matrix)-->matcat (map f x)),(rowcatmap f (s __type__ string)-->rowcatmap f (chars s))]);
'(rowmap __with__ [(rowmap f []-->{}),(rowmap f (xs __as__ (_:_))-->rowcat (map f xs)),(rowmap f (x __type__ matrix)-->map f x),(rowmap f (s __type__ string)-->rowmap f (chars s))]);
'(rowrev __with__ [rowrev (x __type__ matrix)-->rowcat (reverse (rows x))]);
'(rows __with__ [rows (x __type__ matrix)-->map (row x) (0..n-1) __when__ [n __type__ int,_-->dim x]]);
'(rowvector __with__ [(rowvector (x __type__ matrix)-->redim (1,#x) x),(rowvector ()-->redim (1,0) {}),(rowvector (xs __as__ (_,_))-->rowvector (list xs)),(rowvector []-->redim (1,0) {}),(rowvector (xs __type__ rlist)-->__case__ (cmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (dmatrix xs) [(x __type__ matrix-->x),(_-->__case__ (imatrix xs) [(x __type__ matrix-->x),(_-->smatrix xs)])])])]);
'(rowvectorp __with__ [rowvectorp x-->matrixp x&&dim x!0==1]);
'(rowvectorseq __with__ [(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ int)-->__C::pure_int_rowvect n m s),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect n m s),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ int) (s __type__ double)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ int) (m __type__ double) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq (n __type__ double) (m __type__ int) (s __type__ int)-->__C::pure_double_rowvect (double n) (double m) (double s)),(rowvectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvector (n:n+s..m)])]);
'(scanf __with__ [scanf (format __type__ string)-->fscanf stdin format]);
'(scanl __with__ [(scanl f a (x __type__ matrix)-->__C::matrix_scanl f a x),(scanl f a (s __type__ string)-->scanl f a (chars s)),(scanl f a []-->[a]),(scanl f a (xs __as__ (_:_))-->tick a [] xs __with__ [(tick a zs (x:xs)-->tack (a:zs) (scanl f (f a x) xs&) __if__ thunkp xs),(tick a zs (x:xs)-->tick (f a x) (a:zs) xs),(tick a zs []-->tack zs [a]),(tick a zs xs-->tack zs (scanl f a xs)),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(scanl1 __with__ [(scanl1 f (x __type__ matrix)-->__C::matrix_scanl1 f x),(scanl1 f (s __type__ string)-->scanl1 f (chars s)),(scanl1 f []-->[]),(scanl1 f (x:xs)-->scanl f x xs)]);
'(scanr __with__ [(scanr f a (x __type__ matrix)-->__C::matrix_scanr f a x),(scanr f a (s __type__ string)-->scanr f a (chars s)),(scanr f a []-->[a]),(scanr f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr f a xs&),(y-->__case__ ys [(y:_-->y),(scanr _ _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs (x:xs)-->tack zs (f x (y __when__ [y:_-->ys])&:ys __when__ [ys-->scanr f a xs&]) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs [a]),(tick zs xs-->throw (bad_list_value xs)),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(scanr1 __with__ [(scanr1 f (x __type__ matrix)-->__C::matrix_scanr1 f x),(scanr1 f (s __type__ string)-->scanr1 f (chars s)),(scanr1 f []-->[]),(scanr1 f [x]-->[x]),(scanr1 f (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack zs us __when__ [(ys-->scanr1 f xs&),(y-->__case__ ys [(y:_-->y),(scanr1 _ ys-->throw (bad_list_value ys)),(_-->throw (bad_list_value ys))]&),(us-->f x y:ys)] __if__ thunkp xs),(tick zs xs-->__case__ xs [([x]-->tack zs [x]),(x:xs-->tick (x:zs) xs),(_-->throw (bad_list_value xs))]),(tack (x:xs) ys-->tack xs (f x y:ys) __when__ [y:_-->ys]),(tack [] ys-->ys)])]);
'(set __with__ [(set (m __as__ Set _)-->m),(set (m __type__ xset)-->set (members m)),(set (xs __type__ rlist)-->foldl insert emptyset xs)]);
'(setp __with__ [setp x-->typep set x]);
'(sgn __with__ [(sgn (x __type__ int)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ bigint)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x __type__ double)-->__ifelse__ (x>0) 1 (__ifelse__ (x<0) (-1) 0)),(sgn (x%y)-->sgn x)]);
'(short_matrix __with__ [(short_matrix (n __type__ int,m __type__ int) (p __type__ pointer)-->__C::matrix_from_short_array n m p),(short_matrix (n __type__ int) (p __type__ pointer)-->short_matrix (1,n) p)]);
'(short_pointer __with__ [short_pointer (p __type__ pointer) (x __type__ matrix)-->__C::matrix_to_short_array p x __if__ nmatrixp x]);
'(sin __with__ [(sin (x __type__ int)-->sin (double x)),(sin (x __type__ bigint)-->sin (double x)),(sin (x+:y)-->sin x*cosh y+:cos x*sinh y),(sin (z __as__ (r<:t))-->polar (sin (rect z))),(sin (x%y)-->sin (x/y))]);
'(sinh __with__ [(sinh (x __type__ int)-->sinh (double x)),(sinh (x __type__ bigint)-->sinh (double x)),(sinh (x+:y)-->sinh x*cos y+:cosh x*sin y),(sinh (z __as__ (r<:t))-->polar (sinh (rect z))),(sinh (x%y)-->sinh (x/y))]);
'(slice __with__ [slice x y-->x!!y]);
'(smatrix __with__ [smatrix x-->y __if__ matrixp y __when__ [y-->__C::matrix_symbolic x]]);
'(smatrixp __with__ [smatrixp x-->__case__ x [(_ __type__ matrix-->matrix_type x==0),(_-->0)]]);
'(sort __with__ [sort p (x __type__ matrix)-->__case__ (sort p (smatrix x)) [(y __type__ matrix-->imatrix y __if__ imatrixp x),(y __type__ matrix-->dmatrix y __if__ dmatrixp x),(y __type__ matrix-->cmatrix y __if__ cmatrixp x),(y-->y)]]);
'(spawnv __with__ [spawnv (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnv mode prog (smatrix argv)]);
'(spawnve __with__ [spawnve (mode __type__ int) (prog __type__ string) (argv __type__ rlist) (envp __type__ rlist)-->spawnve mode prog (smatrix argv) (smatrix envp)]);
'(spawnvp __with__ [spawnvp (mode __type__ int) (prog __type__ string) (argv __type__ rlist)-->spawnvp mode prog (smatrix argv)]);
'(split __with__ [(split (delim __type__ string) (s __type__ string)-->__C::string_split delim s __if__ ~funp (:)),(split (delim __type__ string) (s __type__ string)-->list (__C::string_split delim s))]);
'(sprintf __with__ [sprintf (format __type__ string) args-->catch error (do_printf 0 [] formats args) __if__ listp formats __when__ [(args-->__ifelse__ (tuplep args) (list args) [args]),(formats-->__C::pure_printf_split format)] __with__ [(error (printf_error (res __type__ int))-->res),(error x-->throw x),(do_printf count s (format:formats) args-->do_printf count (cstring buf:s) formats args __when__ [(size-->#s+1000),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__C::pure_snprintf buf size format),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))] __if__ literal format),(do_printf count s (format:formats) (arg:args)-->do_printf count (cstring buf:s) formats args __when__ [(t-->format_type (last format) format),(size-->__case__ (t,arg) [("s",x __type__ string-->#s+#x),("Z",x __type__ bigint-->int (__C::mpz_sizeinbase x 10)),("R",x __type__ mpfr-->1+int (ceil (__C::mpfr_get_prec x*__C::log10 2))),(_-->64)]),(size-->size+1024),(buf-->malloc size),(_-->~null buf||throw malloc_error),(res-->__case__ (t,arg) [("c",x __type__ int-->__C::pure_snprintf_int buf size format x),("c",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("d",x __type__ int-->__C::pure_snprintf_int buf size format x),("d",x __type__ bigint-->__C::pure_snprintf_int buf size format x),("g",x __type__ double-->__C::pure_snprintf_double buf size format x),("s",x __type__ string-->__C::pure_snprintf_string buf size format x),("p",x __type__ string-->__C::pure_snprintf_pointer buf size format x),("p",x __type__ pointer-->__C::pure_snprintf_pointer buf size format x),("Z",x __type__ bigint-->__C::pure_snprintf_mpz buf size format x),("R",x __type__ mpfr-->__C::pure_snprintf_mpfr buf size format x),(_-->throw (printf_value_error format arg))]),(count-->__ifelse__ (res>=0) (count+res) (free buf (throw (printf_error res))))]),(do_printf count s [] _-->strcat (reverse s)),(do_printf count s _ []-->throw out_of_bounds),(literal s-->head s~="%"||take 2 s=="%%"),(format_type x format-->__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "R"<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfgGaA" x>=0) (__ifelse__ (index format "R">=0) "R" "g") x))]]);
'(sqrt __with__ [(sqrt (x __type__ int)-->sqrt (double x)),(sqrt (x __type__ bigint)-->sqrt (double x)),(sqrt (x+:y)-->sqrt r*(cos t+:sin t) __when__ [(r-->sqrt (x*x+y*y)),(t-->atan2 y x/2)]),(sqrt (r<:t)-->sqrt r<:t/2),(sqrt (x%y)-->sqrt (x/y))]);
'(srandom __with__ [srandom (x __type__ matrix)-->srandom_array x (#x) __if__ imatrixp x&&dim x!0==1]);
'(sscanf __with__ [sscanf (s __type__ string) (format __type__ string)-->catch error (do_scanf 0 [] formats) __if__ listp formats __when__ [formats-->__C::pure_scanf_split format] __with__ [(error (scanf_error (vals __type__ list))-->throw (scanf_error (tuple (reverse vals)))),(error x-->throw x),(literal s-->head s~="%"||take 2 s=="%%"||take 2 s=="%*"),(format_type x format-->__ifelse__ (x=="n") "n" (__ifelse__ (index "diouxX" x>=0) (__ifelse__ (index format "["<0&&index format "Z">=0) "Z" "d") (__ifelse__ (index "eEfga" x>=0) "g" (__ifelse__ (x=="]"||x=="c") "s" x)))),(do_scanf count vals (format:formats)-->do_scanf count vals formats __when__ [(sp-->pointer_cast 1 (shift sbuf count)),(res-->__C::pure_sscanf sp format),(count-->__ifelse__ (res>=0) (count+res) (throw (scanf_error vals)))] __if__ literal format),(do_scanf count vals (format:formats)-->do_scanf count (val:vals) formats __when__ [(t-->format_type (last format) format),(size,format-->__case__ t [("s"-->guestimate format),("Z"-->32,format),(_-->16,kludge t format)]),(buf-->calloc size 1),(_-->~null buf||throw malloc_error),(sp-->pointer_cast 1 (shift sbuf count)),(res-->__case__ t [("n"-->__C::pure_sscanf_int sp format buf),("d"-->__C::pure_sscanf_int sp format buf),("g"-->__C::pure_sscanf_double sp format buf),("s"-->__C::pure_sscanf_string sp format buf),("p"-->__C::pure_sscanf_pointer sp format buf),("Z"-->__C::pure_sscanf_mpz sp format buf)]),(_-->res>=0||(free buf$$throw (scanf_error vals))),(val-->__case__ t [("n"-->count+get_int buf),("d"-->get_int buf),("g"-->get_double buf),("s"-->cstring buf),("p"-->get_pointer buf),("Z"-->__C::pure_mpz buf)]),(count-->count+res),(_-->__case__ t [("Z"-->__C::mpz_clear buf$$free buf),("s"-->()),(_-->free buf)])]),(do_scanf count vals []-->tuple (reverse vals)),(kludge "g" format-->init format+"l"+last format),(kludge _ format-->format),(guestimate "%c"-->2,"%c"),(guestimate format-->n,format __when__ [(p-->__C::pure_scanf_prec format),(n,format-->__ifelse__ (p<=0) (scanf_max_fld+1,make_prec scanf_max_fld format) (p+1,format))]),(make_prec p format-->"%"+str p+tail format),(shift p i-->pointer (__C::pure_bigintval p+i))] __when__ [sbuf-->sentry free (byte_cstring s)]]);
'(strcat __with__ [strcat xs-->s __if__ stringp s __when__ [s-->__C::string_concat_list xs]]);
'(stream __with__ [(stream (s __type__ string)-->stream (chars s)),(stream []-->[]),(stream (x:xs)-->x:xs __if__ thunkp xs),(stream (x:xs)-->x:stream xs&),(stream ()-->[]),(stream (xs __as__ (_,_))-->stream (list xs))]);
'(stride __with__ [stride (x __type__ matrix)-->__C::matrix_stride x]);
'(string __with__ [(string (s __type__ pointer)-->__C::pure_string s),(string []-->""),(string (xs __as__ (_ __type__ string:_))-->strcat xs __if__ all stringp xs),(string ()-->""),(string (xs __as__ (_ __type__ string,_))-->strcat xs __if__ all stringp xs __when__ [xs-->list xs]),(string (s __type__ string)-->s),(string (x __type__ matrix)-->string (list x) __if__ all stringp x)]);
'(string_dup __with__ [string_dup (s __type__ pointer)-->__C::pure_string_dup s]);
'(string_list __with__ [string_list n (p __type__ pointer)-->list$takewhile stringp (listmap (__lambda__ [i] (p!i)) (0..n-1)) __with__ [(p!i-->__ifelse__ (null q) q (string_dup q) __when__ [q-->get_pointer (shift_pointer p i)]),(shift_pointer p i-->pointer (__C::pure_bigintval p+i*8))] __if__ ~null p&&(intp n||infp n)]);
'(string_vector __with__ [string_vector n (p __type__ pointer)-->vector xs __if__ listp xs __when__ [xs-->string_list n p]]);
'(stringp __with__ [stringp x-->__case__ x [(_ __type__ string-->1),(_-->0)]]);
'(submat __with__ [submat (x __type__ matrix) (i __type__ int,j __type__ int) (n __type__ int,m __type__ int)-->__C::matrix_slice x i j (i+n-1) (j+m-1)]);
'(subseq __with__ [(subseq (x __type__ matrix) (a __type__ int) (b __type__ int)-->__C::matrix_slice (rowvector x) 0 a 0 b),(subseq (s __type__ string) (a __type__ int) (b __type__ int)-->substr s a (b-a+1)),(subseq [] (a __type__ int) (b __type__ int)-->[]),(subseq (xs __as__ (_:_)) (a __type__ int) (b __type__ int)-->take (b-a+1) (drop a xs) __with__ [(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs),(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)]),(subseq x a b-->slice x (a..b))]);
'(subseq2 __with__ [(subseq2 (x __type__ matrix) (a1 __type__ int) (b1 __type__ int) (a2 __type__ int) (b2 __type__ int)-->__C::matrix_slice x a1 a2 b1 b2),(subseq2 x a1 a1 a2 b2-->slice x (a1,a2..b2)),(subseq2 x a1 b1 a2 a2-->slice x (a1..b1,a2)),(subseq2 x a1 b1 a2 b2-->slice x (a1..b1,a2..b2))]);
'(substr __with__ [substr (s __type__ string) (pos __type__ int) (size __type__ int)-->__C::string_substr s (max 0 pos) (max 0 size) __with__ [max x y-->__ifelse__ (x>=y) x y]]);
'(succ __with__ [succ x-->x+1]);
'(tail __with__ [(tail (x __type__ matrix)-->x!!(1..#x-1) __if__ ~null x),(tail (s __type__ string)-->substr s 1 (#s-1) __if__ ~null s),(tail (x:xs)-->xs)]);
'(take __with__ [(take (k __type__ int) (x __type__ matrix)-->x!!(0..k-1)),(take (n __type__ int) (s __type__ string)-->substr s 0 n),(take (n __type__ int) []-->[]),(take (n __type__ int) (xs __as__ (_:_))-->tick n [] xs __with__ [(tick (n __type__ int) zs xs-->tack zs [] __if__ n<=0),(tick (n __type__ int) zs xs-->tack zs (take n xs&) __if__ thunkp xs),(tick (n __type__ int) zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (n-1) (x:zs) xs),(_-->tack zs (take n xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(takewhile __with__ [(takewhile p (x __type__ matrix)-->__C::matrix_takewhile p x),(takewhile p (s __type__ string)-->strcat (takewhile p (chars s))),(takewhile p []-->[]),(takewhile p (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs xs-->tack zs (takewhile p xs&) __if__ thunkp xs),(tick zs xs-->__case__ xs [([]-->tack zs []),(x:xs-->tick (x:zs) xs __if__ p x),(x:xs-->tack zs []),(_-->tack zs (takewhile p xs))]),(tack (x:xs) ys-->tack xs (x:ys)),(tack [] ys-->ys)])]);
'(tan __with__ [(tan (x __type__ int)-->tan (double x)),(tan (x __type__ bigint)-->tan (double x)),(tan (x+:y)-->(sin (2*x)+:sinh (2*y))/(cos (2*x)+cosh (2*y))),(tan (z __as__ (r<:t))-->polar (tan (rect z))),(tan (x%y)-->tan (x/y))]);
'(tanh __with__ [(tanh (x __type__ int)-->tanh (double x)),(tanh (x __type__ bigint)-->tanh (double x)),(tanh (x+:y)-->(sinh (2*x)+:sin (2*y))/(cosh (2*x)+cos (2*y))),(tanh (z __as__ (r<:t))-->polar (tanh (rect z))),(tanh (x%y)-->tanh (x/y))]);
'(transpose __with__ [transpose (x __type__ matrix)-->__C::matrix_transpose x]);
'(trunc __with__ [(trunc (x __type__ int)-->x),(trunc (x __type__ bigint)-->x),(trunc (x%y)-->x div y)]);
'(tuple __with__ [(tuple (x __type__ matrix)-->tuple (list x)),(tuple (s __type__ string)-->tuple (chars s)),(tuple []-->()),(tuple (x:xs)-->accum (t x) xs __with__ [(t (x __as__ (_,_))-->reverse x),(t x-->x),(accum ys (x:xs)-->accum (t x,ys) xs),(accum ys []-->t ys),(accum ys xs-->throw (bad_list_value xs))]),(tuple (x __as__ ())-->x),(tuple (x __as__ (_,_))-->x)]);
'(tuplep __with__ [tuplep x-->typep ('tuple) x]);
'(ubyte __with__ [ubyte (x __type__ int)-->__ifelse__ (x>=0) x (x+256)]);
'(uint __with__ [uint (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+4294967296L)]);
'(uint64 __with__ [(uint64 (x __type__ int)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L)),(uint64 (x __type__ bigint)-->__ifelse__ (x>=0) (bigint x) (x+18446744073709551616L))]);
'(ulong __with__ [ulong-->uint64]);
'(uncurry __with__ [uncurry f (x,y)-->f x y]);
'(uncurry3 __with__ [uncurry3 f (x,y,z)-->f x y z]);
'(unref __with__ [unref (r __type__ ref)-->__C::pure_free (__C::pointer_get_expr r)$$clear_sentry r]);
'(unzip __with__ [(unzip (x __type__ matrix)-->map fst x,map snd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())])]),(unzip []-->[],[]),(unzip (us __as__ (_:_))-->foldr accum ([],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y-->y),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_-->check us])&,snd u:(ys __when__ [_,ys-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys __when__ [xs,ys-->check us]),(check (us __as__ (_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(unzip3 __with__ [(unzip3 (x __type__ matrix)-->map fst x,map snd x,map trd x __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())])]),(unzip3 []-->[],[],[]),(unzip3 (us __as__ (_:_))-->foldr accum ([],[],[]) us __with__ [(fst u-->__case__ u [(x,_-->x),(_-->u)]),(snd u-->__case__ u [(_,y,_-->y),(_,y-->y),(_-->())]),(trd u-->__case__ u [(_,_,z-->z),(_-->())]),(accum u us-->fst u:(xs __when__ [xs,_,_-->check us])&,snd u:(ys __when__ [_,ys,_-->check us])&,trd u:(zs __when__ [_,_,zs-->check us])& __if__ thunkp us),(accum u us-->fst u:xs,snd u:ys,trd u:zs __when__ [xs,ys,zs-->check us]),(check (us __as__ (_,_,_))-->us),(check (foldr _ _ us)-->throw (bad_list_value us)),(check us-->throw (bad_tuple_value us))])]);
'(update2 __with__ [update2 (x __as__ Array a) (i __type__ int,j __type__ int) y-->update x i (update (x!i) j y)]);
'(ushort __with__ [ushort (x __type__ int)-->__ifelse__ (x>=0) x (x+65536)]);
'(val __with__ [val (x=>v)-->v]);
'(vals __with__ [(vals (x __type__ matrix)-->colcatmap (__lambda__ [__v2__] (__case__ __v2__ [(u=>v-->{v}),(_-->{})])) x __if__ recordp x),(vals (Dict d)-->avl::vals d),(vals (MDict d)-->avl::mvals d),(vals (HDict d)-->avl::hvals d),(vals (HMDict d)-->avl::hvals d)]);
'(vector __with__ [vector xs-->x __if__ matrixp x __when__ [x-->rowvector xs]]);
'(vectorp __with__ [vectorp x-->matrixp x&&(n==1||m==1 __when__ [n __type__ int,m __type__ int-->dim x])]);
'(vectorseq __with__ [vectorseq n m s-->x __if__ matrixp x __when__ [x-->rowvectorseq n m s]]);
'(void __with__ [void _-->()]);
'(xdictp __with__ [xdictp x-->typep xdict x]);
'(xsetp __with__ [xsetp x-->typep xset x]);
'(zip __with__ [(zip (x __type__ matrix) (y __type__ matrix)-->zipwith (,) x y),(zip (s __type__ string) (t __type__ string)-->zip (chars s) (chars t)),(zip [] _-->[]),(zip _ []-->[]),(zip (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack ((x,y):us) (zip xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick ((x,y):us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zip xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zip3 __with__ [(zip3 (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->zipwith3 (__lambda__ [x,y,z] (x,y,z)) x y z),(zip3 (s __type__ string) (t __type__ string) (u __type__ string)-->zip3 (chars s) (chars t) (chars u)),(zip3 [] _ _-->[]),(zip3 _ [] _-->[]),(zip3 _ _ []-->[]),(zip3 (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack ((x,y,z):us) (zip3 xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick ((x,y,z):us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zip3 xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith __with__ [(zipwith f (x __type__ matrix) (y __type__ matrix)-->__C::matrix_zipwith f x y),(zipwith f (s __type__ string) (t __type__ string)-->zipwith f (chars s) (chars t)),(zipwith f [] _-->[]),(zipwith f _ []-->[]),(zipwith f (xs __as__ (_:_)) (ys __as__ (_:_))-->tick [] xs ys __with__ [(tick us (x:xs) (y:ys)-->tack (f x y:us) (zipwith f xs ys&) __if__ thunkp xs||thunkp ys),(tick us (x:xs) (y:ys)-->tick (f x y:us) xs ys),(tick us [] _-->tack us []),(tick us _ []-->tack us []),(tick us xs ys-->tack us (zipwith f xs ys)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'(zipwith3 __with__ [(zipwith3 f (x __type__ matrix) (y __type__ matrix) (z __type__ matrix)-->__C::matrix_zipwith3 f x y z),(zipwith3 f (s __type__ string) (t __type__ string) (u __type__ string)-->zipwith3 f (chars s) (chars t) (chars u)),(zipwith3 f [] _ _-->[]),(zipwith3 f _ [] _-->[]),(zipwith3 f _ _ []-->[]),(zipwith3 f (xs __as__ (_:_)) (ys __as__ (_:_)) (zs __as__ (_:_))-->tick [] xs ys zs __with__ [(tick us (x:xs) (y:ys) (z:zs)-->tack (f x y z:us) (zipwith3 f xs ys zs&) __if__ thunkp xs||thunkp ys||thunkp zs),(tick us (x:xs) (y:ys) (z:zs)-->tick (f x y z:us) xs ys zs),(tick us [] _ _-->tack us []),(tick us _ [] _-->tack us []),(tick us _ _ []-->tack us []),(tick us xs ys zs-->tack us (zipwith3 f xs ys zs)),(tack (u:us) vs-->tack us (u:vs)),(tack [] vs-->vs)])]);
'((||) __with__ [(x __type__ int||y-->__ifelse__ x x y),(y||x __type__ int-->__ifelse__ x x y)]);
'((~) __with__ [~x __type__ int-->~x]);
'((~==) __with__ [x~==y-->~same x y]);
let R3 = listmap (\x/*0:1*/ -> eval (sprintf "'(%s)" (__str__ x/*0:1*/)) {
  rule #0: _ x = eval (sprintf "'(%s)" (__str__ x))
  state 0: #0
	<var> state 1
  state 1: #0
}) R2;
R2===R3;
1
do (printf ">>> %s\n<<< %s\n") (catmap (\__v10__/*0:1*/ -> case __v10__/*0:1*/ of x/*0:01*/,y/*0:1*/ = if x/*0:01*/~==y/*0:1*/ then [(str x/*0:01*/,str y/*0:1*/)] else []; _/*0:*/ = [] {
  rule #0: x,y = if x~==y then [(str x,str y)] else []
  rule #1: _ = []
  state 0: #0 #1
	<var> state 1
	<app> state 2
  state 1: #1
  state 2: #0 #1
	<var> state 3
	<app> state 5
  state 3: #1
	<var> state 4
  state 4: #1
  state 5: #0 #1
	<var> state 6
	, state 9
  state 6: #1
	<var> state 7
  state 7: #1
	<var> state 8
  state 8: #1
  state 9: #0 #1
	<var> state 10
  state 10: #0 #1
	<var> state 11
  state 11: #0 #1
} end {
  rule #0: _ __v10__ = case __v10__ of x,y = if x~==y then [(str x,str y)] else []; _ = [] end
  state 0: #0
	<var> state 1
  state 1: #0
}) (zip R2 R3));
()
