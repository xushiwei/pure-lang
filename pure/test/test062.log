let z = 99;
a = void (puts (str 99));
b = do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
c = do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
d = if z>0 then do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2) else ();
f = do (\x/*0:1*/ -> do (\y/*0:1*/ -> puts (str (x/*1:1*/,y/*0:1*/)) {
  rule #0: _ y = puts (str (x,y))
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) {
  rule #0: _ x = do (\y -> puts (str (x,y))) (1..3)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
g = do (\x/*0:1*/ -> if x/*0:1*/>0 then do (\y/*0:1*/ -> puts (str (x/*1:1*/,y/*0:1*/)) {
  rule #0: _ y = puts (str (x,y))
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) else () {
  rule #0: _ x = if x>0 then do (\y -> puts (str (x,y))) (1..3) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
h = do (\x/*0:1*/ -> if x/*0:1*/>0 then do (\y/*0:1*/ -> if y/*0:1*/>0 then puts (str (x/*1:1*/,y/*0:1*/)) else () {
  rule #0: _ y = if y>0 then puts (str (x,y)) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) else () {
  rule #0: _ x = if x>0 then do (\y -> if y>0 then puts (str (x,y)) else ()) (1..3) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
k = do (\x/*0:1*/ -> if x/*0:1*/ mod 2 then printf "%g\n" (2^x/*0:1*/+1) else () {
  rule #0: _ x = if x mod 2 then printf "%g\n" (2^x+1) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..5);
A = void (puts (str 99));
B = do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
C = do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
D = if z>0 then do (\x/*0:1*/ -> puts (str x/*0:1*/) {
  rule #0: _ x = puts (str x)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2) else ();
F = do (\x/*0:1*/ -> do (\y/*0:1*/ -> puts (str (x/*1:1*/,y/*0:1*/)) {
  rule #0: _ y = puts (str (x,y))
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) {
  rule #0: _ x = do (\y -> puts (str (x,y))) (1..3)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
G = do (\x/*0:1*/ -> if x/*0:1*/>0 then do (\y/*0:1*/ -> puts (str (x/*1:1*/,y/*0:1*/)) {
  rule #0: _ y = puts (str (x,y))
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) else () {
  rule #0: _ x = if x>0 then do (\y -> puts (str (x,y))) (1..3) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
H = do (\x/*0:1*/ -> if x/*0:1*/>0 then do (\y/*0:1*/ -> if y/*0:1*/>0 then puts (str (x/*1:1*/,y/*0:1*/)) else () {
  rule #0: _ y = if y>0 then puts (str (x,y)) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..3) else () {
  rule #0: _ x = if x>0 then do (\y -> if y>0 then puts (str (x,y)) else ()) (1..3) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..2);
K = do (\x/*0:1*/ -> if x/*0:1*/ mod 2 then printf "%g\n" (2^x/*0:1*/+1) else () {
  rule #0: _ x = if x mod 2 then printf "%g\n" (2^x+1) else ()
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..5);
