quote foo (quote 1) (quote 2) (3/4) (quote (/) (quote 5) (quote 6));
foo 1 2 0.75 (5/6)
(case '[2/3,3/4] of x/*0:*/ = foldl ($) (quote foo (quote 1) (quote 2)) x/*0:*/ if listp x/*0:*/; x/*0:*/ = throw (bad_list_value x/*0:*/) {
  rule #0: x = foldl ($) (quote foo (quote 1) (quote 2)) x if listp x
  rule #1: x = throw (bad_list_value x)
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end) (quote (/) (quote 5) (quote 6));
foo 1 2 (2/3) (3/4) (5/6)
(case 'x/*0:*/ of x/*0:*/ = foldl ($) (quote foo (quote 1) (quote 2)) x/*0:*/ if listp x/*0:*/; x/*0:*/ = throw (bad_list_value x/*0:*/) {
  rule #0: x = foldl ($) (quote foo (quote 1) (quote 2)) x if listp x
  rule #1: x = throw (bad_list_value x)
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end) (quote (/) (quote 5) (quote 6)) when x/*0:*/ = '[2/3,3/4] {
  rule #0: x = '[2/3,3/4]
  state 0: #0
	<var> state 1
  state 1: #0
} end;
foo 1 2 (2/3) (3/4) (5/6)
(case '[foo,2/3,3/4] of x/*0:*/ = foldl1 ($) x/*0:*/ if listp x/*0:*/; x/*0:*/ = throw (bad_list_value x/*0:*/) {
  rule #0: x = foldl1 ($) x if listp x
  rule #1: x = throw (bad_list_value x)
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end) (quote (/) (quote 5) (quote 6));
foo (2/3) (3/4) (5/6)
{
  rule #0: x = quote a (quote quote (quote b) (quote (+) (quote 1) (quote 2)) (quote foo (1+3) (quote d)) (quote quote (quote e))) (quote f)
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = quote a (quote quote (quote b) (quote (+) (quote 1) (quote 2)) (quote foo (1+3) (quote d)) (quote quote (quote e))) (quote f);
x;
a (quote b (1+2) (foo 4 d) (quote e)) f
eval x;
a (b 3 (foo 4 d) e) f
