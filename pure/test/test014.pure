
using math;

// Random number generator.

drop 97 [random | i=1..100] when () = srandom 0 end;

// Some rational arithmetic tests, pilfered from Rob Hubbard's Q+Q manual.

// Basic arithmetic and pow function.

let q = 44%(-14); q;
num q,den q;
5%7+2%3;
1+2%3;
1+2%3+1.0;
3%8-1%3;
(11%10)^3;
pow (11%10) 3;
pow 3 5;
pow 3 (-5);

44/14;
44%14;
2+3%8;
1%(22%7);

// Comparisons.

3%8<1%3;
3%8>1%3;
max (3%8) (1%3);

// Rounding. Note that these all return exact results with rationals.

let xs = iterwhile (\x->x<=3) (\x->x+1%2) (-3%1);
map double xs;
map floor xs;
map ceil xs;
map trunc xs;
map round xs;

// Integer and fraction part of a rational.

trunc (-22%7);
frac (-22%7);

// Rationalizing doubles.
rational (3/8);

// Complex rational arithmetic.

let z = 1+i*(1%2); z; z*z;
let z = (1+2*i)%(3+4*i); z; z*(3+4*i);
4%1*i%2;
4%1*i%(1%2);
let z = 4%1*i%(1+(1%2)*i); z; z*(1+(1%2)*i);
((4%1)*i)/(1+(1%2)*i);
