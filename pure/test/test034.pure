
/* quasiquote examples. */

using quasiquote;

/* Unquoting example. This yields 'foo 1 2 0.75 (5/6)'. */

`foo 1 2 (,$(3/4)) (5/6);

/* Splicing allows you to insert arguments into a function application. The
   argument of 'splice' must be a list value with the arguments to be
   inserted. The following example yields 'foo 1 2 (2/3) (3/4) (5/6)'. */

`foo 1 2 (,@'[2/3,3/4]) (5/6);

/* The following example computes the same value as above, but takes the
   spliced value from a local variable. Note again that the variable x can't
   be quoted, thus the extra quote before the spliced value is needed to
   inhibit its evaluation. */

`foo 1 2 (,@'x) (5/6) when x = '[2/3,3/4] end;

/* It's also possible to splice a list as the head of a function application.
   This example yields 'foo (2/3) (3/4) (5/6)'. */

`(,@'[foo,2/3,3/4]) (5/6);

/* A nested quasiquote. Like in Scheme, this only expands the outermost
   quasiquote, yielding 'a (quasiquote (b (unquote (1+2)) (unquote (foo 4 d))
   e)) f'. A subsequent evaluation of the resulting term then expands the
   nested quasiquote, yielding 'a (b 3 (foo 4 d) e) f'. */

let x = `(a (`(b (,$(1+2)) (,$(foo (,$(1+3)) d)) e)) f);
x; eval x;
