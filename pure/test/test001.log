square x/*0:1*/ = x/*0:1*/*x/*0:1*/;
{
  rule #0: square x = x*x
  state 0: #0
	<var> state 1
  state 1: #0
}
square 5;
25
fact1 n/*0:1*/ = n/*0:1*/*fact1 (n/*0:1*/-1) if n/*0:1*/>0;
fact1 n/*0:1*/ = 1;
{
  rule #0: fact1 n = n*fact1 (n-1) if n>0
  rule #1: fact1 n = 1
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
}
{
  rule #0: x = fact1 10
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = fact1 10;
x;
3628800
fact2 n/*0:1*/ = case n/*0:1*/ of n/*0:*/ = n/*0:*/*fact2 (n/*0:*/-1) if n/*0:*/>0; n/*0:*/ = 1 {
  rule #0: n = n*fact2 (n-1) if n>0
  rule #1: n = 1
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end;
fact3 n/*0:1*/ = case n/*0:1*/ of 0 = 1; n/*0:*/ = n/*0:*/*fact3 (n/*0:*/-1) if n/*0:*/>0 {
  rule #0: 0 = 1
  rule #1: n = n*fact3 (n-1) if n>0
  state 0: #0 #1
	<var> state 1
	0::int state 2
  state 1: #1
  state 2: #0 #1
} end;
fact4 n/*0:1*/ = if n/*0:1*/>0 then n/*0:1*/*fact4 (n/*0:1*/-1) else 1;
fact5 = \n/*0:*/ -> if n/*0:*/>0 then n/*0:*/*fact5 (n/*0:*/-1) else 1 {
  rule #0: n = if n>0 then n*fact5 (n-1) else 1
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: fact2 n = case n of n = n*fact2 (n-1) if n>0; n = 1 end
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: fact3 n = case n of 0 = 1; n = n*fact3 (n-1) if n>0 end
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: fact4 n = if n>0 then n*fact4 (n-1) else 1
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: fact5 = \n -> if n>0 then n*fact5 (n-1) else 1
  state 0: #0
}
fact2 10;
3628800
fact3 10;
3628800
fact4 10;
3628800
fact5 10;
3628800
fact n/*0:1*/::int = fact (bigint n/*0:1*/);
fact n/*0:1*/::bigint = n/*0:1*/*fact (n/*0:1*/-1) if n/*0:1*/>0;
fact n/*0:1*/::bigint = 1;
{
  rule #0: fact n::int = fact (bigint n)
  rule #1: fact n::bigint = n*fact (n-1) if n>0
  rule #2: fact n::bigint = 1
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1 #2
}
fact 50;
30414093201713378043612608166064768844377641568960512000000000000L
fib1 0 = 0;
fib1 1 = 1;
fib1 n/*0:1*/ = fib1 (n/*0:1*/-2)+fib1 (n/*0:1*/-1) if n/*0:1*/>1;
fib2 n/*0:1*/ = case fibs/*0*/ n/*0:1*/ of a/*0:01*/,b/*0:1*/ = a/*0:01*/ {
  rule #0: a,b = a
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	, state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
} end with fibs n/*0:1*/ = 0,1 if n/*0:1*/<=0; fibs n/*0:1*/ = case fibs/*1*/ (n/*0:1*/-1) of a/*0:01*/,b/*0:1*/ = b/*0:1*/,a/*0:01*/+b/*0:1*/ {
  rule #0: a,b = b,a+b
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	, state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
} end {
  rule #0: fibs n = 0,1 if n<=0
  rule #1: fibs n = case fibs (n-1) of a,b = b,a+b end
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end;
fib3 n/*0:1*/ = a/*0:01*/ when a/*0:01*/,b/*0:1*/ = fibs/*0*/ n/*0:1*/ {
  rule #0: a,b = fibs n
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	, state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
} end with fibs n/*0:1*/ = 0,1 if n/*0:1*/<=0; fibs n/*0:1*/ = b/*0:1*/,a/*0:01*/+b/*0:1*/ when a/*0:01*/,b/*0:1*/ = fibs/*1*/ (n/*0:1*/-1) {
  rule #0: a,b = fibs (n-1)
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	, state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
} end {
  rule #0: fibs n = 0,1 if n<=0
  rule #1: fibs n = b,a+b when a,b = fibs (n-1) end
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
} end;
{
  rule #0: fib1 0 = 0
  rule #1: fib1 1 = 1
  rule #2: fib1 n = fib1 (n-2)+fib1 (n-1) if n>1
  state 0: #0 #1 #2
	<var> state 1
	0::int state 2
	1::int state 3
  state 1: #2
  state 2: #0 #2
  state 3: #1 #2
}
{
  rule #0: fib2 n = case fibs n of a,b = a end with fibs n = 0,1 if n<=0; fibs n = case fibs (n-1) of a,b = b,a+b end end
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: fib3 n = a when a,b = fibs n end with fibs n = 0,1 if n<=0; fibs n = b,a+b when a,b = fibs (n-1) end end
  state 0: #0
	<var> state 1
  state 1: #0
}
map fib1 (1..10);
[1,1,2,3,5,8,13,21,34,55]
map fib2 (1..10);
[1,1,2,3,5,8,13,21,34,55]
map fib3 (1..10);
[1,1,2,3,5,8,13,21,34,55]
