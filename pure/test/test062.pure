// Improved optimization rules for list and matrix comprehensions (Pure 0.47+).

using system;

let z = 99;

a = void [puts $ str 99 | 99>0];
b = void [puts $ str x | x=1..2];
c = void [puts $ str x | 99>0; x=1..2];
d = void [puts $ str x | z>0; x=1..2];

f = void [puts $ str (x,y) | x=1..2; y=1..3];
g = void [puts $ str (x,y) | x=1..2; x>0; y=1..3];
h = void [puts $ str (x,y) | x=1..2; x>0; y=1..3; y>0];
k = void [printf "%g\n" (2^x+1) | x=1..5; x mod 2];

A = void {puts $ str 99 | 99>0};
B = void {puts $ str x | x=1..2};
C = void {puts $ str x | 99>0; x=1..2};
D = void {puts $ str x | z>0; x=1..2};

F = void {puts $ str (x,y) | x=1..2; y=1..3};
G = void {puts $ str (x,y) | x=1..2; x>0; y=1..3};
H = void {puts $ str (x,y) | x=1..2; x>0; y=1..3; y>0};
K = void {printf "%g\n" (2^x+1) | x=1..5; x mod 2};
