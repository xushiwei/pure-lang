let randlist = [52,72,26,78,46,19,44,72,96,75,46,86,13,84,1,94,67,79,14,61,90,77,36,94,88,44,16,42,47,3,60,79,18,52,89,30,94,38,93,91,33,53,70,97,76,75,9,85,17,1,41,29,37,41,13,38,29,2,23,3,22,52,49,88,77,5,11,54,34,45,58,58,6,81,40,58,19,89,17,20,11,15,99,68,81,64,32,73,82,72,65,35,61,41,81,77,27,4,60,51,63,18,27,45,64,74,41,61,61,85,18,30,2,0,95,99,20,60,93,55,54,43,44,30,20,21,4,20,57,91,41,65,35,58,39,3,28,9,44,92,92,60,86,1,68,84,12,5,1,39,86,1,92,88,66,65,7,9,0,52,78,65,54,79,72,25,25,13,48,46,10,50,85,1,82,96,1,92,6,3,19,27,44,64,15,48,64,53,35,39,72,72,30,10,91,74,23,65,36,2,84,4,5,42,47,50,98,60,91,75,71,97,2,26,1,8,15,11,75,93,12,59,12,59,6,25,41,94,35,1,97,76,86,40,86,3,20,42,98,56,57,46,46,76,30,41,9,13,69,18,89,73,30,14,82,44,59,97,50,89,72,26,45,26,96,1,94,90,9,52,8,79,86,9,88,0,20,47,64,93,9,57,50,65,89,73,68,80,24,76,76,54,48,41,7,52,50,75,13,0,76,10,96,8,11,89,74,21,58,24,88,39,5,92,45,87,23,48,57,85,21,92,3,40,5,10,52,57,11,4,50,72,49,34,3,36,91,50,86,92,1,28,23,71,10,77,24,43,59,51,76,72,80,74,50,81,5,57,86,55,82,12,71,0,3,29,67,30,43,27,12,13,10,41,82,26,14,1,22,35,76,42,68,52,32,14,37,74,72,73,17,55,68,87,55,34,53,96,92,75,68,33,36,70,66,39,1,40,66,21,8,61,1,21,20,37,39,29,52,79,39,72,69,63,12,73,16,2,21,17,17,52,31,90,44,7,13,53,64,84,96,34,36,71,4,12,25,96,83,68,68,80,52,58,68,46,75,27,31,6,14,47,23,94,33,26,17,87,86,47,21,77,10,20,23,16,26,80,10,25,87,21,66,62,79,34,63,25,3,80,40,43,75,78,48,71,38,2,41,90,61,83,75,60,86,40,23,58,10,49,84,70,10,69,3,42,73,27,33,31,21,60,57,7,47,16,29,65,99,9,5,2,93,6,71,55,41,98,46,69,68,53,57,54,60,37,89,24,41,57,29,83,26,26,49,6,10,23,61,70,25,80,12,40,80,16,44,69,2,54,50,91,43,86,83,66,87,91,15,9,67,13,89,31,7,58,21,69,30,80,87,74,57,86,84,64,9,62,80,93,44,10,94,85,13,84,68,55,98,34,75,20,42,85,2,25,53,62,77,62,79,11,88,77,85,47,77,28,29,19,29,47,31,40,59,41,86,4,4,76,43,49,53,95,45,96,38,46,3,33,86,94,70,24,19,86,69,16,85,18,6,91,31,19,28,99,24,84,42,45,71,50,30,34,0,82,36,87,27,60,76,21,19,37,65,20,42,43,5,87,66,30,11,92,93,41,21,69,28,29,63,54,58,74,6,95,72,8,96,10,9,44,38,71,93,29,94,17,2,38,94,71,46,33,82,58,89,70,91,89,63,35,6,79,62,45,74,29,62,52,79,69,23,20,57,55,90,98,43,40,1,47,54,4,47,72,23,35,96,7,15,17,67,19,74,8,97,31,70,51,89,91,14,69,82,74,99,83,77,66,66,24,13,58,37,17,99,59,75,99,61,9,8,86,55,56,22,55,81,58,73,29,91,47,15,16,73,82,97,4,7,72,53,92,7,23,92,30,72,99,25,48,12,51,99,85,31,42,59,32,45,46,86,55,63,5,46,21,45,9,72,86,17,76,28,35,96,0,25,26,87,9,89,32,80,72,47,26,48,50,95,63,6,61,43,21,1,43,90,57,35,25,30,89,3,84,5,72,1,15,9,36,55,67,31,51,81,79,84,52,56,40,77,91,66,9,83,39,1,22,72,23,64,0,97,9,6,54,66,18,51,18,99,6,94,59,54,92,8,32,9,24,87,67,67,23,80,56,57,60,53,90,89,57,82,2,45,28,57,21,7,20,76,57,85,80,69,59,31,34,74,83,1,45,31,39,19,69,43,84,6,35,91,52,99,52,86,75,50,21,46,2,0,7,55,50,49,58,13,88,6,91,72,1,89,69,50,83,88,21,54,72,54,82,48,47,2,31,70,39];
{
  rule #0: a = set (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = set (1..10);
{
  rule #0: b = set (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = set (6..10);
{
  rule #0: c = bag (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = bag (1..10);
{
  rule #0: d = bag (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = bag (6..10);
{
  rule #0: e = set (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = set (map str (1..10));
{
  rule #0: f = bag (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = bag (map str (1..10));
a;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
b;
Set (bin 7 (-1) (bin 6 0 nil nil) (bin 9 0 (bin 8 0 nil nil) (bin 10 0 nil nil)))
c;
Bag (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
d;
Bag (bin 7 (-1) (bin 6 0 nil nil) (bin 9 0 (bin 8 0 nil nil) (bin 10 0 nil nil)))
e;
Set (bin "4" 0 (bin "2" 1 (bin "1" (-1) nil (bin "10" 0 nil nil)) (bin "3" 0 nil nil)) (bin "6" (-1) (bin "5" 0 nil nil) (bin "8" 0 (bin "7" 0 nil nil) (bin "9" 0 nil nil))))
f;
Bag (bin "4" 0 (bin "2" 1 (bin "1" (-1) nil (bin "10" 0 nil nil)) (bin "3" 0 nil nil)) (bin "6" (-1) (bin "5" 0 nil nil) (bin "8" 0 (bin "7" 0 nil nil) (bin "9" 0 nil nil))))
setp a;
1
setp c;
0
bagp c;
1
bagp a;
0
null emptyset;
1
null emptybag;
1
null a;
0
null c;
0
rmfirst a;
Set (bin 4 (-1) (bin 2 (-1) nil (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
rmfirst c;
Bag (bin 4 (-1) (bin 2 (-1) nil (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
rmlast a;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 1 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 0 nil nil)))
rmlast c;
Bag (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 1 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 0 nil nil)))
foldl delete a (1..10);
Set nil
foldl delete c (1..10);
Bag nil
first a;
1
last a;
10
first c;
1
last c;
10
#a;
10
#c;
10
member a 5;
1
member a 50;
0
member c 5;
1
member c 50;
0
members a;
[1,2,3,4,5,6,7,8,9,10]
members c;
[1,2,3,4,5,6,7,8,9,10]
a==b;
0
a~=b;
1
a<b;
0
a<=b;
0
a>b;
1
a>=b;
1
a==a;
1
a~=a;
0
a<a;
0
a<=a;
1
a>a;
0
a>=a;
1
c==d;
0
c~=d;
1
c<d;
0
c<=d;
0
c>d;
1
c>=d;
1
c==c;
1
c~=c;
0
c<c;
0
c<=c;
1
c>c;
0
c>=c;
1
a+b;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
a*b;
Set (bin 8 0 (bin 6 (-1) nil (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil)))
a-b;
Set (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil))
c+d;
Bag (bin 6 (-1) (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil)) (bin 8 (-1) (bin 7 0 (bin 6 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) (bin 8 0 nil nil) (bin 10 0 (bin 9 0 nil nil) (bin 10 0 nil nil)))))
c*d;
Bag (bin 8 0 (bin 6 (-1) nil (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil)))
c-d;
Bag (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil))
c+d-d;
Bag (bin 5 0 (bin 2 (-1) (bin 1 0 nil nil) (bin 4 1 (bin 3 0 nil nil) nil)) (bin 8 0 (bin 7 1 (bin 6 0 nil nil) nil) (bin 9 (-1) nil (bin 10 0 nil nil))))
foldl delete (foldl insert emptyset randlist) randlist;
Set nil
foldl delete (foldl insert emptybag randlist) randlist;
Bag nil
{
  rule #0: a = dict (catmap (\i -> [i=>double i]) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = dict (catmap (\i/*0:*/ -> [i/*0:*/=>double i/*0:*/] {
  rule #0: i = [i=>double i]
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: b = dict (catmap (\i -> [i=>double i]) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = dict (catmap (\i/*0:*/ -> [i/*0:*/=>double i/*0:*/] {
  rule #0: i = [i=>double i]
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20));
{
  rule #0: c = hdict (zipwith (=>) (catmap (\i -> [(i,double i,str i)]) (1..10)) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = hdict (zipwith (=>) (catmap (\i/*0:*/ -> [(i/*0:*/,double i/*0:*/,str i/*0:*/)] {
  rule #0: i = [(i,double i,str i)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10)) (1..10));
{
  rule #0: d = hdict (zipwith (=>) (catmap (\i -> [(i,double i,str i)]) (11..20)) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = hdict (zipwith (=>) (catmap (\i/*0:*/ -> [(i/*0:*/,double i/*0:*/,str i/*0:*/)] {
  rule #0: i = [(i,double i,str i)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20)) (11..20));
{
  rule #0: e = dict (zipwith (=>) (map str (1..10)) (map str (1..10)))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = dict (zipwith (=>) (map str (1..10)) (map str (1..10)));
a;
Dict (bin 4 4.0 (-1) (bin 2 2.0 0 (bin 1 1.0 0 nil nil) (bin 3 3.0 0 nil nil)) (bin 8 8.0 0 (bin 6 6.0 0 (bin 5 5.0 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 9 9.0 (-1) nil (bin 10 10.0 0 nil nil))))
b;
Dict (bin 14 14.0 (-1) (bin 12 12.0 0 (bin 11 11.0 0 nil nil) (bin 13 13.0 0 nil nil)) (bin 18 18.0 0 (bin 16 16.0 0 (bin 15 15.0 0 nil nil) (bin 17 17.0 0 nil nil)) (bin 19 19.0 (-1) nil (bin 20 20.0 0 nil nil))))
c;
Hdict (bin 155356 [(4,4.0,"4")=>4] (-1) (bin 124342 [(2,2.0,"2")=>2] 0 (bin 91321 [(1,1.0,"1")=>1] 0 nil nil) (bin 139781 [(3,3.0,"3")=>3] 0 nil nil)) (bin 186472 [(8,8.0,"8")=>8] 0 (bin 170922 [(6,6.0,"6")=>6] 0 (bin 163079 [(5,5.0,"5")=>5] 0 nil nil) (bin 178641 [(7,7.0,"7")=>7] 0 nil nil)) (bin 190279 [(9,9.0,"9")=>9] (-1) nil (bin 193996 [(10,10.0,"10")=>10] 0 nil nil))))
d;
Hdict (bin 208912 [(14,14.0,"14")=>14] (-1) (bin 202666 [(12,12.0,"12")=>12] 0 (bin 198291 [(11,11.0,"11")=>11] 0 nil nil) (bin 206661 [(13,13.0,"13")=>13] 0 nil nil)) (bin 222112 [(18,18.0,"18")=>18] 0 (bin 217798 [(16,16.0,"16")=>16] 0 (bin 213295 [(15,15.0,"15")=>15] 0 nil nil) (bin 219731 [(17,17.0,"17")=>17] 0 nil nil)) (bin 224013 [(19,19.0,"19")=>19] (-1) nil (bin 224384 [(20,20.0,"20")=>20] 0 nil nil))))
e;
Dict (bin "4" "4" 0 (bin "2" "2" 1 (bin "1" "1" (-1) nil (bin "10" "10" 0 nil nil)) (bin "3" "3" 0 nil nil)) (bin "6" "6" (-1) (bin "5" "5" 0 nil nil) (bin "8" "8" 0 (bin "7" "7" 0 nil nil) (bin "9" "9" 0 nil nil))))
mkdict 1000 (1..10);
Dict (bin 4 1000 (-1) (bin 2 1000 0 (bin 1 1000 0 nil nil) (bin 3 1000 0 nil nil)) (bin 8 1000 0 (bin 6 1000 0 (bin 5 1000 0 nil nil) (bin 7 1000 0 nil nil)) (bin 9 1000 (-1) nil (bin 10 1000 0 nil nil))))
mkhdict 1000 (catmap (\i/*0:*/ -> [(i/*0:*/,double i/*0:*/,str i/*0:*/)] {
  rule #0: i = [(i,double i,str i)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
Hdict (bin 155356 [(4,4.0,"4")=>1000] (-1) (bin 124342 [(2,2.0,"2")=>1000] 0 (bin 91321 [(1,1.0,"1")=>1000] 0 nil nil) (bin 139781 [(3,3.0,"3")=>1000] 0 nil nil)) (bin 186472 [(8,8.0,"8")=>1000] 0 (bin 170922 [(6,6.0,"6")=>1000] 0 (bin 163079 [(5,5.0,"5")=>1000] 0 nil nil) (bin 178641 [(7,7.0,"7")=>1000] 0 nil nil)) (bin 190279 [(9,9.0,"9")=>1000] (-1) nil (bin 193996 [(10,10.0,"10")=>1000] 0 nil nil))))
dictp a;
1
dictp c;
0
hdictp c;
1
hdictp a;
0
null emptydict;
1
null emptyhdict;
1
null a;
0
null c;
0
rmfirst a;
Dict (bin 4 4.0 (-1) (bin 2 2.0 (-1) nil (bin 3 3.0 0 nil nil)) (bin 8 8.0 0 (bin 6 6.0 0 (bin 5 5.0 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 9 9.0 (-1) nil (bin 10 10.0 0 nil nil))))
rmlast a;
Dict (bin 4 4.0 (-1) (bin 2 2.0 0 (bin 1 1.0 0 nil nil) (bin 3 3.0 0 nil nil)) (bin 8 8.0 1 (bin 6 6.0 0 (bin 5 5.0 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 9 9.0 0 nil nil)))
first a;
1=>1.0
last a;
10=>10.0
#a;
10
#c;
10
member a 5;
1
member a 50;
0
member e "5";
1
member e "50";
0
member c (5,5.0,"5");
1
member c (50,50.0,"50");
0
a!5;
5.0
e!"5";
"5"
c!(5,5.0,"5");
5
a!50;
<stdin>, line 166: unhandled exception 'out_of_bounds' while evaluating 'a!50'
c!(50,50.0,"50");
<stdin>, line 166: unhandled exception 'out_of_bounds' while evaluating 'c!(50,50.0,"50")'
a!!(5..15);
[5.0,6.0,7.0,8.0,9.0,10.0]
c!!catmap (\i/*0:*/ -> [(i/*0:*/,double i/*0:*/,str i/*0:*/)] {
  rule #0: i = [(i,double i,str i)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (5..15);
[5,6,7,8,9,10]
members a;
[1=>1.0,2=>2.0,3=>3.0,4=>4.0,5=>5.0,6=>6.0,7=>7.0,8=>8.0,9=>9.0,10=>10.0]
members c;
[(1,1.0,"1")=>1,(2,2.0,"2")=>2,(3,3.0,"3")=>3,(4,4.0,"4")=>4,(5,5.0,"5")=>5,(6,6.0,"6")=>6,(7,7.0,"7")=>7,(8,8.0,"8")=>8,(9,9.0,"9")=>9,(10,10.0,"10")=>10]
keys a;
[1,2,3,4,5,6,7,8,9,10]
keys c;
[(1,1.0,"1"),(2,2.0,"2"),(3,3.0,"3"),(4,4.0,"4"),(5,5.0,"5"),(6,6.0,"6"),(7,7.0,"7"),(8,8.0,"8"),(9,9.0,"9"),(10,10.0,"10")]
vals a;
[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]
vals c;
[1,2,3,4,5,6,7,8,9,10]
update a 5 5000;
Dict (bin 4 4.0 (-1) (bin 2 2.0 0 (bin 1 1.0 0 nil nil) (bin 3 3.0 0 nil nil)) (bin 8 8.0 0 (bin 6 6.0 0 (bin 5 5000 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 9 9.0 (-1) nil (bin 10 10.0 0 nil nil))))
update a 5000 5000;
Dict (bin 4 4.0 (-1) (bin 2 2.0 0 (bin 1 1.0 0 nil nil) (bin 3 3.0 0 nil nil)) (bin 8 8.0 0 (bin 6 6.0 0 (bin 5 5.0 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 10 10.0 0 (bin 9 9.0 0 nil nil) (bin 5000 5000 0 nil nil))))
update c (5,5.0,"5") 5000;
Hdict (bin 155356 [(4,4.0,"4")=>4] (-1) (bin 124342 [(2,2.0,"2")=>2] 0 (bin 91321 [(1,1.0,"1")=>1] 0 nil nil) (bin 139781 [(3,3.0,"3")=>3] 0 nil nil)) (bin 186472 [(8,8.0,"8")=>8] 0 (bin 170922 [(6,6.0,"6")=>6] 0 (bin 163079 [(5,5.0,"5")=>5000] 0 nil nil) (bin 178641 [(7,7.0,"7")=>7] 0 nil nil)) (bin 190279 [(9,9.0,"9")=>9] (-1) nil (bin 193996 [(10,10.0,"10")=>10] 0 nil nil))))
update c (5000,5000.0,"5000") 5000;
Hdict (bin 155356 [(4,4.0,"4")=>4] 0 (bin 124342 [(2,2.0,"2")=>2] 1 (bin 91321 [(1,1.0,"1")=>1] 1 (bin (-21709) [(5000,5000.0,"5000")=>5000] 0 nil nil) nil) (bin 139781 [(3,3.0,"3")=>3] 0 nil nil)) (bin 186472 [(8,8.0,"8")=>8] 0 (bin 170922 [(6,6.0,"6")=>6] 0 (bin 163079 [(5,5.0,"5")=>5] 0 nil nil) (bin 178641 [(7,7.0,"7")=>7] 0 nil nil)) (bin 190279 [(9,9.0,"9")=>9] (-1) nil (bin 193996 [(10,10.0,"10")=>10] 0 nil nil))))
foldl delete a (1..10);
Dict nil
delete a 5000;
Dict (bin 4 4.0 (-1) (bin 2 2.0 0 (bin 1 1.0 0 nil nil) (bin 3 3.0 0 nil nil)) (bin 8 8.0 0 (bin 6 6.0 0 (bin 5 5.0 0 nil nil) (bin 7 7.0 0 nil nil)) (bin 9 9.0 (-1) nil (bin 10 10.0 0 nil nil))))
foldl delete c (catmap (\i/*0:*/ -> [(i/*0:*/,double i/*0:*/,str i/*0:*/)] {
  rule #0: i = [(i,double i,str i)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
Hdict nil
delete c (5000,5000.0,"5000");
Hdict (bin 155356 [(4,4.0,"4")=>4] (-1) (bin 124342 [(2,2.0,"2")=>2] 0 (bin 91321 [(1,1.0,"1")=>1] 0 nil nil) (bin 139781 [(3,3.0,"3")=>3] 0 nil nil)) (bin 186472 [(8,8.0,"8")=>8] 0 (bin 170922 [(6,6.0,"6")=>6] 0 (bin 163079 [(5,5.0,"5")=>5] 0 nil nil) (bin 178641 [(7,7.0,"7")=>7] 0 nil nil)) (bin 190279 [(9,9.0,"9")=>9] (-1) nil (bin 193996 [(10,10.0,"10")=>10] 0 nil nil))))
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
c==d;
0
c~=d;
1
c==c;
1
c~=c;
0
foldl delete (mkdict 100 randlist) randlist;
Dict nil
foldl delete (mkhdict 100 randlist) randlist;
Hdict nil
{
  rule #0: a = heap (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = heap (1..10);
{
  rule #0: b = heap (11..20)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = heap (11..20);
{
  rule #0: c = heap (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = heap (map str (1..10));
{
  rule #0: d = heap (1.0..10.0)
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = heap (1.0..10.0);
a;
Heap (bin 1 1 (bin 0 2 (bin 1 4 (bin 0 8 nil nil) nil) (bin 1 6 (bin 0 10 nil nil) nil)) (bin 1 3 (bin 1 5 (bin 0 9 nil nil) nil) (bin 0 7 nil nil)))
c;
Heap (bin 1 "1" (bin 0 "10" (bin 1 "4" (bin 0 "8" nil nil) nil) (bin 1 "2" (bin 0 "6" nil nil) nil)) (bin 1 "3" (bin 1 "5" (bin 0 "9" nil nil) nil) (bin 0 "7" nil nil)))
d;
Heap (bin 1 1.0 (bin 0 2.0 (bin 1 4.0 (bin 0 8.0 nil nil) nil) (bin 1 6.0 (bin 0 10.0 nil nil) nil)) (bin 1 3.0 (bin 1 5.0 (bin 0 9.0 nil nil) nil) (bin 0 7.0 nil nil)))
heapp a;
1
heapp (set (1..10));
0
null emptyheap;
1
null a;
0
rmfirst a;
Heap (bin 0 2 (bin 1 4 (bin 1 8 (bin 0 10 nil nil) nil) (bin 0 6 nil nil)) (bin 1 3 (bin 1 5 (bin 0 9 nil nil) nil) (bin 0 7 nil nil)))
first a;
1
#a;
10
members a;
[1,2,3,4,5,6,7,8,9,10]
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
#heap randlist;
1000
{
  rule #0: a = array (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = array (1..10);
{
  rule #0: b = array (11..20)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = array (11..20);
{
  rule #0: c = array2 (catmap (\j -> [catmap (\i -> [str (i+j)]) (j..10)]) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = array2 (catmap (\j/*0:*/ -> [catmap (\i/*0:*/ -> [str (i/*0:*/+j/*1:*/)] {
  rule #0: i = [str (i+j)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (j/*0:*/..10)] {
  rule #0: j = [catmap (\i -> [str (i+j)]) (j..10)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: d = array2 (catmap (\j -> [catmap (\i -> [str (i+j)]) (j..10)]) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = array2 (catmap (\j/*0:*/ -> [catmap (\i/*0:*/ -> [str (i/*0:*/+j/*1:*/)] {
  rule #0: i = [str (i+j)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (j/*0:*/..10)] {
  rule #0: j = [catmap (\i -> [str (i+j)]) (j..10)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20));
a;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip 1) (tip 9)) (tip 5)) (bin 0 (tip 3) (tip 7))) (bin 1 (bin 1 (bin 0 (tip 2) (tip 10)) (tip 6)) (bin 0 (tip 4) (tip 8))))
b;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip 11) (tip 19)) (tip 15)) (bin 0 (tip 13) (tip 17))) (bin 1 (bin 1 (bin 0 (tip 12) (tip 20)) (tip 16)) (bin 0 (tip 14) (tip 18))))
c;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip (Array (bin 0 (bin 1 (bin 1 (bin 0 (tip "2") (tip "10")) (tip "6")) (bin 0 (tip "4") (tip "8"))) (bin 1 (bin 1 (bin 0 (tip "3") (tip "11")) (tip "7")) (bin 0 (tip "5") (tip "9")))))) (tip (Array (bin 0 (tip "18") (tip "19"))))) (tip (Array (bin 0 (bin 1 (bin 0 (tip "10") (tip "14")) (tip "12")) (bin 1 (bin 0 (tip "11") (tip "15")) (tip "13")))))) (bin 0 (tip (Array (bin 0 (bin 0 (bin 0 (tip "6") (tip "10")) (bin 0 (tip "8") (tip "12"))) (bin 0 (bin 0 (tip "7") (tip "11")) (bin 0 (tip "9") (tip "13")))))) (tip (Array (bin 0 (bin 0 (tip "14") (tip "16")) (bin 0 (tip "15") (tip "17"))))))) (bin 1 (bin 1 (bin 0 (tip (Array (bin 1 (bin 1 (bin 1 (bin 0 (tip "4") (tip "12")) (tip "8")) (bin 0 (tip "6") (tip "10"))) (bin 0 (bin 0 (tip "5") (tip "9")) (bin 0 (tip "7") (tip "11")))))) (tip (Array (tip "20")))) (tip (Array (bin 1 (bin 1 (bin 0 (tip "12") (tip "16")) (tip "14")) (bin 0 (tip "13") (tip "15")))))) (bin 0 (tip (Array (bin 1 (bin 0 (bin 0 (tip "8") (tip "12")) (bin 0 (tip "10") (tip "14"))) (bin 1 (bin 0 (tip "9") (tip "13")) (tip "11"))))) (tip (Array (bin 1 (bin 0 (tip "16") (tip "18")) (tip "17")))))))
d;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip (Array nil)) (tip (Array nil))) (tip (Array nil))) (bin 0 (tip (Array nil)) (tip (Array nil)))) (bin 1 (bin 1 (bin 0 (tip (Array nil)) (tip (Array nil))) (tip (Array nil))) (bin 0 (tip (Array nil)) (tip (Array nil)))))
mkarray 1000 10;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000))) (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000))))
mkarray2 1000 (5,5);
Array (bin 1 (bin 1 (bin 0 (tip (Array (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000))))) (tip (Array (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000)))))) (tip (Array (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000)))))) (bin 0 (tip (Array (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000))))) (tip (Array (bin 1 (bin 1 (bin 0 (tip 1000) (tip 1000)) (tip 1000)) (bin 0 (tip 1000) (tip 1000)))))))
arrayp a;
1
arrayp c;
1
arrayp (set (1..2));
0
null emptyarray;
1
null a;
0
null c;
0
rmfirst a;
Array (bin 1 (bin 1 (bin 1 (bin 0 (tip 2) (tip 10)) (tip 6)) (bin 0 (tip 4) (tip 8))) (bin 0 (bin 0 (tip 3) (tip 7)) (bin 0 (tip 5) (tip 9))))
rmlast a;
Array (bin 1 (bin 1 (bin 1 (bin 0 (tip 1) (tip 9)) (tip 5)) (bin 0 (tip 3) (tip 7))) (bin 0 (bin 0 (tip 2) (tip 6)) (bin 0 (tip 4) (tip 8))))
rmfirst a;
Array (bin 1 (bin 1 (bin 1 (bin 0 (tip 2) (tip 10)) (tip 6)) (bin 0 (tip 4) (tip 8))) (bin 0 (bin 0 (tip 3) (tip 7)) (bin 0 (tip 5) (tip 9))))
rmfirst c;
Array (bin 1 (bin 1 (bin 1 (bin 0 (tip (Array (bin 1 (bin 1 (bin 1 (bin 0 (tip "4") (tip "12")) (tip "8")) (bin 0 (tip "6") (tip "10"))) (bin 0 (bin 0 (tip "5") (tip "9")) (bin 0 (tip "7") (tip "11")))))) (tip (Array (tip "20")))) (tip (Array (bin 1 (bin 1 (bin 0 (tip "12") (tip "16")) (tip "14")) (bin 0 (tip "13") (tip "15")))))) (bin 0 (tip (Array (bin 1 (bin 0 (bin 0 (tip "8") (tip "12")) (bin 0 (tip "10") (tip "14"))) (bin 1 (bin 0 (tip "9") (tip "13")) (tip "11"))))) (tip (Array (bin 1 (bin 0 (tip "16") (tip "18")) (tip "17")))))) (bin 0 (bin 0 (tip (Array (bin 0 (bin 0 (bin 0 (tip "6") (tip "10")) (bin 0 (tip "8") (tip "12"))) (bin 0 (bin 0 (tip "7") (tip "11")) (bin 0 (tip "9") (tip "13")))))) (tip (Array (bin 0 (bin 0 (tip "14") (tip "16")) (bin 0 (tip "15") (tip "17")))))) (bin 0 (tip (Array (bin 0 (bin 1 (bin 0 (tip "10") (tip "14")) (tip "12")) (bin 1 (bin 0 (tip "11") (tip "15")) (tip "13"))))) (tip (Array (bin 0 (tip "18") (tip "19")))))))
first a;
1
last a;
10
first c;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip "2") (tip "10")) (tip "6")) (bin 0 (tip "4") (tip "8"))) (bin 1 (bin 1 (bin 0 (tip "3") (tip "11")) (tip "7")) (bin 0 (tip "5") (tip "9"))))
last c;
Array (tip "20")
#a;
10
#c;
10
a!5;
6
c!(2,3);
"9"
a!50;
<stdin>, line 292: unhandled exception 'out_of_bounds' while evaluating 'a!50'
c!(20,30);
<stdin>, line 292: unhandled exception 'out_of_bounds' while evaluating 'c!(20,30)'
a!!(5..15);
[6,7,8,9,10]
c!!catmap (\i/*0:*/ -> catmap (\j/*0:*/ -> [(i/*1:*/,j/*0:*/)] {
  rule #0: j = [(i,j)]
  state 0: #0
	<var> state 1
  state 1: #0
}) (3..15) {
  rule #0: i = catmap (\j -> [(i,j)]) (3..15)
  state 0: #0
	<var> state 1
  state 1: #0
}) (3..15);
["11","12","13","14","13","14","15","15","16","17"]
members a;
[1,2,3,4,5,6,7,8,9,10]
members c;
[Array (bin 0 (bin 1 (bin 1 (bin 0 (tip "2") (tip "10")) (tip "6")) (bin 0 (tip "4") (tip "8"))) (bin 1 (bin 1 (bin 0 (tip "3") (tip "11")) (tip "7")) (bin 0 (tip "5") (tip "9")))),Array (bin 1 (bin 1 (bin 1 (bin 0 (tip "4") (tip "12")) (tip "8")) (bin 0 (tip "6") (tip "10"))) (bin 0 (bin 0 (tip "5") (tip "9")) (bin 0 (tip "7") (tip "11")))),Array (bin 0 (bin 0 (bin 0 (tip "6") (tip "10")) (bin 0 (tip "8") (tip "12"))) (bin 0 (bin 0 (tip "7") (tip "11")) (bin 0 (tip "9") (tip "13")))),Array (bin 1 (bin 0 (bin 0 (tip "8") (tip "12")) (bin 0 (tip "10") (tip "14"))) (bin 1 (bin 0 (tip "9") (tip "13")) (tip "11"))),Array (bin 0 (bin 1 (bin 0 (tip "10") (tip "14")) (tip "12")) (bin 1 (bin 0 (tip "11") (tip "15")) (tip "13"))),Array (bin 1 (bin 1 (bin 0 (tip "12") (tip "16")) (tip "14")) (bin 0 (tip "13") (tip "15"))),Array (bin 0 (bin 0 (tip "14") (tip "16")) (bin 0 (tip "15") (tip "17"))),Array (bin 1 (bin 0 (tip "16") (tip "18")) (tip "17")),Array (bin 0 (tip "18") (tip "19")),Array (tip "20")]
members2 c;
[["2","3","4","5","6","7","8","9","10","11"],["4","5","6","7","8","9","10","11","12"],["6","7","8","9","10","11","12","13"],["8","9","10","11","12","13","14"],["10","11","12","13","14","15"],["12","13","14","15","16"],["14","15","16","17"],["16","17","18"],["18","19"],["20"]]
update a 5 5000;
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip 1) (tip 9)) (tip 5)) (bin 0 (tip 3) (tip 7))) (bin 1 (bin 1 (bin 0 (tip 2) (tip 10)) (tip 5000)) (bin 0 (tip 4) (tip 8))))
update2 c (2,3) "5000";
Array (bin 0 (bin 1 (bin 1 (bin 0 (tip (Array (bin 0 (bin 1 (bin 1 (bin 0 (tip "2") (tip "10")) (tip "6")) (bin 0 (tip "4") (tip "8"))) (bin 1 (bin 1 (bin 0 (tip "3") (tip "11")) (tip "7")) (bin 0 (tip "5") (tip "9")))))) (tip (Array (bin 0 (tip "18") (tip "19"))))) (tip (Array (bin 0 (bin 1 (bin 0 (tip "10") (tip "14")) (tip "12")) (bin 1 (bin 0 (tip "11") (tip "15")) (tip "13")))))) (bin 0 (tip (Array (bin 0 (bin 0 (bin 0 (tip "6") (tip "10")) (bin 0 (tip "8") (tip "12"))) (bin 0 (bin 0 (tip "7") (tip "11")) (bin 0 (tip "5000") (tip "13")))))) (tip (Array (bin 0 (bin 0 (tip "14") (tip "16")) (bin 0 (tip "15") (tip "17"))))))) (bin 1 (bin 1 (bin 0 (tip (Array (bin 1 (bin 1 (bin 1 (bin 0 (tip "4") (tip "12")) (tip "8")) (bin 0 (tip "6") (tip "10"))) (bin 0 (bin 0 (tip "5") (tip "9")) (bin 0 (tip "7") (tip "11")))))) (tip (Array (tip "20")))) (tip (Array (bin 1 (bin 1 (bin 0 (tip "12") (tip "16")) (tip "14")) (bin 0 (tip "13") (tip "15")))))) (bin 0 (tip (Array (bin 1 (bin 0 (bin 0 (tip "8") (tip "12")) (bin 0 (tip "10") (tip "14"))) (bin 1 (bin 0 (tip "9") (tip "13")) (tip "11"))))) (tip (Array (bin 1 (bin 0 (tip "16") (tip "18")) (tip "17")))))))
insert a 5000;
Array (bin 1 (bin 0 (bin 1 (bin 0 (tip 5000) (tip 8)) (tip 4)) (bin 1 (bin 0 (tip 2) (tip 10)) (tip 6))) (bin 1 (bin 1 (bin 0 (tip 1) (tip 9)) (tip 5)) (bin 0 (tip 3) (tip 7))))
append a 5000;
Array (bin 1 (bin 0 (bin 1 (bin 0 (tip 1) (tip 9)) (tip 5)) (bin 1 (bin 0 (tip 3) (tip 5000)) (tip 7))) (bin 1 (bin 1 (bin 0 (tip 2) (tip 10)) (tip 6)) (bin 0 (tip 4) (tip 8))))
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
c==d;
0
c~=d;
1
c==c;
1
c~=c;
0
