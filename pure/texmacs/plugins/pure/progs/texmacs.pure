
/* texmacs support module 2012-10-18 Albert Graef <Dr.Graef@t-online.de>. */

/* Copyright (c) 2012 Albert Graef

   Copying and distribution of this file, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  This file is offered as-is,
   without any warranty. */

/* Some auxiliary definitions for use with Pure in TeXmacs. This gets loaded
   automatically if you run the Pure scripting plugin (Document|Scripts|Pure).
   Inside a Pure session, you can invoke this module with `using texmacs;`. */

// Convenience functions for setting Reduce flags.
namespace reduce with public switch; end;
on  flag::string = reduce::switch flag 1;
off flag::string = reduce::switch flag 0;
on  flag::symbol = on (str flag);
off flag::symbol = off (str flag);

// Additional operators commonly used in TeXmacs (cf. pure-input.scm). Add
// others as needed.
infixl (+) oplus ominus pm mp cup sqcup uplus;
infixl (*) otimes oslash star bullet cap sqcap;

// Sum and product (used by the big operators in TeXmacs).
sum xs::list = foldl (+) 0 xs;
prod xs::list = foldl (*) 1 xs;
// These macros take care of sums and products written with both sub- and
// superscripts. They expand to the proper Pure term if they can be evaluated
// using a list comprehension in Pure, and are left as is otherwise (so that
// Reduce may be used to evaluate them as a symbolic sum or product).
def sum x k a b = case a..b of
  xs::list = __eval__ ('sum [x|k = xs]);
  _ = 'sum x k a b otherwise;
end;
def prod x k a b = case a..b of
  xs::list = __eval__ ('prod [x|k = xs]);
  _ = 'prod x k a b otherwise;
end;

/* Convenience macros to simplify expressions using Reduce. To make this work,
   you'll also have to import the reduce module. This isn't done here by
   default so that this module also works without having the pure-reduce
   package installed. */

/* ? passes the argument as a quoted expression, while ?: evaluates its
   argument. Thus ?x and ?: are just the same as simplifyd ('x) and simplifyd
   x, respectively, but they require much less typing. Also, these operators
   are at the lowest possible precendence so that their arguments don't have
   to be parenthesized (OTOH applications of ? and ?: must be parenthesized
   when used in any larger context). */

prefix 0 ? ?: ;
public simplifyd;
def ? x = simplifyd ('x);
def ?:x = simplifyd x;

// Also make these available as functions, but note that in this case ? looses
// the call-by-name argument passing.
? x = ? x;
?:x = ?:x;

/* LaTeX pretty-printing using the tmprint package of Reduce. Thanks are due
   to Kurt Pagani who figured out most of the necessary Lisp magic to make
   this work. You enable this with a call to the parameterless `math`,
   `algebraic` and `symbolic` functions; `verbatim` switches back to program
   mode again.

   Note that `math` mode actually has two submodes. `algebraic` corresponds to
   Reduce's algebraic mode and causes printed expressions to be simplified
   first. `symbolic` corresponds to Reduce's symbolic mode and prints the raw
   (unsimplified) expression. There are some kinds of expressions (e.g.,
   logical expressions other than equality) which aren't by default valid in
   algebraic mode, but work in symbolic mode.

   Just calling `math` is the same as `algebraic`. Using any of the `math` modes
   also starts up Reduce in a lazy fashion, so that we avoid depending on the
   pure-reduce package, but note that pure-reduce *is* required to make the
   pretty-printing work. */

// Enable this pragma to enable math (a.k.a. algebraic) mode by default.
//#! --enable tmmath
#! --ifndef tmmath
#! --disable tmmath
#! --endif

let tminit, tmmode, tmsave = ref 0, ref false, ref ();

public lisp lispval lispsym;
namespace reduce with
public capture output load pure_syms special_syms preproc tmvalid tmpost;
end;

tmstart = () when
  put tminit true;
  // Lazy loading of the reduce module.
  eval "using reduce;";
  // This module is needed for the TeXmacs pretty-printing. It is pretty noisy
  // during startup, so capture its output.
  reduce::capture 1;
  reduce::load "tmprint";
  reduce::capture 0;
end if ~get tminit;

/* NOTE: This recursively descends into the (already simplified) term to see
   whether it's actually printable. tmprint chokes on strings (wants them to
   be symbols) and of course doesn't know about C pointers, Pure closures and
   the like, so we exclude them here, also any operator symbols which are not
   in the reduce::pure_syms table or valid Reduce identifiers. */

/* If the following compile time option is enabled, subterms will be tried
   again by the pretty-printer if the check fails on the parent term. This
   comes at a cost (pretty-printing will become progressively slower as the
   terms get larger), but normally this shouldn't be much of a problem and we
   recommend to leave this enabled so that as much of the term is rendered in
   latex mode as possible. */

//#! --disable recurse

tmprint x = s when
  tmstart;
  x = lispval (reduce::preproc x);
  lisp (lispsym "fancy-output" (''maprin)
	(if (get tmmode==2) then ''x else ('aeval ('x))));
  reduce::capture 1;
  lisp (lispsym "fancy-flush");
  reduce::capture 0;
  s = reduce::output;
  // There's still some postprocessing to do...
  s = reduce::tmpost s;
end if printable x with
  printable x::number = true;
  printable [] = true;
  printable (x:xs) = printable x && ~thunkp xs && printable xs;
  printable x::matrix = all printable x;
  printable (x@_ y::tuple) = printable x && all printable (list y);
  //printable (x@_ y::list) = false;
  printable (x@_ y) = printable x && printable y;
  printable x::symbol = x ~== (..) && x ~== '(..) &&
    member reduce::pure_syms x && valid x || reduce::tmvalid (str x);
  printable _ = false;
  // There are some symbols in the conversion tables which aren't by default
  // valid in algebraic mode. We check for these here.
  valid x = true if get tmmode==2;
  valid x = ~member reduce::special_syms x ||
    any (member (getprops (reduce::special_syms!x)))
    // If a symbol is a valid Reduce operator then it *must* have one of these
    // properties defined.
    ['polyfn,'psopfn,'opfn,'simpfn];
  // Retrieve the properties of a symbol.
  getprops x::symbol = {k=>v | k::symbol : v = lisp ('prop ('x)); k~=='klist};
end;
#! --ifnot recurse
tmprint x = str x;
#! --endif

// PostScript output.

namespace __C with
// We declare these here so that we don't have to pull in the system module.
extern int fclose(FILE*);
extern FILE* fopen(char*, char*);
extern char* fgets(void* buf, int size, FILE* fp);
extern int puts(char* s);
extern int printf(char*, ...) = printf;
extern int printf(char*, char*) = printf_s;
extern int fflush(FILE*);
extern int pure_errno() = errno;
extern char* strerror(int);
extern int feof(FILE* fp), int ferror(FILE* fp);
extern char *getenv(char *name);
end;

using namespace __C;

ps s::string = () when
  s = if index s "\n" < 0 then psfile s else ps s;
  s = if last s == "\n" then init s else s;
  puts s;
end with
  // If s has no newline in it, assume that it's the name of a PostScript file.
  psfile name::string = ps s when
    path = getenv "TEXMACS_DOC_PATH";
    path = if null path then "" else path;
    fp = search name path;
    ~null fp || throw (name+": "+strerror errno);
    s = fget fp;
    fclose fp;
    // Do a little sanity check on the file (it *must* be plain PostScript,
    // not gzipped, otherwise TeXmacs will choke on it).
    ~null s && take 2 s == "%!" || throw (name+": Not a postscript file");
  end;
  // Otherwise we assume that it's just verbatim PostScript code.
  ps s::string = "\002ps:"+s+"\005";
  // Helper function to search a file on the given TeXmacs path.
  search name::string path::string = catch id
    (void [check (join "/" [dir,name]) | dir = split ":" path] $$ check name)
    if index name "/" < 0;
  search name::string _ = catch id (check name $$ NULL) otherwise;
  check name::string = NULL when
    fp = fopen name          "r"; null fp || throw fp;
    fp = fopen (name+".eps") "r"; null fp || throw fp;
    fp = fopen (name+".ps")  "r"; null fp || throw fp;
  end;
  // Helper function to slurp in a text file (from system.pure).
  fget f::pointer = read_a_file f buf [] when buf = malloc 0x10000 end;
  read_a_file f buf t = check s when s = fgets buf 0x10000 f end with
    check s::string   = return (s:t) if feof f || ferror f;
                      = read_a_file f buf (s:t) otherwise;
    check s           = return s if null t;
                      = return t otherwise;
    return x::pointer = free buf $$ x;
    return x          = free buf $$ strcat $ reverse $ x;
  end;
end;

/* Here's a little convenience function to output a plot done with Octave's
   Gnuplot interface in PostScript format. The given arguments are passed on
   to the gnuplot::print command. You need the latest version of the
   pure-octave package to make this work. Import the gnuplot module as
   follows: using gnuplot; */

namespace gnuplot with public print tmpnam; end;
psplot args = name when
  name:args = case args of
    name::string = name:() if ~null name && name!0~="-";
    name::string,args = name:args if ~null name && name!0~="-";
    _ = gnuplot::tmpnam()+".eps":args;
  end;
  // Default options are -color for color output and -S750,500 to set a
  // reasonable resolution. You might want to adjust these as needed.
  gnuplot::print (name,"-deps","-color","-S750,500",args);
  ps name;
end;

// Switch between math and verbatim output.
algebraic = tmstart $$ put tmmode 1 $$ ();
symbolic = tmstart $$ put tmmode 2 $$ ();
math = algebraic;
verbatim = put tmmode 0 $$ ();

// The following functions can be used to temporarily switch to a different
// output mode for a given result.
alg x = put tmsave (get tmmode) $$ algebraic $$ x;
symb x = put tmsave (get tmmode) $$ symbolic $$ x;
verb x = put tmsave (get tmmode) $$ verbatim $$ x;
mth x = alg x;
__texmacs__ x = res when
  save = get tmsave; put tmsave ();
  res = if get tmmode then tmprint x else str x;
  put tmmode save;
end if intp (get tmsave);

// Pretty-printing routine for Pure's --texmacs mode.
__texmacs__ x = tmprint x if get tmmode;

#! --if tmmath
math;
#! --endif

// Custom command to change the cwd of the interpreter to the current document
// directory, as reported by TeXmacs. Note that this only sends the
// corresponding request to TeXmacs, the actual processing of the TeXmacs
// reply is done by the interpreter.
namespace __cmd__;
cdd _ = () when
  printf_s "%s" "\002command:(pure-cdd)\005";
  fflush NULL;
end;
namespace;
