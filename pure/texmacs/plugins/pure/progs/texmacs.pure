
/* texmacs support module 2012-10-18 Albert Graef <Dr.Graef@t-online.de>. */

/* Copyright (c) 2012 Albert Graef

   Copying and distribution of this file, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  This file is offered as-is,
   without any warranty. */

/* Some auxiliary definitions for use with Pure in TeXmacs. This gets loaded
   automatically if you run the Pure scripting plugin (Document|Scripts|Pure).
   Inside a Pure session, you can invoke this module with `using texmacs;`. */

// Convenience functions for setting Reduce flags.
namespace reduce with public switch; end;
on  flag::string = reduce::switch flag 1;
off flag::string = reduce::switch flag 0;
on  flag::symbol = on (str flag);
off flag::symbol = off (str flag);

// Additional operators commonly used in TeXmacs (cf. pure-input.scm).
infixl (+) oplus ominus pm mp cup uplus;
infixl (*) otimes oslash div cap;

// Sum and product (used by the big operators in TeXmacs).
sum xs::list = foldl (+) 0 xs;
prod xs::list = foldl (*) 1 xs;

/* Convenience macros to simplify expressions using Reduce. To make this work,
   you'll also have to import the reduce module. This isn't done here by
   default so that this module also works without having the pure-reduce
   package installed. */

/* ? passes the argument as a quoted expression, while ?: evaluates its
   argument. Thus ?x and ?: are just the same as simplifyd ('x) and simplifyd
   x, respectively, but they require much less typing. Also, these operators
   are at the lowest possible precendence so that their arguments don't have
   to be parenthesized (OTOH applications of ? and ?: must be parenthesized
   when used in any larger context). */

prefix 0 ? ?: ;
public simplifyd;
def ? x = simplifyd ('x);
def ?:x = simplifyd x;

// Also make these available as functions, but note that in this case ? looses
// the call-by-name argument passing.
? x = ? x;
?:x = ?:x;

/* LaTeX pretty-printing using the tmprint package of Reduce. Thanks are due
   to Kurt Pagani who figured out most of the necessary Lisp magic to make
   this work. You enable this with a call to the parameterless `math`
   function; `verbatim` switches back to program mode again. This also starts
   up Reduce in a lazy fashion when `math` is invoked, so that we avoid
   depending on the pure-reduce package. Note, however, that pure-reduce *is*
   required to make the pretty-printing work. */

// Enable this pragma to enable math mode by default.
//#! --enable tmmath
#! --ifndef tmmath
#! --disable tmmath
#! --endif

let tminit, tmmode = ref false, ref false;

public lisp lispval lispsym;
namespace reduce with
public capture output load pure_syms tmvalid tmpost;
end;

tmstart = () when
  put tminit true;
  // Lazy loading of the reduce module.
  eval "using reduce;";
  // This module is needed for the TeXmacs pretty-printing. It is pretty noisy
  // during startup, so capture its output.
  reduce::capture 1;
  reduce::load "tmprint";
  reduce::capture 0;
end if ~get tminit;

/* NOTE: This recursively descends into the (already simplified) term to see
   whether it's actually printable. tmprint chokes on strings (wants them to
   be symbols) and of course doesn't know about C pointers, Pure closures and
   the like, so we exclude them here, also any operator symbols which are not
   in the reduce::pure_syms table or valid Reduce identifiers. */

/* If the following compile time option is enabled, subterms will be tried
   again by the pretty-printer if the check fails on the parent term. This
   comes at a cost (pretty-printing will become progressively slower as the
   terms get larger), but normally this shouldn't be much of a problem and we
   recommend to leave this enabled so that as much of the term is rendered in
   latex mode as possible. */

//#! --disable recurse

tmprint x = s when
  tmstart;
  x = lispval x;
  lisp (lispsym "fancy-output" (''maprin) ('aeval ('x)));
  reduce::capture 1;
  lisp (lispsym "fancy-flush");
  reduce::capture 0;
  s = reduce::output;
  // There's still have some postprocessing to do...
  s = reduce::tmpost s;
end if printable x when
  // If the original expression doesn't look printable then we give up
  // immediately.
  x = if printable x then simplifyd x else "no";
end with
  printable x::number = true;
  printable [] = true;
  printable (x:xs) = printable x && ~thunkp xs && printable xs;
  printable x::matrix = all printable x;
  printable (x@_ y::tuple) = printable x && all printable (list y);
  printable (x@_ y::list) = false;
  printable (x@_ y) = printable x && printable y;
  printable x::symbol = x ~== (..) && x ~== '(..) &&
    member reduce::pure_syms x || reduce::tmvalid (str x);
  printable _ = false;
end;
#! --ifnot recurse
tmprint x = str x;
#! --endif

// Switch between math and verbatim output.
math = tmstart $$ put tmmode true $$ ();
verbatim = put tmmode false $$ ();

// Pretty-printing routine for Pure's --texmacs mode.
__texmacs__ x = tmprint x if get tmmode;

#! --if tmmath
math;
#! --endif
