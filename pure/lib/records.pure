
/* records.pure: A simple record data structure. */

/* Copyright (c) 2008, 2009 by Albert Graef <Dr.Graef@t-online.de>.

   This file is part of the Pure standard library.

   The Pure standard library is free software: you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   Pure is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
   more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

/* ..

   Record Functions
   ----------------

   As of Pure 0.41, the prelude also provides a basic record data structure,
   implemented as symbolic vectors of ``key=>value`` pairs which support a few
   dictionary-like operations such as ``member``, ``insert`` and indexing.
   Records may be represented as row, column or empty vectors (i.e., the
   number of rows or columns must be zero or one). They must be symbolic
   matrices consisting only of "hash pairs" ``key=>value``, where the keys can
   be either symbols or strings.

   The following operations are provided. Please note that all updates of
   record members are non-destructive and thus involve copying, which might be
   slow for large record values. If this is a problem then you should use
   dictionaries instead, cf. Dictionaries_.


   .. recordp:

   ``recordp x``
     Check for record values.

   .. _member (record):

   ``member x y``
     Check whether ``x`` contains the key ``y``.

   .. _insert (record):
   .. _update (record):

   ``insert x (y=>z)``, ``update x y z``
     Associate the key ``y`` with the value ``z`` in ``x``. If ``x`` already
     contains the key ``y`` then the corresponding value is updated, otherwise
     a new member is inserted at the end of the record.

   .. _delete (record):

   ``delete x y``
     Delete the key ``y`` (and its associated value) from ``x``.

   .. _Record Data: pure.html#record-data

   Examples can be found in the `Record Data`_ section in the Pure Manual. */

/* These are implemented in the runtime for better performance. */

namespace __C;
extern bool record_check(expr *x);
extern bool record_member(expr *x, expr *y);
extern expr* record_elem_at(expr *x, expr *y);
extern expr* record_update(expr *x, expr *y, expr *z);
extern expr* record_delete(expr *x, expr *y);
record_elem_at x y = throw out_of_bounds;
namespace;

/* Type check. */

recordp x = __C::record_check x;

/* Membership test, indexing and non-destructive updates. */

member x::matrix y	= __C::record_member x y if recordp x;
x::matrix!y		= __C::record_elem_at x y if recordp x;
insert x::matrix (y=>z)	= __C::record_update x y z if recordp x;
update x::matrix y z	= __C::record_update x y z if recordp x;
delete x::matrix y	= __C::record_delete x y if recordp x;

/* Keys and values of a record. */

keys x::matrix		= {u | u=>v = x} if recordp x;
vals x::matrix		= {v | u=>v = x} if recordp x;
