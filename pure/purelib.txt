.. We use docutils to produce the documentation. Docstrings are extracted
.. with pure-doc. Please see the pure-doc documentation for details.

.. This module is always the first in the library docs, so produce the
.. title here.

===================
Pure Library Manual
===================

.. Add all pertaining author and copyright information here.

:Author: Albert Gräf <Dr.Graef@t-online.de>
:Date: |date|

.. Add all global docutils declarations here.

.. role:: dfn(strong)
.. default-role:: dfn

.. |date| date::
.. |time| date:: %H:%M

.. |GPL| replace:: GNU General Public License
.. |FDL| replace:: GNU Free Documentation License
.. _FDL: http://www.gnu.org/copyleft/fdl.html
.. _GPL: http://www.gnu.org/copyleft/gpl.html

.. _Pure Manual: pure.html

Copyright (c) 2009 by Albert Gräf. This document is available under the
|FDL|_.

This manual describes the operations in the standard Pure library,
including the prelude and the other library modules which come bundled with
the interpreter.

There is a companion to this manual, the `Pure Manual`_ which describes the
Pure language and the operation of the Pure interpreter.

.. Table of contents, switch on section numbering.

.. contents::
.. sectnum::

Prelude
=======

The prelude defines the basic operations of the Pure language. This
includes the basic arithmetic and logical operations, string, list and
matrix functions, as well as the support operations required to implement
list and matrix comprehensions. (The string and matrix operations are in
separate modules string.pure and matrix.pure, the primitive arithmetic and
logical operations can be found in primitives.pure.)

The prelude also declares a signature of commonly used constant and
operator symbols. This comprises:

.. raw:: html

   <a name="failed_cond">

.. raw:: html

   <a name="failed_match">

.. raw:: html

   <a name="stack_fault">

.. raw:: html

   <a name="bad_matrix_value">

.. _failed_cond:
.. _failed_match:
.. _stack_fault:
.. _bad_matrix_value:

* The built-in exception values ``failed_cond`` (failed conditional in
  guard or if-then-else), ``failed_match`` (failed pattern match in lambda,
  ``case`` expression, etc.), ``stack_fault`` (not enough stack space,
  ``PURE_STACK`` limit exceeded) and ``bad_matrix_value x`` (error in
  matrix construction).

.. raw:: html

   <a name="bad_list_value">

.. raw:: html

   <a name="bad_tuple_value">

.. raw:: html

   <a name="out_of_bounds">

.. raw:: html

   <a name="malloc_error">

.. _bad_list_value:
.. _bad_tuple_value:
.. _out_of_bounds:
.. _malloc_error:

* Other predefined exceptions: ``bad_list_value x``, ``bad_tuple_value x``
  (which are thrown by some list and tuple operations when they fail to
  find an expected list or tuple value), ``out_of_bounds`` (which is thrown
  by the index operator ``!`` if a list, tuple or matrix index is out of
  bounds), and ``malloc_error`` which indicates a memory allocation error.

.. raw:: html

   <a name="true">

.. raw:: html

   <a name="false">

.. _true:
.. _false:

* The truth values ``true`` and ``false``. These are actually just integers
  in Pure, but sometimes it's convenient to refer to them using these
  symbolic constants. Note that if you also want to use these on the
  left-hand side of equations, you still have to declare them as
  ``nullary`` symbols yourself, using a declaration like: ``nullary false
  true;``

.. raw:: html

   <a name="operators">

.. _operators:

Here's the list of predefined operator symbols. Note that the parser will
automagically give unary minus the same precedence level as the
corresponding binary operator. Also note that the "mapsto" operator
a.k.a. "hash rocket" ``=>`` doesn't have a predefined meaning in Pure; the
prelude only implements the relations ``==`` and ``~=`` to check such "hash
pairs" ``x=>y`` for equality and inequality. The hash rocket is used in
several libraries, however, which usually employ it to denote some kind of
key-value associations. See, e.g., Dictionaries_ for an example.

::

  infixl  0   $$ ;                // sequence operator
  infixr  0   $ ;                 // right-associative application
  infixr  1   , ;                 // pair (tuple)
  infix   2   .. ;                // arithmetic sequences
  infix   2   => ;                // mapsto constructor
  infixr  2   || ;                // logical or (short-circuit)
  infixr  3   && ;                // logical and (short-circuit)
  prefix  3   ~ ;                 // logical negation
  infix   4   < > <= >= == ~= ;   // relations
  infix   4   === ~== ;           // syntactic equality
  infixr  4   : ;                 // list cons
  infix   5   +: <: ;             // complex numbers (cf. math.pure)
  infixl  5   << >> ;             // bit shifts
  infixl  6   + - or ;            // addition, bitwise or
  infixl  7   * / div mod and ;   // multiplication, bitwise and
  infixl  7   % ;                 // exact division (cf. math.pure)
  prefix  7   not ;               // bitwise not
  infixr  8   ^ ;                 // exponentiation
  prefix  8   # ;                 // size operator
  infixl  9   ! !! ;              // indexing, slicing
  infixr  9   . ;                 // function composition
  prefix  9   ' ;                 // quote
  postfix 9   & ;                 // thunk

..

Basic Combinators
-----------------

.. raw:: html

   <a name="combinators">

.. raw:: html

   <a name="$">

.. raw:: html

   <a name=".">

.. _combinators:
.. _$:
.. _.:

The most important function combinators are ``$`` (right-associative
application) and ``.`` (function composition), which are also defined as
macros so that saturated calls of these are eliminated automatically.
Examples::

  > foo $ bar 99;
  foo (bar 99)
  > (foo.bar) 99;
  foo (bar 99)

.. raw:: html

   <a name="id">

.. raw:: html

   <a name="cst">

.. _id:
.. _cst:

The customary identity and constant combinators from the combinatorial
calculus are also available, in Pure these are named ``id`` and ``cst``,
respectively::

  > map id (1..5);
  [1,2,3,4,5]
  > map (cst 0) (1..5);
  [0,0,0,0,0]

.. raw:: html

   <a name="void">

.. _void:

There's also a combinator ``void`` which is basically equivalent to ``cst
()``, but with the special twist that it is also defined as a macro
optimizing the case of "throwaway" list and matrix comprehensions. This is
useful if a comprehension is evaluated solely for its side effects. E.g.::

  > using system;
  > extern int rand();
  > foo = void [printf "%d\n" rand | _ = 1..3];
  > show foo
  foo = do (\_ -> printf "%d\n" rand) (1..3);
  > foo;
  1714636915
  1957747793
  424238335
  ()

Note that the above list comprehension is actually implemented using do_
(instead of map_, which would normally be the case), so that the
intermediate list value of the comprehension is never constructed. This is
described in more detail in section `Optimization Rules`_ of the Pure
Manual.

.. _Optimization Rules: pure.html#optimization-rules

..

In addition, Pure also provides the following combinators adopted from
Haskell:

.. raw:: html

   <a name="flip">

.. _flip:

* ``flip f`` swaps arguments of a binary function ``f``, e.g.::

    > map (flip (/) 2) (1..3);
    [0.5,1.0,1.5]

  This idiom is used much more frequently in Pure than in Haskell because
  Pure doesn't have Haskell's operator sections. Note, however, that the
  same effect can also be achieved with a lambda::

    > map (\x -> x/2) (1..3);
    [0.5,1.0,1.5]

.. raw:: html

   <a name="curry">

.. _curry:

* ``curry f`` turns a function ``f`` expecting a pair of values into a
  curried function of two arguments::

    > using system;
    > dowith (curry (printf "%d: %g\n")) (0..2) [0.0,2.718,3.14];
    0: 0
    1: 2.718
    2: 3.14
    ()

.. raw:: html

   <a name="uncurry">

.. _uncurry:

* Conversely, ``uncurry f`` turns a curried function ``f`` expecting two
  arguments into a function processing a single pair argument::

    > map (uncurry (*)) [(2,3),(4,5),(6,7)];
    [6,20,42]

.. raw:: html

   <a name="curry3">

.. raw:: html

   <a name="uncurry3">

.. _curry3:
.. _uncurry3:

* ``curry3`` and ``uncurry3`` work analogously, but are used to work with
  ternary functions.

.. raw:: html

   <a name="fix">

.. _fix:

* The (normal order) fixed point combinator ``fix`` allows you to create
  recursive anonymous functions. It takes another function ``f`` as its
  argument and applies ``f`` to ``fix f`` itself::

    > let fact = fix (\f n -> if n<=0 then 1 else n*f (n-1));
    > map fact (1..5);
    [1,2,6,24,120]

.. _Fixed point combinator: http://en.wikipedia.org/wiki/Fixed_point_combinator

  See `Fixed point combinator`_ for an explanation of how this magic
  works. Just like in Haskell, ``fix`` can be used to produce least fixed
  points of arbitrary functions. For instance::

    > fix (cst bar);
    bar
    > let xs = fix (\x -> 1:x);
    > xs;
    1:#<thunk 0x7fe537fe2f90>
    > xs!!(0..10);
    [1,1,1,1,1,1,1,1,1,1,1]

..

Lists and Tuples
----------------

.. raw:: html

   <a name="lists">

.. raw:: html

   <a name="tuples">

.. raw:: html

   <a name="list size">

.. raw:: html

   <a name="tuple size">

.. raw:: html

   <a name="null">

.. raw:: html

   <a name="reverse">

.. raw:: html

   <a name="#">

.. raw:: html

   <a name=":">

.. raw:: html

   <a name=",">

.. _lists:
.. _tuples:
.. _list size:
.. _tuple size:
.. _null:
.. _reverse:
.. _#:
.. _\::
.. _,:

The prelude defines the list and tuple constructors (``x:y``, ``x,y``), as
well as equality (``==``) and inequality (``~=``) on these structures. (The
latter compare two lists or tuples by recursively comparing their members,
so ``==`` must be defined on the list or tuple members if you want to use
these operations.) It also provides the predicate ``null x`` which tests
whether ``x`` is the empty list or tuple, the function ``reverse x`` which
reverses a list or tuple, and the operators ``#x`` (size of a list or
tuple), ``x!i`` (indexing), ``x!!is`` (slicing) and ``x+y`` (list
concatenation). Note that there isn't a separate operation for
concatenating tuples, since the pairing operator already does this::

  > (1,2,3),(10,9,8);
  1,2,3,10,9,8

This works because the ``(,)`` constructor is associative in Pure and will
always produce right-recursive pairs. This also implies that tuples are
always flat in Pure and can't be nested; if you need this, you should use
lists instead. Also note that the empty tuple ``()`` acts as a neutral
element with respect to ``(,)``::

  > (),(a,b,c);
  a,b,c
  > (a,b,c),();
  a,b,c

.. raw:: html

   <a name="list concatenation">

.. raw:: html

   <a name="+ (list)">

.. _list concatenation:
.. _+ (list):

Lists are the usual right-recursive aggregates, pretty much the same as in
Lisp or Prolog except that they use a Haskell-like syntax. In difference to
Haskell, list concatenation is denoted ``+``, and lists may contain an
arbitrary mixture of arguments, i.e., they are fully polymorphic::

  > 1:2:3:[];
  [1,2,3]
  > [1,2,3]+[u,v,w]+[3.14];
  [1,2,3,u,v,w,3.14]

Lists are `eager` in Pure by default, but they can also be made `lazy`, see
section `Lazy Evaluation and Streams`_ in the Pure Manual.

.. _Lazy Evaluation and Streams: pure.html#lazy-evaluation-and-streams

.. raw:: html

   <a name="arithmetic sequences">

.. raw:: html

   <a name="..">

.. _arithmetic sequences:
.. _..:

Arithmetic sequences can be constructed with the infix ``..`` operator::

  > 1..5;
  [1,2,3,4,5]
  > 1:3..11;
  [1,3,5,7,9,11]

Note that the Pure syntax differs from Haskell in that there are no
brackets around the construct and a step width is indicated by specifying
the first two elements as ``x:y`` instead of ``x,y``. Also, to specify
infinite sequences you have to use an infinite upper bound (``inf`` or
``-inf``)::

  > 1:3..inf;
  1:#<thunk 0x7f696cd2dbd8>
  > -1:-3..-inf;
  -1:#<thunk 0x7f696cd2fde8>

The lower bounds of an arithmetic sequence must always be finite.

.. raw:: html

   <a name="list">

.. raw:: html

   <a name="tuple">

.. _list:
.. _tuple:

You can convert between (finite) lists and tuples using the ``list`` and
``tuple`` operations::

  > tuple (1..5);
  1,2,3,4,5
  > list (a,b,c);
  [a,b,c]

The ``list`` function can also be used to turn a finite lazy list into an
eager one::

  > list $ take 10 (-1:-3..-inf);
  [-1,-3,-5,-7,-9,-11,-13,-15,-17,-19]

You can also achieve the same effect somewhat more conveniently by slicing
a finite part from a stream (see below)::

  > (-1:-3..-inf)!!(0..9);
  [-1,-3,-5,-7,-9,-11,-13,-15,-17,-19]

.. raw:: html

   <a name="stream">

.. _stream:

Conversely, it is also possible to convert a list to a stream::

  > stream (1..10);
  1:#<thunk 0x7fe537fe2b58>

This might appear a bit useless at first sight, since all elements of the
stream are in fact already known. However, this operation then allows you
to apply other functions to the list and have them evaluated in a lazy
fashion.

.. raw:: html

   <a name="list indexing">

.. raw:: html

   <a name="tuple indexing">

.. raw:: html

   <a name="!">

.. _list indexing:
.. _tuple indexing:
.. _!:

Indexing of lists and tuples is always zero-based (i.e., indices run from
``0`` to ``#x-1``), and an exception will be raised if the index is out of
bounds::

  > [1,2,3]!2;
  3
  > [1,2,3]!4;
  <stdin>, line 34: unhandled exception 'out_of_bounds' while evaluating
  '[1,2,3]!4'

.. raw:: html

   <a name="list slicing">

.. raw:: html

   <a name="tuple slicing">

.. raw:: html

   <a name="!!">

.. _list slicing:
.. _tuple slicing:
.. _!!:

The slicing operator ``!!`` takes a list or tuple and a list of indices and
returns the list or tuple of the corresponding elements, respectively.
Indices which are out of the valid range are silently ignored::

  > (1..5)!!(3..10);
  [4,5]
  > (1,2,3,4,5)!!(3..10);
  4,5

Indices can actually be specified in any order, so that you can retrieve
any permutation of the members, also with duplicates. E.g.::

  > (1..5)!![2,4,4,1];
  [3,5,5,2]

This is less efficient than the case of contiguous index ranges (which is
optimized so that it always works in linear time), because it requires
repeated traversals of the list for each index. For larger lists you should
hence use vectors or matrices instead, to avoid the quadratic complexity.

(The prelude actually implements the slicing operation in a fairly generic
way, so that it works with any kind of container data structure which
defines ``!`` in such a manner that it throws an exception when the index
is out of bounds. It also works with any kind of index container that
implements the catmap_ operation.)

..

List Functions
--------------

This mostly comes straight from the Q prelude which in turn was based on
the first edition of the Bird/Wadler book, and is very similar to what you
can find in the Haskell prelude. Some functions have slightly different
names, though, and of course everything is typed dynamically.

Common List Functions
~~~~~~~~~~~~~~~~~~~~~

.. raw:: html

   <a name="any">

.. _any:

``any p xs``
  tests whether the predicate ``p`` holds for any of the members of ``xs``

.. raw:: html

   <a name="all">

.. _all:

``all p xs``
  tests whether the predicate ``p`` holds for all of the members of ``xs``

.. raw:: html

   <a name="cat">

.. _cat:

``cat xs``
  concatenate a list of lists

.. raw:: html

   <a name="catmap">

.. _catmap:

``catmap f xs``
  convenience function which combines cat_ and map_; this is also used
  to implement list comprehensions

.. raw:: html

   <a name="do">

.. _do:

``do f xs``
  apply ``f`` to all members of ``xs``, like map_, but throw away all
  intermediate results and return ``()``

.. raw:: html

   <a name="drop">

.. _drop:

``drop n xs``
  remove ``n`` elements from the front of ``xs``

.. raw:: html

   <a name="dropwhile">

.. _dropwhile:

``dropwhile p xs``
  remove elements from the front of ``xs`` while the predicate ``p`` is
  satisfied

.. raw:: html

   <a name="filter">

.. _filter:

``filter p xs``
  return the list of all members of ``xs`` satisfying the predicate ``p``

.. raw:: html

   <a name="foldl">

.. _foldl:

``foldl f a xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  starting from the initial value ``a`` and working from the front of the
  list towards its end

.. raw:: html

   <a name="foldl1">

.. _foldl1:

``foldl1 f xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  starting from the value ``head xs`` and working from the front of the
  list towards its end; ``xs`` must be nonempty

.. raw:: html

   <a name="foldr">

.. _foldr:

``foldr f a xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  starting from the initial value ``a`` and working from the end of the
  list towards its front

.. raw:: html

   <a name="foldr1">

.. _foldr1:

``foldr1 f xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  starting from the value ``last xs`` and working from the end of the
  list towards its front; ``xs`` must be nonempty

.. raw:: html

   <a name="head">

.. _head:

``head xs``
  return the first element of ``xs``; ``xs`` must be nonempty

.. raw:: html

   <a name="index">

.. _index:

``index xs x``
  search for an occurrence of ``x`` in ``xs`` and return the index of the
  first occurrence, if any, ``-1`` otherwise

  Note: This uses equality (``==``) to decide whether a member of ``xs`` is
  an occurrence of ``x``, so ``==`` must have an appropriate definition on
  the list members.

.. raw:: html

   <a name="init">

.. _init:

``init xs``
  return all but the last element of ``xs``; ``xs`` must be nonempty

.. raw:: html

   <a name="last">

.. _last:

``last xs``
  return the last element of ``xs``; ``xs`` must be nonempty

.. raw:: html

   <a name="listmap">

.. _listmap:

``listmap f xs``
  convenience function which works like map_, but also deals with matrix
  and string arguments while ensuring that the result is always a list;
  this is primarily used to implement list comprehensions

.. raw:: html

   <a name="map">

.. _map:

``map f xs``
  apply ``f`` to each member of ``xs``

.. raw:: html

   <a name="scanl">

.. _scanl:

``scanl f a xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  as with ``foldl``, but return all intermediate results as a list

.. raw:: html

   <a name="scanl1">

.. _scanl1:

``scanl1 f xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  as with ``foldl1``, but return all intermediate results as a list

.. raw:: html

   <a name="scanr">

.. _scanr:

``scanr f a xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  as with ``foldr``, but return all intermediate results as a list

.. raw:: html

   <a name="scanr1">

.. _scanr1:

``scanr1 f xs``
  accumulate the binary function ``f`` over all members of ``xs``,
  as with ``foldr1``, but return all intermediate results as a list

.. raw:: html

   <a name="tail">

.. _tail:

``tail xs``
  return all but the first element of ``xs``; ``xs`` must be nonempty

.. raw:: html

   <a name="take">

.. _take:

``take n xs``
  take ``n`` elements from the front of ``xs``

.. raw:: html

   <a name="takewhile">

.. _takewhile:

``takewhile p xs``
  take elements from the front of ``xs`` while the predicate ``p`` is
  satisfied

..

List Generators
~~~~~~~~~~~~~~~

Some useful (infinite) list generators, as well as some finite (and eager)
variations of these. The latter work like a combination of ``take`` or
``takewhile`` and the former, but are implemented directly for better
efficiency.

.. raw:: html

   <a name="cycle">

.. _cycle:

``cycle xs``
  cycles through the elements of the nonempty list ``xs``, ad infinitum

.. raw:: html

   <a name="cyclen">

.. _cyclen:

``cyclen n xs``
  eager version of ``cycle``, returns the first ``n`` elements of
  ``cycle xs``

.. raw:: html

   <a name="iterate">

.. _iterate:

``iterate f x``
  returns the stream containing ``x``, ``f x``, ``f (f x)``, etc.,
  ad infinitum

.. raw:: html

   <a name="iteraten">

.. _iteraten:

``iteraten n f x``
  eager version of ``iterate``, returns the first ``n`` elements of
  ``iterate f x``

.. raw:: html

   <a name="iterwhile">

.. _iterwhile:

``iterwhile p f x``
  another eager version of ``iterate``, returns the list of all elements
  from the front of ``iterate f x`` for which the predicate ``p`` holds

.. raw:: html

   <a name="repeat">

.. _repeat:

``repeat x``
  returns an infinite stream of ``x``\ s

.. raw:: html

   <a name="repeatn">

.. _repeatn:

``repeatn n x``
  eager version of ``repeat``, returns a list with ``n`` ``x``\ s

..

Zip and Friends
~~~~~~~~~~~~~~~

.. raw:: html

   <a name="unzip">

.. _unzip:

``unzip xys``
  takes a list of pairs to a pair of lists of corresponding elements

.. raw:: html

   <a name="unzip3">

.. _unzip3:

``unzip3 xyzs``
  ``unzip`` with triples

.. raw:: html

   <a name="zip">

.. _zip:

``zip xs ys``
  return the list of corresponding pairs ``(x,y)`` where ``x`` runs
  through the elements of ``xs`` and ``y`` runs through the elements
  of ``y``

.. raw:: html

   <a name="zip3">

.. _zip3:

``zip3 xs ys zs``
  ``zip`` with three lists, returns a list of triples

.. raw:: html

   <a name="zipwith">

.. _zipwith:

``zipwith f xs ys``
  apply the binary function ``f`` to corresponding elements of ``xs``
  and ``ys``

.. raw:: html

   <a name="zipwith3">

.. _zipwith3:

``zipwith3 f xs ys zs``
  apply the ternary function ``f`` to corresponding elements of ``xs``,
  ``ys`` and ``zs``

Pure also has the following variations of ``zipwith``/``zipwith3`` which
throw away all intermediate results and return ``()``. That is, these work
like do_ but pull arguments from two or three lists, respectively:

.. raw:: html

   <a name="dowith">

.. _dowith:

``dowith f xs ys``
  apply the binary function ``f`` to corresponding elements of ``xs``
  and ``ys``, return ``()``

.. raw:: html

   <a name="dowith3">

.. _dowith3:

``dowith3 f xs ys zs``
  apply the ternary function ``f`` to corresponding elements of ``xs``,
  ``ys`` and ``zs``, return ``()``

..

String Functions
----------------

.. raw:: html

   <a name="strings">

.. _strings:

Pure strings are null-terminated character strings encoded in UTF-8, see
the `Pure Manual`_ for details. The prelude provides various operations on
strings, including a complete set of list-like operations, so that strings
can be used mostly as if they were lists, although they are really
implemented as C character arrays for reasons of efficiency.

Basic String Functions
~~~~~~~~~~~~~~~~~~~~~~

.. raw:: html

   <a name="string concatenation">

.. raw:: html

   <a name="string indexing">

.. raw:: html

   <a name="string slicing">

.. raw:: html

   <a name="+ (string)">

.. raw:: html

   <a name="! (string)">

.. raw:: html

   <a name="!! (string)">

.. _string concatenation:
.. _string indexing:
.. _string slicing:
.. _+ (string):
.. _! (string):
.. _!! (string):

Concatenation, indexing and slicing works just like with lists::

  > "abc"+"xyz";
  "abcxyz"
  > let s = "The quick brown fox jumps over the lazy dog.";
  > s!5;
  "u"
  > s!!(20..24);
  "jumps"

.. raw:: html

   <a name="string size">

.. raw:: html

   <a name="null (string)">

.. raw:: html

   <a name="# (string)">

.. _string size:
.. _null (string):
.. _# (string):

Checking for empty strings and determining the size of a string also works
as expected::

  > null "";
  1
  > null s;
  0
  > #s;
  44

You can search for the location of a substring in a string, and extract a
substring of a given length:

.. raw:: html

   <a name="index (string)">

.. _index (string):

``index s u``
  Returns the (zero-based) index of the first occurrence of the substring
  ``u`` in ``s``, or -1 if ``u`` is not found in ``s``.

.. raw:: html

   <a name="substr">

.. _substr:

``substr s i n``
  Extracts a substring of (at most) ``n`` characters at position ``i`` in
  ``s``. This takes care of all corner cases, adjusting index and number of
  characters so that the index range stays confined to the source string.

Example::

  > index s "jumps";
  20
  > substr s 20 10;
  "jumps over"

Note that Pure doesn't have a separate type for individual characters.
Instead, these are represented as strings ``c`` containing exactly one
(UTF-8) character (i.e., ``#c==1``). It is possible to convert such single
character strings to the corresponding integer character codes, and vice
versa:

.. raw:: html

   <a name="ord">

.. _ord:

``ord c``
  Ordinal number of a single character string ``c``. This is the
  character's code point in the Unicode character set.

.. raw:: html

   <a name="chr">

.. _chr:

``chr n``
  Converts an integer back to the character with the corresponding code
  point.

.. raw:: html

   <a name="character arithmetic">

.. _character arithmetic:

In addition, the usual character arithmetic works, including arithmetic
sequences of characters, so that you can write stuff like the following::

  > "a"-"A";
  32
  > "u"-32;
  "U"
  > "a".."k";
  ["a","b","c","d","e","f","g","h","i","j","k"]

Strings are also ordered lexicographically based on their character codes::

  > "awe">"awesome";
  0
  > "foo">="bar";
  1

For convenience, the prelude provides the following functions to convert
between strings and lists (or other aggregates) of characters.

.. raw:: html

   <a name="chars">

.. raw:: html

   <a name="list (string)">

.. _chars:
.. _list (string):

``chars s``, ``list s``
  Convert a string ``s`` to a list of characters.

.. raw:: html

   <a name="tuple (string)">

.. raw:: html

   <a name="matrix (string)">

.. _tuple (string):
.. _matrix (string):

``tuple s``, ``matrix s``
  Convert a string ``s`` to a tuple or (symbolic) matrix of characters,
  respectively.

.. raw:: html

   <a name="strcat">

.. _strcat:

``strcat xs``
  Concatenate a list ``xs`` of strings (in particular, this converts a
  list of characters back to a string).

.. raw:: html

   <a name="string">

.. _string:

``string xs``
  Convert a list, tuple or (symbolic) matrix of strings to a string.
  In the case of a list, this is synonymous with strcat_, but it also
  works with the other types of aggregates.

For instance::

  > list "abc";
  ["a","b","c"]
  > string ("a".."z");
  "abcdefghijklmnopqrstuvwxyz"

The following functions are provided to deal with strings of "tokens"
separated by a given delimiter string.

.. raw:: html

   <a name="split">

.. _split:

``split delim s``
  Splits ``s`` into a list of substrings delimited by ``delim``.

.. raw:: html

   <a name="join">

.. _join:

``join delim xs``
  Joins the list of strings ``xs`` to a single string, interpolating the
  given ``delim`` string.

Example::

  > let xs = split " " s; xs;
  ["The","quick","brown","fox","jumps","over","the","lazy","dog."]
  > join ":" xs;
  "The:quick:brown:fox:jumps:over:the:lazy:dog."

We mention in passing here that more elaborate string matching, splitting
and replacement operations based on regular expressions are provided by the
system module, see `System Interface`_.

If that isn't enough already, most generic list operations carry over to
strings in the obvious way, treating the string like a list of
characters. For instance::

  > filter (\x->x>="k") s;
  "qukrownoxumpsovrtlzyo"
  > map pred ["i","b","m"];
  ["h","a","l"]

This also provides for list comprehensions drawing values from strings::

  > string [x+1 | x="HAL"];
  "IBM"

Eval and Friends
~~~~~~~~~~~~~~~~

Pure provides some rather powerful operations to convert between Pure
expressions and their string representation. This is useful for
metaprogramming purposes. It also provides a convenient means to serialize
Pure expressions, e.g., when they are transferred from/to persistant
storage or transmitted over a socket. (Note, however, that this has its
limitations. Specifically, some objects like pointers and local or
anonymous functions do not have a parseable string representation.)

.. raw:: html

   <a name="str">

.. _str:

``str x``
  Yields the print representation of an expression in Pure syntax, as a
  string.

.. raw:: html

   <a name="eval">

.. _eval:

``eval x``
  Parses an expression, specified as a string in Pure syntax, and returns
  its value. In fact, ``eval`` can also parse and execute arbitrary Pure
  code. In that case it will return the last computed expression, if any.

  Alternatively, ``eval`` can also be invoked on a (quoted) Pure
  expression, which is recompiled and then evaluated. (If the expression
  cannot be compiled for some reason then ``eval`` just returns it as
  is. Also, exceptions during evaluation are reported back to the
  caller.)

.. raw:: html

   <a name="evalcmd">

.. _evalcmd:

``evalcmd x``
  Like eval_, but allows execution of interactive commands and returns
  their captured output as a string. No other results are returned, so this
  operation is most useful for executing Pure definitions and interactive
  commands for their side-effects. (At this time, only the regular output
  of a few commands can be captured, most notably ``clear``, ``save`` and
  ``show``; otherwise the result string will be empty.)

.. raw:: html

   <a name="lasterr">

.. _lasterr:

``lasterr``
  Reports errors in eval_ and evalcmd_. This string value will be nonempty
  iff a compilation or execution error was encountered during the most
  recent invokation of ``eval`` and ``evalcmd``. In that case each reported
  error message is terminated with a newline character.

.. raw:: html

   <a name="ans">

.. _ans:

``ans``
  Retrieves the most recently printed result of a toplevel expression
  evaluated in interactive mode. This is not affected by the use of
  ``eval`` or ``evalcmd`` in any way, it is just a convenience for
  interactive usage. Also note that the ``ans`` value will stick around
  until a new expression is computed.

Examples::

  > str (1/3);
  "0.333333333333333"
  > eval "1/3";
  0.333333333333333
  > eval ('(1/3));
  0.333333333333333
  > evalcmd "show evalcmd";
  "extern expr* evalcmd(expr*);\n"

  > eval "1/3)";
  eval "1/3)"
  > lasterr;
  "<stdin>, line 1: syntax error, unexpected ')', expecting '=' or '|'\n"

  > 1/3;
  0.333333333333333
  > ans/2;
  0.166666666666667

..

Low-Level Operations
~~~~~~~~~~~~~~~~~~~~

The following routines are provided by the runtime to turn raw C ``char*``
pointers (also called `byte strings` in Pure parlance, to distinguish them
from Pure's "cooked" UTF-8 string values) into corresponding Pure
strings. Normally you don't have to worry about this, because the C
interface already takes care of the necessary marshalling, but in some
low-level code these operations are useful. Also note that here and in the
following, the ``cstring`` routines also convert the string between the
system encoding and Pure's internal UTF-8 representation.

.. raw:: html

   <a name="string (pointer)">

.. raw:: html

   <a name="cstring">

.. _string (pointer):
.. _cstring:

``string s``, ``cstring s``
  Convert a pointer ``s`` to a Pure string. ``s`` must point to a
  null-terminated C string. These routines take ownership of the original
  string value, assuming it to be ``malloc``\ ed, so you should only use
  these for C strings which are specifically intended to be freed by the
  user.

.. raw:: html

   <a name="string_dup">

.. raw:: html

   <a name="cstring_dup">

.. _string_dup:
.. _cstring_dup:

``string_dup s``, ``cstring_dup s``
  Convert a pointer ``s`` to a Pure string. Like above, but these functions
  take a copy of the string, leaving the original C string untouched.

..

The reverse transformations are also provided. These take a Pure string to
a byte string (raw ``char*``).

.. raw:: html

   <a name="byte_string">

.. raw:: html

   <a name="byte_cstring">

.. _byte_string:
.. _byte_cstring:

``byte_string s``, ``byte_cstring s``
  Construct a byte string from a Pure string ``s``. The result is a raw
  pointer object pointing to the converted string. The original Pure string
  is always copied (and, in the case of ``byte_cstring``, converted to the
  system encoding). The resulting byte string is a ``malloc``\ ed pointer
  which can be used like a C ``char*``, and has to be freed explicitly by
  the caller when no longer needed.

..

Finally, it is also possible to convert Pure string lists to byte string
vectors and vice versa. These are useful if you need to pass an
``argv``-like string vector (i.e., a ``char**`` or ``char*[]``) to C
routines. The computed C vectors are ``malloc``\ ed pointers which have an
extra ``NULL`` pointer as the last entry, and should thus be usable for
almost any purpose which requires such a string vector in C. They also take
care of garbage-collecting themselves. The original string data is always
copied. As usual, the ``cstring`` variants do automatic conversions to the
system encoding.

.. raw:: html

   <a name="byte_string_pointer">

.. raw:: html

   <a name="byte_cstring_pointer">

.. _byte_string_pointer:
.. _byte_cstring_pointer:

``byte_string_pointer xs``, ``byte_cstring_pointer xs``
  Convert a list of Pure strings to a C ``char**``.

.. raw:: html

   <a name="string_list">

.. raw:: html

   <a name="cstring_list">

.. _string_list:
.. _cstring_list:

``string_list n p``, ``cstring_list n p``
  Convert a C ``char**`` to a list of Pure strings.

Note that the back conversions take an additional first argument which
denotes the number of strings to retrieve. If you know that the vector is
``NULL``-terminated then this can also be an infinite value (``inf``) in
which case the number of elements will be figured out automatically.
Processing always stops at the first ``NULL`` pointer encountered.

..

Matrix Functions
----------------

Most of the generic list operations are implemented on matrices as well,
see `Common List Functions`_. Hence stuff like ``map`` and ``zipwith``
works as expected::

  > map succ {1,2,3;4,5,6};
  {2,3,4;5,6,7}
  > zipwith (+) {1,2,3;4,5,6} {1,0,1;0,2,0};
  {2,2,4;4,7,6}

The matrix module also provides a bunch of other specialized matrix
operations, including all the necessary operations for matrix
comprehensions. We briefly summarize the most important operations below;
please refer to matrix.pure for all the gory details.

Also make sure you check `Matrix Computations`_ in the Pure Manual for some
more examples.

.. _Matrix Computations: pure.html#matrix-computations

Matrix Dimension and Indexing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. raw:: html

   <a name="matrix size">

.. raw:: html

   <a name="matrix dimensions">

.. raw:: html

   <a name="# (matrix)">

.. raw:: html

   <a name="dim">

.. _matrix size:
.. _matrix dimensions:
.. _# (matrix):
.. _dim:

The size of a matrix (number of elements) can be obtained using ``#``, and
the ``dim`` function can be used to return its dimensions (number of rows
and columns)::

  > #{1,2,3;4,5,6};
  6
  > dim {1,2,3;4,5,6};
  2,3

.. raw:: html

   <a name="null (matrix)">

.. _null (matrix):

``null x`` can be used to check for empty matrices. Note that there are
various kinds of these, as a matrix may have zero rows or columns, or both.

Indexing and slicing works pretty much like in MATLAB and Octave, except
that you use the Pure operators ``!`` and ``!!`` for that. It is possible
to access elements with a one-dimensional index (in row-major oder)::

  > x!3;
  4

Or you can specify a pair of row and column index::

  > x!(1,0);
  4

Slicing works accordingly. You can either specify a list of (one- or
two-dimensional) indices, in which case the result is always a row vector::

  > x!!(2..5);
  {3,4,5,6}

Or you can specify a pair of row and column index lists::

  > x!!(0..1,1..2);
  {2,3;5,6}

The following abbreviations are provided to grab a slice from a row or
column::

  > x!!(1,1..2);
  {5,6}
  > x!!(0..1,1);
  {2;5}

Matrix Inspection and Manipulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``dmatrixp x``, ``cmatrixp x``, ``imatrixp x``, ``smatrixp x``, ``nmatrixp x``
  Check for different kinds of matrices (double, complex, int, symbolic and
  numeric, i.e., non-symbolic).

``vectorp x``, ``rowvectorp x``, ``colvectorp x``
  Check for different kinds of vectors (these are just matrices with one
  row or column).

.. raw:: html

   <a name="stride">

.. _stride:

``stride x``
  The stride of a matrix denotes the real row size of the underlying C
  array, see the description of the pack_ function below for further
  details. There's little use for this value in Pure, but it may be needed
  when interfacing to C.

.. raw:: html

   <a name="row">

.. raw:: html

   <a name="col">

.. _row:
.. _col:

``row x i``, ``col x i``
  Extract the ``i``\ th row or column of a matrix.

.. raw:: html

   <a name="rows">

.. raw:: html

   <a name="cols">

.. _rows:
.. _cols:

``rows x``, ``cols x``
  Return the list of all rows or columns of a matrix.

.. raw:: html

   <a name="list (matrix)">

.. raw:: html

   <a name="list2 (matrix)">

.. raw:: html

   <a name="tuple (matrix)">

.. raw:: html

   <a name="matrix">

.. _list (matrix):
.. _list2 (matrix):
.. _tuple (matrix):
.. _matrix:

``list x``, ``list2 x``, ``tuple x``, ``matrix xs``
  Convert a matrix to a list or tuple, and vice versa. ``list x`` converts
  a matrix ``x`` to a flat list of its elements, while ``list2`` converts
  it to a list of lists. Likewise, ``tuple x`` converts the matrix ``x`` to
  a tuple. Conversely, ``matrix xs`` converts a list or tuple to a
  corresponding matrix.

  Note that ``matrix`` turns a list of lists or matrices specifying the
  rows of the matrix to the corresponding rectangular matrix; otherwise,
  the result is a row vector. Also note that the matrix function may throw
  a ``bad_matrix_value x`` in case of dimension mismatch, where ``x``
  denotes the offending submatrix.

.. raw:: html

   <a name="diag">

.. raw:: html

   <a name="subdiag">

.. raw:: html

   <a name="supdiag">

.. _diag:
.. _subdiag:
.. _supdiag:

``diag x``, ``subdiag x k``, ``supdiag x k``:
  Extract (sub-,super-) diagonals from a matrix. Sub- and super-diagonals
  for ``k=0`` return the main diagonal. Indices for sub- and
  super-diagonals can also be negative, in which case the corresponding
  super- or sub-diagonal is returned instead. In each case the result is a
  row vector.

.. raw:: html

   <a name="submat">

.. _submat:

``submat x (i,j) (n,m)``
  Extract a submatrix of a given size at a given offset. The result shares
  the underlying storage with the input matrix (i.e., matrix elements are
  *not* copied) and so this is a comparatively cheap operation.

.. raw:: html

   <a name="rowcat">

.. raw:: html

   <a name="colcat">

.. _rowcat:
.. _colcat:

``rowcat xs``, ``colcat xs``
  Construct matrices from lists of rows and columns. These take either
  scalars or submatrices as inputs; corresponding dimensions must match.
  ``rowcat`` combines submatrices vertically, like ``{x;y}``; ``colcat``
  combines them horizontally, like ``{x,y}``. Note: Like the built-in
  matrix constructs, these operations may throw a ``bad_matrix_value x``
  exception in case of dimension mismatch, where ``x`` denotes the
  offending submatrix.

.. raw:: html

   <a name="matcat">

.. _matcat:

``matcat xs``
  Construct a matrix from a (symbolic) matrix of other matrices and/or
  scalars. This works like a combination of ``rowcat`` and colcat, but
  draws its input from a matrix instead of a list of matrices, and
  preserves the overall layout of the "host" matrix. The net effect is that
  the host matrix is flattened out. If all elements of the input matrix are
  scalars already, the input matrix is returned unchanged.

.. raw:: html

   <a name="rowcatmap">

.. raw:: html

   <a name="colcatmap">

.. _rowcatmap:
.. _colcatmap:

``rowcatmap f xs``, ``colcatmap f xs``
  Combinations of rowcat_, colcat_ and map_. These are used, in particular,
  for implementing matrix comprehensions.

..

``dmatrix (n,m)``, ``cmatrix (n,m)``, ``imatrix (n,m)``
  Convenience functions to create zero matrices with the given dimensions
  (either a pair denoting the number of rows and columns, or just the row
  size in order to create a row vector).

.. raw:: html

   <a name="diagmat">

.. raw:: html

   <a name="subdiagmat">

.. raw:: html

   <a name="supdiagmat">

.. _diagmat:
.. _subdiagmat:
.. _supdiagmat:

``diagmat x``, ``subdiagmat x k``, ``supdiagmat x k``
  Create a (sub-,super-) diagonal matrix from a row vector ``x`` of size
  ``n``. The result is always a square matrix with dimension ``(n+k,n+k)``,
  which is of the same matrix type (double, complex, int, symbolic) as the
  input and has the elements of the vector on its ``k``\ th sub- or
  super-diagonal, with all other elements zero. A negative value for ``k``
  turns a sub- into a super-diagonal matrix and vice versa.

.. raw:: html

   <a name="dmatrix">

.. raw:: html

   <a name="cmatrix">

.. raw:: html

   <a name="imatrix">

.. raw:: html

   <a name="smatrix">

.. _dmatrix:
.. _cmatrix:
.. _imatrix:
.. _smatrix:

``dmatrix x``, ``cmatrix x``, ``imatrix x``, ``smatrix x``
  Matrix conversions. These convert between different types of numeric and
  symbolic matrices. The same operations also convert a list directly to a
  row vector; this is usually much faster than the generic matrix_
  operation, but requires that the elements already are of the appropriate
  type.

.. raw:: html

   <a name="re (matrix)">

.. raw:: html

   <a name="im (matrix)">

.. raw:: html

   <a name="conj (matrix)">

.. _re (matrix):
.. _im (matrix):
.. _conj (matrix):

``re x``, ``im x``, ``conj x``
  Extract the real and imaginary parts and compute the conjugate of a
  numeric matrix.

.. raw:: html

   <a name="pack">

.. raw:: html

   <a name="packed">

.. _pack:
.. _packed:

``pack x``, ``packed x``
  Pack a matrix. This creates a copy of the matrix which has the data in
  contiguous storage. It also frees up extra memory if the matrix was
  created as a slice from a bigger matrix (see submat_ above) which has
  since gone the way of the dodo.

  The ``packed`` predicate can be used to verify whether a matrix is
  already packed. Note that even if a matrix is already packed, ``pack``
  will make a copy of it anyway, so this routine also provides a quick way
  to copy a matrix, e.g., if you want to pass it as an input/output
  parameter to a GSL routine.

.. raw:: html

   <a name="redim">

.. _redim:

``redim (n,m) x``, ``redim n x``
  Change the dimensions of a matrix without changing its size. The total
  number of elements must match that of the input matrix. Reuses the
  underlying storage of the input matrix if possible (i.e., if the matrix
  is packed_).

  You can also redim a matrix to a given row size ``n``. In this case the
  row size must divide the total size of the matrix.

.. raw:: html

   <a name="rowvector">

.. raw:: html

   <a name="colvector">

.. _rowvector:
.. _colvector:

``rowvector x``, ``colvector x``
  Convenience functions to convert a matrix to a row or column vector.

.. raw:: html

   <a name="transpose (matrix)">

.. _transpose (matrix):

``transpose x``
  Transpose a matrix. Example::

    > transpose {1,2,3;4,5,6};
    {1,4;2,5;3,6}

.. raw:: html

   <a name="rowrev">

.. raw:: html

   <a name="colrev">

.. raw:: html

   <a name="reverse (matrix)">

.. _rowrev:
.. _colrev:
.. _reverse (matrix):

``rowrev x``, ``colrev x``, ``reverse x``
  Reverse a matrix. ``rowrev`` reverses the rows, ``colrev`` the columns,
  ``reverse`` both dimensions.

..

Pointers and Matrices
~~~~~~~~~~~~~~~~~~~~~

The matrix module offers a bunch of low-level operations for converting
between matrices and raw pointers. These are typically used to shovel
around massive amounts of numeric data between Pure and external C
routines, when performance and throughput is an important consideration
(e.g., graphics, video and audio applications). The usual caveats apply.

.. raw:: html

   <a name="pointer (matrix)">

.. _pointer (matrix):

``pointer x``
  Get a pointer to the underlying C array of a matrix. The data is *not*
  copied. Hence you have to be careful when passing such a pointer to C
  functions if the underlying data is non-contiguous; when in doubt, first
  use the pack_ function to place the data in contiguous storage, or use
  one of the matrix-pointer conversion routines below.

.. raw:: html

   <a name="double_pointer">

.. raw:: html

   <a name="float_pointer">

.. raw:: html

   <a name="complex_pointer">

.. raw:: html

   <a name="complex_float_pointer">

.. raw:: html

   <a name="int_pointer">

.. raw:: html

   <a name="short_pointer">

.. raw:: html

   <a name="byte_pointer">

.. _double_pointer:
.. _float_pointer:
.. _complex_pointer:
.. _complex_float_pointer:
.. _int_pointer:
.. _short_pointer:
.. _byte_pointer:

The following operations copy the contents of a matrix to a given pointer
and return that pointer, converting to the target data type on the fly if
necessary. The given pointer may also be ``NULL``, in which case suitable
memory is malloced and returned; otherwise the caller must ensure that the
memory pointed to by ``p`` is big enough for the contents of the given
matrix.

* ``double_pointer p x``
* ``float_pointer p x``
* ``complex_pointer p x``
* ``complex_float_pointer p x``
* ``int_pointer p x``
* ``short_pointer p x``
* ``byte_pointer p x``

.. raw:: html

   <a name="double_matrix">

.. raw:: html

   <a name="float_matrix">

.. raw:: html

   <a name="complex_matrix">

.. raw:: html

   <a name="complex_float_matrix">

.. raw:: html

   <a name="int_matrix">

.. raw:: html

   <a name="short_matrix">

.. raw:: html

   <a name="byte_matrix">

.. _double_matrix:
.. _float_matrix:
.. _complex_matrix:
.. _complex_float_matrix:
.. _int_matrix:
.. _short_matrix:
.. _byte_matrix:

Conversely, the following functions allow you to create a numeric matrix
from a pointer, copying the data and converting it from the source type on
the fly if necessary. The source pointer ``p`` may also be ``NULL``, in
which case the new matrix is filled with zeros instead.  Otherwise the
caller must ensure that the pointer points to properly initialized memory
big enough for the requested dimensions. The given dimension may also be
just an integer ``n`` if a row vector is to be created.

* ``double_matrix (n,m) p``
* ``float_matrix (n,m) p``
* ``complex_matrix (n,m) p``
* ``complex_float_matrix (n,m) p``
* ``int_matrix (n,m) p``
* ``short_matrix (n,m) p``
* ``byte_matrix (n,m) p``

.. raw:: html

   <a name="double_matrix_view">

.. raw:: html

   <a name="complex_matrix_view">

.. raw:: html

   <a name="int_matrix_view">

.. _double_matrix_view:
.. _complex_matrix_view:
.. _int_matrix_view:

Finally, you can use the following operations to create a numeric matrix
view of existing data, without copying the data. The data must be double,
complex or int, the pointer must not be ``NULL`` and the caller must also
ensure that the memory persists for the entire lifetime of the matrix
object. The given dimension may also be just an integer ``n`` if a row
vector view is to be created.

* ``double_matrix_view (n,m) p``
* ``complex_matrix_view (n,m) p``
* ``int_matrix_view (n,m) p``

..

Primitives
----------

This prelude module is a collection of various lowlevel operations, which
are implemented either directly by machine instructions or by C functions
provided in the runtime. In particular, this module defines the basic
arithmetic and logic operations on machine integers, bigints and floating
point numbers, as well as various type checking predicates and conversions
between different types. Some low-level pointer operations are also
provided, as well as "sentries" (Pure's flavour of object finalizers) and
"references" (mutable expression pointers).

Arithmetic
~~~~~~~~~~

The basic arithmetic and logic operations provided by this module are
summarized in the following table:

.. raw:: html

   <a name="+">

.. raw:: html

   <a name="-">

.. raw:: html

   <a name="*">

.. raw:: html

   <a name="/">

.. raw:: html

   <a name="div">

.. raw:: html

   <a name="mod">

.. raw:: html

   <a name="^">

.. raw:: html

   <a name="==">

.. raw:: html

   <a name="~=">

.. raw:: html

   <a name="<">

.. raw:: html

   <a name=">">

.. raw:: html

   <a name="<=">

.. raw:: html

   <a name=">=">

.. raw:: html

   <a name="~">

.. raw:: html

   <a name="&&">

.. raw:: html

   <a name="||">

.. raw:: html

   <a name="not">

.. raw:: html

   <a name="and">

.. raw:: html

   <a name="or">

.. raw:: html

   <a name="<<">

.. raw:: html

   <a name=">>">

.. _+:
.. _-:
.. _*:
.. _/:
.. _div:
.. _mod:
.. _^:
.. _==:
.. _~=:
.. _<:
.. _>:
.. _<=:
.. _>=:
.. _~:
.. _&&:
.. _||:
.. _not:
.. _and:
.. _or:
.. _<<:
.. _>>:

===========  ===============  =========================================
Kind         Operator         Meaning
===========  ===============  =========================================
Arithmetic   ``+`` ``-``      addition, subtraction (also unary minus),
             ``*`` ``/``      multiplication, division (inexact),
             ``div`` ``mod``  exact int/bigint division/modulus,
             ``^``            exponentiation (inexact)
Comparisons  ``==`` ``~=``    equality, inequality,
             ``<`` ``>``      less than, greater than,
             ``<=`` ``>=``    less than or equal, greater than or equal
Logic        ``~``            logical not,
             ``&&`` ``||``    and, or (short-circuit)
Bitwise      ``not``          bitwise not,
             ``and`` ``or``   and, or,
             ``<<`` ``>>``    bit shifts
===========  ===============  =========================================

Precedence and and associativity of the operators can be found in the
operators_ table at the beginning of this section.

The names of some operations are at odds with C. Note, in particular, that
logical negation is denoted ``~`` instead of ``!`` (and, consequently,
``~=`` denotes inequality, rather than ``!=``), and the bitwise operations
are named differently. This is necessary because Pure uses ``!``, ``&`` and
``|`` for other purposes. Also, ``/`` always denotes inexact (double)
division in Pure, whereas the integer division operators are called ``div``
and ``mod``. (``%``, which is not defined by this module, also has a
different meaning in Pure; it's the exact division operator, see `Rational
Numbers`_.)

The above operations are implemented for int, bigint and, where
appropriate, double and pointer operands. (Pointer arithmetic comprises
``+`` and ``-`` and works in the usual way, i.e., ``p-q`` returns the byte
offset between two pointers ``p`` and ``q``, and ``p+n`` or ``p-n`` offsets
a pointer ``p`` by the given integer ``n`` denoting the amount of bytes.) 
The math module (see `Mathematical Functions`_) also provides
implementations of the arithmetic and comparison operators for rational,
complex and complex rational numbers.

Note that the logical operations are actually implemented as special forms
in order to provide for short-circuit evaluation. This needs special
support from the compiler to work. The primitives module still provides
definitions for these, as well as other special forms like ``quote`` and
the thunking operator ``&`` so that they may be used as function values and
in partial applications, but when used in this manner they lose all their
special call-by-name properties; see `Special Forms`_ in the Pure Manual
for details.

The constants ``inf`` and ``nan`` are defined as the usual IEEE floating
point infinities and NaNs, and the predicates ``infp`` and ``nanp`` are
provided to check for these kinds of values.

In addition, the following arithmetic and numeric functions are provided:

.. raw:: html

   <a name="abs">

.. raw:: html

   <a name="sgn">

.. _abs:
.. _sgn:

``abs x``, ``sgn x``
  Absolute value and sign of a number.

.. raw:: html

   <a name="min">

.. raw:: html

   <a name="max">

.. _min:
.. _max:

``min x y``, ``max x y``
  Minimum and maximum of two values. This works with any kind of values
  which have the ordering relations defined on them.

.. raw:: html

   <a name="succ">

.. raw:: html

   <a name="pred">

.. _succ:
.. _pred:

``succ x``, ``pred x``
  Successor (``+1``) and predecessor (``-1``) functions.

.. raw:: html

   <a name="gcd">

.. raw:: html

   <a name="lcd">

.. _gcd:
.. _lcd:

``gcd x y``, ``lcd x y``
  The greatest common divisor and least common multiple functions from the
  GMP library. These return a bigint if at least one of the arguments is a
  bigint, a machine int otherwise.

.. raw:: html

   <a name="pow">

.. _pow:

``pow x y``
  Computes exact powers of ints and bigints. The result is always a
  bigint. Note that ``y`` must always be nonnegative here, but see the math
  module (`Mathematical Functions`_) which deals with the case ``y<0``
  using rational numbers.

Conversions
~~~~~~~~~~~

These operations convert between various types of Pure values.

.. raw:: html

   <a name="hash">

.. _hash:

``hash x``
  Compute a 32 bit hash code of a Pure expression.

.. raw:: html

   <a name="int">

.. raw:: html

   <a name="bigint">

.. raw:: html

   <a name="double">

.. raw:: html

   <a name="pointer">

.. _int:
.. _bigint:
.. _double:
.. _pointer:

``int x``, ``bigint x``, ``double x``, ``pointer x``
  Conversions between the different numeric and pointer types.

.. raw:: html

   <a name="ubyte">

.. raw:: html

   <a name="ushort">

.. raw:: html

   <a name="uint">

.. raw:: html

   <a name="uint64">

.. raw:: html

   <a name="ulong">

.. _ubyte:
.. _ushort:
.. _uint:
.. _uint64:
.. _ulong:

``ubyte x``, ``ushort x``, ``uint x``, ``uint64 x``, ``ulong x``
  Convert signed (8/16/32/64) bit integers to the corresponding unsigned
  quantities. These functions behave as if the value was "cast" to the
  corresponding unsigned C type, and are most useful for dealing with
  unsigned integers returned by external C routines. The routines always
  use the smallest Pure int type capable of holding the result: ``int`` for
  ``ubyte`` and ``ushort``, ``bigint`` for ``uint``, ``uint64`` and
  ``ulong``. All routines take int parameters. In the case of ``uint64``, a
  bigint parameter is also permitted (which is what the C interface returns
  for 64 bit values). Also note that ``ulong`` reduces to either ``uint``
  or ``uint64``, depending on the size of ``long`` for the host
  architecture.

The following _`rounding functions` work with all kinds of numbers:

.. raw:: html

   <a name="floor">

.. raw:: html

   <a name="ceil">

.. _floor:
.. _ceil:

``floor x``, ``ceil x``
  Floor and ceil.

.. raw:: html

   <a name="round">

.. raw:: html

   <a name="trunc">

.. _round:
.. _trunc:

``round x``, ``trunc x``
  Round or truncate to an integer.

.. raw:: html

   <a name="frac">

.. _frac:

``frac x``
  Fractional part (``x-trunc x``).

Predicates
~~~~~~~~~~

A syntactic equality test is provided, as well as various type checking
predicates.

.. raw:: html

   <a name="same">

.. raw:: html

   <a name="===">

.. raw:: html

   <a name="~==">

.. _same:
.. _===:
.. _~==:

``x===y``, ``x~==y``, ``same x y``
  Syntactic equality. In difference to ``==`` and ``~=`` this is defined on
  all Pure expressions. Basically, two expressions are syntactically equal
  if they print out the same in the interpreter. In the special case of
  pointer objects and closures, which do not have a syntactic
  representation in Pure, ``x`` and ``y`` must be the same object (same
  pointer value or function).

.. raw:: html

   <a name="intp">

.. raw:: html

   <a name="bigintp">

.. raw:: html

   <a name="doublep">

.. raw:: html

   <a name="stringp">

.. raw:: html

   <a name="pointerp">

.. raw:: html

   <a name="matrixp">

.. _intp:
.. _bigintp:
.. _doublep:
.. _stringp:
.. _pointerp:
.. _matrixp:

``intp x``, ``bigintp x``, ``doublep x``, ``stringp x``, ``pointerp x``, ``matrixp x``
  Predicates to check for the built-in types.

.. raw:: html

   <a name="charp">

.. _charp:

``charp x``
  Single character string predicate.

.. raw:: html

   <a name="numberp">

.. raw:: html

   <a name="complexp">

.. raw:: html

   <a name="realp">

.. raw:: html

   <a name="rationalp">

.. raw:: html

   <a name="integerp">

.. _numberp:
.. _complexp:
.. _realp:
.. _rationalp:
.. _integerp:

``numberp x``, ``complexp x``, ``realp x``, ``rationalp x``, ``integerp x``
  Additional number predicates.

.. raw:: html

   <a name="exactp">

.. raw:: html

   <a name="inexactp">

.. _exactp:
.. _inexactp:

``exactp x``, ``inexactp x``
  Check whether a number is exact (i.e., doesn't contain any double
  components).

.. raw:: html

   <a name="applp">

.. raw:: html

   <a name="listp">

.. raw:: html

   <a name="listnp">

.. raw:: html

   <a name="tuplep">

.. _applp:
.. _listp:
.. _listnp:
.. _tuplep:

``applp x``, ``listp x``, ``listnp x``, ``tuplep x``
  Predicates to check for function applications, proper lists, list nodes
  and proper tuples.

.. raw:: html

   <a name="funp">

.. raw:: html

   <a name="lambdap">

.. raw:: html

   <a name="thunkp">

.. raw:: html

   <a name="varp">

.. _funp:
.. _lambdap:
.. _thunkp:
.. _varp:

``funp x``, ``lambdap x``, ``thunkp x``, ``varp x``
  Predicates to check for function objects (named, anonymous or thunk) and
  global (unbound) variables.

Specials
~~~~~~~~

Some special operations to deal with exceptions and function objects.

.. raw:: html

   <a name="throw">

.. _throw:

``throw x``
  Throw an exception, cf. `Exception Handling`_.

.. _Exception Handling: pure.html#exception-handling

``force x``
  Force a thunk (``x&``), cf. `Special Forms`_. This usually happens
  automagically when the value of a thunk is needed.

.. _Special Forms: pure.html#special-forms

.. raw:: html

   <a name="arity">

.. _arity:

``arity f``
  Get the arity of a function object, i.e., the number of arguments it
  expects. Returns 0 for thunks and saturated applications, -1 for
  over-saturated applications and non-functions.

Note that only closures (i.e., named and anonymous functions and thunks)
have a defined arity in Pure, otherwise ``arity`` returns -1 indicating an
unknown argument count. Partial applications of closures return the number
of remaining arguments, which may be zero to indicate a `saturated` (but
unevaluated) application, or -1 for `over-saturated` and constructor
applications. (Note that in Pure a saturated application may also remain
unevaluated because there is no definition for the given combination of
arguments and thus the expression is in normal form, or because the
application was quoted. If such a normal form application is then applied
to some "extra" arguments it becomes over-saturated.)

The value returned by ``arity`` always denotes the `semantic arity` of the
given function, not the declared `syntactic arity` if the function also
happens to be an operator symbol. Usually these will coincide (as, e.g., in
the case of ``+`` which is a binary operator and also expects two
arguments). But this is not necessarily the case, as shown in the following
example of a binary operator which actually takes *three* arguments::

  > infix 0 oops;
  > (oops) x y z = x*z+y;
  > arity (oops);
  3
  > arity (5 oops 8);
  1
  > map (5 oops 8) (1..5);
  [13,18,23,28,33]

Also note that the arity of a *named* function will be the actual number of
arguments, as given in the function definition::

  > foo x y = x*y;
  > arity foo;
  2
  > arity (foo x);
  1

In contrast, *anonymous* functions (lambdas) always yield an arity of 1,
because a multi-argument lambda like ``\x y -> x*y`` is in fact just a
shorthand for several nested 1-argument lambdas, ``\x -> \y -> x*y`` in
this example. Hence::

  > bar = \x y -> x*y;
  > arity bar;
  1
  > arity (bar x);
  1

Note that in either case the arity becomes zero for an unevaluated
saturated application::

  > arity (foo x y);
  0
  > arity (bar x y);
  0

Unevaluated thunks, being parameterless closures, yield a zero arity, too::

  > arity (x&);
  0

By adding extra arguments you then get an over-saturated application::

  > arity (foo x y z);
  -1
  > arity (bar x y z);
  -1
  > arity ((x&) y);
  -1

Finally, the value -1 is also returned for non-function objects (including
pure constructors) and their applications::

  > arity 99;
  -1
  > arity (force (x&));
  -1
  > arity (foo 1 2);
  -1
  > arity (baz a b);
  -1
  > arity (x:y);
  -1
  > arity (:);
  -1

..

Pointer Operations
~~~~~~~~~~~~~~~~~~

These are lowlevel operations dealing with pointer values. The usual
caveats apply, so *only* use these directly if you know what you're doing!

.. raw:: html

   <a name="addr">

.. _addr:

``addr symbol``
  Get the address of a C symbol (given as a string) at runtime. The library
  containing the symbol must already be loaded. Note that this can in fact
  be any kind of externally visible C symbol, so it's also possible to get
  the addresses of global variables. The result is returned as a
  pointer. The function fails if the symbol was not found.

.. raw:: html

   <a name="calloc">

.. raw:: html

   <a name="malloc">

.. raw:: html

   <a name="realloc">

.. raw:: html

   <a name="free">

.. _calloc:
.. _malloc:
.. _realloc:
.. _free:

``calloc nmembers size``, ``malloc size``, ``realloc ptr size``, ``free ptr``
  Interface to ``malloc``, ``free`` and friends. These let you allocate
  dynamic buffers (represented as Pure pointer values) for various nasty
  purposes.

.. raw:: html

   <a name="get_byte">

.. raw:: html

   <a name="get_short">

.. raw:: html

   <a name="get_int">

.. raw:: html

   <a name="get_int64">

.. raw:: html

   <a name="get_long">

.. raw:: html

   <a name="get_float">

.. raw:: html

   <a name="get_double">

.. raw:: html

   <a name="get_string">

.. raw:: html

   <a name="get_pointer">

.. raw:: html

   <a name="put_byte">

.. raw:: html

   <a name="put_short">

.. raw:: html

   <a name="put_int">

.. raw:: html

   <a name="put_int64">

.. raw:: html

   <a name="put_long">

.. raw:: html

   <a name="put_float">

.. raw:: html

   <a name="put_double">

.. raw:: html

   <a name="put_string">

.. raw:: html

   <a name="put_pointer">

.. _get_byte:
.. _get_short:
.. _get_int:
.. _get_int64:
.. _get_long:
.. _get_float:
.. _get_double:
.. _get_string:
.. _get_pointer:
.. _put_byte:
.. _put_short:
.. _put_int:
.. _put_int64:
.. _put_long:
.. _put_float:
.. _put_double:
.. _put_string:
.. _put_pointer:

``get_byte ptr``, ``get_short ptr``, ``get_int ptr``, ``get_int64 ptr``, ``get_long ptr``, ``get_float ptr``, ``get_double ptr``, ``get_string ptr``, ``get_pointer ptr``

``put_byte ptr x``, ``put_short ptr x``, ``put_int ptr x``, ``put_int64 ptr x``, ``put_long ptr x``, ``put_float ptr x``, ``put_double ptr x``, ``put_string ptr x``, ``put_pointer ptr x``
  Direct memory accesses. Use with care ... or else!

..

Sentries
~~~~~~~~

Sentries are Pure's flavour of object `finalizers`. A sentry is simply a
function which gets applied to the target expression when it is
garbage-collected. This is useful to perform automatic cleanup actions on
objects with internal state, such as files. Pure's sentries are *much* more
useful than finalizers in other garbage-collected languages, since it is
guaranteed that they are called as soon as an object "goes out of scope",
i.e., becomes inaccessible.

Note that in the current implementation sentries can only be placed at
applications and pointer objects, but the department of fake statistics has
assured us that this covers 99% of all practical uses. The sentry itself
can be any type of object (but usually it's a function). There can be only
one sentry per expression but, building on the operations provided here,
it's easy to design a scheme where sentries are chained.

.. raw:: html

   <a name="sentry">

.. _sentry:

``sentry f x``
  Places a sentry ``f`` at an expression ``x`` and returns the modified
  expression.

.. raw:: html

   <a name="clear_sentry">

.. _clear_sentry:

``clear_sentry x``
  Removes the sentry from an expression ``x``.

.. raw:: html

   <a name="get_sentry">

.. _get_sentry:

``get_sentry x``
  Returns the sentry of an expression ``x`` (if any, fails otherwise).

.. raw:: html

   <a name="cooked">

.. raw:: html

   <a name="cookedp">

.. _cooked:
.. _cookedp:

``cooked ptr``, ``cookedp ptr``
  ``cooked`` is a convenience function to create a `cooked` pointer which
  disposes itself after use. This is just a shorthand for ``sentry
  free``. The given pointer ``ptr`` must be malloc_\ ed to make this
  work. There's also a predicate ``cookedp`` to decide whether a given
  pointer is cooked already (we actually assume any pointer to be cooked
  which has a sentry set on it).

Example::

  > using system;
  > let p = sentry (\p->puts "I'm done for!" $$ free p) (malloc 1024);
  > cookedp p;
  1
  > clear p
  I'm done for!

..

Expression References
~~~~~~~~~~~~~~~~~~~~~

Expression references provide a kind of mutable data cells which can hold
any Pure expression. If you need these, then you're doomed. ;-) However,
they can be useful as a last resort when you need to keep track of some
local state or interface to the messy imperative world. Pure's references
are actually implemented as expression pointers so that you can readily
pass them as pointers to a C function which expects a ``pure_expr**``
parameter. This may even be useful at times.

.. raw:: html

   <a name="ref">

.. _ref:

``ref x``
  Create a reference pointing to ``x`` initially.

.. raw:: html

   <a name="put">

.. _put:

``put r x``
  Set a new value ``x``, and return that value.

.. raw:: html

   <a name="get">

.. _get:

``get r``
  Retrieve the current value ``r`` points to.

.. raw:: html

   <a name="unref">

.. _unref:

``unref r``
  Purge the referenced object and turn the reference into a dangling
  pointer. (This is used as a sentry on reference objects and shouldn't
  normally be called directly.)

.. raw:: html

   <a name="refp">

.. _refp:

``refp x``
  Predicate to check for reference values.

Note that manually removing the ``unref`` sentry of a reference turns the
reference into just a normal pointer object and renders it unusable as a
reference. Doing this will also leak memory, so don't!

..

Mathematical Functions
======================

The math.pure module provides Pure's basic math routines. It also defines
complex and rational numbers.

Imports
-------

To use the operations of this module, add the following import declaration
to your program::

  using math;

Basic Math Functions
--------------------

The module defines Euler's number ``e = 2.71828...`` and Ludolph's number
``pi = 3.1415...`` as constants. It also provides a reasonably
comprehensive (pseudo) random number generator:

.. _Mersenne twister: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html

.. raw:: html

   <a name="random">

.. _random:

``random``
  Return pseudo random ints in the range ``-0x80000000..0x7fffffff``. This
  uses the `Mersenne twister`_, in order to avoid bad generators present in
  some C libraries.

.. raw:: html

   <a name="srandom">

.. _srandom:

``srandom seed``
  Sets the seed of the generator to the given 32 bit integer. (Note that
  the Mersenne twister works best with odd seeds, so ``srandom`` enforces
  that by setting the least significant bit of the seed to 1.)

..

The following functions work with both double and int/bigint arguments. The
result is always a double. For further explanations please see the
descriptions of the corresponding functions from the C math library.

.. raw:: html

   <a name="sqrt">

.. _sqrt:

``sqrt x``
  The square root function.

.. raw:: html

   <a name="exp">

.. raw:: html

   <a name="ln">

.. raw:: html

   <a name="log">

.. _exp:
.. _ln:
.. _log:

``exp x``, ``ln x``, ``log x``
  Exponential function, natural and decadic logarithms.

.. raw:: html

   <a name="sin">

.. raw:: html

   <a name="cos">

.. raw:: html

   <a name="tan">

.. _sin:
.. _cos:
.. _tan:

``sin x``, ``cos x``, ``tan x``
  Trigonometric functions.

.. raw:: html

   <a name="asin">

.. raw:: html

   <a name="acos">

.. raw:: html

   <a name="atan">

.. _asin:
.. _acos:
.. _atan:

``asin x``, ``acos x``, ``atan x``
  Inverse trigonometric functions.

.. raw:: html

   <a name="atan2">

.. _atan2:

``atan2 y x``
  Computes the arcus tangent of ``y/x``, using the signs of the two
  arguments to determine the quadrant of the result.

.. raw:: html

   <a name="sinh">

.. raw:: html

   <a name="cosh">

.. raw:: html

   <a name="tanh">

.. _sinh:
.. _cosh:
.. _tanh:

``sinh x``, ``cosh x``, ``tanh x``
  Hyperbolic trigonometric functions.

.. raw:: html

   <a name="asinh">

.. raw:: html

   <a name="acosh">

.. raw:: html

   <a name="atanh">

.. _asinh:
.. _acosh:
.. _atanh:

``asinh x``, ``acosh x``, ``atanh x``
  Inverse hyperbolic trigonometric functions.

..

Complex Numbers
---------------

.. raw:: html

   <a name="+:">

.. raw:: html

   <a name="<:">

.. _+\::
.. _<\::

We provide both rectangular (``x+:y``) and polar (``r<:a``)
representations, where ``(x,y)`` are the Cartesian coordinates and
``(r,t)`` the radius (absolute value) and angle (in radians) of a complex
number, respectively. The ``+:`` and ``<:`` constructors (declared in the
prelude) bind weaker than all other arithmetic operators and are
non-associative.

The polar representation ``r<:t`` is normalized so that ``r`` is always
nonnegative and ``t`` falls in the range ``-pi<t<=pi``.

The constant ``i`` is provided to denote the imaginary unit ``0+:1``.

The arithmetic operations ``+``, ``*`` etc. and the equality relations
``==`` and ``~=`` work as expected, and the square root, exponential,
logarithms, trigonometric and hyperbolic trigonometric functions (see
`Basic Math Functions`_) are extended to complex numbers accordingly. These
do *not* rely on complex number support in the C library, but should still
conform to IEEE 754 and POSIX, provided that the C library provides a
standards-compliant implementation of the basic math functions.

..

The following operations all work with both the rectangular and the polar
representation, promoting real (double, int/bigint) inputs to complex where
appropriate. When the result of an operation is again a complex number, it
generally uses the same representation as the input (except for explicit
conversions). Similarly, mixed rect/polar and polar/rect arithmetic always
return a rect result, and mixed complex/real and real/complex arithmetic
yields a rect or polar result, depending on what the complex input was.

.. raw:: html

   <a name="complex">

.. _complex:

``complex x``
  Convert any kind of number to a complex value.

.. raw:: html

   <a name="polar">

.. raw:: html

   <a name="rect">

.. _polar:
.. _rect:

``polar z``, ``rect z``
  Convert between polar and rectangular representations.

.. raw:: html

   <a name="cis">

.. _cis:

``cis t``
  Create complex values on the unit circle. Note: To quickly compute
  ``exp (x+:y)`` in polar form, use ``exp x <: y``.

.. raw:: html

   <a name="abs (complex)">

.. raw:: html

   <a name="arg">

.. _abs (complex):
.. _arg:

``abs z``, ``arg z``
  Modulus (absolute value) and argument (angle, a.k.a. phase). Note that
  you can also find both of these in one go by converting to polar form.

.. raw:: html

   <a name="re">

.. raw:: html

   <a name="im">

.. _re:
.. _im:

``re z``, ``im z``
  Real and imaginary part.

.. raw:: html

   <a name="conj">

.. _conj:

``conj z``
  Complex conjugate.

..

Examples::

  > using math;
  > let z = 2^(1/i); z;
  0.769238901363972+:-0.638961276313635
  > let z = ln z/ln 2; z;
  0.0+:-1.0
  > abs z, arg z;
  1.0,-1.5707963267949
  > polar z;
  1.0<:-1.5707963267949

Please note that, as the ``+:`` and ``<:`` constructors bind weaker than
the other arithmetic operators, complex numbers *must* be parenthesized
accordingly, e.g.::

  > (1+:2)*(3+:4);
  -5+:10

..

Rational Numbers
----------------

.. raw:: html

   <a name="%">

.. _%:

Pure's rational numbers are constructed with the `exact division` operator
``%`` (declared in the prelude) which has the same precedence and fixity as
the other division operators.

The ``%`` operator returns a rational or complex rational for any
combination of integer, rational and complex integer/rational arguments,
provided that the denominator is nonzero (otherwise it behaves like ``x div
0``, which will raise an exception). Machine int operands are always
promoted to bigints, thus normalized rationals always take the form ``x%y``
where both the numerator ``x`` and the denominator ``y`` are bigints. For
other numeric operands ``%`` works just like ``/``. Rational results are
normalized so that the sign is always in the numerator and numerator and
denominator are relatively prime. Hence a rational zero is always
represented as ``0L%1L``.

The usual arithmetic operations and equality/order relations are extended
accordingly, as well as the `basic math functions`_ and the `rounding
functions`_, and will return exact (rational or complex rational) results
where appropriate. Rational operations are implemented using the GMP
bigint functions where possible, and thus are reasonably fast.

In addition, the module also provides following operations:

.. raw:: html

   <a name="rational">

.. _rational:

``rational x``
  Converts a real or complex value ``x`` to a rational or complex
  rational. Note that the conversion from double values doesn't do any
  rounding, so it is guaranteed that converting the resulting rational back
  to a double reconstructs the original value.

  Conversely, the int_, bigint_, double_, complex_, rect_, polar_ and cis_
  conversion functions are overloaded so that they convert a rational to
  one of the other number types.

.. raw:: html

   <a name="num">

.. raw:: html

   <a name="den">

.. _num:
.. _den:

``num x``, ``den x``
  Numerator and denominator of a rational ``x``.

..

Examples::

  > using math;
  > 5%7 + 2%3;
  29L%21L
  > 3%8 - 1%3;
  1L%24L
  > pow (11%10) 3;
  1331L%1000L
  > let x = pow 3 (-3); x;
  1L%27L
  > num x, den x;
  1L,27L
  > rational (3/4);
  3L%4L

Note that doubles can't represent most rationals exactly, so conversion
from double to rational *will* yield funny results in many cases (which are
still accurate up to rounding errors). For instance::

  > let x = rational (1/17); x;
  4238682002231055L%72057594037927936L
  > num x/den x;
  0.0588235294117647
  > double (1%17);
  0.0588235294117647

..

Semantic Number Predicates
--------------------------

In difference to the syntactic predicates in Primitives_, these check
whether the given value can be represented as an object of the given target
type (up to rounding errors). Note that if ``x`` is of syntactic type
``X``, then it is also of semantic type ``X``. Moreover, ``intvalp x =>
bigintvalp x => ratvalp x => realvalp x => compvalp x <=> numberp x``.

.. raw:: html

   <a name="compvalp">

.. _compvalp:

``compvalp x``
  Check for complex values (this is the same as numberp_).

.. raw:: html

   <a name="realvalp">

.. _realvalp:

``realvalp x``
  Check for real values (``im x==0``).

.. raw:: html

   <a name="ratvalp">

.. _ratvalp:

``ratvalp x``
  Check for rational values (same as realvalp_, except that IEEE 754
  infinities and NaNs are excluded).

.. raw:: html

   <a name="bigintvalp">

.. _bigintvalp:

``bigintvalp x``
  Check for "big" integer values which can be represented as a bigint.

.. raw:: html

   <a name="intvalp">

.. _intvalp:

``intvalp x``
  Check for "small" integer values which can be represented as a machine
  int.

..

Container Types
===============

The standard library provides a variety of efficient container data
structures for different purposes. Note that these are all purely
functional, i.e., immutable data structures implemented using different
flavours of binary trees. Nevertheless operations are performed
efficiently, in logarithmic time where possible.

All container types implement the equality predicates ``==`` and ``~=`` by
recursively comparing their members. In addition, the set and bag data
structures also implement the other comparison predicates (``<``, ``<=``
etc.) by checking whether one set/bag is a subset/subbag of another.

Arrays
------

The array.pure module implements an efficient functional array data
structure which allows to access and update individual array members, as
well as to add and remove elements at the beginning and end of an
array. All these operations are carried out in logarithmic time.

Imports
~~~~~~~

To use the operations of this module, add the following import declaration
to your program::

  using array;

Operations
~~~~~~~~~~

.. raw:: html

   <a name="emptyarray">

.. _emptyarray:

``emptyarray``
  return the empty array

.. raw:: html

   <a name="array">

.. _array:

``array xs``
  create an array from a list ``xs``

.. raw:: html

   <a name="array2">

.. _array2:

``array2 xs``
  create a two-dimensional array from a list of lists

.. raw:: html

   <a name="mkarray">

.. _mkarray:

``mkarray x n``
  create an array consisting of ``n`` ``x``'s

.. raw:: html

   <a name="mkarray2">

.. _mkarray2:

``mkarray2 x (n,m)``
  create a two-dimensional array of ``n*m`` ``x``'s

.. raw:: html

   <a name="arrayp">

.. _arrayp:

``arrayp x``
  check whether ``x`` is an array

.. raw:: html

   <a name="# (array)">

.. _# (array):

``#a``
  size of ``a``

.. raw:: html

   <a name="! (array)">

.. _! (array):

``a!i``
  return the ``i``\ th member of ``a``

``a!(i,j)``
  two-dimensional subscript

.. raw:: html

   <a name="null (array)">

.. _null (array):

``null a``
  test whether ``a`` is the empty array

.. raw:: html

   <a name="members (array)">

.. raw:: html

   <a name="list (array)">

.. _members (array):
.. _list (array):

``members a``, ``list a``
  list of values stored in ``a``

.. raw:: html

   <a name="members2 (array)">

.. raw:: html

   <a name="list2 (array)">

.. _members2 (array):
.. _list2 (array):

``members2 a``, ``list2 a``
  list of members in a two-dimensional array

.. raw:: html

   <a name="first (array)">

.. raw:: html

   <a name="last (array)">

.. _first (array):
.. _last (array):

``first a``, ``last a``
  first and last member of ``a``

.. raw:: html

   <a name="rmfirst (array)">

.. raw:: html

   <a name="rmlast (array)">

.. _rmfirst (array):
.. _rmlast (array):

``rmfirst a``, ``rmlast a``
  remove first and last member from ``a``

.. raw:: html

   <a name="insert (array)">

.. _insert (array):

``insert a x``
  insert ``x`` at the beginning of ``a``

.. raw:: html

   <a name="append (array)">

.. _append (array):

``append a x``
  append ``x`` to the end of ``a``

.. raw:: html

   <a name="update (array)">

.. _update (array):

``update a i x``
  replace the ``i``\ th member of ``a`` by ``x``

.. raw:: html

   <a name="update2">

.. _update2:

``update2 a (i,j) x``
  update two-dimensional array

Examples
~~~~~~~~

Import the module::

  > using array;

A one-dimensional array::

  > let a = array (0.0:0.1..1.0);
  > #a; members a;
  11
  [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]

Indexing an array works in the usual way, using Pure's ``!`` operator. By
virtue of the prelude, slicing an array with ``!!`` also works as
expected::

  > a!5;
  0.5
  > a!!(3..7);
  [0.3,0.4,0.5,0.6,0.7]

Updating a member of an array produces a new array::

  > let b = update a 1 2.0;
  > members b;
  [0.0,2.0,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]

Two-dimensional arrays can be created with ``array2`` from a list of
lists::

  > let a2 = array2 [[i,x | x = [u,v,w]] | i = 1..2];
  > members2 a2;
  [[(1,u),(1,v),(1,w)],[(2,u),(2,v),(2,w)]]
  > a2!(1,2);
  2,w
  > a2!![(0,1),(1,2)];
  [(1,v),(2,w)]
  > a2!!(0..1,1..2);
  [[(1,v),(1,w)],[(2,v),(2,w)]]

Here's how to convert an array to a Pure matrix::

  > matrix $ members a;
  {0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0}
  > matrix $ members2 a2;
  {(1,u),(1,v),(1,w);(2,u),(2,v),(2,w)}

Converting back from a matrix to an array::

  > let b2 = array2 $ list2 {(1,u),(1,v),(1,w);(2,u),(2,v),(2,w)};
  > members2 b2;
  [[(1,u),(1,v),(1,w)],[(2,u),(2,v),(2,w)]]

..

Heaps
-----

Heaps allow quick (constant time) access to the smallest member, and to
remove the smallest nember and insert new elements in logarithmic time.
This implementation does not allow quick update of heap members; if
such functionality is required, bags should be used instead
(see bag_ in `Sets and Bags`_).

Heap members *must* be ordered by the ``<=`` predicate. Multiple instances
of the same element may be stored in a heap; however, the order in which
equal elements are retrieved is not specified.

Imports
~~~~~~~

To use the operations of this module, add the following import declaration
to your program::

  using heap;

Operations
~~~~~~~~~~

.. raw:: html

   <a name="emptyheap">

.. _emptyheap:

``emptyheap``
  return the empty heap

.. raw:: html

   <a name="heap">

.. _heap:

``heap xs``
  create a heap from a list ``xs``

.. raw:: html

   <a name="heapp">

.. _heapp:

``heapp x``
  check whether ``x`` is a heap

.. raw:: html

   <a name="# (heap)">

.. _# (heap):

``#h``
  size of a heap

.. raw:: html

   <a name="null (heap)">

.. _null (heap):

``null h``
  test whether ``h`` is the empty heap

.. raw:: html

   <a name="members (heap)">

.. raw:: html

   <a name="list (heap)">

.. _members (heap):
.. _list (heap):

``members h``, ``list h``
  list the members of ``h`` in ascending order

.. raw:: html

   <a name="first (heap)">

.. _first (heap):

``first h``
  the first (i.e., smallest) member of ``h``

.. raw:: html

   <a name="rmfirst (heap)">

.. _rmfirst (heap):

``rmfirst h``
  remove the first (i.e., smallest) member from ``h``

.. raw:: html

   <a name="insert (heap)">

.. _insert (heap):

``insert h x``
  insert ``x`` into ``h``

Examples
~~~~~~~~

::

  > let h = heap [5,1,3,11,3];
  > members h;
  [1,3,3,5,11]
  > first h;
  1
  > members $ rmfirst h;
  [3,3,5,11]

..

Dictionaries
------------

The dict.pure module provides Pure's ``dict`` and ``hdict`` data types
based on AVL trees. ``dict`` is an ordered dictionary (assuming an ordered
key type), ``hdict`` a hashed dictionary which works with any (mixture of)
key types but stores members in an apparently random order.

The used AVL tree algorithm has its origin in the SWI-Prolog implementation
of association lists. The original implementation was created by
R. A. O'Keefe and updated for SWI-Prolog by Jan Wielemaker. For the
original source see http://www.swi-prolog.org.

The port from SWI-Prolog and the deletion stuff (``rmfirst``, ``rmlast``,
``delete``) missing in the Prolog implementation was provided by Jiri
Spitz.

..

Imports
~~~~~~~

To use the operations of this module, add the following import declaration
to your program::

  using dict;

Data Structure
~~~~~~~~~~~~~~

A tree for ``dict`` and ``hdict`` takes the form ``Dict T`` or ``HDict T``
where ``T`` is either:

``nil``
  the empty tree; or

``bin key value balance left right``
  a nonempty tree with given ``key`` and ``value`` in the root node, where
  ``left`` and ``right`` are the left and right subtree, and ``balance``
  is either 1, 0 or -1, denoting ``|left|-|right|`` = 1, 0, or -1,
  respectively.

The tree constructors are private.

Operations
~~~~~~~~~~

.. raw:: html

   <a name="emptydict">

.. raw:: html

   <a name="emptyhdict">

.. _emptydict:
.. _emptyhdict:

``emptydict``, ``emptyhdict``
  return the empty dict or hdict

.. raw:: html

   <a name="dict">

.. raw:: html

   <a name="hdict">

.. _dict:
.. _hdict:

``dict xs``, ``hdict xs``
  create a dict or hdict from list ``xs`` of key-value pairs in the form
  ``key=>value``

.. raw:: html

   <a name="dictp">

.. raw:: html

   <a name="hdictp">

.. _dictp:
.. _hdictp:

``dictp d``, ``hdictp d``
  check whether ``x`` is a dict or hdict

.. raw:: html

   <a name="mkdict">

.. raw:: html

   <a name="mkhdict">

.. _mkdict:
.. _mkhdict:

``mkdict y xs``, ``mkhdict y xs``
  create dict or hdict from a list of keys and a constant value

.. raw:: html

   <a name="# (dict)">

.. raw:: html

   <a name="# (hdict)">

.. _# (dict):
.. _# (hdict):

``#d``
  size of dict or hdict ``d``

.. raw:: html

   <a name="! (dict)">

.. raw:: html

   <a name="! (hdict)">

.. _! (dict):
.. _! (hdict):

``d!x``
  get value from ``d`` by key ``x``

.. raw:: html

   <a name="null (dict)">

.. raw:: html

   <a name="null (hdict)">

.. _null (dict):
.. _null (hdict):

``null d``
  test whether ``d`` is the empty dict or hdict

.. raw:: html

   <a name="member (dict)">

.. raw:: html

   <a name="member (hdict)">

.. _member (dict):
.. _member (hdict):

``member d x``
  test whether ``d`` contains a member with key ``x``

.. raw:: html

   <a name="members (dict)">

.. raw:: html

   <a name="members (hdict)">

.. raw:: html

   <a name="list (dict)">

.. raw:: html

   <a name="list (hdict)">

.. _members (dict):
.. _members (hdict):
.. _list (dict):
.. _list (hdict):

``members d``, ``list d``
  list members of ``d`` (in ascending order for dict)

.. raw:: html

   <a name="keys">

.. _keys:

``keys d``
  list keys of ``d`` (in ascending order for dict)

.. raw:: html

   <a name="values">

.. _values:

``values d``
  list values of ``d``

.. raw:: html

   <a name="first (dict)">

.. raw:: html

   <a name="first (hdict)">

.. raw:: html

   <a name="last (dict)">

.. raw:: html

   <a name="last (hdict)">

.. _first (dict):
.. _first (hdict):
.. _last (dict):
.. _last (hdict):

``first d``, ``last d``
  return first and last member of ``d``

.. raw:: html

   <a name="rmfirst (dict)">

.. raw:: html

   <a name="rmfirst (hdict)">

.. raw:: html

   <a name="rmlast (dict)">

.. raw:: html

   <a name="rmlast (hdict)">

.. _rmfirst (dict):
.. _rmfirst (hdict):
.. _rmlast (dict):
.. _rmlast (hdict):

``rmfirst d``, ``rmlast d``
  remove first and last member from ``d``

.. raw:: html

   <a name="insert (dict)">

.. raw:: html

   <a name="insert (hdict)">

.. raw:: html

   <a name="update (dict)">

.. raw:: html

   <a name="update (hdict)">

.. _insert (dict):
.. _insert (hdict):
.. _update (dict):
.. _update (hdict):

``insert d (x=>y)``, ``update d x y``
  insert ``x=>y`` into ``d`` (replace any existing element); ``update`` is
  a fully curried version of ``insert``

.. raw:: html

   <a name="delete (dict)">

.. raw:: html

   <a name="delete (hdict)">

.. _delete (dict):
.. _delete (hdict):

``delete d x``
  remove ``x`` from ``d``

Examples
~~~~~~~~

A normal (ordered) dictionary::

  > using dict;
  > let d = dict ["foo"=>77,"bar"=>99.1];
  > keys d; vals d; members d;
  ["bar","foo"]
  [99.1,77]
  ["bar"=>99.1,"foo"=>77]

Indexing a dictionary works in the usual way, using Pure's ``!`` operator.
By virtue of the prelude, slicing a dictionary with ``!!`` also works as
expected::

  > d!"foo";
  77
  > d!!["foo","bar"];
  [77,99.1]

A hashed dictionary can be used with any key values, which are stored in a
seemingly random order::

  > let h = hdict [foo=>77,42=>99.1];
  > keys h; vals h; members h;
  [42,foo]
  [99.1,77]
  [42=>99.1,foo=>77]
  > h!foo;
  77
  > h!!keys h;
  [99.1,77]

..

Sets and Bags
-------------

The set.pure module implements Pure's set and bag (multiset) data types
based on AVL trees. Set and bag elements must be ordered, i.e., the
predicates ``==``, ``<`` and ``>`` must be defined on them. The used AVL
tree algorithm has its origin in the SWI-Prolog implementation of
association lists and was ported to Pure by Jiri Spitz, see Dictionaries_
for details.

..

Imports
~~~~~~~

To use the operations of this module, add the following import declaration
to your program::

  using set;

Data Structure
~~~~~~~~~~~~~~

A tree for ``set`` and ``bag`` takes the form ``Set T`` or ``Bag T`` where
``T`` is either:

``nil``
  the empty tree; or

``bin key balance left right``
  a nonempty tree with given ``key`` (set element) in the root node, where
  ``left`` and ``right`` are the left and right subtree, and ``balance`` is
  either 1, 0 or -1, denoting ``|left|-|right|`` = 1, 0, or -1,
  respectively.

The tree constructors are private.

Operations
~~~~~~~~~~

.. raw:: html

   <a name="emptyset">

.. raw:: html

   <a name="emptybag">

.. _emptyset:
.. _emptybag:

``emptyset``, ``emptybag``
  return the empty set or bag

.. raw:: html

   <a name="set">

.. raw:: html

   <a name="bag">

.. _set:
.. _bag:

``set xs``, ``bag xs``
  create a set or bag from a list ``xs``

.. raw:: html

   <a name="setp">

.. raw:: html

   <a name="bagp">

.. _setp:
.. _bagp:

``setp x``, ``bagp x``
  check whether ``x`` is a set or bag

.. raw:: html

   <a name="# (set)">

.. raw:: html

   <a name="# (bag)">

.. _# (set):
.. _# (bag):

``#m``
  size of set or bag ``m``

.. raw:: html

   <a name="+ (set)">

.. raw:: html

   <a name="+ (bag)">

.. _+ (set):
.. _+ (bag):

``m1+m2``
  set and bag union: ``m1+m2`` adds the members of ``m2`` to ``m1``

.. raw:: html

   <a name="- (set)">

.. raw:: html

   <a name="- (bag)">

.. _- (set):
.. _- (bag):

``m1-m2``
  set and bag difference: ``m1-m2`` removes the members of ``m2`` from
  ``m1``

.. raw:: html

   <a name="* (set)">

.. raw:: html

   <a name="* (bag)">

.. _* (set):
.. _* (bag):

``m1*m2``
  set and bag intersection: ``m1*m2`` removes the members *not* in ``m2``
  from ``m1``

.. raw:: html

   <a name="null (set)">

.. raw:: html

   <a name="null (bag)">

.. _null (set):
.. _null (bag):

``null m``
  test whether ``m`` is the empty set or bag

.. raw:: html

   <a name="member (set)">

.. raw:: html

   <a name="member (bag)">

.. _member (set):
.. _member (bag):

``member m x``
  test whether ``m`` contains ``x``

.. raw:: html

   <a name="members (set)">

.. raw:: html

   <a name="members (bag)">

.. raw:: html

   <a name="list (set)">

.. raw:: html

   <a name="list (bag)">

.. _members (set):
.. _members (bag):
.. _list (set):
.. _list (bag):

``members m``, ``list m``
  list members of ``m`` in ascending order

.. raw:: html

   <a name="first (set)">

.. raw:: html

   <a name="first (bag)">

.. raw:: html

   <a name="last (set)">

.. raw:: html

   <a name="last (bag)">

.. _first (set):
.. _first (bag):
.. _last (set):
.. _last (bag):

``first m``, ``last m``
  return first and last member of ``m``

.. raw:: html

   <a name="rmfirst (set)">

.. raw:: html

   <a name="rmfirst (bag)">

.. raw:: html

   <a name="rmlast (set)">

.. raw:: html

   <a name="rmlast (bag)">

.. _rmfirst (set):
.. _rmfirst (bag):
.. _rmlast (set):
.. _rmlast (bag):

``rmfirst m``, ``rmlast m``
  remove first and last member from ``m``

.. raw:: html

   <a name="insert (set)">

.. raw:: html

   <a name="insert (bag)">

.. _insert (set):
.. _insert (bag):

``insert m x``
  insert ``x`` into ``m`` (replaces an existing element in the ``set`` case)

.. raw:: html

   <a name="delete (set)">

.. raw:: html

   <a name="delete (bag)">

.. _delete (set):
.. _delete (bag):

``delete m x``
  remove ``x`` from ``m`` (in the ``bag`` case, only a single instance of
  ``x`` is removed)

Examples
~~~~~~~~

Some basic set operations::

  > let m = set [5,1,3,11,3];
  > members m;
  [1,3,5,11]
  > map (member m) (1..5);
  [1,0,1,0,1]
  > members $ m+set (3..6);
  [1,3,4,5,6,11]
  > members $ m-set (3..6);
  [1,11]
  > members $ m*set (3..6);
  [3,5]

The bag operations work in a similar fashion, but note that multiple
instances are permitted in this case, and each instance counts as a
separate member::

  > let m = bag [5,1,3,11,3];
  > members m;
  [1,3,3,5,11]
  > members $ delete m 3;
  [1,3,5,11]
  > members $ insert m 1;
  [1,1,3,3,5,11]
  > members $ m+bag (3..6);
  [1,3,3,3,4,5,5,6,11]
  > members $ m-bag (3..6);
  [1,3,11]
  > members $ m*bag (3..6);
  [3,5]

..

System Interface
================

This module offers some useful system routines, straight from the C
library, as well as some convenience functions for wrapping these up in
Pure. Even the "purest" program needs to do some basic I/O every once in a
while, and this module provides the necessary stuff to do just that. The
interface is rather minimalistic and preliminary right now, but will
probably grow over time, and it already offers many common system functions
that Pure programmers might want to use in their scripts.

Most of the following functions are extensively documented in the C library
manual pages, so we concentrate on the Pure-specific aspects here.

Imports
-------

To use the operations of this module, add the following import declaration
to your program::

  using system;

..

Errno and Friends
-----------------

.. raw:: html

   <a name="errno">

.. raw:: html

   <a name="set_errno">

.. raw:: html

   <a name="perror">

.. raw:: html

   <a name="strerror">

.. _errno:
.. _set_errno:
.. _perror:
.. _strerror:

``errno``, ``set_errno n``, ``perror msg``, ``strerror n``
  This value and the related routines are indispensable to give proper
  diagnostics when system calls fail for some reason. Note that, by its
  very nature, ``errno`` is a fairly volatile value, don't expect it to
  survive a return to the command line in interactive sessions.

Example::

  > using system;
  > fopen "junk" "r", perror "junk";
  junk: No such file or directory
  fopen "junk" "r"

..

POSIX Locale
------------

.. raw:: html

   <a name="setlocale">

.. _setlocale:

``setlocale category locale``
  Set or retrieve the current locale.

Details are platform-specific, but you can expect that at least the
categories ``LC_ALL``, ``LC_COLLATE``, ``LC_CTYPE``, ``LC_MONETARY``,
``LC_NUMERIC`` and ``LC_TIME`` are defined, as well as the following values
for the locale parameter: ``"C"`` or ``"POSIX"`` (the default POSIX
locale), ``""`` (the system default locale), and ``NULL``, to just query
the current locale.

Other string values which can be passed as the locale argument depend on
the implementation, please check your local setlocale(3) documentation for
details. If locale is not ``NULL``, the current locale is changed
accordingly. The return value is the new locale, or the current locale when
passing ``NULL`` for the locale parameter. In either case, the string
returned by ``setlocale`` is such that it can be passed to ``setlocale`` to
restore the same locale again. In case of an error, ``setlocale`` fails
(rather than returning a null pointer).

Please note that calling this function alters the Pure interpreter's idea
of what the current locale is. When the interpreter starts up, it always
sets the default system locale. Unless your scripts rely on a specific
encoding, setting the locale to either ``"C"`` or ``""`` should always be
safe.

Example::

  > setlocale LC_ALL NULL;
  "en_US.UTF-8"

..

Signal Handling
---------------

.. raw:: html

   <a name="trap">

.. _trap:

``trap action sig``
  Establish or remove Pure signal handlers.

The action parameter of ``trap`` can be one of the predefined integer
values ``SIG_TRAP``, ``SIG_IGN`` and ``SIG_DFL``. ``SIG_TRAP`` causes the
given signal to be handled by mapping it to a Pure exception of the form
``signal sig``. ``SIG_IGN`` ignores the signal, ``SIG_DFL`` reverts to the
system's default handling. See ``show -g SIG*`` for a list of known signal
values on your system.

Note: When the interpreter runs interactively, most standard termination
signals (``SIGINT``, ``SIGTERM``, etc.) are already set up to report
corresponding Pure exceptions; if this is not desired, you can use ``trap``
to either ignore these or revert to the default handlers instead.

See `Exception Handling`_ in the Pure Manual for details and examples.

..

Time Functions
--------------

.. raw:: html

   <a name="time">

.. _time:

``time``
  Reports the current time in seconds since the `epoch`, 00:00:00 UTC, Jan
  1 1970. The result is always a bigint (in fact, the ``time`` value is
  already 64 bit on many OSes nowadays).

..

The following functions are provided to convert a time value to
"broken-down" time or a string. See the ctime(3), gmtime(3), localtime(3),
asctime(3) and strftime(3) manual pages for details.

.. raw:: html

   <a name="ctime">

.. _ctime:

``ctime t``
  Convert a time value as returned by the time_ function to a string in
  local time.

.. raw:: html

   <a name="gmtime">

.. raw:: html

   <a name="localtime">

.. _gmtime:
.. _localtime:

``gmtime t``, ``localtime t``
  Convert a time value to UTC or local time in "broken-down" form (a static
  pointer to a ``tm`` struct containing a bunch of ``int`` fields) which
  can then be passed to the asctime_ and strftime_ functions, or to
  int_matrix_ if you want to convert the data to a matrix; see the example
  below.

.. raw:: html

   <a name="asctime">

.. raw:: html

   <a name="strftime">

.. _asctime:
.. _strftime:

``asctime tm``, ``strftime format tm``
  Format broken-down time as a string. ``strftime`` also uses a format
  string supplied by the user.

For instance::

  > let tm = localtime time; tm;
  #<pointer 0x7f1292131de0>
  > asctime tm;
  "Sat Mar 14 01:07:18 2009\n"
  > int_matrix 9 tm;
  {18,7,1,14,2,109,6,72,0}

..

We also provide some functions to retrieve wallclock and cpu time which
usually offer much better resolution than time_.

.. raw:: html

   <a name="gettimeofday">

.. _gettimeofday:

``gettimeofday``
  Returns wallclock time as seconds since the epoch, like time_, but
  theoretically offers resolutions in the microsec range (actual
  resolutions vary, but are usually in the msec range for contemporary
  systems). The result is returned as a double value (which also limits
  precision). This function may actually be implemented through different
  system calls, depending on what's available on the host OS.

.. raw:: html

   <a name="clock">

.. _clock:

``clock``
  Returns the current CPU (not wallclock) time since an arbitrary point in
  the past, as a machine int. The number of "ticks" per second is given by
  the ``CLOCKS_PER_SEC`` constant. Note that this value will wrap around
  approximately every 72 minutes.

.. raw:: html

   <a name="sleep">

.. raw:: html

   <a name="nanosleep">

.. _sleep:
.. _nanosleep:

``sleep t``, ``nanosleep t``
  Suspend execution for a given time interval in seconds. ``sleep`` takes
  integer (int/bigint) arguments only and uses the ``sleep()`` system
  function. ``nanosleep`` also accepts double arguments and theoretically
  supports resolutions down to 1 nanosecond (again, actual resolutions
  vary). This function may actually be implemented through different system
  calls, depending on what's available on the host OS. Both functions
  usually return zero, unless the sleep was interrupted by a signal, in
  which case the time remaining to be slept is returned.

..

Basic Process Operations
------------------------

Not much is provided in this category yet. Contributions are welcome.

.. raw:: html

   <a name="system">

.. _system:

``system cmd``
  Execute a shell command.

.. raw:: html

   <a name="exit">

.. _exit:

``exit status``
  Terminate the program with the given status code.

Example::

  > system "pwd";
  /home/ag/svn/pure-lang/trunk/pure/lib
  0

..

Basic I/O Interface
-------------------

Note that this module also defines the standard I/O streams ``stdin``,
``stderr`` and ``stdout`` as variables on startup. These are ready to be
used with the operations described below. Also note that for convenience
some of these routines are actually Pure wrappers, rather than just
providing the raw C library routines.

.. raw:: html

   <a name="fopen">

.. raw:: html

   <a name="popen">

.. _fopen:
.. _popen:

``fopen name mode``, ``popen cmd mode``
  Open a file or a pipe. These take care of closing a file object
  automagically when it's garbage-collected, and fail (instead of returning
  a null pointer) in case of error, so that you can provide any desired
  error handling simply by adding suitable equations.

.. raw:: html

   <a name="fclose">

.. raw:: html

   <a name="pclose">

.. _fclose:
.. _pclose:

``fclose fp``, ``pclose fp``
  Close a file or a pipe.

.. raw:: html

   <a name="feof">

.. raw:: html

   <a name="ferror">

.. raw:: html

   <a name="clearerr">

.. _feof:
.. _ferror:
.. _clearerr:

``feof fp``, ``ferror fp``, ``clearerr fp``
  Check the end-of-file and error bits. ``clearerr`` clears the error bit.

.. raw:: html

   <a name="fflush">

.. _fflush:

``fflush fp``
  Flushes the given file (or all open files if ``fp`` is ``NULL``).

.. raw:: html

   <a name="fgets">

.. raw:: html

   <a name="gets">

.. _fgets:
.. _gets:

``fgets fp``, ``gets``
  Pure wrappers for the C ``fgets`` and ``gets`` functions which handle the
  necessary buffering automatically.

.. raw:: html

   <a name="fget">

.. _fget:

``fget fp``
  A variation of fgets_ which slurps in an entire text file at once.

.. raw:: html

   <a name="fputs">

.. raw:: html

   <a name="puts">

.. _fputs:
.. _puts:

``fputs s fp``, ``puts s``
  Output a string to the given file or ``stdout``, respectively. These
  are just the plain C functions. Note that ``puts`` automatically adds
  a newline, while ``fputs`` doesn't. Hmm.

.. raw:: html

   <a name="fread">

.. raw:: html

   <a name="fwrite">

.. _fread:
.. _fwrite:

``fread ptr size nmemb fp``, ``fwrite ptr size nmemb fp``
  Binary read/writes. Here you'll have to manage the buffers yourself.

Examples::

  > puts "Hello, world!";
  Hello, world!
  14
  > split "\n" $ fget $ popen "ls *.pure" "r";
  ["array.pure","dict.pure","getopt.pure","heap.pure","math.pure",
  "matrices.pure","prelude.pure","primitives.pure","set.pure",
  "strings.pure","system.pure",""]

..

C-style formatted I/O is provided through the following wrappers for the C
``printf`` and ``scanf`` functions. Our wrapper functions take or return a
tuple of values, and check these against the format specifiers, so they
shouldn't segfault. However, only simple formats derived from ``%cdioux``,
``%efg``, ``%s`` and ``%p`` are supported right now.

.. raw:: html

   <a name="printf">

.. raw:: html

   <a name="fprintf">

.. _printf:
.. _fprintf:

``printf format args``, ``fprintf fp format args``
  Print a formatted string to ``stdout`` or the given file, respectively.
  Normally, these functions return the result of the underlying C routines
  (number of characters written, or negative on error). However, in case of
  an abnormal condition in the wrapper function (error in format string,
  argument mismatch), they will throw an exception.

.. raw:: html

   <a name="sprintf">

.. _sprintf:

``sprintf format args``
  Print a formatted string to a buffer and return the result as a string.
  Unlike the C routine, this wrapper just returns the string result, or a
  null pointer in case of an error; otherwise, the error handling is the
  same as with printf_ and fprintf_. The implementation actually uses the C
  routine ``snprintf`` for safety, and a suitable output buffer is provided
  automatically.

.. raw:: html

   <a name="scanf">

.. raw:: html

   <a name="fscanf">

.. _scanf:
.. _fscanf:

``scanf format``, ``fscanf fp format``
  Read formatted input from ``stdin`` or the given file, respectively.
  These normally return a tuple (or singleton) with the converted
  values. An exception of the form ``scanf_error ret``, where ``ret`` is
  the tuple of successfully converted values (which may be less than the
  number of requested input items), is thrown if end-of-file was met or
  another error occurred while still reading. The handling of other
  abnormal conditions (e.g., error in format string) is analogous to
  printf_ et al. Also note that our implementation here doesn't accept any
  of the length modifiers used by the C routines. Floating point values
  will *always* be read in double precision, so you just specify ``"e"``,
  ``"g"`` etc. for these. However, the "assignment suppression" flag
  ``"*"`` *is* understood; the corresponding items will not be returned.

.. raw:: html

   <a name="sscanf">

.. _sscanf:

``sscanf s format``
  This works exactly like fscanf_, but input comes from a string (first
  argument) rather than a file.

Examples::

  > do (printf "%s%d\n") [("foo",5),("catch",22)];
  foo5
  catch22
  ()
  > sscanf "foo 5 22" "%s %d %g";
  "foo",5,22.0

..

Readline
--------

.. raw:: html

   <a name="readline">

.. _readline:

``readline prompt``
  A simple wrapper around GNU readline which reads a line from ``stdin``
  with prompt and command line editing.

.. raw:: html

   <a name="add_history">

.. _add_history:

``add_history s``
  readline_\ 's companion, which you need to add strings to readline's
  history.

Example::

  > readline "foo> ";
  foo> bla
  "bla"

..

Readdir
-------

.. raw:: html

   <a name="readdir">

.. _readdir:

``readdir name``
  Read the contents of the given directory and return the names of all
  its entries as a list.

Example::

  > readdir "/home";
  ["ag",".",".."]

..

Shell Globbing
--------------

.. raw:: html

   <a name="fnmatch">

.. _fnmatch:

``fnmatch pat s flags``
  Returns a simple truth value (1 if ``pat`` matches ``s``, 0 if it
  doesn't), instead of an error code like the C function.

.. raw:: html

   <a name="glob">

.. _glob:

``glob pat flags``
  Returns a Pure list with the matches (unless there is an error in which
  case the integer result code of the underlying C routine is returned).

The available flag values and glob error codes are available as symbolic
``FNM_*`` and ``GLOB_*`` constants defined as variables in the global
environment. See the fnmatch(3) and glob(3) manpages for the meaning of
these. (In extension to POSIX, Pure also provides the constant
``GLOB_SIZE`` which indicates the buffer size required for C ``glob``\ 's
``globptr`` argument, but this is only used internally.)

Example::

  > glob "*.pure" 0;
  ["array.pure","dict.pure","getopt.pure","heap.pure","math.pure",
  "matrices.pure","prelude.pure","primitives.pure","set.pure",
  "strings.pure","system.pure"]

..

Regex Matching
--------------

The POSIX regex functions (``regcomp`` and ``regexec``) have a somewhat
difficult calling sequence, hence we provide a couple of rather elaborate
high-level wrapper functions for use in Pure programs.

.. raw:: html

   <a name="regex">

.. _regex:

``regex pat cflags s eflags``
  Compiles and matches a regex in one go, and returns the list of
  submatches (if any).

The arguments are:

- ``pat::string``, the regular expression pattern;

- ``cflags::int``, the compilation flags (bitwise or of any of the flags
  accepted by regcomp(3));

- ``s::string``, the subject string to be matched;

- ``eflags::int``, the matching execution flags (bitwise or of any of the
  flags accepted by regexec(3)).

Symbolic ``REG_*`` constants are provided for the different flag values,
see the regcomp(3) manpage for an explanation of these. (In extension to
POSIX, Pure also provides the ``REG_SIZE`` constant which indicates the
size needed for the compiled regex buffer, but this is only for internal
use.)

Two particularly important compilation flags (to be included in the
``cflags`` argument) are ``REG_NOSUB``, which prevents submatches to be
computed, and ``REG_EXTENDED``, which switches ``regex`` from "basic" to
"extended" regular expressions so that it understands all the regular
expression elements of egrep(1) in the pattern argument.

Depending on the flags and the outcome of the operation, the result of this
function can take one of the following forms:

- ``regerr code msg``: This indicates an error during compilation of the
  pattern (e.g., if there was a syntax error in the pattern). ``code`` is
  the nonzero integer code returned by ``regcomp``, and ``msg`` is the
  corresponding error message string, as returned by ``regerror``. You can
  redefine the ``regerr`` function as appropriate for your application
  (e.g., if you'd like to print an error message or throw an exception).

- ``0`` or ``1``: Just a truth value indicates whether the pattern matched
  or not. This will be the form of the result if the ``REG_NOSUB`` flag was
  specified for compilation, indicating that no submatch information is to
  be computed.

- ``0`` (indicating no match), or ``1`` (indicating a successful match),
  where the latter value is followed by a tuple of ``(pos,substr)`` pairs
  for each submatch. This will be the form of the result only if the
  ``REG_NOSUB`` flag was *not* specified for compilation, so that submatch
  information is available.

Note that, according to POSIX semantics, a return value of 1 does *not*
generally mean that the entire subject string was matched, unless you
explicitly tie the pattern to the beginning (``^``) and end (``$``) of the
string.

If the result takes the latter form, each ``(pos,substr)`` pair indicates a
portion of the subject string which was matched; ``pos`` is the position at
which the match starts, and ``substr`` is the substring (starting at
position ``pos``) which was matched. The first ``(pos,substr)`` pair always
indicates which portion of the string was matched by the entire pattern,
the remaining pairs represent submatches for the parenthesized subpatterns
of the pattern, as described on the regcomp(3) manual page. Note that some
submatches may be empty (if they matched the empty string), in which case a
pair ``(pos,"")`` indicates the (nonnegative) position ``pos`` where the
subpattern matched the empty string. Other submatches may not participate
in the match at all, in which case the pair ``(-1,"")`` is returned.

..

The following helper functions are provided to analyze the result returned
by regex_.

.. raw:: html

   <a name="reg_result">

.. _reg_result:

``reg_result res``
  Returns the result of a ``regex`` call, i.e., a ``regerr`` term if
  compilation failed, and a flag indicating whether the match was
  successful otherwise.

.. raw:: html

   <a name="reg_info">

.. _reg_info:

``reg_info res``
  Returns the submatch info if any, otherwise it returns ``()``.

.. raw:: html

   <a name="reg">

.. _reg:

``reg n info``
  Returns the ``n``\ th submatch of the given submatch info, where ``info``
  is the result of a reg_info_ call.

.. raw:: html

   <a name="regs">

.. _regs:

``regs info``
  Returns all valid submatches, i.e., the list of all triples ``(n,p,s)``
  for which ``reg n == (p,s)`` with ``p>=0``.

..

In addition, the following convenience functions are provided to perform
global regex searches, to perform substitutions, and to tokenize a string
according to a given delimiter regex.

.. raw:: html

   <a name="regexg">

.. _regexg:

``regexg f pat cflags s eflags``
  Perform a global regular expression search. This routine will scan the
  entire string for (non-overlapping) instances of the pattern, applies the
  given function ``f`` to the reg_info_ for each match, and collects all
  results in a list. Note: Never specify the ``REG_NOSUB`` flag with this
  function, it needs the submatch info.

.. raw:: html

   <a name="regexgg">

.. _regexgg:

``regexgg f pat cflags s eflags``
  This works like regexg_, but allows overlapping matches.

.. raw:: html

   <a name="regsub">

.. _regsub:

``regsub f pat cflags s eflags``
  Replaces all non-overlapping instances of a pattern with a computed
  substitution string. To these ends, the given function ``f`` is applied
  to the reg_info_ for each match; it should return a string value. The
  result string is then obtained by concatenating ``f info`` for all
  matches, with the unmatched portions of the string in between.

.. raw:: html

   <a name="regsplit">

.. _regsplit:

``regsplit pat cflags s eflags``
  Splits a string into constituents delimited by substrings matching the
  given pattern.

..

Basic Examples
~~~~~~~~~~~~~~

Let's have a look at some simple examples::

  > let pat = "[[:alpha:]][[:alnum:]]*";
  > let s = "1var foo 99 BAR $%&";

Simple match::

  > regex pat 0 s 0;
  1,1,"var"

Same without match info::

  > regex pat REG_NOSUB s 0;
  1

Global match, return the list of all matches::

  > regexg id pat 0 s 0;
  [(1,"var"),(5,"foo"),(12,"BAR")]

Same with overlapping matches::

  > regexgg id pat 0 s 0;
  [(1,"var"),(2,"ar"),(3,"r"),(5,"foo"),(6,"oo"),(7,"o"),(12,"BAR"),
  (13,"AR"),(14,"R")]

Note that ``id`` (the identity function) in the examples above can be
replaced with an arbitrary function which processes the matches. For
instance, if we only want the matched strings instead of the full match
info::

  > regexg (\info -> info!1) pat 0 s 0;
  ["var","foo","BAR"]

Regex Substitutions and Splitting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can also perform substitutions on matches::

  > regsub (sprintf "<%d:%s>") pat 0 s 0;
  "1<1:var> <5:foo> 99 <12:BAR> $%&"

Or split a string using a delimiter pattern (this uses an egrep pattern)::

  > let delim = "[[:space:]]+";
  > regsplit delim REG_EXTENDED s 0;
  ["1var","foo","99","BAR","$%&"]
  > regsplit delim REG_EXTENDED "The   quick brown    fox" 0;
  ["The","quick","brown","fox"]

Empty Matches
~~~~~~~~~~~~~

Empty matches are permitted, too, subject to the constraint that at most
one match is reported for each position (which also prevents looping). And
of course an empty match will only be reported if nothing else matches. For
instance::

  > regexg id "" REG_EXTENDED "foo" 0;
  [(0,""),(1,""),(2,""),(3,"")]
  > regexg id "o*" REG_EXTENDED "foo" 0;
  [(0,""),(1,"oo"),(3,"")]
  > regexgg id "o*" REG_EXTENDED "foo" 0;
  [(0,""),(1,"oo"),(2,"o"),(3,"")]

This also works when substituting or splitting::

  > regsub (cst " ") "" REG_EXTENDED "some text" 0;
  " s o m e   t e x t "
  > regsub (cst " ") " ?" REG_EXTENDED "some text" 0;
  " s o m e  t e x t "
  > regsplit "" REG_EXTENDED "some text" 0;
  ["s","o","m","e"," ","t","e","x","t",""]
  > regsplit " ?" REG_EXTENDED "some text" 0;
  ["s","o","m","e","","t","e","x","t",""]

Submatches
~~~~~~~~~~

Parenthesized subexpressions in a pattern yield corresponding submatch
information, which is useful if we need to retrieve the text matched by a
given subexpression. For instance, suppose we want to parse environment
lines, such as those returned by the shell's ``set`` command. These can be
dissected using the following regex::

  > const env_pat = "^([^=]+)=(.*)$";
  > const env_flags = REG_EXTENDED or REG_NEWLINE;
  > regex env_pat env_flags "SHELL=/bin/sh" 0;
  1,0,"SHELL=/bin/sh",0,"SHELL",6,"/bin/sh"

Note that we again used an extended regex here, and we also added the
``REG_NEWLINE`` flag so that we properly deal with multiline input. The
desired information is in the 4th and 6th element of the submatch info,
we can retrieve that as follows::

  > parse_env s = regexg (\info -> info!3 => info!5) env_pat env_flags s 0;
  > parse_env "SHELL=/bin/sh\nHOME=/home/bar\n";
  ["SHELL"=>"/bin/sh","HOME"=>"/home/bar"]

We can get hold of the real process environment as follows::

  > let env = parse_env $ fget $ popen "set" "r";
  > #env;
  109
  > head env;
  "BASH"=>"/usr/bin/sh"

Just for the fun of it, let's employ dict_ to convert this to a dictionary,
providing easy random access to the environment variables::

  > using dict;
  > let env_dict = dict env;
  > env_dict!!["SHELL","HOME"];
  ["/bin/bash","/home/ag"]

.. 

Getopt
======

This is a quick-and-dirty replacement for the GNU getopt functions, ported
from the Q library.

Imports
-------

To use the operations of this module, add the following import declaration
to your program::

  using getopt;

Operations
----------

This module provides one operation: ``getopt opts args``

The ``getopt`` function takes two arguments: ``opts``, a list of option
descriptions in the format described below, and ``args``, a list of strings
containing the command line parameters to be parsed for options. The result
is a pair ``(opts_return,args_return)`` where ``opts_return`` is a list of
options and their values, and ``args_return`` is the list of remaining
(non-option) arguments. Options are parsed using the rules of GNU
getopt(1). If an invalid option is encountered (unrecognized option,
missing or extra argument, etc.), ``getopt`` throws the offending option
string as an exception.

The ``opts_return`` value is a list of "hash pairs" ``opt=>val`` where
``opt`` is the (long) option name (as given by the ``long_opt`` field given
in the ``opts`` argument, see below) and ``val`` is the corresponding value
(``()`` if none). Note that this format is ready to be passed to the dict_
or hdict_ function, cf. Dictionaries_, which makes it easy to retrieve
option values or check for the presence of options.

The ``opts`` argument of ``getopt`` must be a list of triples ``(long_opt,
short_opt, flag)``, where ``long_opt`` denotes the long option,
``short_opt`` the equivalent short option, and ``flag`` is one of the
symbolic integer values ``NOARG``, ``OPTARG`` and ``REQARG`` which
specifies whether the option has no argument, an optional argument or a
required argument, respectively. Either ``long_opt`` or ``short_opt``
should be a string value of the form ``"--abc"`` or ``"-x"``,
respectively. Note that since the ``long_opt`` value is always used to
denote the corresponding option in the ``opts_return`` list, you always
have to specify a sensible value for that field. If no separate long option
name is needed, you can specify the same value as in the ``short_opt``
field, or some other convenient value (e.g., an integer) which designates
the option. Conversely, to indicate that an option has no short option
equivalent, simply specify an empty option string for the ``short_opt``
field.

Examples
--------

::

  > let opts = [("--help", "-h", NOARG),       // no argument
  >             ("--version", "", NOARG),      // no short option
  >             ("--filename", "-f", REQARG),  // required argument
  >             ("--count", "-n", OPTARG)];    // optional argument
  > getopt opts ["foo", "-h", "--filename", "bar", "-n0", "baz"];
  ["--help"=>(),"--filename"=>"bar","--count"=>"0"],["foo","baz"]
  > catch invalid_option $ getopt opts ["-h","-v"];
  invalid_option "-v"
  > getopt opts [foo, "-h", bar];
  ["--help"=>()],[foo,bar]

As the last example shows, non-option arguments (as well as option values
specified as separate arguments) can actually be any values which are just
copied to the result lists as is.

.. This is the last module in the manual, so we include the index here.

Index
=====

* `!`_
* `! (array)`_
* `! (dict)`_
* `! (hdict)`_
* `! (string)`_
* `!!`_
* `!! (string)`_
* `#`_
* `# (array)`_
* `# (bag)`_
* `# (dict)`_
* `# (hdict)`_
* `# (heap)`_
* `# (matrix)`_
* `# (set)`_
* `# (string)`_
* `$`_
* `%`_
* `&&`_
* `*`_
* `* (bag)`_
* `* (set)`_
* `+`_
* `+ (bag)`_
* `+ (list)`_
* `+ (set)`_
* `+ (string)`_
* `+:`_
* `,`_
* `-`_
* `- (bag)`_
* `- (set)`_
* `.`_
* `..`_
* `/`_
* `:`_
* `<`_
* `<:`_
* `<<`_
* `<=`_
* `==`_
* `===`_
* `>`_
* `>=`_
* `>>`_
* `^`_
* `||`_
* `~`_
* `~=`_
* `~==`_
* `abs`_
* `abs (complex)`_
* `acos`_
* `acosh`_
* `add_history`_
* `addr`_
* `all`_
* `and`_
* `ans`_
* `any`_
* `append (array)`_
* `applp`_
* `arg`_
* `arithmetic sequences`_
* `arity`_
* `array`_
* `array2`_
* `arrayp`_
* `asctime`_
* `asin`_
* `asinh`_
* `atan`_
* `atan2`_
* `atanh`_
* `bad_list_value`_
* `bad_matrix_value`_
* `bad_tuple_value`_
* `bag`_
* `bagp`_
* `bigint`_
* `bigintp`_
* `bigintvalp`_
* `byte_cstring`_
* `byte_cstring_pointer`_
* `byte_matrix`_
* `byte_pointer`_
* `byte_string`_
* `byte_string_pointer`_
* `calloc`_
* `cat`_
* `catmap`_
* `ceil`_
* `character arithmetic`_
* `charp`_
* `chars`_
* `chr`_
* `cis`_
* `clear_sentry`_
* `clearerr`_
* `clock`_
* `cmatrix`_
* `col`_
* `colcat`_
* `colcatmap`_
* `colrev`_
* `cols`_
* `colvector`_
* `combinators`_
* `complex`_
* `complex_float_matrix`_
* `complex_float_pointer`_
* `complex_matrix`_
* `complex_matrix_view`_
* `complex_pointer`_
* `complexp`_
* `compvalp`_
* `conj`_
* `conj (matrix)`_
* `cooked`_
* `cookedp`_
* `cos`_
* `cosh`_
* `cst`_
* `cstring`_
* `cstring_dup`_
* `cstring_list`_
* `ctime`_
* `curry`_
* `curry3`_
* `cycle`_
* `cyclen`_
* `delete (bag)`_
* `delete (dict)`_
* `delete (hdict)`_
* `delete (set)`_
* `den`_
* `diag`_
* `diagmat`_
* `dict`_
* `dictp`_
* `dim`_
* `div`_
* `dmatrix`_
* `do`_
* `double`_
* `double_matrix`_
* `double_matrix_view`_
* `double_pointer`_
* `doublep`_
* `dowith`_
* `dowith3`_
* `drop`_
* `dropwhile`_
* `emptyarray`_
* `emptybag`_
* `emptydict`_
* `emptyhdict`_
* `emptyheap`_
* `emptyset`_
* `errno`_
* `eval`_
* `evalcmd`_
* `exactp`_
* `exit`_
* `exp`_
* `failed_cond`_
* `failed_match`_
* `false`_
* `fclose`_
* `feof`_
* `ferror`_
* `fflush`_
* `fget`_
* `fgets`_
* `filter`_
* `first (array)`_
* `first (bag)`_
* `first (dict)`_
* `first (hdict)`_
* `first (heap)`_
* `first (set)`_
* `fix`_
* `flip`_
* `float_matrix`_
* `float_pointer`_
* `floor`_
* `fnmatch`_
* `foldl`_
* `foldl1`_
* `foldr`_
* `foldr1`_
* `fopen`_
* `fprintf`_
* `fputs`_
* `frac`_
* `fread`_
* `free`_
* `fscanf`_
* `funp`_
* `fwrite`_
* `gcd`_
* `get`_
* `get_byte`_
* `get_double`_
* `get_float`_
* `get_int`_
* `get_int64`_
* `get_long`_
* `get_pointer`_
* `get_sentry`_
* `get_short`_
* `get_string`_
* `gets`_
* `gettimeofday`_
* `glob`_
* `gmtime`_
* `hash`_
* `hdict`_
* `hdictp`_
* `head`_
* `heap`_
* `heapp`_
* `id`_
* `im`_
* `im (matrix)`_
* `imatrix`_
* `index`_
* `index (string)`_
* `inexactp`_
* `init`_
* `insert (array)`_
* `insert (bag)`_
* `insert (dict)`_
* `insert (hdict)`_
* `insert (heap)`_
* `insert (set)`_
* `int`_
* `int_matrix`_
* `int_matrix_view`_
* `int_pointer`_
* `integerp`_
* `intp`_
* `intvalp`_
* `iterate`_
* `iteraten`_
* `iterwhile`_
* `join`_
* `keys`_
* `lambdap`_
* `last`_
* `last (array)`_
* `last (bag)`_
* `last (dict)`_
* `last (hdict)`_
* `last (set)`_
* `lasterr`_
* `lcd`_
* `list`_
* `list (array)`_
* `list (bag)`_
* `list (dict)`_
* `list (hdict)`_
* `list (heap)`_
* `list (matrix)`_
* `list (set)`_
* `list (string)`_
* `list concatenation`_
* `list indexing`_
* `list size`_
* `list slicing`_
* `list2 (array)`_
* `list2 (matrix)`_
* `listmap`_
* `listnp`_
* `listp`_
* `lists`_
* `ln`_
* `localtime`_
* `log`_
* `malloc`_
* `malloc_error`_
* `map`_
* `matcat`_
* `matrix`_
* `matrix (string)`_
* `matrix dimensions`_
* `matrix size`_
* `matrixp`_
* `max`_
* `member (bag)`_
* `member (dict)`_
* `member (hdict)`_
* `member (set)`_
* `members (array)`_
* `members (bag)`_
* `members (dict)`_
* `members (hdict)`_
* `members (heap)`_
* `members (set)`_
* `members2 (array)`_
* `min`_
* `mkarray`_
* `mkarray2`_
* `mkdict`_
* `mkhdict`_
* `mod`_
* `nanosleep`_
* `not`_
* `null`_
* `null (array)`_
* `null (bag)`_
* `null (dict)`_
* `null (hdict)`_
* `null (heap)`_
* `null (matrix)`_
* `null (set)`_
* `null (string)`_
* `num`_
* `numberp`_
* `operators`_
* `or`_
* `ord`_
* `out_of_bounds`_
* `pack`_
* `packed`_
* `pclose`_
* `perror`_
* `pointer`_
* `pointer (matrix)`_
* `pointerp`_
* `polar`_
* `popen`_
* `pow`_
* `pred`_
* `printf`_
* `put`_
* `put_byte`_
* `put_double`_
* `put_float`_
* `put_int`_
* `put_int64`_
* `put_long`_
* `put_pointer`_
* `put_short`_
* `put_string`_
* `puts`_
* `random`_
* `rational`_
* `rationalp`_
* `ratvalp`_
* `re`_
* `re (matrix)`_
* `readdir`_
* `readline`_
* `realloc`_
* `realp`_
* `realvalp`_
* `rect`_
* `redim`_
* `ref`_
* `refp`_
* `reg`_
* `reg_info`_
* `reg_result`_
* `regex`_
* `regexg`_
* `regexgg`_
* `regs`_
* `regsplit`_
* `regsub`_
* `repeat`_
* `repeatn`_
* `reverse`_
* `reverse (matrix)`_
* `rmfirst (array)`_
* `rmfirst (bag)`_
* `rmfirst (dict)`_
* `rmfirst (hdict)`_
* `rmfirst (heap)`_
* `rmfirst (set)`_
* `rmlast (array)`_
* `rmlast (bag)`_
* `rmlast (dict)`_
* `rmlast (hdict)`_
* `rmlast (set)`_
* `round`_
* `row`_
* `rowcat`_
* `rowcatmap`_
* `rowrev`_
* `rows`_
* `rowvector`_
* `same`_
* `scanf`_
* `scanl`_
* `scanl1`_
* `scanr`_
* `scanr1`_
* `sentry`_
* `set`_
* `set_errno`_
* `setlocale`_
* `setp`_
* `sgn`_
* `short_matrix`_
* `short_pointer`_
* `sin`_
* `sinh`_
* `sleep`_
* `smatrix`_
* `split`_
* `sprintf`_
* `sqrt`_
* `srandom`_
* `sscanf`_
* `stack_fault`_
* `str`_
* `strcat`_
* `stream`_
* `strerror`_
* `strftime`_
* `stride`_
* `string`_
* `string (pointer)`_
* `string concatenation`_
* `string indexing`_
* `string size`_
* `string slicing`_
* `string_dup`_
* `string_list`_
* `stringp`_
* `strings`_
* `subdiag`_
* `subdiagmat`_
* `submat`_
* `substr`_
* `succ`_
* `supdiag`_
* `supdiagmat`_
* `system`_
* `tail`_
* `take`_
* `takewhile`_
* `tan`_
* `tanh`_
* `throw`_
* `thunkp`_
* `time`_
* `transpose (matrix)`_
* `trap`_
* `true`_
* `trunc`_
* `tuple`_
* `tuple (matrix)`_
* `tuple (string)`_
* `tuple indexing`_
* `tuple size`_
* `tuple slicing`_
* `tuplep`_
* `tuples`_
* `ubyte`_
* `uint`_
* `uint64`_
* `ulong`_
* `uncurry`_
* `uncurry3`_
* `unref`_
* `unzip`_
* `unzip3`_
* `update (array)`_
* `update (dict)`_
* `update (hdict)`_
* `update2`_
* `ushort`_
* `values`_
* `varp`_
* `void`_
* `zip`_
* `zip3`_
* `zipwith`_
* `zipwith3`_


