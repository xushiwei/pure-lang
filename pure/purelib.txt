.. We use docutils to produce the documentation. Docstrings are extracted
.. with pure-doc. Please see the pure-doc documentation for details.

.. This module is always the first in the library docs, so produce the
.. title here.

===================
Pure Library Manual
===================

.. Add all pertaining author and copyright information here.

:Author: Albert Graef <Dr.Graef@t-online.de>
:Copyright: Copyright (c) 2009

.. Add all global docutils declarations here.

.. role:: dfn(strong)
.. default-role:: dfn

.. |GPL| replace:: GNU General Public License
.. |FDL| replace:: GNU Free Documentation License
.. _FDL: http://www.gnu.org/copyleft/fdl.html
.. _GPL: http://www.gnu.org/copyleft/gpl.html

.. _Pure Manual: file:pure.html

This document is available under the |FDL|_.

This manual describes the operations in the standard Pure library,
including the prelude and the other library modules which come bundled with
the interpreter. It is woefully incomplete right now, constributions are
welcome.

There is a companion to this manual, the `Pure Manual`_ which describes the
Pure language and the operation of the Pure interpreter.

.. Table of contents, switch on section numbering.

.. contents::
.. sectnum:: 

..

Dictionaries
============

The dict.pure module provides Pure's ``dict`` and ``hdict`` data types
based on AVL trees. ``dict`` is an ordered dictionary (assuming an ordered
key type), ``hdict`` a hashed dictionary which works with any (mixture of)
key types but stores members in an apparently random order.

The used AVL tree algorithm has its origin in the SWI-Prolog implementation
of association lists. The original file was created by R. A. O'Keefe and
updated for the SWI-Prolog by Jan Wielemaker. For the original file see
http://www.swi-prolog.org.

The port from SWI-Prolog and the deletion stuff (rmfirst, rmlast, delete)
missing in the original file was provided by Jiri Spitz. 

..

Imports
-------

To use the operations of this module, add the following import declaration
to your program::

  using dict;

Data Structure
--------------

A tree for ``dict`` and ``hdict`` takes the form ``Dict T`` or ``HDict T``
where ``T`` is either:

``nil``
  the empty tree; or

``bin key value balance left right``
  a nonempty tree with given ``key`` and ``value`` in the root node, where
  ``left`` and ``right`` are the left and right subtree, and ``balance``
  is either 1, 0 or -1, denoting ``|left|-|right|`` = 1, 0, or -1,
  respectively.

The tree constructors are private.

Operations
----------

.. _hdict:
.. _dict:

``emptydict``, ``emptyhdict``
  return the empty dict or hdict

``dict xs``, ``hdict xs``
  create a dict or hdict from list ``xs`` of key-value pairs in the form
  ``key=>value``

``dictp d``, ``hdictp d``
  check whether ``x`` is a dict or hdict

``mkdict y xs``, ``mkhdict y xs``
  create dict or hdict from a list of keys and a constant value

``#d``
  size of dict or hdict ``d``

``d!x``
  get value from ``d`` by key ``x``

``null d``
  test whether ``d`` is the empty dict or hdict

``member d x``
  test whether ``d`` contains a member with key ``x``

``members d``, ``list d``
  list members of ``d`` (in ascending order for dict)

``keys d``
  list keys of ``d`` (in ascending order for dict)

``values d``
  list values of ``d``

``first d``, ``last d``
  return first and last member of ``d``

``rmfirst d``, ``rmlast d``
  remove first and last member from ``d``

``insert d (x=>y)``, ``update d x y``
  insert ``x=>y`` into ``d`` (replace any existing element); ``update`` is
  a fully curried version of ``insert``

``delete d x``
  remove ``x`` from ``d``

Examples
--------

A normal (ordered) dictionary::

  > using dict;
  > let d = dict ["foo"=>77,"bar"=>99.1];
  > keys d; vals d; members d;
  ["bar","foo"]
  [99.1,77]
  ["bar"=>99.1,"foo"=>77]

A hashed dictionary can be used with any key values, which are stored in a
seemingly random order::

  > let h = hdict [foo=>77,42=>99.1];
  > keys h; vals h; members h;
  [42,foo]
  [99.1,77]
  [42=>99.1,foo=>77]

.. 

Getopt
======

This is a quick-and-dirty replacement for the GNU getopt functions, ported
from the Q library.

Imports
-------

To use the operations of this module, add the following import declaration
to your program::

  using getopt;

Operations
----------

``getopt opts args``
   get program options from the ``args`` variable

The ``getopt`` function takes two arguments: ``opts``, a list of option
descriptions in the format described below, and ``args``, a list of strings
containing the command line parameters to be parsed for options. The result
is a pair ``(opts_return,args_return)`` where ``opts_return`` is a list of
options and their values, and ``args_return`` is the list of remaining
(non-option) arguments. Options are parsed using the rules of GNU
getopt(1). If an invalid option is encountered (unrecognized option,
missing or extra argument, etc.), ``getopt`` throws the offending option
string as an exception.

The ``opts_return`` value is a list of "hash pairs" ``opt=>val`` where
``opt`` is the (long) option name (as given by the ``long_opt`` field given
in the ``opts`` argument, see below) and ``val`` is the corresponding value
(``()`` if none). Note that this format is ready to be passed to the dict_
or hdict_ function, cf. Dictionaries_, which makes it easy to retrieve
option values or check for the presence of options.

The ``opts`` argument of ``getopt`` must be a list of triples ``(long_opt,
short_opt, flag)``, where ``long_opt`` denotes the long option,
``short_opt`` the equivalent short option, and ``flag`` is one of the
symbolic integer values ``NOARG``, ``OPTARG`` and ``REQARG`` which
specifies whether the option has no argument, an optional argument or a
required argument, respectively. Either ``long_opt`` or ``short_opt``
should be a string value of the form ``"--abc"`` or ``"-x"``,
respectively. Note that since the ``long_opt`` value is always used to
denote the corresponding option in the ``opts_return`` list, you always
have to specify a sensible value for that field. If no separate long option
name is needed, you can specify the same value as in the ``short_opt``
field, or some other convenient value (e.g., an integer) which designates
the option. Conversely, to indicate that an option has no short option
equivalent, simply specify an empty option string for the ``short_opt``
field.

Examples
--------

::

  > let opts = [("--help", "-h", NOARG),       // no argument
  >             ("--version", "", NOARG),      // no short option
  >             ("--filename", "-f", REQARG),  // required argument
  >             ("--count", "-n", OPTARG)];    // optional argument
  > getopt opts ["foo", "-h", "--filename", "bar", "-n0", "baz"];
  ["--help"=>(),"--filename"=>"bar","--count"=>"0"],["foo","baz"]
  > catch invalid_option $ getopt opts ["-h","-v"];
  invalid_option "-v"
  > getopt opts [foo, "-h", bar];
  ["--help"=>()],[foo,bar]

As the last example shows, non-option arguments (as well as option values
specified as separate arguments) can actually be any values which are just
copied to the result lists as is. 

