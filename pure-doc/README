
pure-doc
========

:Author: Albert Graef <Dr.Graef@t-online.de>
:License: GPL V3, see the accompanying COPYING file

.. |RST| replace:: reStructuredText
.. _RST: http://docutils.sourceforge.net/rst.html
.. _docutils: http://docutils.sourceforge.net

pure-doc is a simple utility for literate programming and documenting source
code written in the Pure programming language. It is supposed to be used with
the excellent docutils_ tools and the gentle markup format supported by these,
called RST_ a.k.a. "|RST|", usually pronounced "rest".

The basic idea is that you just comment your code as usual, but using RST
markup instead of plain text. In addition, you can also designate literate
programming fragments in your code, which will be translated to RST literal
blocks automatically. You then run pure-doc on your source files to extract
all marked up comments and the literate code blocks. The resulting RST source
can then be processed with the docutils utilities like rst2html.py and
rst2latex.py to create the documentation in a variety of formats.

Installation
============

Just do the customary ``make && sudo make install``. This only needs flex and
a standards-compliant C++ compiler.

Usage
=====

First, see the description of the RST_ format. RST is a very simple markup
format, almost like plain text (in fact, you're looking at RST right now, this
README is written in it!). You can learn enough of it to start marking up your
source in about five minutes.

Second, you'll have to mark up your source comments. pure-doc recognizes
comments in RST format by looking at the first non-empty line of the
comment. A comment (either ``/* ... */`` or a contiguous sequence of ``//``
line comments) is assumed to contain RST format if the first non-empty line
starts with ``:``, ``..`` or ``__``. Other comments are taken to be plain text
and are ignored by pure-doc.

Notes:

* pure-doc makes no other assumption about the contents of marked up comments,
  so you can include whatever you want: titles, section headers, fields, plain
  text, whatever. Just make sure that the comment starts with one of the
  special tokens listed above. (You can always put just ``..`` at the
  beginning of the comment to force it to be recognized, this will be treated
  as a comment by the docutils tools.)

* Also, pure-doc makes very few assumptions about the source; in fact, any
  source files with a C/C++-like comment and string syntax should work. So you
  could also use it to document your C/C++ programs, or even plain text files
  like this one, as long as they adhere to these standards.

* Indentation in extracted comments is preserved (assuming tabs = 8 spaces,
  you can change this in pure-doc.ll).  This is important because indentation
  conveys document structure in RST.

For instance, here is a sample RST-formatted comment::

  /* :Name: ``rand`` - compute random numbers
     :Synopsis: ``rand``
     :Description: Computes a (pseudo) random number. Takes no parameters.
     :Example: Here is how you can call ``rand`` in Pure:
       ::

         > extern int rand();
         > rand;
         1804289383

     :See Also: rand(3) */

Finally, you run pure-doc on your source files as follows::

  pure-doc source-files ...

The output is written to stdout, so that you can directly pipe it into one of
the docutils programs::

  pure-doc source-files ... | rst2html.py

If you prefer to write the output to a file, you can do that as follows::

  pure-doc source-files ... > rst-file

Literate Programming
====================

pure-doc also recognizes literate code delimited by comments which, besides
the comment delimiters and whitespace, contain nothing but the special start
and end "tags" ``>>>`` and ``<<<``. Code between these delimiters (including
all comments) is extracted from the source and output as a RST literal code
block.

For instance::

  /* ..

     pure-doc supports literate programming, too: */

  // >>>

  /* This is a literate comment. */
  // .. This too!

  extern int rand();
  rand;

  // <<<

Try it now! You can scrape all the documentation from this file and format it
as html, as follows::

  pure-doc README | rst2html.py --no-doc-title --no-doc-info > test.html

As already mentioned, this README itself is also in RST format, so you can
also do the following to get nicely formatted documentation::

  rst2html.py README pure-doc.html

(You can also just type ``make html`` to get this.)

Enjoy! :)
