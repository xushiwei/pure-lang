
/* A simple OSC client. */

/* NOTE: This directly uses liblo, which is fairly low-level. Please also have
   a look at osc_example, which does about the same thing using the high-level
   interface in osc.pure instead. */

using lo;
using namespace lo;

/* The address of an OSC server to which we send our stuff. NULL as the
   hostname means "localhost" here. Note that sometimes it is better to let
   the server pick a port number for you by passing NULL as the second (port)
   argument. */

let t = make_address 7770;

/* A liblo blob. Note that using Pure's 'blob' function, this allows you to
   send (almost) any Pure value. */

//let b = blob_new 5 "ABCDE";
let b = make_blob $ blob {"Hello, world!",x+y,1/2,4711,-4711L,NULL};

/* Examples for different kinds of messages. See http://opensoundcontrol.org
   for a description of the OSC type tags. liblo supports them all (as of
   liblo 0.26), except "[" and "]". */

// Different kinds of numbers.
send t "/foo/bla" "f" (1/7);
send t "/foo/bla" "d" (1/7);
send t "/foo/bla" "i" 99;
send t "/foo/bla" "h" 99L;
// character
send t "/foo/bla" "c" 65;
// strings and symbols
send t "/foo/bla" "s" "Hello, world!";
send t "/foo/bla" "S" "Hello";
// timestamp
send t "/foo/bla" "t" {0,1};
// MIDI message (always 4 bytes: port,status,data1,data2)
send t "/foo/bla" "m" {0,0x90,60,64};
// blob
send t "/foo/bla" "b" b;
// special values, these don't have any data bytes
send t "/foo/bla" "T" ();
send t "/foo/bla" "F" ();
send t "/foo/bla" "N" ();
send t "/foo/bla" "I" ();

/* Send a message with a mixture of float and string arguments. */

send t "/foo/bar" "sfsff" ("one", 0.12345678, "three", -0.00000023001, 1.0);

/* A message without parameters, to be delivered immediately. */

send t "/now" "" ();

/* A quit message, scheduled to be delivered 2 seconds later. (Some OSC
   servers will exit on this.) */

send_timestamped t (timetag NULL 5) "/quit" "" ();
