/* GL/all_gl_freeglut.h: */
using "lib:pure-gl";

namespace GLU;
const GLU::FALSE = 0;
const GLU::TRUE = 1;
const GLU::VERSION_1_1 = 1;
const GLU::VERSION_1_2 = 1;
const GLU::VERSION_1_3 = 1;
const GLU::VERSION = 100800;
const GLU::EXTENSIONS = 100801;
const GLU::INVALID_ENUM = 100900;
const GLU::INVALID_VALUE = 100901;
const GLU::OUT_OF_MEMORY = 100902;
const GLU::INCOMPATIBLE_GL_VERSION = 100903;
const GLU::INVALID_OPERATION = 100904;
const GLU::OUTLINE_POLYGON = 100240;
const GLU::OUTLINE_PATCH = 100241;
const GLU::NURBS_ERROR = 100103;
const GLU::ERROR = 100103;
const GLU::NURBS_BEGIN = 100164;
const GLU::NURBS_BEGIN_EXT = 100164;
const GLU::NURBS_VERTEX = 100165;
const GLU::NURBS_VERTEX_EXT = 100165;
const GLU::NURBS_NORMAL = 100166;
const GLU::NURBS_NORMAL_EXT = 100166;
const GLU::NURBS_COLOR = 100167;
const GLU::NURBS_COLOR_EXT = 100167;
const GLU::NURBS_TEXTURE_COORD = 100168;
const GLU::NURBS_TEX_COORD_EXT = 100168;
const GLU::NURBS_END = 100169;
const GLU::NURBS_END_EXT = 100169;
const GLU::NURBS_BEGIN_DATA = 100170;
const GLU::NURBS_BEGIN_DATA_EXT = 100170;
const GLU::NURBS_VERTEX_DATA = 100171;
const GLU::NURBS_VERTEX_DATA_EXT = 100171;
const GLU::NURBS_NORMAL_DATA = 100172;
const GLU::NURBS_NORMAL_DATA_EXT = 100172;
const GLU::NURBS_COLOR_DATA = 100173;
const GLU::NURBS_COLOR_DATA_EXT = 100173;
const GLU::NURBS_TEXTURE_COORD_DATA = 100174;
const GLU::NURBS_TEX_COORD_DATA_EXT = 100174;
const GLU::NURBS_END_DATA = 100175;
const GLU::NURBS_END_DATA_EXT = 100175;
const GLU::NURBS_ERROR1 = 100251;
const GLU::NURBS_ERROR2 = 100252;
const GLU::NURBS_ERROR3 = 100253;
const GLU::NURBS_ERROR4 = 100254;
const GLU::NURBS_ERROR5 = 100255;
const GLU::NURBS_ERROR6 = 100256;
const GLU::NURBS_ERROR7 = 100257;
const GLU::NURBS_ERROR8 = 100258;
const GLU::NURBS_ERROR9 = 100259;
const GLU::NURBS_ERROR10 = 100260;
const GLU::NURBS_ERROR11 = 100261;
const GLU::NURBS_ERROR12 = 100262;
const GLU::NURBS_ERROR13 = 100263;
const GLU::NURBS_ERROR14 = 100264;
const GLU::NURBS_ERROR15 = 100265;
const GLU::NURBS_ERROR16 = 100266;
const GLU::NURBS_ERROR17 = 100267;
const GLU::NURBS_ERROR18 = 100268;
const GLU::NURBS_ERROR19 = 100269;
const GLU::NURBS_ERROR20 = 100270;
const GLU::NURBS_ERROR21 = 100271;
const GLU::NURBS_ERROR22 = 100272;
const GLU::NURBS_ERROR23 = 100273;
const GLU::NURBS_ERROR24 = 100274;
const GLU::NURBS_ERROR25 = 100275;
const GLU::NURBS_ERROR26 = 100276;
const GLU::NURBS_ERROR27 = 100277;
const GLU::NURBS_ERROR28 = 100278;
const GLU::NURBS_ERROR29 = 100279;
const GLU::NURBS_ERROR30 = 100280;
const GLU::NURBS_ERROR31 = 100281;
const GLU::NURBS_ERROR32 = 100282;
const GLU::NURBS_ERROR33 = 100283;
const GLU::NURBS_ERROR34 = 100284;
const GLU::NURBS_ERROR35 = 100285;
const GLU::NURBS_ERROR36 = 100286;
const GLU::NURBS_ERROR37 = 100287;
const GLU::AUTO_LOAD_MATRIX = 100200;
const GLU::CULLING = 100201;
const GLU::SAMPLING_TOLERANCE = 100203;
const GLU::DISPLAY_MODE = 100204;
const GLU::PARAMETRIC_TOLERANCE = 100202;
const GLU::SAMPLING_METHOD = 100205;
const GLU::U_STEP = 100206;
const GLU::V_STEP = 100207;
const GLU::NURBS_MODE = 100160;
const GLU::NURBS_MODE_EXT = 100160;
const GLU::NURBS_TESSELLATOR = 100161;
const GLU::NURBS_TESSELLATOR_EXT = 100161;
const GLU::NURBS_RENDERER = 100162;
const GLU::NURBS_RENDERER_EXT = 100162;
const GLU::OBJECT_PARAMETRIC_ERROR = 100208;
const GLU::OBJECT_PARAMETRIC_ERROR_EXT = 100208;
const GLU::OBJECT_PATH_LENGTH = 100209;
const GLU::OBJECT_PATH_LENGTH_EXT = 100209;
const GLU::PATH_LENGTH = 100215;
const GLU::PARAMETRIC_ERROR = 100216;
const GLU::DOMAIN_DISTANCE = 100217;
const GLU::MAP1_TRIM_2 = 100210;
const GLU::MAP1_TRIM_3 = 100211;
const GLU::POINT = 100010;
const GLU::LINE = 100011;
const GLU::FILL = 100012;
const GLU::SILHOUETTE = 100013;
const GLU::SMOOTH = 100000;
const GLU::FLAT = 100001;
const GLU::NONE = 100002;
const GLU::OUTSIDE = 100020;
const GLU::INSIDE = 100021;
const GLU::TESS_BEGIN = 100100;
const GLU::BEGIN = 100100;
const GLU::TESS_VERTEX = 100101;
const GLU::VERTEX = 100101;
const GLU::TESS_END = 100102;
const GLU::END = 100102;
const GLU::TESS_ERROR = 100103;
const GLU::TESS_EDGE_FLAG = 100104;
const GLU::EDGE_FLAG = 100104;
const GLU::TESS_COMBINE = 100105;
const GLU::TESS_BEGIN_DATA = 100106;
const GLU::TESS_VERTEX_DATA = 100107;
const GLU::TESS_END_DATA = 100108;
const GLU::TESS_ERROR_DATA = 100109;
const GLU::TESS_EDGE_FLAG_DATA = 100110;
const GLU::TESS_COMBINE_DATA = 100111;
const GLU::CW = 100120;
const GLU::CCW = 100121;
const GLU::INTERIOR = 100122;
const GLU::EXTERIOR = 100123;
const GLU::UNKNOWN = 100124;
const GLU::TESS_WINDING_RULE = 100140;
const GLU::TESS_BOUNDARY_ONLY = 100141;
const GLU::TESS_TOLERANCE = 100142;
const GLU::TESS_ERROR1 = 100151;
const GLU::TESS_ERROR2 = 100152;
const GLU::TESS_ERROR3 = 100153;
const GLU::TESS_ERROR4 = 100154;
const GLU::TESS_ERROR5 = 100155;
const GLU::TESS_ERROR6 = 100156;
const GLU::TESS_ERROR7 = 100157;
const GLU::TESS_ERROR8 = 100158;
const GLU::TESS_MISSING_BEGIN_POLYGON = 100151;
const GLU::TESS_MISSING_BEGIN_CONTOUR = 100152;
const GLU::TESS_MISSING_END_POLYGON = 100153;
const GLU::TESS_MISSING_END_CONTOUR = 100154;
const GLU::TESS_COORD_TOO_LARGE = 100155;
const GLU::TESS_NEED_COMBINE_CALLBACK = 100156;
const GLU::TESS_WINDING_ODD = 100130;
const GLU::TESS_WINDING_NONZERO = 100131;
const GLU::TESS_WINDING_POSITIVE = 100132;
const GLU::TESS_WINDING_NEGATIVE = 100133;
const GLU::TESS_WINDING_ABS_GEQ_TWO = 100134;
const GLU::TESS_MAX_COORD = 1e+150;
extern void Pure_gluBeginCurve(GLUnurbs*) = BeginCurve;
extern void Pure_gluBeginPolygon(GLUtesselator*) = BeginPolygon;
extern void Pure_gluBeginSurface(GLUnurbs*) = BeginSurface;
extern void Pure_gluBeginTrim(GLUnurbs*) = BeginTrim;
extern int Pure_gluBuild1DMipmapLevels(int, int, int, int, int, int, int, int, void*) = Build1DMipmapLevels;
extern int Pure_gluBuild1DMipmaps(int, int, int, int, int, void*) = Build1DMipmaps;
extern int Pure_gluBuild2DMipmapLevels(int, int, int, int, int, int, int, int, int, void*) = Build2DMipmapLevels;
extern int Pure_gluBuild2DMipmaps(int, int, int, int, int, int, void*) = Build2DMipmaps;
extern int Pure_gluBuild3DMipmapLevels(int, int, int, int, int, int, int, int, int, int, void*) = Build3DMipmapLevels;
extern int Pure_gluBuild3DMipmaps(int, int, int, int, int, int, int, void*) = Build3DMipmaps;
extern char Pure_gluCheckExtension(char*, char*) = CheckExtension;
extern void Pure_gluCylinder(GLUquadric*, double, double, double, int, int) = Cylinder;
extern void Pure_gluDeleteNurbsRenderer(GLUnurbs*) = DeleteNurbsRenderer;
extern void Pure_gluDeleteQuadric(GLUquadric*) = DeleteQuadric;
extern void Pure_gluDeleteTess(GLUtesselator*) = DeleteTess;
extern void Pure_gluDisk(GLUquadric*, double, double, int, int) = Disk;
extern void Pure_gluEndCurve(GLUnurbs*) = EndCurve;
extern void Pure_gluEndPolygon(GLUtesselator*) = EndPolygon;
extern void Pure_gluEndSurface(GLUnurbs*) = EndSurface;
extern void Pure_gluEndTrim(GLUnurbs*) = EndTrim;
extern char* Pure_gluErrorString(int) = ErrorString;
extern void Pure_gluGetNurbsProperty(GLUnurbs*, int, float*) = GetNurbsProperty;
extern char* Pure_gluGetString(int) = GetString;
extern void Pure_gluGetTessProperty(GLUtesselator*, int, double*) = GetTessProperty;
extern void Pure_gluLoadSamplingMatrices(GLUnurbs*, float*, float*, int*) = LoadSamplingMatrices;
extern void Pure_gluLookAt(double, double, double, double, double, double, double, double, double) = LookAt;
extern GLUnurbs* Pure_gluNewNurbsRenderer() = NewNurbsRenderer;
extern GLUquadric* Pure_gluNewQuadric() = NewQuadric;
extern GLUtesselator* Pure_gluNewTess() = NewTess;
extern void Pure_gluNextContour(GLUtesselator*, int) = NextContour;
extern void Pure_gluNurbsCallback(GLUnurbs*, int, void*) = NurbsCallback;
extern void Pure_gluNurbsCallbackData(GLUnurbs*, void*) = NurbsCallbackData;
extern void Pure_gluNurbsCallbackDataEXT(GLUnurbs*, void*) = NurbsCallbackDataEXT;
extern void Pure_gluNurbsCurve(GLUnurbs*, int, float*, int, float*, int, int) = NurbsCurve;
extern void Pure_gluNurbsProperty(GLUnurbs*, int, float) = NurbsProperty;
extern void Pure_gluNurbsSurface(GLUnurbs*, int, float*, int, float*, int, int, float*, int, int, int) = NurbsSurface;
extern void Pure_gluOrtho2D(double, double, double, double) = Ortho2D;
extern void Pure_gluPartialDisk(GLUquadric*, double, double, int, int, double, double) = PartialDisk;
extern void Pure_gluPerspective(double, double, double, double) = Perspective;
extern void Pure_gluPickMatrix(double, double, double, double, int*) = PickMatrix;
extern int Pure_gluProject(double, double, double, double*, double*, int*, double*, double*, double*) = Project;
extern void Pure_gluPwlCurve(GLUnurbs*, int, float*, int, int) = PwlCurve;
extern void Pure_gluQuadricCallback(GLUquadric*, int, void*) = QuadricCallback;
extern void Pure_gluQuadricDrawStyle(GLUquadric*, int) = QuadricDrawStyle;
extern void Pure_gluQuadricNormals(GLUquadric*, int) = QuadricNormals;
extern void Pure_gluQuadricOrientation(GLUquadric*, int) = QuadricOrientation;
extern void Pure_gluQuadricTexture(GLUquadric*, char) = QuadricTexture;
extern int Pure_gluScaleImage(int, int, int, int, void*, int, int, int, void*) = ScaleImage;
extern void Pure_gluSphere(GLUquadric*, double, int, int) = Sphere;
extern void Pure_gluTessBeginContour(GLUtesselator*) = TessBeginContour;
extern void Pure_gluTessBeginPolygon(GLUtesselator*, void*) = TessBeginPolygon;
extern void Pure_gluTessCallback(GLUtesselator*, int, void*) = TessCallback;
extern void Pure_gluTessEndContour(GLUtesselator*) = TessEndContour;
extern void Pure_gluTessEndPolygon(GLUtesselator*) = TessEndPolygon;
extern void Pure_gluTessNormal(GLUtesselator*, double, double, double) = TessNormal;
extern void Pure_gluTessProperty(GLUtesselator*, int, double) = TessProperty;
extern void Pure_gluTessVertex(GLUtesselator*, double*, void*) = TessVertex;
extern int Pure_gluUnProject(double, double, double, double*, double*, int*, double*, double*, double*) = UnProject;
extern int Pure_gluUnProject4(double, double, double, double, double*, double*, int*, double, double, double*, double*, double*, double*) = UnProject4;
