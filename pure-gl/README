Pure OpenGL bindings generator, by Scott Dillard.

Copyright info:

The binding generator in the generator subdirectory contains significant
portions of the Language.C Haskell library. See generator/dump-ast.hs for
pertinent license and copyright information. 


These are the Pure bindings for the OpenGL graphics library, which allow you
to do 2D and 3D graphics programming with Pure. The bindings were created with
an interface generator which is included so that you can regenerate the
bindings if necessary.

Information about OpenGL can be found at: http://www.opengl.org/


INSTALLATION:

Normally you just run 'make && sudo make install', as with the other Pure
modules. (See The Makefile for further options.)

If you miss some vendor-specific OpenGL functionality which is in your
system's header files but not in the distributed bindings, with some effort
you can fix that yourself by regenerating the bindings, see below.


USING THE GL BINDINGS:

The bindings consist of 3 Pure files: GL.pure, GLU.pure and GLUT.pure.  

In your Pure program, write something like

  using GL,GLU,GLUT;

GL.pure covers OpenGL up through version 2.1. To get access to extensions, you
include GL_XXX.pure where XXX is the extensions suffix. Currently, there are
GL_ARB.pure, GL_EXT.pure, GL_NV.pure and GL_ATI.pure, which should cover about
99% of the useful extensions out there. If you need more, it is
straightforward to tweak the generator to scrape some of the more esoteric
extensions from your headers. All OpenGL functions are loaded on first use. If
your OpenGL implementation does not define that function, a gl_unsupported
exception is thrown with the name of the function as its only argument.

The functions are in namespaces GL, GLU and GLUT respectively. Functions
are in curried form, i.e., 

  GL::Vertex3d 1.0 2.0 3.0;
 
GL enumerants are in uppercase, as in C. 

  GL::Begin GL::LINE_STRIP

Currently, if the GLU or GLUT bindings reference a function that your DLL does
not contain, it echoes this to stdout. I'm working on a way to supress this.

Some examples can be found in the examples subdirectory.


USING THE GENERATOR:

The binding generator can be found in the generator subdirectory.

This uses the Language.C parser for Haskell

http://hackage.haskell.org/cgi-bin/hackage-scripts/package/language-c

You will need a Haskell compiler (GHC) and that library. The Haskell program
dump-ast.hs parses a C file (its only command line argument) and writes the
AST to stdout. It calls GCC to do the preprocessing, so on Windows you will
probably need MinGW installed. For Linux users, I have uploaded statically
linked binaries, both 32 and 64 bits, to the Pure-lang Google Group files
area. (It still needs libgmp, but so does Pure so I assume you have that.)

The Pure program pure-gl-gen.pure calls dump-ast, passing it the file
all_gl.h, which includes all of gl.h, glext.h, glu.h and glut.h. The generator
looks for these files in the current working directory, so you have to create
some symlinks. In order to use the MESA headers available on most Linux/Unix
systems:

  ln -s /usr/include/GL/gl.h
  ln -s /usr/include/GL/glext.h
  ln -s /usr/include/GL/glu.h
  ln -s /usr/include/GL/glut.h

The MESA headers should actually be replaced with headers from your GPU vendor
if available. For instance, if you're like me and you use Ubuntu with an
Nvidia GPU, then replace the first two lines above with the following:

  ln -s /usr/share/doc/nvidia-glx-new-dev/include/GL/gl.h
  ln -s /usr/share/doc/nvidia-glx-new-dev/include/GL/glext.h

Moreover, on many systems you'll actually be using freeglut instead of the
standard GLUT libraries. In this case, you also have to add a link to
freeglut_std.h, because glut.h just includes that, and the generator also
needs access to the raw (un-preprocessed) headers to get the #defines:

  ln -s /usr/include/GL/freeglut_std.h

Most likely you'll also want support for the freeglut extensions, to these
ends just add a link to the corresponding header file:

  ln -s /usr/include/GL/freeglut_ext.h

(If you omit this step then the bindings will not include the freeglut
extensions.)

If you use openglut you will have to change this accordingly. (Search
pure-gl-gen.pure and all_gl_ext.h for "freeglut".)

Finally, with these headers in your current working directory, run

    pure pure-gl-gen.pure

It will complain about some unknown structs but that's ok: they are opaque
pointers. It will output some Pure files and a single C file, pure-gl.c. This
C file contains the on-demand loading code for each GL function. The Pure
files reference the files in this C module, rather than the OpenGL functions
directly, to account for the fact different GL implementations will export
different functions. (Mostly to account for Microsoft's Museum of Ancient
OpenGL History, otherwise known as opengl32.dll.)
