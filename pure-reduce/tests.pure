
/* Some tests provided by Kurt Pagani. */

using math, reduce;

/* This is part of the Computer Algebra Test Suite (CATS), pilfered from the
   Axiom website [1,2]. These files show the results that are computed given
   the set of integrals listed in:

     Spiegel, Murray R.
     Mathematical Handbook of Formulas and Tables
     Schaum's Outline Series McGraw-Hill 1968

   Each integral is computed and compared against the published result,
   subtracting each result from the published result and reducing to a
   constant; differentiating the final result should always gives 0.

   NOTE: Spiegel is off by a constant factor in integral #15 below (obviously
   a glitch in Schaum's handbook).

   Source:
   [1] http://axiom.axiom-developer.org/axiom-website/CATS/index.html
   [2] http://axiom.axiom-developer.org/axiom-website/CATS/schaum1.input.pamphlet */

integrate(f,x) = simplify $ intg f x;
check I R = D, simplify (df D x) when D = simplify (I-R) end;

//1
let I = integrate(1/(a*x+b),x);
let R = 1/a*log(a*x+b);
check I R;
//2
let I = integrate(x/(a*x+b),x);
let R = x/a-b/a^2*log(a*x+b);
check I R;
//3
let I = integrate(x^2/(a*x+b),x);
let R = (a*x+b)^2/(2*a^3)-(2*b*(a*x+b))/a^3+b^2/a^3*log(a*x+b);
check I R;
//4
let I = integrate(x^3/(a*x+b),x);
let R = (a*x+b)^3/(3*a^4)-(3*b*(a*x+b)^2)/(2*a^4)+(3*b^2*(a*x+b))/
         a^4-(b^3/a^4)*log(a*x+b);
check I R;
//5
let I = integrate(1/(x*(a*x+b)),x);
let R = 1/b*log(x/(a*x+b));
check I R;
//6
let I = integrate(1/(x^2*(a*x+b)),x);
let R = -1/(b*x)+a/b^2*log((a*x+b)/x);
check I R;
//7
let I = integrate(1/(x^3*(a*x+b)),x);
let R = (2*a*x-b)/(2*b^2*x^2)+a^2/b^3*log(x/(a*x+b));
check I R;
//8
let I = integrate(1/(a*x+b)^2,x);
let R = -1/(a*(a*x+b));
check I R;
//9
let I = integrate(x/(a*x+b)^2,x);
let R = b/(a^2*(a*x+b))+1/a^2*log(a*x+b);
check I R;
//10
let I = integrate(x^2/(a*x+b)^2,x);
let R = (a*x+b)/a^3-b^2/(a^3*(a*x+b))-((2*b)/a^3)*log(a*x+b);
check I R;
//11
let I = integrate(x^3/(a*x+b)^2,x);
let R = (a*x+b)^2/(2*a^4)-(3*b*(a*x+b))/a^4+b^3/(a^4*(a*x+b))+(3*b^2/
         a^4)*log(a*x+b);
check I R;
//12
let I = integrate(1/(x*(a*x+b)^2),x);
let R = (1/(b*(a*x+b))+(1/b^2)*log(x/(a*x+b)));
check I R;
//13
let I = integrate(1/(x^2*(a*x+b)^2),x);
let R = (-a/(b^2*(a*x+b)))-(1/(b^2*x))+((2*a)/b^3)*log((a*x+b)/x);
check I R;
//14
let I = integrate(1/(x^3*(a*x+b)^2),x);
let R = -(a*x+b)^2/(2*b^4*x^2)+(3*a*(a*x+b))/(b^4*x)-(a^3*x)/
         (b^4*(a*x+b))-((3*a^2)/b^4)*log((a*x+b)/x);
check I R;
//15
let I = integrate(1/(a*x+b)^3,x);
let R = -1/(2*(a*x+b)^2);
// Spiegel is off by a constant factor here
D, simplify (df D x) when D = simplify (I/R) end;
//16
let I = integrate(x/(a*x+b)^3,x);
let R = -1/(a^2*(a*x+b))+b/(2*a^2*(a*x+b)^2);
check I R;
//17
let I = integrate(x^2/(a*x+b)^3,x);
let R = (2*b)/(a^3*(a*x+b))-(b^2)/(2*a^3*(a*x+b)^2)+1/a^3*log(a*x+b);
check I R;
//18
let I = integrate(x^3/(a*x+b)^3,x);
let R = (x/a^3)-(3*b^2)/(a^4*(a*x+b))+b^3/(2*a^4*(a*x+b)^2)-(3*b)/
         a^4*log(a*x+b);
check I R;
//19
let I = integrate(1/(x*(a*x+b)^3),x);
let R = (a^2*x^2)/(2*b^3*(a*x+b)^2)-(2*a*x)/(b^3*(a*x+b))-
        (1/b^3)*log((a*x+b)/x);
check I R;
//20
let I = integrate(1/(x^2*(a*x+b)^3),x);
let R = -a/(2*b^2*(a*x+b)^2)-(2*a)/(b^3*(a*x+b))-1/(b^3*x)+((3*a)/
         b^4)*log((a*x+b)/x);
check I R;
//21
let I = integrate(1/(x^3*(a*x+b)^3),x);
let R = -1/(2*b*x^2*(a*x+b)^2)+(2*a)/(b^2*x*(a*x+b)^2)+(9*a^2)/(b^3*(a*x+b)^2)
        +(6*a^3*x)/(b^4*(a*x+b)^2)+(-6*a^2)/b^5*log((a*x+b)/x);
check I R;
//22
let I = integrate((a*x+b)^n,x);
let R = (a*x+b)^(n+1)/((n+1)*a);
check I R;
//23
let I = integrate(x*(a*x+b)^n,x);
let R = ((a*x+b)^(n+2))/((n+2)*a^2)-(b*(a*x+b)^(n+1))/((n+1)*a^2);
check I R;
//24
let I = integrate(x^2*(a*x+b)^n,x);
let R = (a*x+b)^(n+3)/((n+3)*a^3)-(2*b*(a*x+b)^(n+2))/((n+2)*a^3)+
        (b^2*(a*x+b)^(n+1))/((n+1)*a^3);
check I R;

/* More examples from the Reduce manual. *************************************/

let r1 = simplify $ nextprime 1002229999 ; r1; // 1002230017
let r2 = simplify $ pf (2/((x+1)^2*(x+2))) x ; r2; // list of partial fraction
let r3 = simplify $ solve (log(sin(x+3))^5 == 8) x ; r3;
let r4 = simplify $ coeff ((y^2+z)^3/z) y ; r4; // coeffs of polynom w.r.t. var
let r5 = simplify $ coeffn ((y^2+z)^3/z) y 6; r5; // coeff to y^6 -> 1/z
let r6 = simplify $ part (a+b) 2 ; r6; // part 2 of expr -> b
let r7 = simplify $ part (a+b) 1 ; r7; // part 1 of expr -> a
let r8 = simplify $ part (a+b) 0 ; r8; // part 0 of expr -> (+)
let r9 = simplify $ factorize (x^105-1) ; r9;

reduce::switch "ifactor" 1;
let r10 = simplify $ factorize (12*x^2 - 12) ; r10;
reduce::switch "ifactor" 0;  // -> {{2,2},{3,1},{X + 1,1},{X - 1,1}}.

let r11 = simplify $ gcd (x^2+2*x+1) (x^2+3*x+2) ; r11; // -> X+1
let r12 = simplify $ gcd (2*x^2-2*y^2) (4*x+4*y) ; r12; // -> 2*X+2*Y
let r13 = simplify $ gcd (x^2+y^2) (x-y) ; r13;         // -> 1.

let r14 = simplify $ lcm (x^2+2*x+1) (x^2+3*x+2) ; r14; // -> X^3+4*X^2+5*X+2
let r15 = simplify $ lcm (2*x^2-2*y^2) (4*x+4*y) ; r15; // -> 4*(X^2 - Y^2)

let r16 = simplify $ remainder ((x+y)*(x+2*y)) (x+3*y) ; r16; // -> 2*Y^2
let r17 = simplify $ remainder (2*x+y) 2 ; r17;               // -> Y.

let r18 = simplify $ resultant (x/r*u+y) (u*y) u ; r18; // -> Y^2

let r19 = simplify $ decompose (x^8-88*x^7+2924*x^6-43912*x^5+263431*x^4-
                                218900*x^3+65690*x^2-7700*x+234) ; r19;
                                // -> {U^2+35*U+234, U=V^2+10*V,V=X^2-22*X}

let r20 = simplify $ decompose (u^2+v^2+2*u*v+1) ; r20; // -> {W^2 + 1, W=U + V}

let r21 = simplify $ deg ((a+b)*(c+2*d)^2) d ; r21; //->  2
let r22 = simplify $ deg ((x+b)*(x^6+2*y)^2) x ; r22; //->  13

let r23 = simplify $ den (x/y^2) ; r23; //-> Y**2

let r24 = simplify $ lcof ((a+b)*(c+2*d)^2) a ; r24;  // -> C**2+4*C*D+4*D**2
let r25 = simplify $ lcof ((a+b)*(c+2*d)^2) d ; r25;  // -> 4*(A+B)
let r26 = simplify $ lcof ((a+b)*(c+2*d)) ('e) ; r26; // -> A*C+2*A*D+B*C+2*B*D
                                                      // !!! e evals to Euler

let r27 = simplify $ lpower ((a+b)*(c+2*d)^2) a ; r27; // -> A
let r28 = simplify $ lpower ((a+b)*(c+2*d)^2) d ; r28; // -> D**2
let r29 = simplify $ lpower ((a+b)*(c+2*d)) x ; r29;   // -> 1

let r30 = simplify $ lterm ((a+b)*(c+2*d)^2) a ; r30;  // -> A*(C**2+4*C*D+4*D**2)
let r31 = simplify $ lterm ((a+b)*(c+2*d)^2) d ; r31;  // -> 4*D**2*(A+B)
let r32 = simplify $ lterm ((a+b)*(c+2*d)) x ; r32;    // -> A*C+2*A*D+B*C+2*B*D


let r33 = simplify $ mainvar ((a+b)*(c+2*d)^2) ; r33;  //-> A
let r34 = simplify $ mainvar 2 ; r34; //-> 0

let r35 = simplify $ num (x/y^2) ; r35;           // -> X
let r36 = simplify $ num ('(100/6)) ; r36;   // -> 50 (quote is necessary!)
let r37 = simplify $ num (a/4+b/6) ; r37;         // -> 3*A+2*B

let r38 = simplify $ reduct ((a+b)*(c+2*d)) a ; r38; // -> B*(C + 2*D)
let r39 = simplify $ reduct ((a+b)*(c+2*d)) d ; r39; // -> C*(A + B)
let r40 = simplify $ reduct ((a+b)*(c+2*d)) x ; r40; // -> 0

let r41 = simplify $ sub [x==a+y,y==y+1] (x^2+y^2) ; r41; //-> A^2+2*A*Y+2*Y^2+2*Y+1

let r42 = simplify $ {a,b,c;d,'e,f;g,h,'i}; r42; // e, i must be quoted here

reduce::switch "rat" 0;
let r43 = simplify (2*X^2*Y*A*(Y + 2) + X*(Y^2 + Z))/(2*A) ; r43;
reduce::switch "rat" 1;
reduce::switch "div" 1;
let r44 = simplify (2*X^2*Y*A*(Y + 2) + X*(Y^2 + Z))/(2*A) ; r44;


// set <==> assignment in REDUCE (:=); however, both sides are evaluated
let r45 = simplify $ P := a*x^n + b* x^m + c ; r45; // P:=a*x^n + b* x^m + c;
let r46 = simplify P ; r46;                         // return P (from Reduce)
let r47 = simplify $ df P x; r47;                   // diff P x
let r48 = simplify $ Q := intg P x ; r48;           // integrate P x, store in Q

// df(F,x1,2,x2,x3,2)
let r49 = simplify $ F := x1^2*a*x2*b*x3^3 ; r49;
let r50 = simplify $ df F x1 2 x2 x3 2 ; r50;       // -> 12*a*b*x3

// df(G,x1,2,x2,2,x3)
let G = x1^N*x2^M*x3^J ;
let r51 = simplify $ F := G ; r51;
let r52 = simplify $ df F x1 2 x2 2 x3 ; r52;
let r53 = simplify $ df G x1 2 x2 2 x3 ; r53;
let r54 = simplify (r53-r52) ; r54; // ->  0

// Second batch of tests from Kurt. ////////////////////////////////////

// Pauli matrices (sigma 1..3).
// see e.g. http://en.wikipedia.org/wiki/Pauli_matrices
let s0 = {1,0;0,1} ;
let s1 = {0,1;1,0} ;
let s2 = {0,-i;i,0};
let s3 = {1,0;0,-1};

// Check the identities: s1^2=s2^2=s3^2=-i*s1*s2*s3=s0
// Note: s1^2 or s1*s1 works here.
let r1 = simplify $ (s1*s1) ; r1;
let r2 = simplify $ (s2*s2) ; r2;
let r3 = simplify $ (s3*s3) ; r3;
let r4 = simplify $ (-i*s1*s2*s3) ; r4;
let r5 = all (==s0) [r1,r2,r3,r4] ; r5; // -> 1

// All det s_i = -1, i=1,2,3 (obviously:)
let r6 = map (simplify . det) [s1,s2,s3] ; r6; // -> [-1,-1,-1]

// Eigenvalues/-vectors of s2
let r7 = simplify $ mateigen s2 q; r7;
let r8 = map head r7; r8; // -> [q-1,q+1] => Eigenvalues q=+/-1
let r9 = map (head.tail) r7 ; r9; // [1,1], multiplicities
let r10 = map last r7 ; r10; // [c1*{-i,1},c2*{i,1}], eigenvectors

// Transpose
let r11 = map (simplify.tp) [s1,s2,s3] ; r11; // -> [s1',s2',s3']

// Trace
let r11 = map (simplify.trace) [s1,s2,s3] ; r11; // -> [tr s1,tr s2,tr s3]=[0,0,0]

// Cofactor
let r12 = simplify $ cofactor s2 1 1 ; r12; // -> 0.

// Nullspace of s2+{0,i;0,0}
let r13 = simplify $ (s2+{0,i;0,0}) ; r13; // -> {0,0;i,0}

// Rank
let r14 = map (simplify . rank) [s0,s1,s2,s3] ; r14; // -> [2,2,2,2]

// Inverse  (simply 1/matrix)
let r15 = simplify $ 1/s2 ; r15; // -> {0,1/i;(-1)/i,0}
let r16 = simplify $ s2*r15 ; r16; // -> {1,0;0,1} == s0 as it should be.

// Solving without 'solve':
// a11*x(1) + a12*x(2) = y1
// a21*x(1) + a22*x(2) = y2
let r17 = simplify $ (1/{a11,a12;a21,a22}*{y1;y2}) ; r17; // A^-1 * y' ;
// -> {(-a12*y2+a22*y1)/(a11*a22-a12*a21);(a11*y2-a21*y1)/(a11*a22-a12*a21)}

////////////
// ALGINT //
////////////
let r18 = simplify $ intg (sqrt(x+sqrt(x^2+1))/x) x ; r18;
// -> intg (sqrt(sqrt (x^2+1)+x)/x) x, i.e. unevaluated !
// load the ALGINT package and retry:
reduce::load "algint" ;
let r19 = simplify $ intg  (sqrt(x+sqrt(x^2+1))/x) x ; r19;
// -> atan ((sqrt (sqrt (x^2+1)+x)*sqrt (x^2+1)-sqrt (sqrt (x^2+1)+x)*x-sqrt
// (sqrt (x^2+1)+x))/2)+2*sqrt (sqrt (x^2+1)+x)+log
// (sqrt (sqrt (x^2+1)+x)-1)-log (sqrt (sqrt (x^2+1)+x)+1)

////////////
// LIMITS //
////////////
let r20 = simplify $ limit (x*sin(1/x)) x infinity ; r20; // -> 1
let r21 = simplify $ limit (1/x) x 0 ; r21; // -> infinity
// Notes:
// - apparently it's not necessary to do a package "load",
// - map (Pure)inf <-> (Reduce)infinity

//////////////
// ODESOLVE //
//////////////
let r22 = lisp ('depend [y,x]); r22; // declare: y depends on x
let r23 = simplify $ odesolve [df y x == x^2+exp(x)] [y] x; r23;
let r24 = simplify $ odesolve [(df y x 2) == y] [y] x [[x==0,y==A],[x==1,y==B]] ; r24;
// get rid of the declaration again to avoid bad interactions with code below
lisp ('nodepend [y,x]);
//
// r23: y' = x^2 + e^x
// r24: y'' = y with boundary cond: y(0)=A, y(1)=B
// see manual for initial cond and other features
//

//////////////////////////////////////////
// SUM: A package for series summation ///
//////////////////////////////////////////
// This package implements the Gosper algorithm for the summation of series.
let r25 = simplify $ sum (n^3) n 1 N ; r25;
let r26 = simplify $ sum (a+k*r) k 0 (n-1) ; r26;
let r27 = simplify $ sum (1/((p+(k-1)*q)*(p+k*q))) k 1 (n+1) ; r27;
let r28 = simplify $ prod (k/(k+2)) k 1 N ; r28;
//***** Zero divisor

//////////////////////////////////////////
//TAYLOR: Manipulation of Taylor series //
//////////////////////////////////////////
/*
Reduce (Free CSL version), 14-Apr-11 ...

1: taylor(e^(x^2+y^2),x,0,2,y,0,2);

     2    2    2  2      3  3
1 + y  + x  + y *x  + O(x ,y )

2: taylor(e^x,x,0,3);

         1   2    1   3      4
1 + x + ---*x  + ---*x  + O(x )
         2        6
*/
let r29 = simplify $ taylor (exp (x^2+y^2)) x 0 2 y 0 2 ; r29;
let r30 = simplify $ taylor (exp x) x 0 3; r30;
let r31 = simplify $ implicit_taylor (x^2+y^2-1) x y 0 1 5 ; r31;
// -> (-x^4-4*x^2+8)/8
let r32 = simplify $ inverse_taylor (exp(x)-1) x y 0 8; r32;
// -> (-105*y^8+120*y^7-140*y^6+168*y^5-210*y^4+280*y^3-420*y^2+840*y)/840

// Boolean expressions
// ===================

let r33 = simplify $ evenp 200 ; r33; // -> t = true
let r34 = simplify $ evenp 201 ; r34; // -> () = false
//let r35 = simplify $ fixp 200 ; r35;  // ***** fixp invalid as algebraic operator
let r35 = lisp (fixp 200) ; r35; // -> t
let r36 = simplify $ freeof (x^2+y) x ; r36; // -> () = false
let r37 = simplify $ freeof (x^2+y) z ; r37; // -> t = true
let r38 = simplify $ freeof (x^n*y^m) (y^m) ; r38; // -> () = false
//let r39 = simplify $ numberp x ; // ***** numberp invalid as alg op
let r39 = lisp (numberp x) ; r39; //-> crash! works as of rev. 844497443f5c -ag
let r39 = lisp (quote (numberp 111)) ; r39; // -> t
//let r40 = simplify $ ordp x y ; r40; // ***** ordp invalid as alg op
let r40 = lisp (ordp x y) ; r40; // -> t
//let r41 = simplify $ primep 5 ; r41; // ***** primep invalid as alg op
let r41 = lisp (primep 5) ; r41; //strange! returns a list of primes if prime else []

// Notes:
// - mapping t,() <--> 1,0 (Pure)
// - mapping infinity <--> inf

// Mathematical Functions
// ======================
// REDUCE knows that the following represent mathematical functions that
// can take arbitrary scalar expressions as their single argument:
// ACOS ACOSH ACOT ACOTH ACSC ACSCH ASEC ASECH ASIN ASINH
// ATAN ATANH ATAN2 COS COSH COT COTH CSC CSCH DILOG EI EXP
// HYPOT LN LOG LOGB LOG10 SEC SECH SIN SINH SQRT TAN TANH ERF
// Note: if not quoted then the Pure function is used, i.e
// cos x, means cos in Pure, (quote cos) x means cos in REDUCE...

let r42 = simplify $ cos (-x) ; r42; // -> cos x ;
let r43 = simplify $ cos (n*pi) ; r43; // -> cos (80143857*n/25510582)
let r44 = simplify $ cos (n*(quote pi)) ; r44; // -> (-1)^n if n integer
let r45 = simplify $ e^(3*i*pi/2) ; r45;//(-5443926242794616L*i-1)/5443926242794616L
let r46 = simplify $ (quote e)^(3*i*(quote pi)/2) ; r46; // -i
let r47 = simplify $ sec (quote pi); r47; // -> -1
let r48 = simplify $ log10 10 ; r48; // -> 1
let r49 = simplify $ erf (-a); r49; // -> -erf a

// Package: DEFINT (definite integrals)
// Calculating integrals by using the Meijer G integration formula.
// http://www.reduce-algebra.com/docs/defint.pdf
reduce::load "defint" ;

// Some definite integrals
let r1 = simplify $ intg (exp(-x)) x 0 infinity ; r1; // -> 1
let r2 = simplify $ intg (x*sin(1/x)) x 0 infinity ; r2; // -> uneval
let r3 = simplify $ intg (x^2*cos(x)*exp(-2*x)) x 0 infinity ; r3; // -> 4/125
//let r4 = simplify $ intg (x*exp(-1/(2*x))*Heaviside(1-x)) x 0 infinity ; r4;
let r4 = simplify $ intg (x*exp(-1/2*x)) x 0 1 ; r4; // -> 2*sqrt e*(2*sqrt e-3)/e
let r5 = simplify $ intg (x*log(1+x)) x 0 1 ; r5; // -> 1/4 ;
let r6 = simplify $ intg (cos(2*x)) x y (2*y); r6; // -> (sin (4*y)-sin (2*y))/2

// Various transforms
let r7 = simplify $ laplace_transform (exp(-a*x)) x ; r7; // -> 1/(a+s)
let r8 = simplify $ hankel_transform (exp(-a*x)) x ; r8; // ->
         //  s^(n/2)*gamma (n/2)*hypergeometric [(n+2)/2] [n+1]
         // ((-s)/a)*n/(2*a^(n/2)*gamma (n+1)*a)
let r9 = simplify $ y_transform (exp(-a*x)) x ; r9; // ->
         // (a^n*gamma (n+1)*gamma ((-n)/2)*gamma ((-2*n-1)/2)*
         // gamma ((2*n+3)/2)*hypergeometric [(-n+2)/2] [-n+1]
         // ((-s)/a)+s^n*gamma (-n)*gamma (n/2)*hypergeometric [(n+2)/2] [n+1]
         // ((-s)/a)*n*pi)/(2*s^(n/2)*a^(n/2)*gamma ((-2*n-1)/2)*
         // gamma ((2*n+3)/2)*a*pi)
let r10 = simplify $ k_transform (exp(-a*x)) x ; r10; // ->
         // (-a^n*gamma (n+1)*gamma ((-n)/2)*hypergeometric [(-n+2)/2] [-n+1]
         // (s/a)+s^n*gamma (-n)*gamma (n/2)*hypergeometric [(n+2)/2] [n+1]
         // (s/a)*n)/(4*s^(n/2)*a^(n/2)*a)
let r11 = simplify $ struveh_transform (exp(-a*x)) x ; r11; // ->
         // 2*s^((n+1)/2)*gamma ((n+3)/2)*
         // hypergeometric [1,(n+3)/2] [(2*n+3)/2,1.5] ((-s)/a)/
         // (sqrt pi*a^((n+1)/2)*gamma ((2*n+3)/2)*a)
let r12 = simplify $ fourier_sin (exp(-a*x)) x ; r12; // -> s/(a^2+s^2)
let r13 = simplify $ fourier_cos (exp(-a*x)) x ; r13; // -> a/(a^2+s^2)
